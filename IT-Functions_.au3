Global Const $opt_coordsrelative = 0
Global Const $opt_coordsabsolute = 1
Global Const $opt_coordsclient = 2
Global Const $opt_errorsilent = 0
Global Const $opt_errorfatal = 1
Global Const $opt_capsnostore = 0
Global Const $opt_capsstore = 1
Global Const $opt_matchstart = 1
Global Const $opt_matchany = 2
Global Const $opt_matchexact = 3
Global Const $opt_matchadvanced = 4
Global Const $ccs_top = 1
Global Const $ccs_nomovey = 2
Global Const $ccs_bottom = 3
Global Const $ccs_noresize = 4
Global Const $ccs_noparentalign = 8
Global Const $ccs_nohilite = 16
Global Const $ccs_adjustable = 32
Global Const $ccs_nodivider = 64
Global Const $ccs_vert = 128
Global Const $ccs_left = 129
Global Const $ccs_nomovex = 130
Global Const $ccs_right = 131
Global Const $dt_drivetype = 1
Global Const $dt_ssdstatus = 2
Global Const $dt_bustype = 3
Global Const $proxy_ie = 0
Global Const $proxy_none = 1
Global Const $proxy_specified = 2
Global Const $objid_window = 0
Global Const $objid_titlebar = -2
Global Const $objid_sizegrip = -7
Global Const $objid_caret = -8
Global Const $objid_cursor = -9
Global Const $objid_alert = -10
Global Const $objid_sound = -11
Global Const $dlg_centerontop = 0
Global Const $dlg_notitle = 1
Global Const $dlg_notontop = 2
Global Const $dlg_textleft = 4
Global Const $dlg_textright = 8
Global Const $dlg_moveable = 16
Global Const $dlg_textvcenter = 32
Global Const $idc_unknown = 0
Global Const $idc_appstarting = 1
Global Const $idc_arrow = 2
Global Const $idc_cross = 3
Global Const $idc_hand = 32649
Global Const $idc_help = 4
Global Const $idc_ibeam = 5
Global Const $idc_icon = 6
Global Const $idc_no = 7
Global Const $idc_size = 8
Global Const $idc_sizeall = 9
Global Const $idc_sizenesw = 10
Global Const $idc_sizens = 11
Global Const $idc_sizenwse = 12
Global Const $idc_sizewe = 13
Global Const $idc_uparrow = 14
Global Const $idc_wait = 15
Global Const $idi_application = 32512
Global Const $idi_asterisk = 32516
Global Const $idi_exclamation = 32515
Global Const $idi_hand = 32513
Global Const $idi_question = 32514
Global Const $idi_winlogo = 32517
Global Const $idi_shield = 32518
Global Const $idi_error = $idi_hand
Global Const $idi_information = $idi_asterisk
Global Const $idi_warning = $idi_exclamation
Global Const $sd_logoff = 0
Global Const $sd_shutdown = 1
Global Const $sd_reboot = 2
Global Const $sd_force = 4
Global Const $sd_powerdown = 8
Global Const $sd_forcehung = 16
Global Const $sd_standby = 32
Global Const $sd_hibernate = 64
Global Const $stdin_child = 1
Global Const $stdout_child = 2
Global Const $stderr_child = 4
Global Const $stderr_merged = 8
Global Const $stdio_inherit_parent = 16
Global Const $run_create_new_console = 65536
Global Const $ubound_dimensions = 0
Global Const $ubound_rows = 1
Global Const $ubound_columns = 2
Global Const $mouseeventf_absolute = 32768
Global Const $mouseeventf_move = 1
Global Const $mouseeventf_leftdown = 2
Global Const $mouseeventf_leftup = 4
Global Const $mouseeventf_rightdown = 8
Global Const $mouseeventf_rightup = 16
Global Const $mouseeventf_middledown = 32
Global Const $mouseeventf_middleup = 64
Global Const $mouseeventf_wheel = 2048
Global Const $mouseeventf_xdown = 128
Global Const $mouseeventf_xup = 256
Global Const $reg_none = 0
Global Const $reg_sz = 1
Global Const $reg_expand_sz = 2
Global Const $reg_binary = 3
Global Const $reg_dword = 4
Global Const $reg_dword_little_endian = 4
Global Const $reg_dword_big_endian = 5
Global Const $reg_link = 6
Global Const $reg_multi_sz = 7
Global Const $reg_resource_list = 8
Global Const $reg_full_resource_descriptor = 9
Global Const $reg_resource_requirements_list = 10
Global Const $reg_qword = 11
Global Const $reg_qword_little_endian = 11
Global Const $hwnd_bottom = 1
Global Const $hwnd_notopmost = -2
Global Const $hwnd_top = 0
Global Const $hwnd_topmost = -1
Global Const $swp_nosize = 1
Global Const $swp_nomove = 2
Global Const $swp_nozorder = 4
Global Const $swp_noredraw = 8
Global Const $swp_noactivate = 16
Global Const $swp_framechanged = 32
Global Const $swp_drawframe = 32
Global Const $swp_showwindow = 64
Global Const $swp_hidewindow = 128
Global Const $swp_nocopybits = 256
Global Const $swp_noownerzorder = 512
Global Const $swp_noreposition = 512
Global Const $swp_nosendchanging = 1024
Global Const $swp_defererase = 8192
Global Const $swp_asyncwindowpos = 16384
Global Const $keyword_default = 1
Global Const $keyword_null = 2
Global Const $declared_local = -1
Global Const $declared_unknown = 0
Global Const $declared_global = 1
Global Const $assign_create = 0
Global Const $assign_forcelocal = 1
Global Const $assign_forceglobal = 2
Global Const $assign_existfail = 4
Global Const $bi_enable = 0
Global Const $bi_disable = 1
Global Const $break_enable = 1
Global Const $break_disable = 0
Global Const $cdtray_open = "open"
Global Const $cdtray_closed = "closed"
Global Const $send_default = 0
Global Const $send_raw = 1
Global Const $dir_default = 0
Global Const $dir_extended = 1
Global Const $dir_norecurse = 2
Global Const $dir_remove = 1
Global Const $dt_all = "ALL"
Global Const $dt_cdrom = "CDROM"
Global Const $dt_removable = "REMOVABLE"
Global Const $dt_fixed = "FIXED"
Global Const $dt_network = "NETWORK"
Global Const $dt_ramdisk = "RAMDISK"
Global Const $dt_unknown = "UNKNOWN"
Global Const $dt_undefined = 1
Global Const $dt_fat = "FAT"
Global Const $dt_fat32 = "FAT32"
Global Const $dt_exfat = "exFAT"
Global Const $dt_ntfs = "NTFS"
Global Const $dt_nwfs = "NWFS"
Global Const $dt_cdfs = "CDFS"
Global Const $dt_udf = "UDF"
Global Const $dma_default = 0
Global Const $dma_persistent = 1
Global Const $dma_authentication = 8
Global Const $ds_unknown = "UNKNOWN"
Global Const $ds_ready = "READY"
Global Const $ds_notready = "NOTREADY"
Global Const $ds_invalid = "INVALID"
Global Const $mouse_click_left = "left"
Global Const $mouse_click_right = "right"
Global Const $mouse_click_middle = "middle"
Global Const $mouse_click_main = "main"
Global Const $mouse_click_menu = "menu"
Global Const $mouse_click_primary = "primary"
Global Const $mouse_click_secondary = "secondary"
Global Const $mouse_wheel_up = "up"
Global Const $mouse_wheel_down = "down"
Global Const $number_auto = 0
Global Const $number_32bit = 1
Global Const $number_64bit = 2
Global Const $number_double = 3
Global Const $obj_name = 1
Global Const $obj_string = 2
Global Const $obj_progid = 3
Global Const $obj_file = 4
Global Const $obj_module = 5
Global Const $obj_clsid = 6
Global Const $obj_iid = 7
Global Const $exitclose_normal = 0
Global Const $exitclose_byexit = 1
Global Const $exitclose_byclick = 2
Global Const $exitclose_bylogoff = 3
Global Const $exitclose_bysutdown = 4
Global Const $process_stats_memory = 0
Global Const $process_stats_io = 1
Global Const $process_low = 0
Global Const $process_belownormal = 1
Global Const $process_normal = 2
Global Const $process_abovenormal = 3
Global Const $process_high = 4
Global Const $process_realtime = 5
Global Const $run_logon_noprofile = 0
Global Const $run_logon_profile = 1
Global Const $run_logon_network = 2
Global Const $run_logon_inherit = 4
Global Const $sound_nowait = 0
Global Const $sound_wait = 1
Global Const $shex_open = "open"
Global Const $shex_edit = "edit"
Global Const $shex_print = "print"
Global Const $shex_properties = "properties"
Global Const $tcp_data_default = 0
Global Const $tcp_data_binary = 1
Global Const $udp_open_default = 0
Global Const $udp_open_broadcast = 1
Global Const $udp_data_default = 0
Global Const $udp_data_binary = 1
Global Const $udp_data_array = 2
Global Const $tip_noicon = 0
Global Const $tip_infoicon = 1
Global Const $tip_warningicon = 2
Global Const $tip_erroricon = 3
Global Const $tip_balloon = 1
Global Const $tip_center = 2
Global Const $tip_forcevisible = 4
Global Const $windows_noontop = 0
Global Const $windows_ontop = 1
Global Const $mb_ok = 0
Global Const $mb_okcancel = 1
Global Const $mb_abortretryignore = 2
Global Const $mb_yesnocancel = 3
Global Const $mb_yesno = 4
Global Const $mb_retrycancel = 5
Global Const $mb_canceltrycontinue = 6
Global Const $mb_help = 16384
Global Const $mb_iconstop = 16
Global Const $mb_iconerror = 16
Global Const $mb_iconhand = 16
Global Const $mb_iconquestion = 32
Global Const $mb_iconexclamation = 48
Global Const $mb_iconwarning = 48
Global Const $mb_iconinformation = 64
Global Const $mb_iconasterisk = 64
Global Const $mb_usericon = 128
Global Const $mb_defbutton1 = 0
Global Const $mb_defbutton2 = 256
Global Const $mb_defbutton3 = 512
Global Const $mb_defbutton4 = 768
Global Const $mb_applmodal = 0
Global Const $mb_systemmodal = 4096
Global Const $mb_taskmodal = 8192
Global Const $mb_default_desktop_only = 131072
Global Const $mb_right = 524288
Global Const $mb_rtlreading = 1048576
Global Const $mb_setforeground = 65536
Global Const $mb_topmost = 262144
Global Const $mb_service_notification = 2097152
Global Const $mb_rightjustified = $mb_right
Global Const $idtimeout = -1
Global Const $idok = 1
Global Const $idcancel = 2
Global Const $idabort = 3
Global Const $idretry = 4
Global Const $idignore = 5
Global Const $idyes = 6
Global Const $idno = 7
Global Const $idclose = 8
Global Const $idhelp = 9
Global Const $idtryagain = 10
Global Const $idcontinue = 11
Global Const $str_nocasesense = 0
Global Const $str_casesense = 1
Global Const $str_nocasesensebasic = 2
Global Const $str_stripleading = 1
Global Const $str_striptrailing = 2
Global Const $str_stripspaces = 4
Global Const $str_stripall = 8
Global Const $str_chrsplit = 0
Global Const $str_entiresplit = 1
Global Const $str_nocount = 2
Global Const $str_regexpmatch = 0
Global Const $str_regexparraymatch = 1
Global Const $str_regexparrayfullmatch = 2
Global Const $str_regexparrayglobalmatch = 3
Global Const $str_regexparrayglobalfullmatch = 4
Global Const $str_endisstart = 0
Global Const $str_endnotstart = 1
Global Const $sb_ansi = 1
Global Const $sb_utf16le = 2
Global Const $sb_utf16be = 3
Global Const $sb_utf8 = 4
Global Const $se_utf16 = 0
Global Const $se_ansi = 1
Global Const $se_utf8 = 2
Global Const $str_utf16 = 0
Global Const $str_ucs2 = 1
Global Enum $arrayfill_force_default, $arrayfill_force_singleitem, $arrayfill_force_int, $arrayfill_force_number, $arrayfill_force_ptr, $arrayfill_force_hwnd, $arrayfill_force_string
Global Enum $arrayunique_nocount, $arrayunique_count
Global Enum $arrayunique_auto, $arrayunique_force32, $arrayunique_force64, $arrayunique_match, $arrayunique_distinct

Func _arrayadd(ByRef $aarray, $vvalue, $istart = 0, $sdelim_item = "|", $sdelim_row = @CRLF, $iforce = $arrayfill_force_default)
	If $istart = Default Then $istart = 0
	If $sdelim_item = Default Then $sdelim_item = "|"
	If $sdelim_row = Default Then $sdelim_row = @CRLF
	If $iforce = Default Then $iforce = $arrayfill_force_default
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows)
	Local $hdatatype = 0
	Switch $iforce
		Case $arrayfill_force_int
			$hdatatype = Int
		Case $arrayfill_force_number
			$hdatatype = Number
		Case $arrayfill_force_ptr
			$hdatatype = Ptr
		Case $arrayfill_force_hwnd
			$hdatatype = HWnd
		Case $arrayfill_force_string
			$hdatatype = String
	EndSwitch
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $iforce = $arrayfill_force_singleitem Then
				ReDim $aarray[$idim_1 + 1]
				$aarray[$idim_1] = $vvalue
				Return $idim_1
			EndIf
			If IsArray($vvalue) Then
				If UBound($vvalue, $ubound_dimensions) <> 1 Then Return SetError(5, 0, -1)
				$hdatatype = 0
			Else
				Local $atmp = StringSplit($vvalue, $sdelim_item, $str_nocount + $str_entiresplit)
				If UBound($atmp, $ubound_rows) = 1 Then
					$atmp[0] = $vvalue
				EndIf
				$vvalue = $atmp
			EndIf
			Local $iadd = UBound($vvalue, $ubound_rows)
			ReDim $aarray[$idim_1 + $iadd]
			For $i = 0 To $iadd - 1
				If IsFunc($hdatatype) Then
					$aarray[$idim_1 + $i] = $hdatatype($vvalue[$i])
				Else
					$aarray[$idim_1 + $i] = $vvalue[$i]
				EndIf
			Next
			Return $idim_1 + $iadd - 1
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns)
			If $istart < 0 OR $istart > $idim_2 - 1 Then Return SetError(4, 0, -1)
			Local $ivaldim_1, $ivaldim_2 = 0, $icolcount
			If IsArray($vvalue) Then
				If UBound($vvalue, $ubound_dimensions) <> 2 Then Return SetError(5, 0, -1)
				$ivaldim_1 = UBound($vvalue, $ubound_rows)
				$ivaldim_2 = UBound($vvalue, $ubound_columns)
				$hdatatype = 0
			Else
				Local $asplit_1 = StringSplit($vvalue, $sdelim_row, $str_nocount + $str_entiresplit)
				$ivaldim_1 = UBound($asplit_1, $ubound_rows)
				Local $atmp[$ivaldim_1][0], $asplit_2
				For $i = 0 To $ivaldim_1 - 1
					$asplit_2 = StringSplit($asplit_1[$i], $sdelim_item, $str_nocount + $str_entiresplit)
					$icolcount = UBound($asplit_2)
					If $icolcount > $ivaldim_2 Then
						$ivaldim_2 = $icolcount
						ReDim $atmp[$ivaldim_1][$ivaldim_2]
					EndIf
					For $j = 0 To $icolcount - 1
						$atmp[$i][$j] = $asplit_2[$j]
					Next
				Next
				$vvalue = $atmp
			EndIf
			If UBound($vvalue, $ubound_columns) + $istart > UBound($aarray, $ubound_columns) Then Return SetError(3, 0, -1)
			ReDim $aarray[$idim_1 + $ivaldim_1][$idim_2]
			For $iwriteto_index = 0 To $ivaldim_1 - 1
				For $j = 0 To $idim_2 - 1
					If $j < $istart Then
						$aarray[$iwriteto_index + $idim_1][$j] = ""
					ElseIf $j - $istart > $ivaldim_2 - 1 Then
						$aarray[$iwriteto_index + $idim_1][$j] = ""
					Else
						If IsFunc($hdatatype) Then
							$aarray[$iwriteto_index + $idim_1][$j] = $hdatatype($vvalue[$iwriteto_index][$j - $istart])
						Else
							$aarray[$iwriteto_index + $idim_1][$j] = $vvalue[$iwriteto_index][$j - $istart]
						EndIf
					EndIf
				Next
			Next
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return UBound($aarray, $ubound_rows) - 1
EndFunc

Func _arraybinarysearch(Const ByRef $aarray, $vvalue, $istart = 0, $iend = 0, $icolumn = 0)
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $icolumn = Default Then $icolumn = 0
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows)
	If $idim_1 = 0 Then Return SetError(6, 0, -1)
	If $iend < 1 OR $iend > $idim_1 - 1 Then $iend = $idim_1 - 1
	If $istart < 0 Then $istart = 0
	If $istart > $iend Then Return SetError(4, 0, -1)
	Local $imid = Int(($iend + $istart) / 2)
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $aarray[$istart] > $vvalue OR $aarray[$iend] < $vvalue Then Return SetError(2, 0, -1)
			While $istart <= $imid AND $vvalue <> $aarray[$imid]
				If $vvalue < $aarray[$imid] Then
					$iend = $imid - 1
				Else
					$istart = $imid + 1
				EndIf
				$imid = Int(($iend + $istart) / 2)
			WEnd
			If $istart > $iend Then Return SetError(3, 0, -1)
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns) - 1
			If $icolumn < 0 OR $icolumn > $idim_2 Then Return SetError(7, 0, -1)
			If $aarray[$istart][$icolumn] > $vvalue OR $aarray[$iend][$icolumn] < $vvalue Then Return SetError(2, 0, -1)
			While $istart <= $imid AND $vvalue <> $aarray[$imid][$icolumn]
				If $vvalue < $aarray[$imid][$icolumn] Then
					$iend = $imid - 1
				Else
					$istart = $imid + 1
				EndIf
				$imid = Int(($iend + $istart) / 2)
			WEnd
			If $istart > $iend Then Return SetError(3, 0, -1)
		Case Else
			Return SetError(5, 0, -1)
	EndSwitch
	Return $imid
EndFunc

Func _arraycoldelete(ByRef $aarray, $icolumn, $bconvert = False)
	If $bconvert = Default Then $bconvert = False
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows)
	If UBound($aarray, $ubound_dimensions) <> 2 Then Return SetError(2, 0, -1)
	Local $idim_2 = UBound($aarray, $ubound_columns)
	Switch $idim_2
		Case 2
			If $icolumn < 0 OR $icolumn > 1 Then Return SetError(3, 0, -1)
			If $bconvert Then
				Local $atemparray[$idim_1]
				For $i = 0 To $idim_1 - 1
					$atemparray[$i] = $aarray[$i][(NOT $icolumn)]
				Next
				$aarray = $atemparray
			Else
				ContinueCase
			EndIf
		Case Else
			If $icolumn < 0 OR $icolumn > $idim_2 - 1 Then Return SetError(3, 0, -1)
			For $i = 0 To $idim_1 - 1
				For $j = $icolumn To $idim_2 - 2
					$aarray[$i][$j] = $aarray[$i][$j + 1]
				Next
			Next
			ReDim $aarray[$idim_1][$idim_2 - 1]
	EndSwitch
	Return UBound($aarray, $ubound_columns)
EndFunc

Func _arraycolinsert(ByRef $aarray, $icolumn)
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows)
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			Local $atemparray[$idim_1][2]
			Switch $icolumn
				Case 0, 1
					For $i = 0 To $idim_1 - 1
						$atemparray[$i][(NOT $icolumn)] = $aarray[$i]
					Next
				Case Else
					Return SetError(3, 0, -1)
			EndSwitch
			$aarray = $atemparray
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns)
			If $icolumn < 0 OR $icolumn > $idim_2 Then Return SetError(3, 0, -1)
			ReDim $aarray[$idim_1][$idim_2 + 1]
			For $i = 0 To $idim_1 - 1
				For $j = $idim_2 To $icolumn + 1 Step -1
					$aarray[$i][$j] = $aarray[$i][$j - 1]
				Next
				$aarray[$i][$icolumn] = ""
			Next
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return UBound($aarray, $ubound_columns)
EndFunc

Func _arraycombinations(Const ByRef $aarray, $iset, $sdelimiter = "")
	If $sdelimiter = Default Then $sdelimiter = ""
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	If UBound($aarray, $ubound_dimensions) <> 1 Then Return SetError(2, 0, 0)
	Local $in = UBound($aarray)
	Local $ir = $iset
	Local $aidx[$ir]
	For $i = 0 To $ir - 1
		$aidx[$i] = $i
	Next
	Local $itotal = __array_combinations($in, $ir)
	Local $ileft = $itotal
	Local $aresult[$itotal + 1]
	$aresult[0] = $itotal
	Local $icount = 1
	While $ileft > 0
		__array_getnext($in, $ir, $ileft, $itotal, $aidx)
		For $i = 0 To $iset - 1
			$aresult[$icount] &= $aarray[$aidx[$i]] & $sdelimiter
		Next
		If $sdelimiter <> "" Then $aresult[$icount] = StringTrimRight($aresult[$icount], 1)
		$icount += 1
	WEnd
	Return $aresult
EndFunc

Func _arrayconcatenate(ByRef $aarraytarget, Const ByRef $aarraysource, $istart = 0)
	If $istart = Default Then $istart = 0
	If NOT IsArray($aarraytarget) Then Return SetError(1, 0, -1)
	If NOT IsArray($aarraysource) Then Return SetError(2, 0, -1)
	Local $idim_total_tgt = UBound($aarraytarget, $ubound_dimensions)
	Local $idim_total_src = UBound($aarraysource, $ubound_dimensions)
	Local $idim_1_tgt = UBound($aarraytarget, $ubound_rows)
	Local $idim_1_src = UBound($aarraysource, $ubound_rows)
	If $istart < 0 OR $istart > $idim_1_src - 1 Then Return SetError(6, 0, -1)
	Switch $idim_total_tgt
		Case 1
			If $idim_total_src <> 1 Then Return SetError(4, 0, -1)
			ReDim $aarraytarget[$idim_1_tgt + $idim_1_src - $istart]
			For $i = $istart To $idim_1_src - 1
				$aarraytarget[$idim_1_tgt + $i - $istart] = $aarraysource[$i]
			Next
		Case 2
			If $idim_total_src <> 2 Then Return SetError(4, 0, -1)
			Local $idim_2_tgt = UBound($aarraytarget, $ubound_columns)
			If UBound($aarraysource, $ubound_columns) <> $idim_2_tgt Then Return SetError(5, 0, -1)
			ReDim $aarraytarget[$idim_1_tgt + $idim_1_src - $istart][$idim_2_tgt]
			For $i = $istart To $idim_1_src - 1
				For $j = 0 To $idim_2_tgt - 1
					$aarraytarget[$idim_1_tgt + $i - $istart][$j] = $aarraysource[$i][$j]
				Next
			Next
		Case Else
			Return SetError(3, 0, -1)
	EndSwitch
	Return UBound($aarraytarget, $ubound_rows)
EndFunc

Func _arraydelete(ByRef $aarray, $vrange)
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	If IsArray($vrange) Then
		If UBound($vrange, $ubound_dimensions) <> 1 OR UBound($vrange, $ubound_rows) < 2 Then Return SetError(4, 0, -1)
	Else
		Local $inumber, $asplit_1, $asplit_2
		$vrange = StringStripWS($vrange, 8)
		$asplit_1 = StringSplit($vrange, ";")
		$vrange = ""
		For $i = 1 To $asplit_1[0]
			If NOT StringRegExp($asplit_1[$i], "^\d+(-\d+)?$") Then Return SetError(3, 0, -1)
			$asplit_2 = StringSplit($asplit_1[$i], "-")
			Switch $asplit_2[0]
				Case 1
					$vrange &= $asplit_2[1] & ";"
				Case 2
					If Number($asplit_2[2]) >= Number($asplit_2[1]) Then
						$inumber = $asplit_2[1] - 1
						Do
							$inumber += 1
							$vrange &= $inumber & ";"
						Until $inumber = $asplit_2[2]
					EndIf
			EndSwitch
		Next
		$vrange = StringSplit(StringTrimRight($vrange, 1), ";")
	EndIf
	If $vrange[1] < 0 OR $vrange[$vrange[0]] > $idim_1 Then Return SetError(5, 0, -1)
	Local $icopyto_index = 0
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			For $i = 1 To $vrange[0]
				$aarray[$vrange[$i]] = ChrW(64177)
			Next
			For $ireadfrom_index = 0 To $idim_1
				If $aarray[$ireadfrom_index] == ChrW(64177) Then
					ContinueLoop
				Else
					If $ireadfrom_index <> $icopyto_index Then
						$aarray[$icopyto_index] = $aarray[$ireadfrom_index]
					EndIf
					$icopyto_index += 1
				EndIf
			Next
			ReDim $aarray[$idim_1 - $vrange[0] + 1]
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns) - 1
			For $i = 1 To $vrange[0]
				$aarray[$vrange[$i]][0] = ChrW(64177)
			Next
			For $ireadfrom_index = 0 To $idim_1
				If $aarray[$ireadfrom_index][0] == ChrW(64177) Then
					ContinueLoop
				Else
					If $ireadfrom_index <> $icopyto_index Then
						For $j = 0 To $idim_2
							$aarray[$icopyto_index][$j] = $aarray[$ireadfrom_index][$j]
						Next
					EndIf
					$icopyto_index += 1
				EndIf
			Next
			ReDim $aarray[$idim_1 - $vrange[0] + 1][$idim_2 + 1]
		Case Else
			Return SetError(2, 0, False)
	EndSwitch
	Return UBound($aarray, $ubound_rows)
EndFunc

Func _arraydisplay(Const ByRef $aarray, $stitle = Default, $sarrayrange = Default, $iflags = Default, $vuser_separator = Default, $sheader = Default, $imax_colwidth = Default, $ialt_color = Default, $huser_function = Default)
	If $stitle = Default Then $stitle = "ArrayDisplay"
	If $sarrayrange = Default Then $sarrayrange = ""
	If $iflags = Default Then $iflags = 0
	If $vuser_separator = Default Then $vuser_separator = ""
	If $sheader = Default Then $sheader = ""
	If $imax_colwidth = Default Then $imax_colwidth = 350
	If $ialt_color = Default Then $ialt_color = 0
	If $huser_function = Default Then $huser_function = 0
	Local $itranspose = BitAND($iflags, 1)
	Local $icolalign = BitAND($iflags, 6)
	Local $iverbose = BitAND($iflags, 8)
	Local $ibuttonmargin = ((BitAND($iflags, 32)) ? (0) : ((BitAND($iflags, 16)) ? (20) : (40)))
	Local $inorow = BitAND($iflags, 64)
	Local $smsg = "", $iret = 1
	If IsArray($aarray) Then
		Local $idimension = UBound($aarray, $ubound_dimensions), $irowcount = UBound($aarray, $ubound_rows), $icolcount = UBound($aarray, $ubound_columns)
		If $idimension > 2 Then
			$smsg = "Larger than 2D array passed to function"
			$iret = 2
		EndIf
	Else
		$smsg = "No array variable passed to function"
	EndIf
	If $smsg Then
		If $iverbose AND MsgBox($mb_systemmodal + $mb_iconerror + $mb_yesno, "ArrayDisplay Error: " & $stitle, $smsg & @CRLF & @CRLF & "Exit the script?") = $idyes Then
			Exit
		Else
			Return SetError($iret, 0, "")
		EndIf
	EndIf
	Local $icw_colwidth = Number($vuser_separator)
	Local $sad_separator = ChrW(64177)
	Local $scurr_separator = Opt("GUIDataSeparatorChar", $sad_separator)
	If $vuser_separator = "" Then $vuser_separator = $scurr_separator
	Local $vtmp, $irowlimit = 65525, $icollimit = 250
	Local $idatarow = $irowcount
	Local $idatacol = $icolcount
	Local $iitem_start = 0, $iitem_end = $irowcount - 1, $isubitem_start = 0, $isubitem_end = (($idimension = 2) ? ($icolcount - 1) : (0))
	Local $brange_flag = False, $avrangesplit
	If $sarrayrange Then
		Local $aarray_range = StringRegExp($sarrayrange & "||", "(?U)(.*)\|", 3)
		If $aarray_range[0] Then
			$avrangesplit = StringSplit($aarray_range[0], ":")
			If @error Then
				$iitem_end = Number($avrangesplit[1])
			Else
				$iitem_start = Number($avrangesplit[1])
				$iitem_end = Number($avrangesplit[2])
			EndIf
		EndIf
		If $iitem_start > $iitem_end Then
			$vtmp = $iitem_start
			$iitem_start = $iitem_end
			$iitem_end = $vtmp
		EndIf
		If $iitem_start < 0 Then $iitem_start = 0
		If $iitem_end > $irowcount - 1 Then $iitem_end = $irowcount - 1
		If $iitem_start <> 0 OR $iitem_end <> $irowcount - 1 Then $brange_flag = True
		If $idimension = 2 AND $aarray_range[1] Then
			$avrangesplit = StringSplit($aarray_range[1], ":")
			If @error Then
				$isubitem_end = Number($avrangesplit[1])
			Else
				$isubitem_start = Number($avrangesplit[1])
				$isubitem_end = Number($avrangesplit[2])
			EndIf
			If $isubitem_start > $isubitem_end Then
				$vtmp = $isubitem_start
				$isubitem_start = $isubitem_end
				$isubitem_end = $vtmp
			EndIf
			If $isubitem_start < 0 Then $isubitem_start = 0
			If $isubitem_end > $icolcount - 1 Then $isubitem_end = $icolcount - 1
			If $isubitem_start <> 0 OR $isubitem_end <> $icolcount - 1 Then $brange_flag = True
		EndIf
	EndIf
	Local $sdisplaydata = "[" & $idatarow
	Local $btruncated = False
	If $itranspose Then
		If $iitem_end - $iitem_start > $icollimit Then
			$btruncated = True
			$iitem_end = $iitem_start + $icollimit - 1
		EndIf
	Else
		If $iitem_end - $iitem_start > $irowlimit Then
			$btruncated = True
			$iitem_end = $iitem_start + $irowlimit - 1
		EndIf
	EndIf
	If $btruncated Then
		$sdisplaydata &= "*]"
	Else
		$sdisplaydata &= "]"
	EndIf
	If $idimension = 2 Then
		$sdisplaydata &= " [" & $idatacol
		If $itranspose Then
			If $isubitem_end - $isubitem_start > $irowlimit Then
				$btruncated = True
				$isubitem_end = $isubitem_start + $irowlimit - 1
			EndIf
		Else
			If $isubitem_end - $isubitem_start > $icollimit Then
				$btruncated = True
				$isubitem_end = $isubitem_start + $icollimit - 1
			EndIf
		EndIf
		If $btruncated Then
			$sdisplaydata &= "*]"
		Else
			$sdisplaydata &= "]"
		EndIf
	EndIf
	Local $stipdata = ""
	If $btruncated Then $stipdata &= "Truncated"
	If $brange_flag Then
		If $stipdata Then $stipdata &= " - "
		$stipdata &= "Range set"
	EndIf
	If $itranspose Then
		If $stipdata Then $stipdata &= " - "
		$stipdata &= "Transposed"
	EndIf
	Local $asheader = StringSplit($sheader, $scurr_separator, $str_nocount)
	If UBound($asheader) = 0 Then Local $asheader[1] = [""]
	$sheader = "Row"
	Local $iindex = $isubitem_start
	If $itranspose Then
		For $j = $iitem_start To $iitem_end
			$sheader &= $sad_separator & "Col " & $j
		Next
	Else
		If $asheader[0] Then
			For $iindex = $isubitem_start To $isubitem_end
				If $iindex >= UBound($asheader) Then ExitLoop
				$sheader &= $sad_separator & $asheader[$iindex]
			Next
		EndIf
		For $j = $iindex To $isubitem_end
			$sheader &= $sad_separator & "Col " & $j
		Next
	EndIf
	If $inorow Then $sheader = StringTrimLeft($sheader, 4)
	If $iverbose AND ($iitem_end - $iitem_start + 1) * ($isubitem_end - $isubitem_start + 1) > 10000 Then
		SplashTextOn("ArrayDisplay", "Preparing display" & @CRLF & @CRLF & "Please be patient", 300, 100)
	EndIf
	Local $ibuffer = 4094
	If $itranspose Then
		$vtmp = $iitem_start
		$iitem_start = $isubitem_start
		$isubitem_start = $vtmp
		$vtmp = $iitem_end
		$iitem_end = $isubitem_end
		$isubitem_end = $vtmp
	EndIf
	Local $avarraytext[$iitem_end - $iitem_start + 1]
	For $i = $iitem_start To $iitem_end
		If NOT $inorow Then $avarraytext[$i - $iitem_start] = "[" & $i & "]"
		For $j = $isubitem_start To $isubitem_end
			If $idimension = 1 Then
				If $itranspose Then
					Switch VarGetType($aarray[$j])
						Case "Array"
							$vtmp = "{Array}"
						Case Else
							$vtmp = $aarray[$j]
					EndSwitch
				Else
					Switch VarGetType($aarray[$i])
						Case "Array"
							$vtmp = "{Array}"
						Case Else
							$vtmp = $aarray[$i]
					EndSwitch
				EndIf
			Else
				If $itranspose Then
					Switch VarGetType($aarray[$j][$i])
						Case "Array"
							$vtmp = "{Array}"
						Case Else
							$vtmp = $aarray[$j][$i]
					EndSwitch
				Else
					Switch VarGetType($aarray[$i][$j])
						Case "Array"
							$vtmp = "{Array}"
						Case Else
							$vtmp = $aarray[$i][$j]
					EndSwitch
				EndIf
			EndIf
			If StringLen($vtmp) > $ibuffer Then $vtmp = StringLeft($vtmp, $ibuffer)
			$avarraytext[$i - $iitem_start] &= $sad_separator & $vtmp
		Next
		If $inorow Then $avarraytext[$i - $iitem_start] = StringTrimLeft($avarraytext[$i - $iitem_start], 1)
	Next
	Local Const $_arrayconstant_gui_dockbottom = 64
	Local Const $_arrayconstant_gui_dockborders = 102
	Local Const $_arrayconstant_gui_dockheight = 512
	Local Const $_arrayconstant_gui_dockleft = 2
	Local Const $_arrayconstant_gui_dockright = 4
	Local Const $_arrayconstant_gui_dockhcenter = 8
	Local Const $_arrayconstant_gui_event_close = -3
	Local Const $_arrayconstant_gui_focus = 256
	Local Const $_arrayconstant_gui_bkcolor_lv_alternate = -33554432
	Local Const $_arrayconstant_ss_center = 1
	Local Const $_arrayconstant_ss_centerimage = 512
	Local Const $_arrayconstant_lvm_getitemcount = (4096 + 4)
	Local Const $_arrayconstant_lvm_getitemrect = (4096 + 14)
	Local Const $_arrayconstant_lvm_getcolumnwidth = (4096 + 29)
	Local Const $_arrayconstant_lvm_setcolumnwidth = (4096 + 30)
	Local Const $_arrayconstant_lvm_getitemstate = (4096 + 44)
	Local Const $_arrayconstant_lvm_getselectedcount = (4096 + 50)
	Local Const $_arrayconstant_lvm_setextendedlistviewstyle = (4096 + 54)
	Local Const $_arrayconstant_lvs_ex_gridlines = 1
	Local Const $_arrayconstant_lvis_selected = 2
	Local Const $_arrayconstant_lvs_showselalways = 8
	Local Const $_arrayconstant_lvs_ex_fullrowselect = 32
	Local Const $_arrayconstant_ws_ex_clientedge = 512
	Local Const $_arrayconstant_ws_maximizebox = 65536
	Local Const $_arrayconstant_ws_minimizebox = 131072
	Local Const $_arrayconstant_ws_sizebox = 262144
	Local Const $_arrayconstant_wm_setredraw = 11
	Local Const $_arrayconstant_lvscw_autosize = -1
	Local $icoordmode = Opt("GUICoordMode", 1)
	Local $iorgwidth = 210, $iheight = 200, $iminsize = 250
	Local $hgui = GUICreate($stitle, $iorgwidth, $iheight, Default, Default, BitOR($_arrayconstant_ws_sizebox, $_arrayconstant_ws_minimizebox, $_arrayconstant_ws_maximizebox))
	Local $aiguisize = WinGetClientSize($hgui)
	Local $ibuttonwidth_2 = $aiguisize[0] / 2
	Local $ibuttonwidth_3 = $aiguisize[0] / 3
	Local $idlistview = GUICtrlCreateListView($sheader, 0, 0, $aiguisize[0], $aiguisize[1] - $ibuttonmargin, $_arrayconstant_lvs_showselalways)
	GUICtrlSetBkColor($idlistview, $_arrayconstant_gui_bkcolor_lv_alternate)
	GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setextendedlistviewstyle, $_arrayconstant_lvs_ex_gridlines, $_arrayconstant_lvs_ex_gridlines)
	GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setextendedlistviewstyle, $_arrayconstant_lvs_ex_fullrowselect, $_arrayconstant_lvs_ex_fullrowselect)
	GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setextendedlistviewstyle, $_arrayconstant_ws_ex_clientedge, $_arrayconstant_ws_ex_clientedge)
	Local $idcopy_id = 9999, $idcopy_data = 99999, $iddata_label = 99999, $iduser_func = 99999, $idexit_script = 99999
	If $ibuttonmargin Then
		$idcopy_id = GUICtrlCreateButton("Copy Data && Hdr/Row", 0, $aiguisize[1] - $ibuttonmargin, $ibuttonwidth_2, 20)
		$idcopy_data = GUICtrlCreateButton("Copy Data Only", $ibuttonwidth_2, $aiguisize[1] - $ibuttonmargin, $ibuttonwidth_2, 20)
		If $ibuttonmargin = 40 Then
			Local $ibuttonwidth_var = $ibuttonwidth_2
			Local $ioffset = $ibuttonwidth_2
			If IsFunc($huser_function) Then
				$iduser_func = GUICtrlCreateButton("Run User Func", $ibuttonwidth_3, $aiguisize[1] - 20, $ibuttonwidth_3, 20)
				$ibuttonwidth_var = $ibuttonwidth_3
				$ioffset = $ibuttonwidth_3 * 2
			EndIf
			$idexit_script = GUICtrlCreateButton("Exit Script", $ioffset, $aiguisize[1] - 20, $ibuttonwidth_var, 20)
			$iddata_label = GUICtrlCreateLabel($sdisplaydata, 0, $aiguisize[1] - 20, $ibuttonwidth_var, 18, BitOR($_arrayconstant_ss_center, $_arrayconstant_ss_centerimage))
			Select 
				Case $btruncated OR $itranspose OR $brange_flag
					GUICtrlSetColor($iddata_label, 16711680)
					GUICtrlSetTip($iddata_label, $stipdata)
			EndSelect
		EndIf
	EndIf
	GUICtrlSetResizing($idlistview, $_arrayconstant_gui_dockborders)
	GUICtrlSetResizing($idcopy_id, $_arrayconstant_gui_dockleft + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSetResizing($idcopy_data, $_arrayconstant_gui_dockright + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSetResizing($iddata_label, $_arrayconstant_gui_dockleft + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSetResizing($iduser_func, $_arrayconstant_gui_dockhcenter + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSetResizing($idexit_script, $_arrayconstant_gui_dockright + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSendMsg($idlistview, $_arrayconstant_wm_setredraw, 0, 0)
	Local $iditem
	For $i = 0 To UBound($avarraytext) - 1
		$iditem = GUICtrlCreateListViewItem($avarraytext[$i], $idlistview)
		If $ialt_color Then
			GUICtrlSetBkColor($iditem, $ialt_color)
		EndIf
	Next
	If $icolalign Then
		Local Const $_arrayconstant_lvcf_fmt = 1
		Local Const $_arrayconstant_lvm_setcolumnw = (4096 + 96)
		Local $tcolumn = DllStructCreate("uint Mask;int Fmt;int CX;ptr Text;int TextMax;int SubItem;int Image;int Order;int cxMin;int cxDefault;int cxIdeal")
		DllStructSetData($tcolumn, "Mask", $_arrayconstant_lvcf_fmt)
		DllStructSetData($tcolumn, "Fmt", $icolalign / 2)
		Local $pcolumn = DllStructGetPtr($tcolumn)
		For $i = 1 To $isubitem_end - $isubitem_start + 1
			GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setcolumnw, $i, $pcolumn)
		Next
	EndIf
	GUICtrlSendMsg($idlistview, $_arrayconstant_wm_setredraw, 1, 0)
	Local $iborder = 45
	If UBound($avarraytext) > 20 Then
		$iborder += 20
	EndIf
	Local $iwidth = $iborder, $icolwidth = 0, $aicolwidth[$isubitem_end - $isubitem_start + 2], $imin_colwidth = 55
	For $i = 0 To $isubitem_end - $isubitem_start + 1
		GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setcolumnwidth, $i, $_arrayconstant_lvscw_autosize)
		$icolwidth = GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_getcolumnwidth, $i, 0)
		If $icolwidth < $imin_colwidth Then
			GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setcolumnwidth, $i, $imin_colwidth)
			$icolwidth = $imin_colwidth
		EndIf
		$iwidth += $icolwidth
		$aicolwidth[$i] = $icolwidth
	Next
	If $inorow Then $iwidth -= 55
	If $iwidth > @DesktopWidth - 100 Then
		$iwidth = $iborder
		For $i = 0 To $isubitem_end - $isubitem_start + 1
			If $aicolwidth[$i] > $imax_colwidth Then
				GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setcolumnwidth, $i, $imax_colwidth)
				$iwidth += $imax_colwidth
			Else
				$iwidth += $aicolwidth[$i]
			EndIf
		Next
	EndIf
	If $iwidth > @DesktopWidth - 100 Then
		$iwidth = @DesktopWidth - 100
	ElseIf $iwidth < $iminsize Then
		$iwidth = $iminsize
	EndIf
	Local $trect = DllStructCreate("struct; long Left;long Top;long Right;long Bottom; endstruct")
	DllCall("user32.dll", "struct*", "SendMessageW", "hwnd", GUICtrlGetHandle($idlistview), "uint", $_arrayconstant_lvm_getitemrect, "wparam", 0, "struct*", $trect)
	Local $aiwin_pos = WinGetPos($hgui)
	Local $ailv_pos = ControlGetPos($hgui, "", $idlistview)
	$iheight = ((UBound($avarraytext) + 2) * (DllStructGetData($trect, "Bottom") - DllStructGetData($trect, "Top"))) + $aiwin_pos[3] - $ailv_pos[3]
	If $iheight > @DesktopHeight - 100 Then
		$iheight = @DesktopHeight - 100
	ElseIf $iheight < $iminsize Then
		$iheight = $iminsize
	EndIf
	If $iverbose Then SplashOff()
	GUISetState(@SW_HIDE, $hgui)
	WinMove($hgui, "", (@DesktopWidth - $iwidth) / 2, (@DesktopHeight - $iheight) / 2, $iwidth, $iheight)
	GUISetState(@SW_SHOW, $hgui)
	Local $ioneventmode = Opt("GUIOnEventMode", 0), $imsg
	While 1
		$imsg = GUIGetMsg()
		Switch $imsg
			Case $_arrayconstant_gui_event_close
				ExitLoop
			Case $idcopy_id, $idcopy_data
				Local $isel_count = GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_getselectedcount, 0, 0)
				If $iverbose AND (NOT $isel_count) AND ($iitem_end - $iitem_start) * ($isubitem_end - $isubitem_start) > 10000 Then
					SplashTextOn("ArrayDisplay", "Copying data" & @CRLF & @CRLF & "Please be patient", 300, 100)
				EndIf
				Local $sclip = "", $sitem, $asplit
				For $i = 0 To $iitem_end - $iitem_start
					If $isel_count AND NOT (GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_getitemstate, $i, $_arrayconstant_lvis_selected)) Then
						ContinueLoop
					EndIf
					$sitem = $avarraytext[$i]
					If $imsg = $idcopy_data Then
						$sitem = StringRegExpReplace($sitem, "^\[\d+\].(.*)$", "$1")
					EndIf
					If $icw_colwidth Then
						$asplit = StringSplit($sitem, $sad_separator)
						$sitem = ""
						For $j = 1 To $asplit[0]
							$sitem &= StringFormat("%-" & $icw_colwidth + 1 & "s", StringLeft($asplit[$j], $icw_colwidth))
						Next
					Else
						$sitem = StringReplace($sitem, $sad_separator, $vuser_separator)
					EndIf
					$sclip &= $sitem & @CRLF
				Next
				If $imsg = $idcopy_id Then
					If $icw_colwidth Then
						$asplit = StringSplit($sheader, $sad_separator)
						$sitem = ""
						For $j = 1 To $asplit[0]
							$sitem &= StringFormat("%-" & $icw_colwidth + 1 & "s", StringLeft($asplit[$j], $icw_colwidth))
						Next
					Else
						$sitem = StringReplace($sheader, $sad_separator, $vuser_separator)
					EndIf
					$sclip = $sitem & @CRLF & $sclip
				EndIf
				ClipPut($sclip)
				SplashOff()
				GUICtrlSetState($idlistview, $_arrayconstant_gui_focus)
			Case $iduser_func
				Local $aiselitems[$irowlimit] = [0]
				For $i = 0 To GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_getitemcount, 0, 0)
					If GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_getitemstate, $i, $_arrayconstant_lvis_selected) Then
						$aiselitems[0] += 1
						$aiselitems[$aiselitems[0]] = $i + $iitem_start
					EndIf
				Next
				ReDim $aiselitems[$aiselitems[0] + 1]
				$huser_function($aarray, $aiselitems)
				GUICtrlSetState($idlistview, $_arrayconstant_gui_focus)
			Case $idexit_script
				GUIDelete($hgui)
				Exit
		EndSwitch
	WEnd
	GUIDelete($hgui)
	Opt("GUICoordMode", $icoordmode)
	Opt("GUIOnEventMode", $ioneventmode)
	Opt("GUIDataSeparatorChar", $scurr_separator)
	Return 1
EndFunc

Func _arrayextract(Const ByRef $aarray, $istart_row = -1, $iend_row = -1, $istart_col = -1, $iend_col = -1)
	If $istart_row = Default Then $istart_row = -1
	If $iend_row = Default Then $iend_row = -1
	If $istart_col = Default Then $istart_col = -1
	If $iend_col = Default Then $iend_col = -1
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	If $iend_row = -1 Then $iend_row = $idim_1
	If $istart_row = -1 Then $istart_row = 0
	If $istart_row < -1 OR $iend_row < -1 Then Return SetError(3, 0, -1)
	If $istart_row > $idim_1 OR $iend_row > $idim_1 Then Return SetError(3, 0, -1)
	If $istart_row > $iend_row Then Return SetError(4, 0, -1)
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			Local $aretarray[$iend_row - $istart_row + 1]
			For $i = 0 To $iend_row - $istart_row
				$aretarray[$i] = $aarray[$i + $istart_row]
			Next
			Return $aretarray
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns) - 1
			If $iend_col = -1 Then $iend_col = $idim_2
			If $istart_col = -1 Then $istart_col = 0
			If $istart_col < -1 OR $iend_col < -1 Then Return SetError(5, 0, -1)
			If $istart_col > $idim_2 OR $iend_col > $idim_2 Then Return SetError(5, 0, -1)
			If $istart_col > $iend_col Then Return SetError(6, 0, -1)
			If $istart_col = $iend_col Then
				Local $aretarray[$iend_row - $istart_row + 1]
			Else
				Local $aretarray[$iend_row - $istart_row + 1][$iend_col - $istart_col + 1]
			EndIf
			For $i = 0 To $iend_row - $istart_row
				For $j = 0 To $iend_col - $istart_col
					If $istart_col = $iend_col Then
						$aretarray[$i] = $aarray[$i + $istart_row][$j + $istart_col]
					Else
						$aretarray[$i][$j] = $aarray[$i + $istart_row][$j + $istart_col]
					EndIf
				Next
			Next
			Return $aretarray
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return 1
EndFunc

Func _arrayfindall(Const ByRef $aarray, $vvalue, $istart = 0, $iend = 0, $icase = 0, $icompare = 0, $isubitem = 0, $brow = False)
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $icase = Default Then $icase = 0
	If $icompare = Default Then $icompare = 0
	If $isubitem = Default Then $isubitem = 0
	If $brow = Default Then $brow = False
	$istart = _arraysearch($aarray, $vvalue, $istart, $iend, $icase, $icompare, 1, $isubitem, $brow)
	If @error Then Return SetError(@error, 0, -1)
	Local $iindex = 0, $avresult[UBound($aarray, ($brow ? $ubound_columns : $ubound_rows))]
	Do
		$avresult[$iindex] = $istart
		$iindex += 1
		$istart = _arraysearch($aarray, $vvalue, $istart + 1, $iend, $icase, $icompare, 1, $isubitem, $brow)
	Until @error
	ReDim $avresult[$iindex]
	Return $avresult
EndFunc

Func _arrayinsert(ByRef $aarray, $vrange, $vvalue = "", $istart = 0, $sdelim_item = "|", $sdelim_row = @CRLF, $iforce = $arrayfill_force_default)
	If $vvalue = Default Then $vvalue = ""
	If $istart = Default Then $istart = 0
	If $sdelim_item = Default Then $sdelim_item = "|"
	If $sdelim_row = Default Then $sdelim_row = @CRLF
	If $iforce = Default Then $iforce = $arrayfill_force_default
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	Local $hdatatype = 0
	Switch $iforce
		Case $arrayfill_force_int
			$hdatatype = Int
		Case $arrayfill_force_number
			$hdatatype = Number
		Case $arrayfill_force_ptr
			$hdatatype = Ptr
		Case $arrayfill_force_hwnd
			$hdatatype = HWnd
		Case $arrayfill_force_string
			$hdatatype = String
	EndSwitch
	Local $asplit_1, $asplit_2
	If IsArray($vrange) Then
		If UBound($vrange, $ubound_dimensions) <> 1 OR UBound($vrange, $ubound_rows) < 2 Then Return SetError(4, 0, -1)
	Else
		Local $inumber
		$vrange = StringStripWS($vrange, 8)
		$asplit_1 = StringSplit($vrange, ";")
		$vrange = ""
		For $i = 1 To $asplit_1[0]
			If NOT StringRegExp($asplit_1[$i], "^\d+(-\d+)?$") Then Return SetError(3, 0, -1)
			$asplit_2 = StringSplit($asplit_1[$i], "-")
			Switch $asplit_2[0]
				Case 1
					$vrange &= $asplit_2[1] & ";"
				Case 2
					If Number($asplit_2[2]) >= Number($asplit_2[1]) Then
						$inumber = $asplit_2[1] - 1
						Do
							$inumber += 1
							$vrange &= $inumber & ";"
						Until $inumber = $asplit_2[2]
					EndIf
			EndSwitch
		Next
		$vrange = StringSplit(StringTrimRight($vrange, 1), ";")
	EndIf
	If $vrange[1] < 0 OR $vrange[$vrange[0]] > $idim_1 Then Return SetError(5, 0, -1)
	For $i = 2 To $vrange[0]
		If $vrange[$i] < $vrange[$i - 1] Then Return SetError(3, 0, -1)
	Next
	Local $icopyto_index = $idim_1 + $vrange[0]
	Local $iinsertpoint_index = $vrange[0]
	Local $iinsert_index = $vrange[$iinsertpoint_index]
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $iforce = $arrayfill_force_singleitem Then
				ReDim $aarray[$idim_1 + $vrange[0] + 1]
				For $ireadfromindex = $idim_1 To 0 Step -1
					$aarray[$icopyto_index] = $aarray[$ireadfromindex]
					$icopyto_index -= 1
					$iinsert_index = $vrange[$iinsertpoint_index]
					While $ireadfromindex = $iinsert_index
						$aarray[$icopyto_index] = $vvalue
						$icopyto_index -= 1
						$iinsertpoint_index -= 1
						If $iinsertpoint_index < 1 Then ExitLoop 2
						$iinsert_index = $vrange[$iinsertpoint_index]
					WEnd
				Next
				Return $idim_1 + $vrange[0] + 1
			EndIf
			ReDim $aarray[$idim_1 + $vrange[0] + 1]
			If IsArray($vvalue) Then
				If UBound($vvalue, $ubound_dimensions) <> 1 Then Return SetError(5, 0, -1)
				$hdatatype = 0
			Else
				Local $atmp = StringSplit($vvalue, $sdelim_item, $str_nocount + $str_entiresplit)
				If UBound($atmp, $ubound_rows) = 1 Then
					$atmp[0] = $vvalue
					$hdatatype = 0
				EndIf
				$vvalue = $atmp
			EndIf
			For $ireadfromindex = $idim_1 To 0 Step -1
				$aarray[$icopyto_index] = $aarray[$ireadfromindex]
				$icopyto_index -= 1
				$iinsert_index = $vrange[$iinsertpoint_index]
				While $ireadfromindex = $iinsert_index
					If $iinsertpoint_index <= UBound($vvalue, $ubound_rows) Then
						If IsFunc($hdatatype) Then
							$aarray[$icopyto_index] = $hdatatype($vvalue[$iinsertpoint_index - 1])
						Else
							$aarray[$icopyto_index] = $vvalue[$iinsertpoint_index - 1]
						EndIf
					Else
						$aarray[$icopyto_index] = ""
					EndIf
					$icopyto_index -= 1
					$iinsertpoint_index -= 1
					If $iinsertpoint_index = 0 Then ExitLoop 2
					$iinsert_index = $vrange[$iinsertpoint_index]
				WEnd
			Next
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns)
			If $istart < 0 OR $istart > $idim_2 - 1 Then Return SetError(6, 0, -1)
			Local $ivaldim_1, $ivaldim_2
			If IsArray($vvalue) Then
				If UBound($vvalue, $ubound_dimensions) <> 2 Then Return SetError(7, 0, -1)
				$ivaldim_1 = UBound($vvalue, $ubound_rows)
				$ivaldim_2 = UBound($vvalue, $ubound_columns)
				$hdatatype = 0
			Else
				$asplit_1 = StringSplit($vvalue, $sdelim_row, $str_nocount + $str_entiresplit)
				$ivaldim_1 = UBound($asplit_1, $ubound_rows)
				StringReplace($asplit_1[0], $sdelim_item, "")
				$ivaldim_2 = @extended + 1
				Local $atmp[$ivaldim_1][$ivaldim_2]
				For $i = 0 To $ivaldim_1 - 1
					$asplit_2 = StringSplit($asplit_1[$i], $sdelim_item, $str_nocount + $str_entiresplit)
					For $j = 0 To $ivaldim_2 - 1
						$atmp[$i][$j] = $asplit_2[$j]
					Next
				Next
				$vvalue = $atmp
			EndIf
			If UBound($vvalue, $ubound_columns) + $istart > UBound($aarray, $ubound_columns) Then Return SetError(8, 0, -1)
			ReDim $aarray[$idim_1 + $vrange[0] + 1][$idim_2]
			For $ireadfromindex = $idim_1 To 0 Step -1
				For $j = 0 To $idim_2 - 1
					$aarray[$icopyto_index][$j] = $aarray[$ireadfromindex][$j]
				Next
				$icopyto_index -= 1
				$iinsert_index = $vrange[$iinsertpoint_index]
				While $ireadfromindex = $iinsert_index
					For $j = 0 To $idim_2 - 1
						If $j < $istart Then
							$aarray[$icopyto_index][$j] = ""
						ElseIf $j - $istart > $ivaldim_2 - 1 Then
							$aarray[$icopyto_index][$j] = ""
						Else
							If $iinsertpoint_index - 1 < $ivaldim_1 Then
								If IsFunc($hdatatype) Then
									$aarray[$icopyto_index][$j] = $hdatatype($vvalue[$iinsertpoint_index - 1][$j - $istart])
								Else
									$aarray[$icopyto_index][$j] = $vvalue[$iinsertpoint_index - 1][$j - $istart]
								EndIf
							Else
								$aarray[$icopyto_index][$j] = ""
							EndIf
						EndIf
					Next
					$icopyto_index -= 1
					$iinsertpoint_index -= 1
					If $iinsertpoint_index = 0 Then ExitLoop 2
					$iinsert_index = $vrange[$iinsertpoint_index]
				WEnd
			Next
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return UBound($aarray, $ubound_rows)
EndFunc

Func _arraymax(Const ByRef $aarray, $icompnumeric = 0, $istart = -1, $iend = -1, $isubitem = 0)
	Local $iresult = _arraymaxindex($aarray, $icompnumeric, $istart, $iend, $isubitem)
	If @error Then Return SetError(@error, 0, "")
	If UBound($aarray, $ubound_dimensions) = 1 Then
		Return $aarray[$iresult]
	Else
		Return $aarray[$iresult][$isubitem]
	EndIf
EndFunc

Func _arraymaxindex(Const ByRef $aarray, $icompnumeric = 0, $istart = -1, $iend = -1, $isubitem = 0)
	If $icompnumeric = Default Then $icompnumeric = 0
	If $istart = Default Then $istart = -1
	If $iend = Default Then $iend = -1
	If $isubitem = Default Then $isubitem = 0
	Local $iret = __array_minmaxindex($aarray, $icompnumeric, $istart, $iend, $isubitem, __array_greaterthan)
	Return SetError(@error, 0, $iret)
EndFunc

Func _arraymin(Const ByRef $aarray, $icompnumeric = 0, $istart = -1, $iend = -1, $isubitem = 0)
	Local $iresult = _arrayminindex($aarray, $icompnumeric, $istart, $iend, $isubitem)
	If @error Then Return SetError(@error, 0, "")
	If UBound($aarray, $ubound_dimensions) = 1 Then
		Return $aarray[$iresult]
	Else
		Return $aarray[$iresult][$isubitem]
	EndIf
EndFunc

Func _arrayminindex(Const ByRef $aarray, $icompnumeric = 0, $istart = -1, $iend = -1, $isubitem = 0)
	If $icompnumeric = Default Then $icompnumeric = 0
	If $istart = Default Then $istart = -1
	If $iend = Default Then $iend = -1
	If $isubitem = Default Then $isubitem = 0
	Local $iret = __array_minmaxindex($aarray, $icompnumeric, $istart, $iend, $isubitem, __array_lessthan)
	Return SetError(@error, 0, $iret)
EndFunc

Func _arraypermute(ByRef $aarray, $sdelimiter = "")
	If $sdelimiter = Default Then $sdelimiter = ""
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	If UBound($aarray, $ubound_dimensions) <> 1 Then Return SetError(2, 0, 0)
	Local $isize = UBound($aarray), $ifactorial = 1, $aidx[$isize], $aresult[1], $icount = 1
	If UBound($aarray) Then
		For $i = 0 To $isize - 1
			$aidx[$i] = $i
		Next
		For $i = $isize To 1 Step -1
			$ifactorial *= $i
		Next
		ReDim $aresult[$ifactorial + 1]
		$aresult[0] = $ifactorial
		__array_exeterinternal($aarray, 0, $isize, $sdelimiter, $aidx, $aresult, $icount)
	Else
		$aresult[0] = 0
	EndIf
	Return $aresult
EndFunc

Func _arraypop(ByRef $aarray)
	If (NOT IsArray($aarray)) Then Return SetError(1, 0, "")
	If UBound($aarray, $ubound_dimensions) <> 1 Then Return SetError(2, 0, "")
	Local $iubound = UBound($aarray) - 1
	If $iubound = -1 Then Return SetError(3, 0, "")
	Local $slastval = $aarray[$iubound]
	If $iubound > -1 Then
		ReDim $aarray[$iubound]
	EndIf
	Return $slastval
EndFunc

Func _arraypush(ByRef $aarray, $vvalue, $idirection = 0)
	If $idirection = Default Then $idirection = 0
	If (NOT IsArray($aarray)) Then Return SetError(1, 0, 0)
	If UBound($aarray, $ubound_dimensions) <> 1 Then Return SetError(3, 0, 0)
	Local $iubound = UBound($aarray) - 1
	If IsArray($vvalue) Then
		Local $iubounds = UBound($vvalue)
		If ($iubounds - 1) > $iubound Then Return SetError(2, 0, 0)
		If $idirection Then
			For $i = $iubound To $iubounds Step -1
				$aarray[$i] = $aarray[$i - $iubounds]
			Next
			For $i = 0 To $iubounds - 1
				$aarray[$i] = $vvalue[$i]
			Next
		Else
			For $i = 0 To $iubound - $iubounds
				$aarray[$i] = $aarray[$i + $iubounds]
			Next
			For $i = 0 To $iubounds - 1
				$aarray[$i + $iubound - $iubounds + 1] = $vvalue[$i]
			Next
		EndIf
	Else
		If $iubound > -1 Then
			If $idirection Then
				For $i = $iubound To 1 Step -1
					$aarray[$i] = $aarray[$i - 1]
				Next
				$aarray[0] = $vvalue
			Else
				For $i = 0 To $iubound - 1
					$aarray[$i] = $aarray[$i + 1]
				Next
				$aarray[$iubound] = $vvalue
			EndIf
		EndIf
	EndIf
	Return 1
EndFunc

Func _arrayreverse(ByRef $aarray, $istart = 0, $iend = 0)
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	If UBound($aarray, $ubound_dimensions) <> 1 Then Return SetError(3, 0, 0)
	If NOT UBound($aarray) Then Return SetError(4, 0, 0)
	Local $vtmp, $iubound = UBound($aarray) - 1
	If $iend < 1 OR $iend > $iubound Then $iend = $iubound
	If $istart < 0 Then $istart = 0
	If $istart > $iend Then Return SetError(2, 0, 0)
	For $i = $istart To Int(($istart + $iend - 1) / 2)
		$vtmp = $aarray[$i]
		$aarray[$i] = $aarray[$iend]
		$aarray[$iend] = $vtmp
		$iend -= 1
	Next
	Return 1
EndFunc

Func _arraysearch(Const ByRef $aarray, $vvalue, $istart = 0, $iend = 0, $icase = 0, $icompare = 0, $iforward = 1, $isubitem = -1, $brow = False)
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $icase = Default Then $icase = 0
	If $icompare = Default Then $icompare = 0
	If $iforward = Default Then $iforward = 1
	If $isubitem = Default Then $isubitem = -1
	If $brow = Default Then $brow = False
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray) - 1
	If $idim_1 = -1 Then Return SetError(3, 0, -1)
	Local $idim_2 = UBound($aarray, $ubound_columns) - 1
	Local $bcomptype = False
	If $icompare = 2 Then
		$icompare = 0
		$bcomptype = True
	EndIf
	If $brow Then
		If UBound($aarray, $ubound_dimensions) = 1 Then Return SetError(5, 0, -1)
		If $iend < 1 OR $iend > $idim_2 Then $iend = $idim_2
		If $istart < 0 Then $istart = 0
		If $istart > $iend Then Return SetError(4, 0, -1)
	Else
		If $iend < 1 OR $iend > $idim_1 Then $iend = $idim_1
		If $istart < 0 Then $istart = 0
		If $istart > $iend Then Return SetError(4, 0, -1)
	EndIf
	Local $istep = 1
	If NOT $iforward Then
		Local $itmp = $istart
		$istart = $iend
		$iend = $itmp
		$istep = -1
	EndIf
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If NOT $icompare Then
				If NOT $icase Then
					For $i = $istart To $iend Step $istep
						If $bcomptype AND VarGetType($aarray[$i]) <> VarGetType($vvalue) Then ContinueLoop
						If $aarray[$i] = $vvalue Then Return $i
					Next
				Else
					For $i = $istart To $iend Step $istep
						If $bcomptype AND VarGetType($aarray[$i]) <> VarGetType($vvalue) Then ContinueLoop
						If $aarray[$i] == $vvalue Then Return $i
					Next
				EndIf
			Else
				For $i = $istart To $iend Step $istep
					If $icompare = 3 Then
						If StringRegExp($aarray[$i], $vvalue) Then Return $i
					Else
						If StringInStr($aarray[$i], $vvalue, $icase) > 0 Then Return $i
					EndIf
				Next
			EndIf
		Case 2
			Local $idim_sub
			If $brow Then
				$idim_sub = $idim_1
				If $isubitem > $idim_sub Then $isubitem = $idim_sub
				If $isubitem < 0 Then
					$isubitem = 0
				Else
					$idim_sub = $isubitem
				EndIf
			Else
				$idim_sub = $idim_2
				If $isubitem > $idim_sub Then $isubitem = $idim_sub
				If $isubitem < 0 Then
					$isubitem = 0
				Else
					$idim_sub = $isubitem
				EndIf
			EndIf
			For $j = $isubitem To $idim_sub
				If NOT $icompare Then
					If NOT $icase Then
						For $i = $istart To $iend Step $istep
							If $brow Then
								If $bcomptype AND VarGetType($aarray[$j][$j]) <> VarGetType($vvalue) Then ContinueLoop
								If $aarray[$j][$i] = $vvalue Then Return $i
							Else
								If $bcomptype AND VarGetType($aarray[$i][$j]) <> VarGetType($vvalue) Then ContinueLoop
								If $aarray[$i][$j] = $vvalue Then Return $i
							EndIf
						Next
					Else
						For $i = $istart To $iend Step $istep
							If $brow Then
								If $bcomptype AND VarGetType($aarray[$j][$i]) <> VarGetType($vvalue) Then ContinueLoop
								If $aarray[$j][$i] == $vvalue Then Return $i
							Else
								If $bcomptype AND VarGetType($aarray[$i][$j]) <> VarGetType($vvalue) Then ContinueLoop
								If $aarray[$i][$j] == $vvalue Then Return $i
							EndIf
						Next
					EndIf
				Else
					For $i = $istart To $iend Step $istep
						If $icompare = 3 Then
							If $brow Then
								If StringRegExp($aarray[$j][$i], $vvalue) Then Return $i
							Else
								If StringRegExp($aarray[$i][$j], $vvalue) Then Return $i
							EndIf
						Else
							If $brow Then
								If StringInStr($aarray[$j][$i], $vvalue, $icase) > 0 Then Return $i
							Else
								If StringInStr($aarray[$i][$j], $vvalue, $icase) > 0 Then Return $i
							EndIf
						EndIf
					Next
				EndIf
			Next
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return SetError(6, 0, -1)
EndFunc

Func _arrayshuffle(ByRef $aarray, $istart_row = 0, $iend_row = 0, $icol = -1)
	If $istart_row = Default Then $istart_row = 0
	If $iend_row = Default Then $iend_row = 0
	If $icol = Default Then $icol = -1
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows)
	If $iend_row = 0 Then $iend_row = $idim_1 - 1
	If $istart_row < 0 OR $istart_row > $idim_1 - 1 Then Return SetError(3, 0, -1)
	If $iend_row < 1 OR $iend_row > $idim_1 - 1 Then Return SetError(3, 0, -1)
	If $istart_row > $iend_row Then Return SetError(4, 0, -1)
	Local $vtmp, $irand
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			For $i = $iend_row To $istart_row + 1 Step -1
				$irand = Random($istart_row, $i, 1)
				$vtmp = $aarray[$i]
				$aarray[$i] = $aarray[$irand]
				$aarray[$irand] = $vtmp
			Next
			Return 1
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns)
			If $icol < -1 OR $icol > $idim_2 - 1 Then Return SetError(5, 0, -1)
			Local $icol_start, $icol_end
			If $icol = -1 Then
				$icol_start = 0
				$icol_end = $idim_2 - 1
			Else
				$icol_start = $icol
				$icol_end = $icol
			EndIf
			For $i = $iend_row To $istart_row + 1 Step -1
				$irand = Random($istart_row, $i, 1)
				For $j = $icol_start To $icol_end
					$vtmp = $aarray[$i][$j]
					$aarray[$i][$j] = $aarray[$irand][$j]
					$aarray[$irand][$j] = $vtmp
				Next
			Next
			Return 1
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
EndFunc

Func _arraysort(ByRef $aarray, $idescending = 0, $istart = 0, $iend = 0, $isubitem = 0, $ipivot = 0)
	If $idescending = Default Then $idescending = 0
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $isubitem = Default Then $isubitem = 0
	If $ipivot = Default Then $ipivot = 0
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	Local $iubound = UBound($aarray) - 1
	If $iubound = -1 Then Return SetError(5, 0, 0)
	If $iend = Default Then $iend = 0
	If $iend < 1 OR $iend > $iubound OR $iend = Default Then $iend = $iubound
	If $istart < 0 OR $istart = Default Then $istart = 0
	If $istart > $iend Then Return SetError(2, 0, 0)
	If $idescending = Default Then $idescending = 0
	If $ipivot = Default Then $ipivot = 0
	If $isubitem = Default Then $isubitem = 0
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $ipivot Then
				__arraydualpivotsort($aarray, $istart, $iend)
			Else
				__arrayquicksort1d($aarray, $istart, $iend)
			EndIf
			If $idescending Then _arrayreverse($aarray, $istart, $iend)
		Case 2
			If $ipivot Then Return SetError(6, 0, 0)
			Local $isubmax = UBound($aarray, $ubound_columns) - 1
			If $isubitem > $isubmax Then Return SetError(3, 0, 0)
			If $idescending Then
				$idescending = -1
			Else
				$idescending = 1
			EndIf
			__arrayquicksort2d($aarray, $idescending, $istart, $iend, $isubitem, $isubmax)
		Case Else
			Return SetError(4, 0, 0)
	EndSwitch
	Return 1
EndFunc

Func __arrayquicksort1d(ByRef $aarray, Const ByRef $istart, Const ByRef $iend)
	If $iend <= $istart Then Return 
	Local $vtmp
	If ($iend - $istart) < 15 Then
		Local $vcur
		For $i = $istart + 1 To $iend
			$vtmp = $aarray[$i]
			If IsNumber($vtmp) Then
				For $j = $i - 1 To $istart Step -1
					$vcur = $aarray[$j]
					If ($vtmp >= $vcur AND IsNumber($vcur)) OR (NOT IsNumber($vcur) AND StringCompare($vtmp, $vcur) >= 0) Then ExitLoop
					$aarray[$j + 1] = $vcur
				Next
			Else
				For $j = $i - 1 To $istart Step -1
					If (StringCompare($vtmp, $aarray[$j]) >= 0) Then ExitLoop
					$aarray[$j + 1] = $aarray[$j]
				Next
			EndIf
			$aarray[$j + 1] = $vtmp
		Next
		Return 
	EndIf
	Local $l = $istart, $r = $iend, $vpivot = $aarray[Int(($istart + $iend) / 2)], $bnum = IsNumber($vpivot)
	Do
		If $bnum Then
			While ($aarray[$l] < $vpivot AND IsNumber($aarray[$l])) OR (NOT IsNumber($aarray[$l]) AND StringCompare($aarray[$l], $vpivot) < 0)
				$l += 1
			WEnd
			While ($aarray[$r] > $vpivot AND IsNumber($aarray[$r])) OR (NOT IsNumber($aarray[$r]) AND StringCompare($aarray[$r], $vpivot) > 0)
				$r -= 1
			WEnd
		Else
			While (StringCompare($aarray[$l], $vpivot) < 0)
				$l += 1
			WEnd
			While (StringCompare($aarray[$r], $vpivot) > 0)
				$r -= 1
			WEnd
		EndIf
		If $l <= $r Then
			$vtmp = $aarray[$l]
			$aarray[$l] = $aarray[$r]
			$aarray[$r] = $vtmp
			$l += 1
			$r -= 1
		EndIf
	Until $l > $r
	__arrayquicksort1d($aarray, $istart, $r)
	__arrayquicksort1d($aarray, $l, $iend)
EndFunc

Func __arrayquicksort2d(ByRef $aarray, Const ByRef $istep, Const ByRef $istart, Const ByRef $iend, Const ByRef $isubitem, Const ByRef $isubmax)
	If $iend <= $istart Then Return 
	Local $vtmp, $l = $istart, $r = $iend, $vpivot = $aarray[Int(($istart + $iend) / 2)][$isubitem], $bnum = IsNumber($vpivot)
	Do
		If $bnum Then
			While ($istep * ($aarray[$l][$isubitem] - $vpivot) < 0 AND IsNumber($aarray[$l][$isubitem])) OR (NOT IsNumber($aarray[$l][$isubitem]) AND $istep * StringCompare($aarray[$l][$isubitem], $vpivot) < 0)
				$l += 1
			WEnd
			While ($istep * ($aarray[$r][$isubitem] - $vpivot) > 0 AND IsNumber($aarray[$r][$isubitem])) OR (NOT IsNumber($aarray[$r][$isubitem]) AND $istep * StringCompare($aarray[$r][$isubitem], $vpivot) > 0)
				$r -= 1
			WEnd
		Else
			While ($istep * StringCompare($aarray[$l][$isubitem], $vpivot) < 0)
				$l += 1
			WEnd
			While ($istep * StringCompare($aarray[$r][$isubitem], $vpivot) > 0)
				$r -= 1
			WEnd
		EndIf
		If $l <= $r Then
			For $i = 0 To $isubmax
				$vtmp = $aarray[$l][$i]
				$aarray[$l][$i] = $aarray[$r][$i]
				$aarray[$r][$i] = $vtmp
			Next
			$l += 1
			$r -= 1
		EndIf
	Until $l > $r
	__arrayquicksort2d($aarray, $istep, $istart, $r, $isubitem, $isubmax)
	__arrayquicksort2d($aarray, $istep, $l, $iend, $isubitem, $isubmax)
EndFunc

Func __arraydualpivotsort(ByRef $aarray, $ipivot_left, $ipivot_right, $bleftmost = True)
	If $ipivot_left > $ipivot_right Then Return 
	Local $ilength = $ipivot_right - $ipivot_left + 1
	Local $i, $j, $k, $iai, $iak, $ia1, $ia2, $ilast
	If $ilength < 45 Then
		If $bleftmost Then
			$i = $ipivot_left
			While $i < $ipivot_right
				$j = $i
				$iai = $aarray[$i + 1]
				While $iai < $aarray[$j]
					$aarray[$j + 1] = $aarray[$j]
					$j -= 1
					If $j + 1 = $ipivot_left Then ExitLoop
				WEnd
				$aarray[$j + 1] = $iai
				$i += 1
			WEnd
		Else
			While 1
				If $ipivot_left >= $ipivot_right Then Return 1
				$ipivot_left += 1
				If $aarray[$ipivot_left] < $aarray[$ipivot_left - 1] Then ExitLoop
			WEnd
			While 1
				$k = $ipivot_left
				$ipivot_left += 1
				If $ipivot_left > $ipivot_right Then ExitLoop
				$ia1 = $aarray[$k]
				$ia2 = $aarray[$ipivot_left]
				If $ia1 < $ia2 Then
					$ia2 = $ia1
					$ia1 = $aarray[$ipivot_left]
				EndIf
				$k -= 1
				While $ia1 < $aarray[$k]
					$aarray[$k + 2] = $aarray[$k]
					$k -= 1
				WEnd
				$aarray[$k + 2] = $ia1
				While $ia2 < $aarray[$k]
					$aarray[$k + 1] = $aarray[$k]
					$k -= 1
				WEnd
				$aarray[$k + 1] = $ia2
				$ipivot_left += 1
			WEnd
			$ilast = $aarray[$ipivot_right]
			$ipivot_right -= 1
			While $ilast < $aarray[$ipivot_right]
				$aarray[$ipivot_right + 1] = $aarray[$ipivot_right]
				$ipivot_right -= 1
			WEnd
			$aarray[$ipivot_right + 1] = $ilast
		EndIf
		Return 1
	EndIf
	Local $iseventh = BitShift($ilength, 3) + BitShift($ilength, 6) + 1
	Local $ie1, $ie2, $ie3, $ie4, $ie5, $t
	$ie3 = Ceiling(($ipivot_left + $ipivot_right) / 2)
	$ie2 = $ie3 - $iseventh
	$ie1 = $ie2 - $iseventh
	$ie4 = $ie3 + $iseventh
	$ie5 = $ie4 + $iseventh
	If $aarray[$ie2] < $aarray[$ie1] Then
		$t = $aarray[$ie2]
		$aarray[$ie2] = $aarray[$ie1]
		$aarray[$ie1] = $t
	EndIf
	If $aarray[$ie3] < $aarray[$ie2] Then
		$t = $aarray[$ie3]
		$aarray[$ie3] = $aarray[$ie2]
		$aarray[$ie2] = $t
		If $t < $aarray[$ie1] Then
			$aarray[$ie2] = $aarray[$ie1]
			$aarray[$ie1] = $t
		EndIf
	EndIf
	If $aarray[$ie4] < $aarray[$ie3] Then
		$t = $aarray[$ie4]
		$aarray[$ie4] = $aarray[$ie3]
		$aarray[$ie3] = $t
		If $t < $aarray[$ie2] Then
			$aarray[$ie3] = $aarray[$ie2]
			$aarray[$ie2] = $t
			If $t < $aarray[$ie1] Then
				$aarray[$ie2] = $aarray[$ie1]
				$aarray[$ie1] = $t
			EndIf
		EndIf
	EndIf
	If $aarray[$ie5] < $aarray[$ie4] Then
		$t = $aarray[$ie5]
		$aarray[$ie5] = $aarray[$ie4]
		$aarray[$ie4] = $t
		If $t < $aarray[$ie3] Then
			$aarray[$ie4] = $aarray[$ie3]
			$aarray[$ie3] = $t
			If $t < $aarray[$ie2] Then
				$aarray[$ie3] = $aarray[$ie2]
				$aarray[$ie2] = $t
				If $t < $aarray[$ie1] Then
					$aarray[$ie2] = $aarray[$ie1]
					$aarray[$ie1] = $t
				EndIf
			EndIf
		EndIf
	EndIf
	Local $iless = $ipivot_left
	Local $igreater = $ipivot_right
	If (($aarray[$ie1] <> $aarray[$ie2]) AND ($aarray[$ie2] <> $aarray[$ie3]) AND ($aarray[$ie3] <> $aarray[$ie4]) AND ($aarray[$ie4] <> $aarray[$ie5])) Then
		Local $ipivot_1 = $aarray[$ie2]
		Local $ipivot_2 = $aarray[$ie4]
		$aarray[$ie2] = $aarray[$ipivot_left]
		$aarray[$ie4] = $aarray[$ipivot_right]
		Do
			$iless += 1
		Until $aarray[$iless] >= $ipivot_1
		Do
			$igreater -= 1
		Until $aarray[$igreater] <= $ipivot_2
		$k = $iless
		While $k <= $igreater
			$iak = $aarray[$k]
			If $iak < $ipivot_1 Then
				$aarray[$k] = $aarray[$iless]
				$aarray[$iless] = $iak
				$iless += 1
			ElseIf $iak > $ipivot_2 Then
				While $aarray[$igreater] > $ipivot_2
					$igreater -= 1
					If $igreater + 1 = $k Then ExitLoop 2
				WEnd
				If $aarray[$igreater] < $ipivot_1 Then
					$aarray[$k] = $aarray[$iless]
					$aarray[$iless] = $aarray[$igreater]
					$iless += 1
				Else
					$aarray[$k] = $aarray[$igreater]
				EndIf
				$aarray[$igreater] = $iak
				$igreater -= 1
			EndIf
			$k += 1
		WEnd
		$aarray[$ipivot_left] = $aarray[$iless - 1]
		$aarray[$iless - 1] = $ipivot_1
		$aarray[$ipivot_right] = $aarray[$igreater + 1]
		$aarray[$igreater + 1] = $ipivot_2
		__arraydualpivotsort($aarray, $ipivot_left, $iless - 2, True)
		__arraydualpivotsort($aarray, $igreater + 2, $ipivot_right, False)
		If ($iless < $ie1) AND ($ie5 < $igreater) Then
			While $aarray[$iless] = $ipivot_1
				$iless += 1
			WEnd
			While $aarray[$igreater] = $ipivot_2
				$igreater -= 1
			WEnd
			$k = $iless
			While $k <= $igreater
				$iak = $aarray[$k]
				If $iak = $ipivot_1 Then
					$aarray[$k] = $aarray[$iless]
					$aarray[$iless] = $iak
					$iless += 1
				ElseIf $iak = $ipivot_2 Then
					While $aarray[$igreater] = $ipivot_2
						$igreater -= 1
						If $igreater + 1 = $k Then ExitLoop 2
					WEnd
					If $aarray[$igreater] = $ipivot_1 Then
						$aarray[$k] = $aarray[$iless]
						$aarray[$iless] = $ipivot_1
						$iless += 1
					Else
						$aarray[$k] = $aarray[$igreater]
					EndIf
					$aarray[$igreater] = $iak
					$igreater -= 1
				EndIf
				$k += 1
			WEnd
		EndIf
		__arraydualpivotsort($aarray, $iless, $igreater, False)
	Else
		Local $ipivot = $aarray[$ie3]
		$k = $iless
		While $k <= $igreater
			If $aarray[$k] = $ipivot Then
				$k += 1
				ContinueLoop
			EndIf
			$iak = $aarray[$k]
			If $iak < $ipivot Then
				$aarray[$k] = $aarray[$iless]
				$aarray[$iless] = $iak
				$iless += 1
			Else
				While $aarray[$igreater] > $ipivot
					$igreater -= 1
				WEnd
				If $aarray[$igreater] < $ipivot Then
					$aarray[$k] = $aarray[$iless]
					$aarray[$iless] = $aarray[$igreater]
					$iless += 1
				Else
					$aarray[$k] = $ipivot
				EndIf
				$aarray[$igreater] = $iak
				$igreater -= 1
			EndIf
			$k += 1
		WEnd
		__arraydualpivotsort($aarray, $ipivot_left, $iless - 1, True)
		__arraydualpivotsort($aarray, $igreater + 1, $ipivot_right, False)
	EndIf
EndFunc

Func _arrayswap(ByRef $aarray, $iindex_1, $iindex_2, $bcol = False, $istart = -1, $iend = -1)
	If $bcol = Default Then $bcol = False
	If $istart = Default Then $istart = -1
	If $iend = Default Then $iend = -1
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	Local $idim_2 = UBound($aarray, $ubound_columns) - 1
	If $idim_2 = -1 Then
		$bcol = False
		$istart = -1
		$iend = -1
	EndIf
	If $istart > $iend Then Return SetError(5, 0, -1)
	If $bcol Then
		If $iindex_1 < 0 OR $iindex_2 > $idim_2 Then Return SetError(3, 0, -1)
		If $istart = -1 Then $istart = 0
		If $iend = -1 Then $iend = $idim_1
	Else
		If $iindex_1 < 0 OR $iindex_2 > $idim_1 Then Return SetError(3, 0, -1)
		If $istart = -1 Then $istart = 0
		If $iend = -1 Then $iend = $idim_2
	EndIf
	Local $vtmp
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			$vtmp = $aarray[$iindex_1]
			$aarray[$iindex_1] = $aarray[$iindex_2]
			$aarray[$iindex_2] = $vtmp
		Case 2
			If $istart < -1 OR $iend < -1 Then Return SetError(4, 0, -1)
			If $bcol Then
				If $istart > $idim_1 OR $iend > $idim_1 Then Return SetError(4, 0, -1)
				For $j = $istart To $iend
					$vtmp = $aarray[$j][$iindex_1]
					$aarray[$j][$iindex_1] = $aarray[$j][$iindex_2]
					$aarray[$j][$iindex_2] = $vtmp
				Next
			Else
				If $istart > $idim_2 OR $iend > $idim_2 Then Return SetError(4, 0, -1)
				For $j = $istart To $iend
					$vtmp = $aarray[$iindex_1][$j]
					$aarray[$iindex_1][$j] = $aarray[$iindex_2][$j]
					$aarray[$iindex_2][$j] = $vtmp
				Next
			EndIf
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return 1
EndFunc

Func _arraytoclip(Const ByRef $aarray, $sdelim_col = "|", $istart_row = -1, $iend_row = -1, $sdelim_row = @CRLF, $istart_col = -1, $iend_col = -1)
	Local $sresult = _arraytostring($aarray, $sdelim_col, $istart_row, $iend_row, $sdelim_row, $istart_col, $iend_col)
	If @error Then Return SetError(@error, 0, 0)
	If ClipPut($sresult) Then Return 1
	Return SetError(-1, 0, 0)
EndFunc

Func _arraytostring(Const ByRef $aarray, $sdelim_col = "|", $istart_row = -1, $iend_row = -1, $sdelim_row = @CRLF, $istart_col = -1, $iend_col = -1)
	If $sdelim_col = Default Then $sdelim_col = "|"
	If $sdelim_row = Default Then $sdelim_row = @CRLF
	If $istart_row = Default Then $istart_row = -1
	If $iend_row = Default Then $iend_row = -1
	If $istart_col = Default Then $istart_col = -1
	If $iend_col = Default Then $iend_col = -1
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	If $istart_row = -1 Then $istart_row = 0
	If $iend_row = -1 Then $iend_row = $idim_1
	If $istart_row < -1 OR $iend_row < -1 Then Return SetError(3, 0, -1)
	If $istart_row > $idim_1 OR $iend_row > $idim_1 Then Return SetError(3, 0, "")
	If $istart_row > $iend_row Then Return SetError(4, 0, -1)
	Local $sret = ""
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			For $i = $istart_row To $iend_row
				$sret &= $aarray[$i] & $sdelim_col
			Next
			Return StringTrimRight($sret, StringLen($sdelim_col))
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns) - 1
			If $istart_col = -1 Then $istart_col = 0
			If $iend_col = -1 Then $iend_col = $idim_2
			If $istart_col < -1 OR $iend_col < -1 Then Return SetError(5, 0, -1)
			If $istart_col > $idim_2 OR $iend_col > $idim_2 Then Return SetError(5, 0, -1)
			If $istart_col > $iend_col Then Return SetError(6, 0, -1)
			For $i = $istart_row To $iend_row
				For $j = $istart_col To $iend_col
					$sret &= $aarray[$i][$j] & $sdelim_col
				Next
				$sret = StringTrimRight($sret, StringLen($sdelim_col)) & $sdelim_row
			Next
			Return StringTrimRight($sret, StringLen($sdelim_row))
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return 1
EndFunc

Func _arraytranspose(ByRef $aarray)
	Switch UBound($aarray, 0)
		Case 0
			Return SetError(2, 0, 0)
		Case 1
			Local $atemp[1][UBound($aarray)]
			For $i = 0 To UBound($aarray) - 1
				$atemp[0][$i] = $aarray[$i]
			Next
			$aarray = $atemp
		Case 2
			Local $idim_1 = UBound($aarray, 1), $idim_2 = UBound($aarray, 2)
			If $idim_1 <> $idim_2 Then
				Local $atemp[$idim_2][$idim_1]
				For $i = 0 To $idim_1 - 1
					For $j = 0 To $idim_2 - 1
						$atemp[$j][$i] = $aarray[$i][$j]
					Next
				Next
				$aarray = $atemp
			Else
				Local $velement
				For $i = 0 To $idim_1 - 1
					For $j = $i + 1 To $idim_2 - 1
						$velement = $aarray[$i][$j]
						$aarray[$i][$j] = $aarray[$j][$i]
						$aarray[$j][$i] = $velement
					Next
				Next
			EndIf
		Case Else
			Return SetError(1, 0, 0)
	EndSwitch
	Return 1
EndFunc

Func _arraytrim(ByRef $aarray, $itrimnum, $idirection = 0, $istart = 0, $iend = 0, $isubitem = 0)
	If $idirection = Default Then $idirection = 0
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $isubitem = Default Then $isubitem = 0
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	If $iend = 0 Then $iend = $idim_1
	If $istart > $iend Then Return SetError(3, 0, -1)
	If $istart < 0 OR $iend < 0 Then Return SetError(3, 0, -1)
	If $istart > $idim_1 OR $iend > $idim_1 Then Return SetError(3, 0, -1)
	If $istart > $iend Then Return SetError(4, 0, -1)
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $idirection Then
				For $i = $istart To $iend
					$aarray[$i] = StringTrimRight($aarray[$i], $itrimnum)
				Next
			Else
				For $i = $istart To $iend
					$aarray[$i] = StringTrimLeft($aarray[$i], $itrimnum)
				Next
			EndIf
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns) - 1
			If $isubitem < 0 OR $isubitem > $idim_2 Then Return SetError(5, 0, -1)
			If $idirection Then
				For $i = $istart To $iend
					$aarray[$i][$isubitem] = StringTrimRight($aarray[$i][$isubitem], $itrimnum)
				Next
			Else
				For $i = $istart To $iend
					$aarray[$i][$isubitem] = StringTrimLeft($aarray[$i][$isubitem], $itrimnum)
				Next
			EndIf
		Case Else
			Return SetError(2, 0, 0)
	EndSwitch
	Return 1
EndFunc

Func _arrayunique(Const ByRef $aarray, $icolumn = 0, $ibase = 0, $icase = 0, $icount = $arrayunique_count, $iinttype = $arrayunique_auto)
	If $icolumn = Default Then $icolumn = 0
	If $ibase = Default Then $ibase = 0
	If $icase = Default Then $icase = 0
	If $icount = Default Then $icount = $arrayunique_count
	If UBound($aarray, $ubound_rows) = 0 Then Return SetError(1, 0, 0)
	Local $idims = UBound($aarray, $ubound_dimensions), $inumcolumns = UBound($aarray, $ubound_columns)
	If $idims > 2 Then Return SetError(2, 0, 0)
	If $ibase < 0 OR $ibase > 1 OR (NOT IsInt($ibase)) Then Return SetError(3, 0, 0)
	If $icase < 0 OR $icase > 1 OR (NOT IsInt($icase)) Then Return SetError(3, 0, 0)
	If $icount < 0 OR $icount > 1 OR (NOT IsInt($icount)) Then Return SetError(4, 0, 0)
	If $iinttype < 0 OR $iinttype > 4 OR (NOT IsInt($iinttype)) Then Return SetError(5, 0, 0)
	If $icolumn < 0 OR ($inumcolumns = 0 AND $icolumn > 0) OR ($inumcolumns > 0 AND $icolumn >= $inumcolumns) Then Return SetError(6, 0, 0)
	If $iinttype = $arrayunique_auto Then
		Local $vfirstelem = (($idims = 1) ? ($aarray[$ibase]) : ($aarray[$icolumn][$ibase]))
		If IsInt($vfirstelem) Then
			Switch VarGetType($vfirstelem)
				Case "Int32"
					$iinttype = $arrayunique_force32
				Case "Int64"
					$iinttype = $arrayunique_force64
			EndSwitch
		Else
			$iinttype = $arrayunique_force32
		EndIf
	EndIf
	ObjEvent("AutoIt.Error", "__ArrayUnique_AutoErrFunc")
	Local $odictionary = ObjCreate("Scripting.Dictionary")
	$odictionary.comparemode = Number(NOT $icase)
	Local $velem, $stype, $vkey, $bcomerror = False
	For $i = $ibase To UBound($aarray) - 1
		If $idims = 1 Then
			$velem = $aarray[$i]
		Else
			$velem = $aarray[$i][$icolumn]
		EndIf
		Switch $iinttype
			Case $arrayunique_force32
				$odictionary.item($velem)
				If @error Then
					$bcomerror = True
					ExitLoop
				EndIf
			Case $arrayunique_force64
				$stype = VarGetType($velem)
				If $stype = "Int32" Then
					$bcomerror = True
					ExitLoop
				EndIf
				$vkey = "#" & $stype & "#" & String($velem)
				If NOT $odictionary.item($vkey) Then
					$odictionary($vkey) = $velem
				EndIf
			Case $arrayunique_match
				$stype = VarGetType($velem)
				If StringLeft($stype, 3) = "Int" Then
					$vkey = "#Int#" & String($velem)
				Else
					$vkey = "#" & $stype & "#" & String($velem)
				EndIf
				If NOT $odictionary.item($vkey) Then
					$odictionary($vkey) = $velem
				EndIf
			Case $arrayunique_distinct
				$vkey = "#" & VarGetType($velem) & "#" & String($velem)
				If NOT $odictionary.item($vkey) Then
					$odictionary($vkey) = $velem
				EndIf
		EndSwitch
	Next
	Local $avalues, $j = 0
	If $bcomerror Then
		Return SetError(7, 0, 0)
	ElseIf $iinttype <> $arrayunique_force32 Then
		Local $avalues[$odictionary.count]
		For $vkey In $odictionary.keys()
			$avalues[$j] = $odictionary($vkey)
			If StringLeft($vkey, 5) = "#Ptr#" Then
				$avalues[$j] = Ptr($avalues[$j])
			EndIf
			$j += 1
		Next
	Else
		$avalues = $odictionary.keys()
	EndIf
	If $icount Then
		_arrayinsert($avalues, 0, $odictionary.count)
	EndIf
	Return $avalues
EndFunc

Func _array1dtohistogram($aarray, $isizing = 100)
	If UBound($aarray, 0) > 1 Then Return SetError(1, 0, "")
	$isizing = $isizing * 8
	Local $t, $n, $imin = 0, $imax = 0, $ioffset = 0
	For $i = 0 To UBound($aarray) - 1
		$t = $aarray[$i]
		$t = IsNumber($t) ? Round($t) : 0
		If $t < $imin Then $imin = $t
		If $t > $imax Then $imax = $t
	Next
	Local $irange = Int(Round(($imax - $imin) / 8)) * 8
	Local $ispaceratio = 4
	For $i = 0 To UBound($aarray) - 1
		$t = $aarray[$i]
		If $t Then
			$n = Abs(Round(($isizing * $t) / $irange) / 8)
			$aarray[$i] = ""
			If $t > 0 Then
				If $imin Then
					$ioffset = Int(Abs(Round(($isizing * $imin) / $irange) / 8) / 8 * $ispaceratio)
					$aarray[$i] = __array_stringrepeat(ChrW(32), $ioffset)
				EndIf
			Else
				If $imin <> $t Then
					$ioffset = Int(Abs(Round(($isizing * ($t - $imin)) / $irange) / 8) / 8 * $ispaceratio)
					$aarray[$i] = __array_stringrepeat(ChrW(32), $ioffset)
				EndIf
			EndIf
			$aarray[$i] &= __array_stringrepeat(ChrW(9608), Int($n / 8))
			$n = Mod($n, 8)
			If $n > 0 Then $aarray[$i] &= ChrW(9608 + 8 - $n)
			$aarray[$i] &= " " & $t
		Else
			$aarray[$i] = ""
		EndIf
	Next
	Return $aarray
EndFunc

Func __array_stringrepeat($sstring, $irepeatcount)
	$irepeatcount = Int($irepeatcount)
	If StringLen($sstring) < 1 OR $irepeatcount <= 0 Then Return SetError(1, 0, "")
	Local $sresult = ""
	While $irepeatcount > 1
		If BitAND($irepeatcount, 1) Then $sresult &= $sstring
		$sstring &= $sstring
		$irepeatcount = BitShift($irepeatcount, 1)
	WEnd
	Return $sstring & $sresult
EndFunc

Func __array_exeterinternal(ByRef $aarray, $istart, $isize, $sdelimiter, ByRef $aidx, ByRef $aresult, ByRef $icount)
	If $istart == $isize - 1 Then
		For $i = 0 To $isize - 1
			$aresult[$icount] &= $aarray[$aidx[$i]] & $sdelimiter
		Next
		If $sdelimiter <> "" Then $aresult[$icount] = StringTrimRight($aresult[$icount], StringLen($sdelimiter))
		$icount += 1
	Else
		Local $itemp
		For $i = $istart To $isize - 1
			$itemp = $aidx[$i]
			$aidx[$i] = $aidx[$istart]
			$aidx[$istart] = $itemp
			__array_exeterinternal($aarray, $istart + 1, $isize, $sdelimiter, $aidx, $aresult, $icount)
			$aidx[$istart] = $aidx[$i]
			$aidx[$i] = $itemp
		Next
	EndIf
EndFunc

Func __array_combinations($in, $ir)
	Local $i_total = 1
	For $i = $ir To 1 Step -1
		$i_total *= ($in / $i)
		$in -= 1
	Next
	Return Round($i_total)
EndFunc

Func __array_getnext($in, $ir, ByRef $ileft, $itotal, ByRef $aidx)
	If $ileft == $itotal Then
		$ileft -= 1
		Return 
	EndIf
	Local $i = $ir - 1
	While $aidx[$i] == $in - $ir + $i
		$i -= 1
	WEnd
	$aidx[$i] += 1
	For $j = $i + 1 To $ir - 1
		$aidx[$j] = $aidx[$i] + $j - $i
	Next
	$ileft -= 1
EndFunc

Func __array_minmaxindex(Const ByRef $aarray, $icompnumeric, $istart, $iend, $isubitem, $fucomparison)
	If $icompnumeric = Default Then $icompnumeric = 0
	If $icompnumeric <> 1 Then $icompnumeric = 0
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $isubitem = Default Then $isubitem = 0
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	If $idim_1 < 0 Then Return SetError(1, 0, -1)
	If $iend = -1 Then $iend = $idim_1
	If $istart = -1 Then $istart = 0
	If $istart < -1 OR $iend < -1 Then Return SetError(3, 0, -1)
	If $istart > $idim_1 OR $iend > $idim_1 Then Return SetError(3, 0, -1)
	If $istart > $iend Then Return SetError(4, 0, -1)
	If $idim_1 < 0 Then Return SetError(5, 0, -1)
	Local $imaxminindex = $istart
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $icompnumeric Then
				For $i = $istart To $iend
					If $fucomparison(Number($aarray[$i]), Number($aarray[$imaxminindex])) Then $imaxminindex = $i
				Next
			Else
				For $i = $istart To $iend
					If $fucomparison($aarray[$i], $aarray[$imaxminindex]) Then $imaxminindex = $i
				Next
			EndIf
		Case 2
			If $isubitem < 0 OR $isubitem > UBound($aarray, $ubound_columns) - 1 Then Return SetError(6, 0, -1)
			If $icompnumeric Then
				For $i = $istart To $iend
					If $fucomparison(Number($aarray[$i][$isubitem]), Number($aarray[$imaxminindex][$isubitem])) Then $imaxminindex = $i
				Next
			Else
				For $i = $istart To $iend
					If $fucomparison($aarray[$i][$isubitem], $aarray[$imaxminindex][$isubitem]) Then $imaxminindex = $i
				Next
			EndIf
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return $imaxminindex
EndFunc

Func __array_greaterthan($vvalue1, $vvalue2)
	Return $vvalue1 > $vvalue2
EndFunc

Func __array_lessthan($vvalue1, $vvalue2)
	Return $vvalue1 < $vvalue2
EndFunc

Func __arrayunique_autoerrfunc()
EndFunc

Global Const $fc_nooverwrite = 0
Global Const $fc_overwrite = 1
Global Const $fc_createpath = 8
Global Const $ft_modified = 0
Global Const $ft_created = 1
Global Const $ft_accessed = 2
Global Const $ft_array = 0
Global Const $ft_string = 1
Global Const $fsf_createbutton = 1
Global Const $fsf_newdialog = 2
Global Const $fsf_editcontrol = 4
Global Const $ft_nonrecursive = 0
Global Const $ft_recursive = 1
Global Const $fo_read = 0
Global Const $fo_append = 1
Global Const $fo_overwrite = 2
Global Const $fo_createpath = 8
Global Const $fo_binary = 16
Global Const $fo_unicode = 32
Global Const $fo_utf16_le = 32
Global Const $fo_utf16_be = 64
Global Const $fo_utf8 = 128
Global Const $fo_utf8_nobom = 256
Global Const $fo_ansi = 512
Global Const $fo_utf16_le_nobom = 1024
Global Const $fo_utf16_be_nobom = 2048
Global Const $fo_utf8_full = 16384
Global Const $fo_fullfile_detect = 16384
Global Const $eof = -1
Global Const $fd_filemustexist = 1
Global Const $fd_pathmustexist = 2
Global Const $fd_multiselect = 4
Global Const $fd_promptcreatenew = 8
Global Const $fd_promptoverwrite = 16
Global Const $create_new = 1
Global Const $create_always = 2
Global Const $open_existing = 3
Global Const $open_always = 4
Global Const $truncate_existing = 5
Global Const $invalid_set_file_pointer = -1
Global Const $file_begin = 0
Global Const $file_current = 1
Global Const $file_end = 2
Global Const $file_attribute_readonly = 1
Global Const $file_attribute_hidden = 2
Global Const $file_attribute_system = 4
Global Const $file_attribute_directory = 16
Global Const $file_attribute_archive = 32
Global Const $file_attribute_device = 64
Global Const $file_attribute_normal = 128
Global Const $file_attribute_temporary = 256
Global Const $file_attribute_sparse_file = 512
Global Const $file_attribute_reparse_point = 1024
Global Const $file_attribute_compressed = 2048
Global Const $file_attribute_offline = 4096
Global Const $file_attribute_not_content_indexed = 8192
Global Const $file_attribute_encrypted = 16384
Global Const $file_share_read = 1
Global Const $file_share_write = 2
Global Const $file_share_delete = 4
Global Const $file_share_readwrite = BitOR($file_share_read, $file_share_write)
Global Const $file_share_any = BitOR($file_share_read, $file_share_write, $file_share_delete)
Global Const $generic_all = 268435456
Global Const $generic_execute = 536870912
Global Const $generic_write = 1073741824
Global Const $generic_read = -2147483648
Global Const $generic_readwrite = BitOR($generic_read, $generic_write)
Global Const $file_encoding_utf16le = 32
Global Const $fe_entire_utf8 = 1
Global Const $fe_partialfirst_utf8 = 2
Global Const $fn_fullpath = 0
Global Const $fn_relativepath = 1
Global Const $fv_comments = "Comments"
Global Const $fv_companyname = "CompanyName"
Global Const $fv_filedescription = "FileDescription"
Global Const $fv_fileversion = "FileVersion"
Global Const $fv_internalname = "InternalName"
Global Const $fv_legalcopyright = "LegalCopyright"
Global Const $fv_legaltrademarks = "LegalTrademarks"
Global Const $fv_originalfilename = "OriginalFilename"
Global Const $fv_productname = "ProductName"
Global Const $fv_productversion = "ProductVersion"
Global Const $fv_privatebuild = "PrivateBuild"
Global Const $fv_specialbuild = "SpecialBuild"
Global Const $frta_nocount = 0
Global Const $frta_count = 1
Global Const $frta_intarrays = 2
Global Const $frta_entiresplit = 4
Global Const $flta_filesfolders = 0
Global Const $flta_files = 1
Global Const $flta_folders = 2
Global Const $fltar_filesfolders = 0
Global Const $fltar_files = 1
Global Const $fltar_folders = 2
Global Const $fltar_nohidden = 4
Global Const $fltar_nosystem = 8
Global Const $fltar_nolink = 16
Global Const $fltar_norecur = 0
Global Const $fltar_recur = 1
Global Const $fltar_nosort = 0
Global Const $fltar_sort = 1
Global Const $fltar_fastsort = 2
Global Const $fltar_nopath = 0
Global Const $fltar_relpath = 1
Global Const $fltar_fullpath = 2

Func _filecountlines($sfilepath)
	Local $hfileopen = FileOpen($sfilepath, $fo_read)
	If $hfileopen = -1 Then Return SetError(1, 0, 0)
	Local $sfileread = StringStripWS(FileRead($hfileopen), $str_striptrailing)
	FileClose($hfileopen)
	Return UBound(StringRegExp($sfileread, "\R", $str_regexparrayglobalmatch)) + 1 - Int($sfileread = "")
EndFunc

Func _filecreate($sfilepath)
	Local $hfileopen = FileOpen($sfilepath, BitOR($fo_overwrite, $fo_createpath))
	If $hfileopen = -1 Then Return SetError(1, 0, 0)
	Local $ifilewrite = FileWrite($hfileopen, "")
	FileClose($hfileopen)
	If NOT $ifilewrite Then Return SetError(2, 0, 0)
	Return 1
EndFunc

Func _filelisttoarray($sfilepath, $sfilter = "*", $iflag = $flta_filesfolders, $breturnpath = False)
	Local $sdelimiter = "|", $sfilelist = "", $sfilename = "", $sfullpath = ""
	$sfilepath = StringRegExpReplace($sfilepath, "[\\/]+$", "") & "\"
	If $iflag = Default Then $iflag = $flta_filesfolders
	If $breturnpath Then $sfullpath = $sfilepath
	If $sfilter = Default Then $sfilter = "*"
	If NOT FileExists($sfilepath) Then Return SetError(1, 0, 0)
	If StringRegExp($sfilter, "[\\/:><\|]|(?s)^\s*$") Then Return SetError(2, 0, 0)
	If NOT ($iflag = 0 OR $iflag = 1 OR $iflag = 2) Then Return SetError(3, 0, 0)
	Local $hsearch = FileFindFirstFile($sfilepath & $sfilter)
	If @error Then Return SetError(4, 0, 0)
	While 1
		$sfilename = FileFindNextFile($hsearch)
		If @error Then ExitLoop
		If ($iflag + @extended = 2) Then ContinueLoop
		$sfilelist &= $sdelimiter & $sfullpath & $sfilename
	WEnd
	FileClose($hsearch)
	If $sfilelist = "" Then Return SetError(4, 0, 0)
	Return StringSplit(StringTrimLeft($sfilelist, 1), $sdelimiter)
EndFunc

Func _filelisttoarrayrec($sfilepath, $smask = "*", $ireturn = $fltar_filesfolders, $irecur = $fltar_norecur, $isort = $fltar_nosort, $ireturnpath = $fltar_relpath)
	If NOT FileExists($sfilepath) Then Return SetError(1, 1, "")
	If $smask = Default Then $smask = "*"
	If $ireturn = Default Then $ireturn = $fltar_filesfolders
	If $irecur = Default Then $irecur = $fltar_norecur
	If $isort = Default Then $isort = $fltar_nosort
	If $ireturnpath = Default Then $ireturnpath = $fltar_relpath
	If $irecur > 1 OR NOT IsInt($irecur) Then Return SetError(1, 6, "")
	Local $blongpath = False
	If StringLeft($sfilepath, 4) == "\\?\" Then
		$blongpath = True
	EndIf
	Local $sfolderslash = ""
	If StringRight($sfilepath, 1) = "\" Then
		$sfolderslash = "\"
	Else
		$sfilepath = $sfilepath & "\"
	EndIf
	Local $asfoldersearchlist[100] = [1]
	$asfoldersearchlist[1] = $sfilepath
	Local $ihide_hs = 0, $shide_hs = ""
	If BitAND($ireturn, 4) Then
		$ihide_hs += 2
		$shide_hs &= "H"
		$ireturn -= 4
	EndIf
	If BitAND($ireturn, 8) Then
		$ihide_hs += 4
		$shide_hs &= "S"
		$ireturn -= 8
	EndIf
	Local $ihide_link = 0
	If BitAND($ireturn, 16) Then
		$ihide_link = 1024
		$ireturn -= 16
	EndIf
	Local $imaxlevel = 0
	If $irecur < 0 Then
		StringReplace($sfilepath, "\", "", 0, $str_nocasesensebasic)
		$imaxlevel = @extended - $irecur
	EndIf
	Local $sexclude_list = "", $sexclude_list_folder = "", $sinclude_list = "*"
	Local $amasksplit = StringSplit($smask, "|")
	Switch $amasksplit[0]
		Case 3
			$sexclude_list_folder = $amasksplit[3]
			ContinueCase
		Case 2
			$sexclude_list = $amasksplit[2]
			ContinueCase
		Case 1
			$sinclude_list = $amasksplit[1]
	EndSwitch
	Local $sinclude_file_mask = ".+"
	If $sinclude_list <> "*" Then
		If NOT __fltar_listtomask($sinclude_file_mask, $sinclude_list) Then Return SetError(1, 2, "")
	EndIf
	Local $sinclude_folder_mask = ".+"
	Switch $ireturn
		Case 0
			Switch $irecur
				Case 0
					$sinclude_folder_mask = $sinclude_file_mask
			EndSwitch
		Case 2
			$sinclude_folder_mask = $sinclude_file_mask
	EndSwitch
	Local $sexclude_file_mask = ":"
	If $sexclude_list <> "" Then
		If NOT __fltar_listtomask($sexclude_file_mask, $sexclude_list) Then Return SetError(1, 3, "")
	EndIf
	Local $sexclude_folder_mask = ":"
	If $irecur Then
		If $sexclude_list_folder Then
			If NOT __fltar_listtomask($sexclude_folder_mask, $sexclude_list_folder) Then Return SetError(1, 4, "")
		EndIf
		If $ireturn = 2 Then
			$sexclude_folder_mask = $sexclude_file_mask
		EndIf
	Else
		$sexclude_folder_mask = $sexclude_file_mask
	EndIf
	If NOT ($ireturn = 0 OR $ireturn = 1 OR $ireturn = 2) Then Return SetError(1, 5, "")
	If NOT ($isort = 0 OR $isort = 1 OR $isort = 2) Then Return SetError(1, 7, "")
	If NOT ($ireturnpath = 0 OR $ireturnpath = 1 OR $ireturnpath = 2) Then Return SetError(1, 8, "")
	If $ihide_link Then
		Local $tfile_data = DllStructCreate("struct;align 4;dword FileAttributes;uint64 CreationTime;uint64 LastAccessTime;uint64 LastWriteTime;" & "dword FileSizeHigh;dword FileSizeLow;dword Reserved0;dword Reserved1;wchar FileName[260];wchar AlternateFileName[14];endstruct")
		Local $hdll = DllOpen("kernel32.dll"), $adll_ret
	EndIf
	Local $asreturnlist[100] = [0]
	Local $asfilematchlist = $asreturnlist, $asrootfilematchlist = $asreturnlist, $asfoldermatchlist = $asreturnlist
	Local $bfolder = False, $hsearch = 0, $scurrentpath = "", $sname = "", $sretpath = ""
	Local $iattribs = 0, $sattribs = ""
	Local $asfolderfilesectionlist[100][2] = [[0, 0]]
	While $asfoldersearchlist[0] > 0
		$scurrentpath = $asfoldersearchlist[$asfoldersearchlist[0]]
		$asfoldersearchlist[0] -= 1
		Switch $ireturnpath
			Case 1
				$sretpath = StringReplace($scurrentpath, $sfilepath, "")
			Case 2
				If $blongpath Then
					$sretpath = StringTrimLeft($scurrentpath, 4)
				Else
					$sretpath = $scurrentpath
				EndIf
		EndSwitch
		If $ihide_link Then
			$adll_ret = DllCall($hdll, "handle", "FindFirstFileW", "wstr", $scurrentpath & "*", "struct*", $tfile_data)
			If @error OR NOT $adll_ret[0] Then
				ContinueLoop
			EndIf
			$hsearch = $adll_ret[0]
		Else
			$hsearch = FileFindFirstFile($scurrentpath & "*")
			If $hsearch = -1 Then
				ContinueLoop
			EndIf
		EndIf
		If $ireturn = 0 AND $isort AND $ireturnpath Then
			__fltar_addtolist($asfolderfilesectionlist, $sretpath, $asfilematchlist[0] + 1)
		EndIf
		$sattribs = ""
		While 1
			If $ihide_link Then
				$adll_ret = DllCall($hdll, "int", "FindNextFileW", "handle", $hsearch, "struct*", $tfile_data)
				If @error OR NOT $adll_ret[0] Then
					ExitLoop
				EndIf
				$sname = DllStructGetData($tfile_data, "FileName")
				If $sname = ".." Then
					ContinueLoop
				EndIf
				$iattribs = DllStructGetData($tfile_data, "FileAttributes")
				If $ihide_hs AND BitAND($iattribs, $ihide_hs) Then
					ContinueLoop
				EndIf
				If BitAND($iattribs, $ihide_link) Then
					ContinueLoop
				EndIf
				$bfolder = False
				If BitAND($iattribs, 16) Then
					$bfolder = True
				EndIf
			Else
				$bfolder = False
				$sname = FileFindNextFile($hsearch, 1)
				If @error Then
					ExitLoop
				EndIf
				$sattribs = @extended
				If StringInStr($sattribs, "D") Then
					$bfolder = True
				EndIf
				If StringRegExp($sattribs, "[" & $shide_hs & "]") Then
					ContinueLoop
				EndIf
			EndIf
			If $bfolder Then
				Select 
					Case $irecur < 0
						StringReplace($scurrentpath, "\", "", 0, $str_nocasesensebasic)
						If @extended < $imaxlevel Then
							ContinueCase
						EndIf
					Case $irecur = 1
						If NOT StringRegExp($sname, $sexclude_folder_mask) Then
							__fltar_addtolist($asfoldersearchlist, $scurrentpath & $sname & "\")
						EndIf
				EndSelect
			EndIf
			If $isort Then
				If $bfolder Then
					If StringRegExp($sname, $sinclude_folder_mask) AND NOT StringRegExp($sname, $sexclude_folder_mask) Then
						__fltar_addtolist($asfoldermatchlist, $sretpath & $sname & $sfolderslash)
					EndIf
				Else
					If StringRegExp($sname, $sinclude_file_mask) AND NOT StringRegExp($sname, $sexclude_file_mask) Then
						If $scurrentpath = $sfilepath Then
							__fltar_addtolist($asrootfilematchlist, $sretpath & $sname)
						Else
							__fltar_addtolist($asfilematchlist, $sretpath & $sname)
						EndIf
					EndIf
				EndIf
			Else
				If $bfolder Then
					If $ireturn <> 1 AND StringRegExp($sname, $sinclude_folder_mask) AND NOT StringRegExp($sname, $sexclude_folder_mask) Then
						__fltar_addtolist($asreturnlist, $sretpath & $sname & $sfolderslash)
					EndIf
				Else
					If $ireturn <> 2 AND StringRegExp($sname, $sinclude_file_mask) AND NOT StringRegExp($sname, $sexclude_file_mask) Then
						__fltar_addtolist($asreturnlist, $sretpath & $sname)
					EndIf
				EndIf
			EndIf
		WEnd
		If $ihide_link Then
			DllCall($hdll, "int", "FindClose", "ptr", $hsearch)
		Else
			FileClose($hsearch)
		EndIf
	WEnd
	If $ihide_link Then
		DllClose($hdll)
	EndIf
	If $isort Then
		Switch $ireturn
			Case 2
				If $asfoldermatchlist[0] = 0 Then Return SetError(1, 9, "")
				ReDim $asfoldermatchlist[$asfoldermatchlist[0] + 1]
				$asreturnlist = $asfoldermatchlist
				__arraydualpivotsort($asreturnlist, 1, $asreturnlist[0])
			Case 1
				If $asrootfilematchlist[0] = 0 AND $asfilematchlist[0] = 0 Then Return SetError(1, 9, "")
				If $ireturnpath = 0 Then
					__fltar_addfilelists($asreturnlist, $asrootfilematchlist, $asfilematchlist)
					__arraydualpivotsort($asreturnlist, 1, $asreturnlist[0])
				Else
					__fltar_addfilelists($asreturnlist, $asrootfilematchlist, $asfilematchlist, 1)
				EndIf
			Case 0
				If $asrootfilematchlist[0] = 0 AND $asfoldermatchlist[0] = 0 Then Return SetError(1, 9, "")
				If $ireturnpath = 0 Then
					__fltar_addfilelists($asreturnlist, $asrootfilematchlist, $asfilematchlist)
					$asreturnlist[0] += $asfoldermatchlist[0]
					ReDim $asfoldermatchlist[$asfoldermatchlist[0] + 1]
					_arrayconcatenate($asreturnlist, $asfoldermatchlist, 1)
					__arraydualpivotsort($asreturnlist, 1, $asreturnlist[0])
				Else
					Local $asreturnlist[$asfilematchlist[0] + $asrootfilematchlist[0] + $asfoldermatchlist[0] + 1]
					$asreturnlist[0] = $asfilematchlist[0] + $asrootfilematchlist[0] + $asfoldermatchlist[0]
					__arraydualpivotsort($asrootfilematchlist, 1, $asrootfilematchlist[0])
					For $i = 1 To $asrootfilematchlist[0]
						$asreturnlist[$i] = $asrootfilematchlist[$i]
					Next
					Local $inextinsertionindex = $asrootfilematchlist[0] + 1
					__arraydualpivotsort($asfoldermatchlist, 1, $asfoldermatchlist[0])
					Local $sfoldertofind = ""
					For $i = 1 To $asfoldermatchlist[0]
						$asreturnlist[$inextinsertionindex] = $asfoldermatchlist[$i]
						$inextinsertionindex += 1
						If $sfolderslash Then
							$sfoldertofind = $asfoldermatchlist[$i]
						Else
							$sfoldertofind = $asfoldermatchlist[$i] & "\"
						EndIf
						Local $ifilesectionendindex = 0, $ifilesectionstartindex = 0
						For $j = 1 To $asfolderfilesectionlist[0][0]
							If $sfoldertofind = $asfolderfilesectionlist[$j][0] Then
								$ifilesectionstartindex = $asfolderfilesectionlist[$j][1]
								If $j = $asfolderfilesectionlist[0][0] Then
									$ifilesectionendindex = $asfilematchlist[0]
								Else
									$ifilesectionendindex = $asfolderfilesectionlist[$j + 1][1] - 1
								EndIf
								If $isort = 1 Then
									__arraydualpivotsort($asfilematchlist, $ifilesectionstartindex, $ifilesectionendindex)
								EndIf
								For $k = $ifilesectionstartindex To $ifilesectionendindex
									$asreturnlist[$inextinsertionindex] = $asfilematchlist[$k]
									$inextinsertionindex += 1
								Next
								ExitLoop
							EndIf
						Next
					Next
				EndIf
		EndSwitch
	Else
		If $asreturnlist[0] = 0 Then Return SetError(1, 9, "")
		ReDim $asreturnlist[$asreturnlist[0] + 1]
	EndIf
	Return $asreturnlist
EndFunc

Func __fltar_addfilelists(ByRef $astarget, $assource_1, $assource_2, $isort = 0)
	ReDim $assource_1[$assource_1[0] + 1]
	If $isort = 1 Then __arraydualpivotsort($assource_1, 1, $assource_1[0])
	$astarget = $assource_1
	$astarget[0] += $assource_2[0]
	ReDim $assource_2[$assource_2[0] + 1]
	If $isort = 1 Then __arraydualpivotsort($assource_2, 1, $assource_2[0])
	_arrayconcatenate($astarget, $assource_2, 1)
EndFunc

Func __fltar_addtolist(ByRef $alist, $vvalue_0, $vvalue_1 = -1)
	If $vvalue_1 = -1 Then
		$alist[0] += 1
		If UBound($alist) <= $alist[0] Then ReDim $alist[UBound($alist) * 2]
		$alist[$alist[0]] = $vvalue_0
	Else
		$alist[0][0] += 1
		If UBound($alist) <= $alist[0][0] Then ReDim $alist[UBound($alist) * 2][2]
		$alist[$alist[0][0]][0] = $vvalue_0
		$alist[$alist[0][0]][1] = $vvalue_1
	EndIf
EndFunc

Func __fltar_listtomask(ByRef $smask, $slist)
	If StringRegExp($slist, "\\|/|:|\<|\>|\|") Then Return 0
	$slist = StringReplace(StringStripWS(StringRegExpReplace($slist, "\s*;\s*", ";"), $str_stripleading + $str_striptrailing), ";", "|")
	$slist = StringReplace(StringReplace(StringRegExpReplace($slist, "[][$^.{}()+\-]", "\\$0"), "?", "."), "*", ".*?")
	$smask = "(?i)^(" & $slist & ")\z"
	Return 1
EndFunc

Func _fileprint($sfilepath, $ishow = @SW_HIDE)
	If $ishow = Default Then $ishow = @SW_HIDE
	Return ShellExecute($sfilepath, "", @WorkingDir, "print", $ishow)
EndFunc

Func _filereadtoarray($sfilepath, ByRef $vreturn, $iflags = $frta_count, $sdelimiter = "")
	$vreturn = 0
	If $iflags = Default Then $iflags = $frta_count
	If $sdelimiter = Default Then $sdelimiter = ""
	Local $bexpand = True
	If BitAND($iflags, $frta_intarrays) Then
		$bexpand = False
		$iflags -= $frta_intarrays
	EndIf
	Local $ientire = $str_chrsplit
	If BitAND($iflags, $frta_entiresplit) Then
		$ientire = $str_entiresplit
		$iflags -= $frta_entiresplit
	EndIf
	Local $inocount = 0
	If $iflags <> $frta_count Then
		$iflags = $frta_nocount
		$inocount = $str_nocount
	EndIf
	If $sdelimiter Then
		Local $alines = FILEREADTOARRAY($sfilepath)
		If @error Then Return SetError(@error, 0, 0)
		Local $idim_1 = UBound($alines) + $iflags
		If $bexpand Then
			Local $idim_2 = UBound(StringSplit($alines[0], $sdelimiter, $ientire + $str_nocount))
			Local $atemp_array[$idim_1][$idim_2]
			Local $ifields, $asplit
			For $i = 0 To $idim_1 - $iflags - 1
				$asplit = StringSplit($alines[$i], $sdelimiter, $ientire + $str_nocount)
				$ifields = UBound($asplit)
				If $ifields <> $idim_2 Then
					Return SetError(3, 0, 0)
				EndIf
				For $j = 0 To $ifields - 1
					$atemp_array[$i + $iflags][$j] = $asplit[$j]
				Next
			Next
			If $idim_2 < 2 Then Return SetError(4, 0, 0)
			If $iflags Then
				$atemp_array[0][0] = $idim_1 - $iflags
				$atemp_array[0][1] = $idim_2
			EndIf
		Else
			Local $atemp_array[$idim_1]
			For $i = 0 To $idim_1 - $iflags - 1
				$atemp_array[$i + $iflags] = StringSplit($alines[$i], $sdelimiter, $ientire + $inocount)
			Next
			If $iflags Then
				$atemp_array[0] = $idim_1 - $iflags
			EndIf
		EndIf
		$vreturn = $atemp_array
	Else
		If $iflags Then
			Local $hfileopen = FileOpen($sfilepath, $fo_read)
			If $hfileopen = -1 Then Return SetError(1, 0, 0)
			Local $sfileread = FileRead($hfileopen)
			FileClose($hfileopen)
			If StringLen($sfileread) Then
				$vreturn = StringRegExp(@LF & $sfileread, "(?|(\N+)\z|(\N*)(?:\R))", 3)
				$vreturn[0] = UBound($vreturn) - 1
			Else
				Return SetError(2, 0, 0)
			EndIf
		Else
			$vreturn = FILEREADTOARRAY($sfilepath)
			If @error Then
				$vreturn = 0
				Return SetError(@error, 0, 0)
			EndIf
		EndIf
	EndIf
	Return 1
EndFunc

Func _filewritefromarray($sfilepath, Const ByRef $aarray, $ibase = Default, $iubound = Default, $sdelimiter = "|")
	Local $ireturn = 0
	If NOT IsArray($aarray) Then Return SetError(2, 0, $ireturn)
	Local $idims = UBound($aarray, $ubound_dimensions)
	If $idims > 2 Then Return SetError(4, 0, 0)
	Local $ilast = UBound($aarray) - 1
	If $iubound = Default OR $iubound > $ilast Then $iubound = $ilast
	If $ibase < 0 OR $ibase = Default Then $ibase = 0
	If $ibase > $iubound Then Return SetError(5, 0, $ireturn)
	If $sdelimiter = Default Then $sdelimiter = "|"
	Local $hfileopen = $sfilepath
	If IsString($sfilepath) Then
		$hfileopen = FileOpen($sfilepath, $fo_overwrite)
		If $hfileopen = -1 Then Return SetError(1, 0, $ireturn)
	EndIf
	Local $ierror = 0
	$ireturn = 1
	Switch $idims
		Case 1
			For $i = $ibase To $iubound
				If NOT FileWrite($hfileopen, $aarray[$i] & @CRLF) Then
					$ierror = 3
					$ireturn = 0
					ExitLoop
				EndIf
			Next
		Case 2
			Local $stemp = ""
			For $i = $ibase To $iubound
				$stemp = $aarray[$i][0]
				For $j = 1 To UBound($aarray, $ubound_columns) - 1
					$stemp &= $sdelimiter & $aarray[$i][$j]
				Next
				If NOT FileWrite($hfileopen, $stemp & @CRLF) Then
					$ierror = 3
					$ireturn = 0
					ExitLoop
				EndIf
			Next
	EndSwitch
	If IsString($sfilepath) Then FileClose($hfileopen)
	Return SetError($ierror, 0, $ireturn)
EndFunc

Func _filewritelog($slogpath, $slogmsg, $iflag = -1)
	Local $iopenmode = $fo_append
	Local $sdatenow = @YEAR & "-" & @MON & "-" & @MDAY
	Local $stimenow = @HOUR & ":" & @MIN & ":" & @SEC
	Local $smsg = $sdatenow & " " & $stimenow & " : " & $slogmsg
	If $iflag = Default Then $iflag = -1
	If $iflag <> -1 Then
		$iopenmode = $fo_overwrite
		$smsg &= @CRLF & FileRead($slogpath)
	EndIf
	Local $hfileopen = $slogpath
	If IsString($slogpath) Then
		$hfileopen = FileOpen($slogpath, $iopenmode)
	EndIf
	If $hfileopen = -1 Then Return SetError(1, 0, 0)
	Local $ireturn = FileWriteLine($hfileopen, $smsg)
	If IsString($slogpath) Then $ireturn = FileClose($hfileopen)
	If $ireturn <= 0 Then Return SetError(2, $ireturn, 0)
	Return $ireturn
EndFunc

Func _filewritetoline($sfilepath, $iline, $stext, $boverwrite = False)
	If $iline <= 0 Then Return SetError(4, 0, 0)
	If NOT IsString($stext) Then
		$stext = String($stext)
		If $stext = "" Then Return SetError(6, 0, 0)
	EndIf
	If $boverwrite = Default Then $boverwrite = False
	If NOT (IsBool($boverwrite) OR $boverwrite = 0 OR $boverwrite = 1) Then Return SetError(5, 0, 0)
	If NOT FileExists($sfilepath) Then Return SetError(2, 0, 0)
	Local $aarray = FILEREADTOARRAY($sfilepath)
	Local $iubound = UBound($aarray) - 1
	If ($iubound + 1) < $iline Then Return SetError(1, 0, 0)
	Local $hfileopen = FileOpen($sfilepath, FileGetEncoding($sfilepath) + $fo_overwrite)
	If $hfileopen = -1 Then Return SetError(3, 0, 0)
	Local $sdata = ""
	$iline -= 1
	For $i = 0 To $iubound
		If $i = $iline Then
			If $boverwrite Then
				If $stext Then $sdata &= $stext & @CRLF
			Else
				$sdata &= $stext & @CRLF & $aarray[$i] & @CRLF
			EndIf
		ElseIf $i < $iubound Then
			$sdata &= $aarray[$i] & @CRLF
		ElseIf $i = $iubound Then
			$sdata &= $aarray[$i]
		EndIf
	Next
	FileWrite($hfileopen, $sdata)
	FileClose($hfileopen)
	Return 1
EndFunc

Func _pathfull($srelativepath, $sbasepath = @WorkingDir)
	If NOT $srelativepath OR $srelativepath = "." Then Return $sbasepath
	Local $sfullpath = StringReplace($srelativepath, "/", "\")
	Local Const $sfullpathconst = $sfullpath
	Local $spath
	Local $brootonly = StringLeft($sfullpath, 1) = "\" AND StringMid($sfullpath, 2, 1) <> "\"
	If $sbasepath = Default Then $sbasepath = @WorkingDir
	For $i = 1 To 2
		$spath = StringLeft($sfullpath, 2)
		If $spath = "\\" Then
			$sfullpath = StringTrimLeft($sfullpath, 2)
			Local $nserverlen = StringInStr($sfullpath, "\") - 1
			$spath = "\\" & StringLeft($sfullpath, $nserverlen)
			$sfullpath = StringTrimLeft($sfullpath, $nserverlen)
			ExitLoop
		ElseIf StringRight($spath, 1) = ":" Then
			$sfullpath = StringTrimLeft($sfullpath, 2)
			ExitLoop
		Else
			$sfullpath = $sbasepath & "\" & $sfullpath
		EndIf
	Next
	If StringLeft($sfullpath, 1) <> "\" Then
		If StringLeft($sfullpathconst, 2) = StringLeft($sbasepath, 2) Then
			$sfullpath = $sbasepath & "\" & $sfullpath
		Else
			$sfullpath = "\" & $sfullpath
		EndIf
	EndIf
	Local $atemp = StringSplit($sfullpath, "\")
	Local $apathparts[$atemp[0]], $j = 0
	For $i = 2 To $atemp[0]
		If $atemp[$i] = ".." Then
			If $j Then $j -= 1
		ElseIf NOT ($atemp[$i] = "" AND $i <> $atemp[0]) AND $atemp[$i] <> "." Then
			$apathparts[$j] = $atemp[$i]
			$j += 1
		EndIf
	Next
	$sfullpath = $spath
	If NOT $brootonly Then
		For $i = 0 To $j - 1
			$sfullpath &= "\" & $apathparts[$i]
		Next
	Else
		$sfullpath &= $sfullpathconst
		If StringInStr($sfullpath, "..") Then $sfullpath = _pathfull($sfullpath)
	EndIf
	Do
		$sfullpath = StringReplace($sfullpath, ".\", "\")
	Until @extended = 0
	Return $sfullpath
EndFunc

Func _pathgetrelative($sfrom, $sto)
	If StringRight($sfrom, 1) <> "\" Then $sfrom &= "\"
	If StringRight($sto, 1) <> "\" Then $sto &= "\"
	If $sfrom = $sto Then Return SetError(1, 0, StringTrimRight($sto, 1))
	Local $asfrom = StringSplit($sfrom, "\")
	Local $asto = StringSplit($sto, "\")
	If $asfrom[1] <> $asto[1] Then Return SetError(2, 0, StringTrimRight($sto, 1))
	Local $i = 2
	Local $idiff = 1
	While 1
		If $asfrom[$i] <> $asto[$i] Then
			$idiff = $i
			ExitLoop
		EndIf
		$i += 1
	WEnd
	$i = 1
	Local $srelpath = ""
	For $j = 1 To $asto[0]
		If $i >= $idiff Then
			$srelpath &= "\" & $asto[$i]
		EndIf
		$i += 1
	Next
	$srelpath = StringTrimLeft($srelpath, 1)
	$i = 1
	For $j = 1 To $asfrom[0]
		If $i > $idiff Then
			$srelpath = "..\" & $srelpath
		EndIf
		$i += 1
	Next
	If StringRight($srelpath, 1) == "\" Then $srelpath = StringTrimRight($srelpath, 1)
	Return $srelpath
EndFunc

Func _pathmake($sdrive, $sdir, $sfilename, $sextension)
	If StringLen($sdrive) Then
		If NOT (StringLeft($sdrive, 2) = "\\") Then $sdrive = StringLeft($sdrive, 1) & ":"
	EndIf
	If StringLen($sdir) Then
		If NOT (StringRight($sdir, 1) = "\") AND NOT (StringRight($sdir, 1) = "/") Then $sdir = $sdir & "\"
	Else
		$sdir = "\"
	EndIf
	If StringLen($sdir) Then
		If NOT (StringLeft($sdir, 1) = "\") AND NOT (StringLeft($sdir, 1) = "/") Then $sdir = "\" & $sdir
	EndIf
	If StringLen($sextension) Then
		If NOT (StringLeft($sextension, 1) = ".") Then $sextension = "." & $sextension
	EndIf
	Return $sdrive & $sdir & $sfilename & $sextension
EndFunc

Func _pathsplit($sfilepath, ByRef $sdrive, ByRef $sdir, ByRef $sfilename, ByRef $sextension)
	Local $aarray = StringRegExp($sfilepath, "^\h*((?:\\\\\?\\)*(\\\\[^\?\/\\]+|[A-Za-z]:)?(.*[\/\\]\h*)?((?:[^\.\/\\]|(?(?=\.[^\/\\]*\.)\.))*)?([^\/\\]*))$", $str_regexparraymatch)
	If @error Then
		ReDim $aarray[5]
		$aarray[0] = $sfilepath
	EndIf
	$sdrive = $aarray[1]
	If StringLeft($aarray[2], 1) == "/" Then
		$sdir = StringRegExpReplace($aarray[2], "\h*[\/\\]+\h*", "\/")
	Else
		$sdir = StringRegExpReplace($aarray[2], "\h*[\/\\]+\h*", "\\")
	EndIf
	$aarray[2] = $sdir
	$sfilename = $aarray[3]
	$sextension = $aarray[4]
	Return $aarray
EndFunc

Func _replacestringinfile($sfilepath, $ssearchstring, $sreplacestring, $icasesensitive = 0, $ioccurance = 1)
	If StringInStr(FileGetAttrib($sfilepath), "R") Then Return SetError(1, 0, -1)
	Local $hfileopen = FileOpen($sfilepath, $fo_read)
	If $hfileopen = -1 Then Return SetError(2, 0, -1)
	Local $sfileread = FileRead($hfileopen)
	FileClose($hfileopen)
	If $icasesensitive = Default Then $icasesensitive = 0
	If $ioccurance = Default Then $ioccurance = 1
	$sfileread = StringReplace($sfileread, $ssearchstring, $sreplacestring, 1 - $ioccurance, $icasesensitive)
	Local $ireturn = @extended
	If $ireturn Then
		Local $ifileencoding = FileGetEncoding($sfilepath)
		$hfileopen = FileOpen($sfilepath, $ifileencoding + $fo_overwrite)
		If $hfileopen = -1 Then Return SetError(3, 0, -1)
		FileWrite($hfileopen, $sfileread)
		FileClose($hfileopen)
	EndIf
	Return $ireturn
EndFunc

Func _tempfile($sdirectoryname = @TempDir, $sfileprefix = "~", $sfileextension = ".tmp", $irandomlength = 7)
	If $irandomlength = Default OR $irandomlength <= 0 Then $irandomlength = 7
	If $sdirectoryname = Default OR (NOT FileExists($sdirectoryname)) Then $sdirectoryname = @TempDir
	If $sfileextension = Default Then $sfileextension = ".tmp"
	If $sfileprefix = Default Then $sfileprefix = "~"
	If NOT FileExists($sdirectoryname) Then $sdirectoryname = @ScriptDir
	$sdirectoryname = StringRegExpReplace($sdirectoryname, "[\\/]+$", "")
	$sfileextension = StringRegExpReplace($sfileextension, "^\.+", "")
	$sfileprefix = StringRegExpReplace($sfileprefix, '[\\/:*?"<>|]', "")
	Local $stempname = ""
	Do
		$stempname = ""
		While StringLen($stempname) < $irandomlength
			$stempname &= Chr(Random(97, 122, 1))
		WEnd
		$stempname = $sdirectoryname & "\" & $sfileprefix & $stempname & "." & $sfileextension
	Until NOT FileExists($stempname)
	Return $stempname
EndFunc

Global Const $gui_event_single = 0
Global Const $gui_event_array = 1
Global Const $gui_event_none = 0
Global Const $gui_event_close = -3
Global Const $gui_event_minimize = -4
Global Const $gui_event_restore = -5
Global Const $gui_event_maximize = -6
Global Const $gui_event_primarydown = -7
Global Const $gui_event_primaryup = -8
Global Const $gui_event_secondarydown = -9
Global Const $gui_event_secondaryup = -10
Global Const $gui_event_mousemove = -11
Global Const $gui_event_resized = -12
Global Const $gui_event_dropped = -13
Global Const $gui_rundefmsg = "GUI_RUNDEFMSG"
Global Const $gui_avistop = 0
Global Const $gui_avistart = 1
Global Const $gui_aviclose = 2
Global Const $gui_checked = 1
Global Const $gui_indeterminate = 2
Global Const $gui_unchecked = 4
Global Const $gui_dropaccepted = 8
Global Const $gui_nodropaccepted = 4096
Global Const $gui_acceptfiles = $gui_dropaccepted
Global Const $gui_show = 16
Global Const $gui_hide = 32
Global Const $gui_enable = 64
Global Const $gui_disable = 128
Global Const $gui_focus = 256
Global Const $gui_nofocus = 8192
Global Const $gui_defbutton = 512
Global Const $gui_expand = 1024
Global Const $gui_ontop = 2048
Global Const $gui_fontnormal = 0
Global Const $gui_fontitalic = 2
Global Const $gui_fontunder = 4
Global Const $gui_fontstrike = 8
Global Const $gui_dockauto = 1
Global Const $gui_dockleft = 2
Global Const $gui_dockright = 4
Global Const $gui_dockhcenter = 8
Global Const $gui_docktop = 32
Global Const $gui_dockbottom = 64
Global Const $gui_dockvcenter = 128
Global Const $gui_dockwidth = 256
Global Const $gui_dockheight = 512
Global Const $gui_docksize = 768
Global Const $gui_dockmenubar = 544
Global Const $gui_dockstatebar = 576
Global Const $gui_dockall = 802
Global Const $gui_dockborders = 102
Global Const $gui_gr_close = 1
Global Const $gui_gr_line = 2
Global Const $gui_gr_bezier = 4
Global Const $gui_gr_move = 6
Global Const $gui_gr_color = 8
Global Const $gui_gr_rect = 10
Global Const $gui_gr_ellipse = 12
Global Const $gui_gr_pie = 14
Global Const $gui_gr_dot = 16
Global Const $gui_gr_pixel = 18
Global Const $gui_gr_hint = 20
Global Const $gui_gr_refresh = 22
Global Const $gui_gr_pensize = 24
Global Const $gui_gr_nobkcolor = -2
Global Const $gui_bkcolor_default = -1
Global Const $gui_bkcolor_transparent = -2
Global Const $gui_bkcolor_lv_alternate = -33554432
Global Const $gui_read_default = 0
Global Const $gui_read_extended = 1
Global Const $gui_cursor_nooverride = 0
Global Const $gui_cursor_override = 1
Global Const $gui_ws_ex_parentdrag = 1048576
Global Const $gmem_fixed = 0
Global Const $gmem_moveable = 2
Global Const $gmem_nocompact = 16
Global Const $gmem_nodiscard = 32
Global Const $gmem_zeroinit = 64
Global Const $gmem_modify = 128
Global Const $gmem_discardable = 256
Global Const $gmem_not_banked = 4096
Global Const $gmem_share = 8192
Global Const $gmem_ddeshare = 8192
Global Const $gmem_notify = 16384
Global Const $gmem_lower = 4096
Global Const $gmem_valid_flags = 32626
Global Const $gmem_invalid_handle = 32768
Global Const $gptr = BitOR($gmem_fixed, $gmem_zeroinit)
Global Const $ghnd = BitOR($gmem_moveable, $gmem_zeroinit)
Global Const $mem_commit = 4096
Global Const $mem_reserve = 8192
Global Const $mem_top_down = 1048576
Global Const $mem_shared = 134217728
Global Const $page_noaccess = 1
Global Const $page_readonly = 2
Global Const $page_readwrite = 4
Global Const $page_execute = 16
Global Const $page_execute_read = 32
Global Const $page_execute_readwrite = 64
Global Const $page_execute_writecopy = 128
Global Const $page_guard = 256
Global Const $page_nocache = 512
Global Const $page_writecombine = 1024
Global Const $page_writecopy = 8
Global Const $mem_decommit = 16384
Global Const $mem_release = 32768
Global Const $process_terminate = 1
Global Const $process_create_thread = 2
Global Const $process_set_sessionid = 4
Global Const $process_vm_operation = 8
Global Const $process_vm_read = 16
Global Const $process_vm_write = 32
Global Const $process_dup_handle = 64
Global Const $process_create_process = 128
Global Const $process_set_quota = 256
Global Const $process_set_information = 512
Global Const $process_query_information = 1024
Global Const $process_query_limited_information = 4096
Global Const $process_suspend_resume = 2048
Global Const $process_all_access = 2035711
Global Const $se_assignprimarytoken_name = "SeAssignPrimaryTokenPrivilege"
Global Const $se_audit_name = "SeAuditPrivilege"
Global Const $se_backup_name = "SeBackupPrivilege"
Global Const $se_change_notify_name = "SeChangeNotifyPrivilege"
Global Const $se_create_global_name = "SeCreateGlobalPrivilege"
Global Const $se_create_pagefile_name = "SeCreatePagefilePrivilege"
Global Const $se_create_permanent_name = "SeCreatePermanentPrivilege"
Global Const $se_create_symbolic_link_name = "SeCreateSymbolicLinkPrivilege"
Global Const $se_create_token_name = "SeCreateTokenPrivilege"
Global Const $se_debug_name = "SeDebugPrivilege"
Global Const $se_enable_delegation_name = "SeEnableDelegationPrivilege"
Global Const $se_impersonate_name = "SeImpersonatePrivilege"
Global Const $se_inc_base_priority_name = "SeIncreaseBasePriorityPrivilege"
Global Const $se_inc_working_set_name = "SeIncreaseWorkingSetPrivilege"
Global Const $se_increase_quota_name = "SeIncreaseQuotaPrivilege"
Global Const $se_load_driver_name = "SeLoadDriverPrivilege"
Global Const $se_lock_memory_name = "SeLockMemoryPrivilege"
Global Const $se_machine_account_name = "SeMachineAccountPrivilege"
Global Const $se_manage_volume_name = "SeManageVolumePrivilege"
Global Const $se_prof_single_process_name = "SeProfileSingleProcessPrivilege"
Global Const $se_relabel_name = "SeRelabelPrivilege"
Global Const $se_remote_shutdown_name = "SeRemoteShutdownPrivilege"
Global Const $se_restore_name = "SeRestorePrivilege"
Global Const $se_security_name = "SeSecurityPrivilege"
Global Const $se_shutdown_name = "SeShutdownPrivilege"
Global Const $se_sync_agent_name = "SeSyncAgentPrivilege"
Global Const $se_system_environment_name = "SeSystemEnvironmentPrivilege"
Global Const $se_system_profile_name = "SeSystemProfilePrivilege"
Global Const $se_systemtime_name = "SeSystemtimePrivilege"
Global Const $se_take_ownership_name = "SeTakeOwnershipPrivilege"
Global Const $se_tcb_name = "SeTcbPrivilege"
Global Const $se_time_zone_name = "SeTimeZonePrivilege"
Global Const $se_trusted_credman_access_name = "SeTrustedCredManAccessPrivilege"
Global Const $se_unsolicited_input_name = "SeUnsolicitedInputPrivilege"
Global Const $se_undock_name = "SeUndockPrivilege"
Global Const $se_privilege_enabled_by_default = 1
Global Const $se_privilege_enabled = 2
Global Const $se_privilege_removed = 4
Global Const $se_privilege_used_for_access = -2147483648
Global Const $se_group_mandatory = 1
Global Const $se_group_enabled_by_default = 2
Global Const $se_group_enabled = 4
Global Const $se_group_owner = 8
Global Const $se_group_use_for_deny_only = 16
Global Const $se_group_integrity = 32
Global Const $se_group_integrity_enabled = 64
Global Const $se_group_resource = 536870912
Global Const $se_group_logon_id = -1073741824
Global Enum $tokenprimary = 1, $tokenimpersonation
Global Enum $securityanonymous = 0, $securityidentification, $securityimpersonation, $securitydelegation
Global Enum $tokenuser = 1, $tokengroups, $tokenprivileges, $tokenowner, $tokenprimarygroup, $tokendefaultdacl, $tokensource, $tokentype, $tokenimpersonationlevel, $tokenstatistics, $tokenrestrictedsids, $tokensessionid, $tokengroupsandprivileges, $tokensessionreference, $tokensandboxinert, $tokenauditpolicy, $tokenorigin, $tokenelevationtype, $tokenlinkedtoken, $tokenelevation, $tokenhasrestrictions, $tokenaccessinformation, $tokenvirtualizationallowed, $tokenvirtualizationenabled, $tokenintegritylevel, $tokenuiaccess, $tokenmandatorypolicy, $tokenlogonsid
Global Const $token_assign_primary = 1
Global Const $token_duplicate = 2
Global Const $token_impersonate = 4
Global Const $token_query = 8
Global Const $token_query_source = 16
Global Const $token_adjust_privileges = 32
Global Const $token_adjust_groups = 64
Global Const $token_adjust_default = 128
Global Const $token_adjust_sessionid = 256
Global Const $token_all_access = 983551
Global Const $token_read = 131080
Global Const $token_write = 131296
Global Const $token_execute = 131072
Global Const $token_has_traverse_privilege = 1
Global Const $token_has_backup_privilege = 2
Global Const $token_has_restore_privilege = 4
Global Const $token_has_admin_group = 8
Global Const $token_is_restricted = 16
Global Const $token_session_not_referenced = 32
Global Const $token_sandbox_inert = 64
Global Const $token_has_impersonate_privilege = 128
Global Const $rights_delete = 65536
Global Const $read_control = 131072
Global Const $write_dac = 262144
Global Const $write_owner = 524288
Global Const $synchronize = 1048576
Global Const $access_system_security = 16777216
Global Const $standard_rights_required = 983040
Global Const $standard_rights_read = $read_control
Global Const $standard_rights_write = $read_control
Global Const $standard_rights_execute = $read_control
Global Const $standard_rights_all = 2031616
Global Const $specific_rights_all = 65535
Global Enum $not_used_access = 0, $grant_access, $set_access, $deny_access, $revoke_access, $set_audit_success, $set_audit_failure
Global Enum $trustee_is_unknown = 0, $trustee_is_user, $trustee_is_group, $trustee_is_domain, $trustee_is_alias, $trustee_is_well_known_group, $trustee_is_deleted, $trustee_is_invalid, $trustee_is_computer
Global Const $logon_with_profile = 1
Global Const $logon_netcredentials_only = 2
Global Enum $sidtypeuser = 1, $sidtypegroup, $sidtypedomain, $sidtypealias, $sidtypewellknowngroup, $sidtypedeletedaccount, $sidtypeinvalid, $sidtypeunknown, $sidtypecomputer, $sidtypelabel
Global Const $sid_administrators = "S-1-5-32-544"
Global Const $sid_users = "S-1-5-32-545"
Global Const $sid_guests = "S-1-5-32-546"
Global Const $sid_account_operators = "S-1-5-32-548"
Global Const $sid_server_operators = "S-1-5-32-549"
Global Const $sid_print_operators = "S-1-5-32-550"
Global Const $sid_backup_operators = "S-1-5-32-551"
Global Const $sid_replicator = "S-1-5-32-552"
Global Const $sid_owner = "S-1-3-0"
Global Const $sid_everyone = "S-1-1-0"
Global Const $sid_network = "S-1-5-2"
Global Const $sid_interactive = "S-1-5-4"
Global Const $sid_system = "S-1-5-18"
Global Const $sid_authenticated_users = "S-1-5-11"
Global Const $sid_schannel_authentication = "S-1-5-64-14"
Global Const $sid_digest_authentication = "S-1-5-64-21"
Global Const $sid_nt_service = "S-1-5-80"
Global Const $sid_untrusted_mandatory_level = "S-1-16-0"
Global Const $sid_low_mandatory_level = "S-1-16-4096"
Global Const $sid_medium_mandatory_level = "S-1-16-8192"
Global Const $sid_medium_plus_mandatory_level = "S-1-16-8448"
Global Const $sid_high_mandatory_level = "S-1-16-12288"
Global Const $sid_system_mandatory_level = "S-1-16-16384"
Global Const $sid_protected_process_mandatory_level = "S-1-16-20480"
Global Const $sid_secure_process_mandatory_level = "S-1-16-28672"
Global Const $sid_all_services = "S-1-5-80-0"

Func _winapi_getlasterror(Const $_icurrenterror = @error, Const $_icurrentextended = @extended)
	Local $aresult = DllCall("kernel32.dll", "dword", "GetLastError")
	Return SetError($_icurrenterror, $_icurrentextended, $aresult[0])
EndFunc

Func _winapi_setlasterror($ierrorcode, Const $_icurrenterror = @error, Const $_icurrentextended = @extended)
	DllCall("kernel32.dll", "none", "SetLastError", "dword", $ierrorcode)
	Return SetError($_icurrenterror, $_icurrentextended, NULL )
EndFunc

Func __comerrorformating($ocomerror, $sprefix = @TAB)
	Local Const $str_striptrailing = 2
	Local $serror = "COM Error encountered in " & @ScriptName & " (" & $ocomerror.scriptline & ") :" & @CRLF & $sprefix & "Number        " & @TAB & "= 0x" & Hex($ocomerror.number, 8) & " (" & $ocomerror.number & ")" & @CRLF & $sprefix & "WinDescription" & @TAB & "= " & StringStripWS($ocomerror.windescription, $str_striptrailing) & @CRLF & $sprefix & "Description   " & @TAB & "= " & StringStripWS($ocomerror.description, $str_striptrailing) & @CRLF & $sprefix & "Source        " & @TAB & "= " & $ocomerror.source & @CRLF & $sprefix & "HelpFile      " & @TAB & "= " & $ocomerror.helpfile & @CRLF & $sprefix & "HelpContext   " & @TAB & "= " & $ocomerror.helpcontext & @CRLF & $sprefix & "LastDllError  " & @TAB & "= " & $ocomerror.lastdllerror & @CRLF & $sprefix & "Retcode       " & @TAB & "= 0x" & Hex($ocomerror.retcode)
	Return $serror
EndFunc

Func _security__adjusttokenprivileges($htoken, $bdisableall, $tnewstate, $ibufferlen, $tprevstate = 0, $prequired = 0)
	Local $acall = DllCall("advapi32.dll", "bool", "AdjustTokenPrivileges", "handle", $htoken, "bool", $bdisableall, "struct*", $tnewstate, "dword", $ibufferlen, "struct*", $tprevstate, "struct*", $prequired)
	If @error Then Return SetError(@error, @extended, False)
	Return NOT ($acall[0] = 0)
EndFunc

Func _security__createprocesswithtoken($htoken, $ilogonflags, $scommandline, $icreationflags, $scurdir, $tstartupinfo, $tprocess_information)
	Local $acall = DllCall("advapi32.dll", "bool", "CreateProcessWithTokenW", "handle", $htoken, "dword", $ilogonflags, "ptr", 0, "wstr", $scommandline, "dword", $icreationflags, "struct*", 0, "wstr", $scurdir, "struct*", $tstartupinfo, "struct*", $tprocess_information)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, False)
	Return True
EndFunc

Func _security__duplicatetokenex($hexistingtoken, $idesiredaccess, $iimpersonationlevel, $itokentype)
	Local $acall = DllCall("advapi32.dll", "bool", "DuplicateTokenEx", "handle", $hexistingtoken, "dword", $idesiredaccess, "struct*", 0, "int", $iimpersonationlevel, "int", $itokentype, "handle*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Return $acall[6]
EndFunc

Func _security__getaccountsid($saccount, $ssystem = "")
	Local $aacct = _security__lookupaccountname($saccount, $ssystem)
	If @error Then Return SetError(@error, @extended, 0)
	If IsArray($aacct) Then Return _security__stringsidtosid($aacct[0])
	Return ""
EndFunc

Func _security__getlengthsid($psid)
	If NOT _security__isvalidsid($psid) Then Return SetError(@error + 10, @extended, 0)
	Local $acall = DllCall("advapi32.dll", "dword", "GetLengthSid", "struct*", $psid)
	If @error Then Return SetError(@error, @extended, 0)
	Return $acall[0]
EndFunc

Func _security__gettokeninformation($htoken, $iclass)
	Local $acall = DllCall("advapi32.dll", "bool", "GetTokenInformation", "handle", $htoken, "int", $iclass, "struct*", 0, "dword", 0, "dword*", 0)
	If @error OR NOT $acall[5] Then Return SetError(@error + 10, @extended, 0)
	Local $ilen = $acall[5]
	Local $tbuffer = DllStructCreate("byte[" & $ilen & "]")
	$acall = DllCall("advapi32.dll", "bool", "GetTokenInformation", "handle", $htoken, "int", $iclass, "struct*", $tbuffer, "dword", DllStructGetSize($tbuffer), "dword*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Return $tbuffer
EndFunc

Func _security__impersonateself($ilevel = $securityimpersonation)
	Local $acall = DllCall("advapi32.dll", "bool", "ImpersonateSelf", "int", $ilevel)
	If @error Then Return SetError(@error, @extended, False)
	Return NOT ($acall[0] = 0)
EndFunc

Func _security__isvalidsid($psid)
	Local $acall = DllCall("advapi32.dll", "bool", "IsValidSid", "struct*", $psid)
	If @error Then Return SetError(@error, @extended, False)
	Return NOT ($acall[0] = 0)
EndFunc

Func _security__lookupaccountname($saccount, $ssystem = "")
	Local $tdata = DllStructCreate("byte SID[256]")
	Local $acall = DllCall("advapi32.dll", "bool", "LookupAccountNameW", "wstr", $ssystem, "wstr", $saccount, "struct*", $tdata, "dword*", DllStructGetSize($tdata), "wstr", "", "dword*", DllStructGetSize($tdata), "int*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Local $aacct[3]
	$aacct[0] = _security__sidtostringsid(DllStructGetPtr($tdata, "SID"))
	$aacct[1] = $acall[5]
	$aacct[2] = $acall[7]
	Return $aacct
EndFunc

Func _security__lookupaccountsid($vsid, $ssystem = "")
	Local $psid, $aacct[3]
	If IsString($vsid) Then
		$psid = _security__stringsidtosid($vsid)
	Else
		$psid = $vsid
	EndIf
	If NOT _security__isvalidsid($psid) Then Return SetError(@error + 10, @extended, 0)
	Local $stypesystem = "ptr"
	If $ssystem Then $stypesystem = "wstr"
	Local $acall = DllCall("advapi32.dll", "bool", "LookupAccountSidW", $stypesystem, $ssystem, "struct*", $psid, "wstr", "", "dword*", 65536, "wstr", "", "dword*", 65536, "int*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Local $aacct[3]
	$aacct[0] = $acall[3]
	$aacct[1] = $acall[5]
	$aacct[2] = $acall[7]
	Return $aacct
EndFunc

Func _security__lookupprivilegevalue($ssystem, $sname)
	Local $acall = DllCall("advapi32.dll", "bool", "LookupPrivilegeValueW", "wstr", $ssystem, "wstr", $sname, "int64*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Return $acall[3]
EndFunc

Func _security__openprocesstoken($hprocess, $iaccess)
	Local $acall = DllCall("advapi32.dll", "bool", "OpenProcessToken", "handle", $hprocess, "dword", $iaccess, "handle*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Return $acall[3]
EndFunc

Func _security__openthreadtoken($iaccess, $hthread = 0, $bopenasself = False)
	If $hthread = 0 Then
		Local $aresult = DllCall("kernel32.dll", "handle", "GetCurrentThread")
		If @error Then Return SetError(@error + 10, @extended, 0)
		$hthread = $aresult[0]
	EndIf
	Local $acall = DllCall("advapi32.dll", "bool", "OpenThreadToken", "handle", $hthread, "dword", $iaccess, "bool", $bopenasself, "handle*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Return $acall[4]
EndFunc

Func _security__openthreadtokenex($iaccess, $hthread = 0, $bopenasself = False)
	Local $htoken = _security__openthreadtoken($iaccess, $hthread, $bopenasself)
	If $htoken = 0 Then
		Local Const $error_no_token = 1008
		If _winapi_getlasterror() <> $error_no_token Then Return SetError(20, _winapi_getlasterror(), 0)
		If NOT _security__impersonateself() Then Return SetError(@error + 10, _winapi_getlasterror(), 0)
		$htoken = _security__openthreadtoken($iaccess, $hthread, $bopenasself)
		If $htoken = 0 Then Return SetError(@error, _winapi_getlasterror(), 0)
	EndIf
	Return $htoken
EndFunc

Func _security__setprivilege($htoken, $sprivilege, $benable)
	Local $iluid = _security__lookupprivilegevalue("", $sprivilege)
	If $iluid = 0 Then Return SetError(@error + 10, @extended, False)
	Local Const $tagtoken_privileges = "dword Count;align 4;int64 LUID;dword Attributes"
	Local $tcurrstate = DllStructCreate($tagtoken_privileges)
	Local $icurrstate = DllStructGetSize($tcurrstate)
	Local $tprevstate = DllStructCreate($tagtoken_privileges)
	Local $iprevstate = DllStructGetSize($tprevstate)
	Local $trequired = DllStructCreate("int Data")
	DllStructSetData($tcurrstate, "Count", 1)
	DllStructSetData($tcurrstate, "LUID", $iluid)
	If NOT _security__adjusttokenprivileges($htoken, False, $tcurrstate, $icurrstate, $tprevstate, $trequired) Then Return SetError(2, @error, False)
	DllStructSetData($tprevstate, "Count", 1)
	DllStructSetData($tprevstate, "LUID", $iluid)
	Local $iattributes = DllStructGetData($tprevstate, "Attributes")
	If $benable Then
		$iattributes = BitOR($iattributes, $se_privilege_enabled)
	Else
		$iattributes = BitAND($iattributes, BitNOT($se_privilege_enabled))
	EndIf
	DllStructSetData($tprevstate, "Attributes", $iattributes)
	If NOT _security__adjusttokenprivileges($htoken, False, $tprevstate, $iprevstate, $tcurrstate, $trequired) Then Return SetError(3, @error, False)
	Return True
EndFunc

Func _security__settokeninformation($htoken, $itokeninformation, $vtokeninformation, $itokeninformationlength)
	Local $acall = DllCall("advapi32.dll", "bool", "SetTokenInformation", "handle", $htoken, "int", $itokeninformation, "struct*", $vtokeninformation, "dword", $itokeninformationlength)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, False)
	Return True
EndFunc

Func _security__sidtostringsid($psid)
	If NOT _security__isvalidsid($psid) Then Return SetError(@error + 10, 0, "")
	Local $acall = DllCall("advapi32.dll", "bool", "ConvertSidToStringSidW", "struct*", $psid, "ptr*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, "")
	Local $pstringsid = $acall[2]
	Local $alen = DllCall("kernel32.dll", "int", "lstrlenW", "struct*", $pstringsid)
	Local $ssid = DllStructGetData(DllStructCreate("wchar Text[" & $alen[0] + 1 & "]", $pstringsid), "Text")
	DllCall("kernel32.dll", "handle", "LocalFree", "handle", $pstringsid)
	Return $ssid
EndFunc

Func _security__sidtypestr($itype)
	Switch $itype
		Case $sidtypeuser
			Return "User"
		Case $sidtypegroup
			Return "Group"
		Case $sidtypedomain
			Return "Domain"
		Case $sidtypealias
			Return "Alias"
		Case $sidtypewellknowngroup
			Return "Well Known Group"
		Case $sidtypedeletedaccount
			Return "Deleted Account"
		Case $sidtypeinvalid
			Return "Invalid"
		Case $sidtypeunknown
			Return "Unknown Type"
		Case $sidtypecomputer
			Return "Computer"
		Case $sidtypelabel
			Return "A mandatory integrity label SID"
		Case Else
			Return "Unknown SID Type"
	EndSwitch
EndFunc

Func _security__stringsidtosid($ssid)
	Local $acall = DllCall("advapi32.dll", "bool", "ConvertStringSidToSidW", "wstr", $ssid, "ptr*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Local $psid = $acall[2]
	Local $tbuffer = DllStructCreate("byte Data[" & _security__getlengthsid($psid) & "]", $psid)
	Local $tsid = DllStructCreate("byte Data[" & DllStructGetSize($tbuffer) & "]")
	DllStructSetData($tsid, "Data", DllStructGetData($tbuffer, "Data"))
	DllCall("kernel32.dll", "handle", "LocalFree", "handle", $psid)
	Return $tsid
EndFunc

Global Const $tagpoint = "struct;long X;long Y;endstruct"
Global Const $tagrect = "struct;long Left;long Top;long Right;long Bottom;endstruct"
Global Const $tagsize = "struct;long X;long Y;endstruct"
Global Const $tagmargins = "int cxLeftWidth;int cxRightWidth;int cyTopHeight;int cyBottomHeight"
Global Const $tagfiletime = "struct;dword Lo;dword Hi;endstruct"
Global Const $tagsystemtime = "struct;word Year;word Month;word Dow;word Day;word Hour;word Minute;word Second;word MSeconds;endstruct"
Global Const $tagtime_zone_information = "struct;long Bias;wchar StdName[32];word StdDate[8];long StdBias;wchar DayName[32];word DayDate[8];long DayBias;endstruct"
Global Const $tagnmhdr = "struct;hwnd hWndFrom;uint_ptr IDFrom;INT Code;endstruct"
Global Const $tagcomboboxexitem = "uint Mask;int_ptr Item;ptr Text;int TextMax;int Image;int SelectedImage;int OverlayImage;" & "int Indent;lparam Param"
Global Const $tagnmcbedragbegin = $tagnmhdr & ";int ItemID;wchar szText[260]"
Global Const $tagnmcbeendedit = $tagnmhdr & ";bool fChanged;int NewSelection;wchar szText[260];int Why"
Global Const $tagnmcomboboxex = $tagnmhdr & ";uint Mask;int_ptr Item;ptr Text;int TextMax;int Image;" & "int SelectedImage;int OverlayImage;int Indent;lparam Param"
Global Const $tagdtprange = "word MinYear;word MinMonth;word MinDOW;word MinDay;word MinHour;word MinMinute;" & "word MinSecond;word MinMSecond;word MaxYear;word MaxMonth;word MaxDOW;word MaxDay;word MaxHour;" & "word MaxMinute;word MaxSecond;word MaxMSecond;bool MinValid;bool MaxValid"
Global Const $tagnmdatetimechange = $tagnmhdr & ";dword Flag;" & $tagsystemtime
Global Const $tagnmdatetimeformat = $tagnmhdr & ";ptr Format;" & $tagsystemtime & ";ptr pDisplay;wchar Display[64]"
Global Const $tagnmdatetimeformatquery = $tagnmhdr & ";ptr Format;struct;long SizeX;long SizeY;endstruct"
Global Const $tagnmdatetimekeydown = $tagnmhdr & ";int VirtKey;ptr Format;" & $tagsystemtime
Global Const $tagnmdatetimestring = $tagnmhdr & ";ptr UserString;" & $tagsystemtime & ";dword Flags"
Global Const $tageventlogrecord = "dword Length;dword Reserved;dword RecordNumber;dword TimeGenerated;dword TimeWritten;dword EventID;" & "word EventType;word NumStrings;word EventCategory;word ReservedFlags;dword ClosingRecordNumber;dword StringOffset;" & "dword UserSidLength;dword UserSidOffset;dword DataLength;dword DataOffset"
Global Const $taggdip_effectparams_blur = "float Radius; bool ExpandEdge"
Global Const $taggdip_effectparams_brightnesscontrast = "int BrightnessLevel; int ContrastLevel"
Global Const $taggdip_effectparams_colorbalance = "int CyanRed; int MagentaGreen; int YellowBlue"
Global Const $taggdip_effectparams_colorcurve = "int Adjustment; int Channel; int AdjustValue"
Global Const $taggdip_effectparams_colorlut = "byte LutB[256]; byte LutG[256]; byte LutR[256]; byte LutA[256]"
Global Const $taggdip_effectparams_huesaturationlightness = "int HueLevel; int SaturationLevel; int LightnessLevel"
Global Const $taggdip_effectparams_levels = "int Highlight; int Midtone; int Shadow"
Global Const $taggdip_effectparams_redeyecorrection = "uint NumberOfAreas; ptr Areas"
Global Const $taggdip_effectparams_sharpen = "float Radius; float Amount"
Global Const $taggdip_effectparams_tint = "int Hue; int Amount"
Global Const $taggdipbitmapdata = "uint Width;uint Height;int Stride;int Format;ptr Scan0;uint_ptr Reserved"
Global Const $taggdipcolormatrix = "float m[25]"
Global Const $taggdipencoderparam = "struct;byte GUID[16];ulong NumberOfValues;ulong Type;ptr Values;endstruct"
Global Const $taggdipencoderparams = "uint Count;" & $taggdipencoderparam
Global Const $taggdiprectf = "struct;float X;float Y;float Width;float Height;endstruct"
Global Const $taggdipstartupinput = "uint Version;ptr Callback;bool NoThread;bool NoCodecs"
Global Const $taggdipstartupoutput = "ptr HookProc;ptr UnhookProc"
Global Const $taggdipimagecodecinfo = "byte CLSID[16];byte FormatID[16];ptr CodecName;ptr DllName;ptr FormatDesc;ptr FileExt;" & "ptr MimeType;dword Flags;dword Version;dword SigCount;dword SigSize;ptr SigPattern;ptr SigMask"
Global Const $taggdippencoderparams = "uint Count;byte Params[1]"
Global Const $taghditem = "uint Mask;int XY;ptr Text;handle hBMP;int TextMax;int Fmt;lparam Param;int Image;int Order;uint Type;ptr pFilter;uint State"
Global Const $tagnmhddispinfo = $tagnmhdr & ";int Item;uint Mask;ptr Text;int TextMax;int Image;lparam lParam"
Global Const $tagnmhdfilterbtnclick = $tagnmhdr & ";int Item;" & $tagrect
Global Const $tagnmheader = $tagnmhdr & ";int Item;int Button;ptr pItem"
Global Const $taggetipaddress = "byte Field4;byte Field3;byte Field2;byte Field1"
Global Const $tagnmipaddress = $tagnmhdr & ";int Field;int Value"
Global Const $taglvfindinfo = "struct;uint Flags;ptr Text;lparam Param;" & $tagpoint & ";uint Direction;endstruct"
Global Const $taglvhittestinfo = $tagpoint & ";uint Flags;int Item;int SubItem;int iGroup"
Global Const $taglvitem = "struct;uint Mask;int Item;int SubItem;uint State;uint StateMask;ptr Text;int TextMax;int Image;lparam Param;" & "int Indent;int GroupID;uint Columns;ptr pColumns;ptr piColFmt;int iGroup;endstruct"
Global Const $tagnmlistview = $tagnmhdr & ";int Item;int SubItem;uint NewState;uint OldState;uint Changed;" & "struct;long ActionX;long ActionY;endstruct;lparam Param"
Global Const $tagnmlvcustomdraw = "struct;" & $tagnmhdr & ";dword dwDrawStage;handle hdc;" & $tagrect & ";dword_ptr dwItemSpec;uint uItemState;lparam lItemlParam;endstruct" & ";dword clrText;dword clrTextBk;int iSubItem;dword dwItemType;dword clrFace;int iIconEffect;" & "int iIconPhase;int iPartID;int iStateID;struct;long TextLeft;long TextTop;long TextRight;long TextBottom;endstruct;uint uAlign"
Global Const $tagnmlvdispinfo = $tagnmhdr & ";" & $taglvitem
Global Const $tagnmlvfinditem = $tagnmhdr & ";int Start;" & $taglvfindinfo
Global Const $tagnmlvgetinfotip = $tagnmhdr & ";dword Flags;ptr Text;int TextMax;int Item;int SubItem;lparam lParam"
Global Const $tagnmitemactivate = $tagnmhdr & ";int Index;int SubItem;uint NewState;uint OldState;uint Changed;" & $tagpoint & ";lparam lParam;uint KeyFlags"
Global Const $tagnmlvkeydown = "align 1;" & $tagnmhdr & ";word VKey;uint Flags"
Global Const $tagnmlvscroll = $tagnmhdr & ";int DX;int DY"
Global Const $tagmchittestinfo = "uint Size;" & $tagpoint & ";uint Hit;" & $tagsystemtime & ";" & $tagrect & ";int iOffset;int iRow;int iCol"
Global Const $tagmcmonthrange = "word MinYear;word MinMonth;word MinDOW;word MinDay;word MinHour;word MinMinute;word MinSecond;" & "word MinMSeconds;word MaxYear;word MaxMonth;word MaxDOW;word MaxDay;word MaxHour;word MaxMinute;word MaxSecond;" & "word MaxMSeconds;short Span"
Global Const $tagmcrange = "word MinYear;word MinMonth;word MinDOW;word MinDay;word MinHour;word MinMinute;word MinSecond;" & "word MinMSeconds;word MaxYear;word MaxMonth;word MaxDOW;word MaxDay;word MaxHour;word MaxMinute;word MaxSecond;" & "word MaxMSeconds;short MinSet;short MaxSet"
Global Const $tagmcselrange = "word MinYear;word MinMonth;word MinDOW;word MinDay;word MinHour;word MinMinute;word MinSecond;" & "word MinMSeconds;word MaxYear;word MaxMonth;word MaxDOW;word MaxDay;word MaxHour;word MaxMinute;word MaxSecond;" & "word MaxMSeconds"
Global Const $tagnmdaystate = $tagnmhdr & ";" & $tagsystemtime & ";int DayState;ptr pDayState"
Global Const $tagnmselchange = $tagnmhdr & ";struct;word BegYear;word BegMonth;word BegDOW;word BegDay;word BegHour;word BegMinute;word BegSecond;word BegMSeconds;endstruct;" & "struct;word EndYear;word EndMonth;word EndDOW;word EndDay;word EndHour;word EndMinute;word EndSecond;word EndMSeconds;endstruct"
Global Const $tagnmobjectnotify = $tagnmhdr & ";int Item;ptr piid;ptr pObject;long Result;dword dwFlags"
Global Const $tagnmtckeydown = "align 1;" & $tagnmhdr & ";word VKey;uint Flags"
Global Const $tagtvitem = "struct;uint Mask;handle hItem;uint State;uint StateMask;ptr Text;int TextMax;int Image;int SelectedImage;" & "int Children;lparam Param;endstruct"
Global Const $tagtvitemex = "struct;" & $tagtvitem & ";int Integral;uint uStateEx;hwnd hwnd;int iExpandedImage;int iReserved;endstruct"
Global Const $tagnmtreeview = $tagnmhdr & ";uint Action;" & "struct;uint OldMask;handle OldhItem;uint OldState;uint OldStateMask;" & "ptr OldText;int OldTextMax;int OldImage;int OldSelectedImage;int OldChildren;lparam OldParam;endstruct;" & "struct;uint NewMask;handle NewhItem;uint NewState;uint NewStateMask;" & "ptr NewText;int NewTextMax;int NewImage;int NewSelectedImage;int NewChildren;lparam NewParam;endstruct;" & "struct;long PointX;long PointY;endstruct"
Global Const $tagnmtvcustomdraw = "struct;" & $tagnmhdr & ";dword DrawStage;handle HDC;" & $tagrect & ";dword_ptr ItemSpec;uint ItemState;lparam ItemParam;endstruct" & ";dword ClrText;dword ClrTextBk;int Level"
Global Const $tagnmtvdispinfo = $tagnmhdr & ";" & $tagtvitem
Global Const $tagnmtvgetinfotip = $tagnmhdr & ";ptr Text;int TextMax;handle hItem;lparam lParam"
Global Const $tagnmtvitemchange = $tagnmhdr & ";uint Changed;handle hItem;uint StateNew;uint StateOld;lparam lParam;"
Global Const $tagtvhittestinfo = $tagpoint & ";uint Flags;handle Item"
Global Const $tagnmtvkeydown = "align 1;" & $tagnmhdr & ";word VKey;uint Flags"
Global Const $tagnmmouse = $tagnmhdr & ";dword_ptr ItemSpec;dword_ptr ItemData;" & $tagpoint & ";lparam HitInfo"
Global Const $tagtoken_privileges = "dword Count;align 4;int64 LUID;dword Attributes"
Global Const $tagimageinfo = "handle hBitmap;handle hMask;int Unused1;int Unused2;" & $tagrect
Global Const $tagmenuinfo = "dword Size;INT Mask;dword Style;uint YMax;handle hBack;dword ContextHelpID;ulong_ptr MenuData"
Global Const $tagmenuiteminfo = "uint Size;uint Mask;uint Type;uint State;uint ID;handle SubMenu;handle BmpChecked;handle BmpUnchecked;" & "ulong_ptr ItemData;ptr TypeData;uint CCH;handle BmpItem"
Global Const $tagrebarbandinfo = "uint cbSize;uint fMask;uint fStyle;dword clrFore;dword clrBack;ptr lpText;uint cch;" & "int iImage;hwnd hwndChild;uint cxMinChild;uint cyMinChild;uint cx;handle hbmBack;uint wID;uint cyChild;uint cyMaxChild;" & "uint cyIntegral;uint cxIdeal;lparam lParam;uint cxHeader" & ((@OSVersion = "WIN_XP") ? "" : ";" & $tagrect & ";uint uChevronState")
Global Const $tagnmrebarautobreak = $tagnmhdr & ";uint uBand;uint wID;lparam lParam;uint uMsg;uint fStyleCurrent;bool fAutoBreak"
Global Const $tagnmrbautosize = $tagnmhdr & ";bool fChanged;" & "struct;long TargetLeft;long TargetTop;long TargetRight;long TargetBottom;endstruct;" & "struct;long ActualLeft;long ActualTop;long ActualRight;long ActualBottom;endstruct"
Global Const $tagnmrebar = $tagnmhdr & ";dword dwMask;uint uBand;uint fStyle;uint wID;lparam lParam"
Global Const $tagnmrebarchevron = $tagnmhdr & ";uint uBand;uint wID;lparam lParam;" & $tagrect & ";lparam lParamNM"
Global Const $tagnmrebarchildsize = $tagnmhdr & ";uint uBand;uint wID;" & "struct;long CLeft;long CTop;long CRight;long CBottom;endstruct;" & "struct;long BLeft;long BTop;long BRight;long BBottom;endstruct"
Global Const $tagcolorscheme = "dword Size;dword BtnHighlight;dword BtnShadow"
Global Const $tagnmtoolbar = $tagnmhdr & ";int iItem;" & "struct;int iBitmap;int idCommand;byte fsState;byte fsStyle;dword_ptr dwData;int_ptr iString;endstruct" & ";int cchText;ptr pszText;" & $tagrect
Global Const $tagnmtbhotitem = $tagnmhdr & ";int idOld;int idNew;dword dwFlags"
Global Const $tagtbbutton = "int Bitmap;int Command;byte State;byte Style;dword_ptr Param;int_ptr String"
Global Const $tagtbbuttoninfo = "uint Size;dword Mask;int Command;int Image;byte State;byte Style;word CX;dword_ptr Param;ptr Text;int TextMax"
Global Const $tagnetresource = "dword Scope;dword Type;dword DisplayType;dword Usage;ptr LocalName;ptr RemoteName;ptr Comment;ptr Provider"
Global Const $tagoverlapped = "ulong_ptr Internal;ulong_ptr InternalHigh;struct;dword Offset;dword OffsetHigh;endstruct;handle hEvent"
Global Const $tagopenfilename = "dword StructSize;hwnd hwndOwner;handle hInstance;ptr lpstrFilter;ptr lpstrCustomFilter;" & "dword nMaxCustFilter;dword nFilterIndex;ptr lpstrFile;dword nMaxFile;ptr lpstrFileTitle;dword nMaxFileTitle;" & "ptr lpstrInitialDir;ptr lpstrTitle;dword Flags;word nFileOffset;word nFileExtension;ptr lpstrDefExt;lparam lCustData;" & "ptr lpfnHook;ptr lpTemplateName;ptr pvReserved;dword dwReserved;dword FlagsEx"
Global Const $tagbitmapinfoheader = "struct;dword biSize;long biWidth;long biHeight;word biPlanes;word biBitCount;" & "dword biCompression;dword biSizeImage;long biXPelsPerMeter;long biYPelsPerMeter;dword biClrUsed;dword biClrImportant;endstruct"
Global Const $tagbitmapinfo = $tagbitmapinfoheader & ";dword biRGBQuad[1]"
Global Const $tagblendfunction = "byte Op;byte Flags;byte Alpha;byte Format"
Global Const $tagguid = "struct;ulong Data1;ushort Data2;ushort Data3;byte Data4[8];endstruct"
Global Const $tagwindowplacement = "uint length;uint flags;uint showCmd;long ptMinPosition[2];long ptMaxPosition[2];long rcNormalPosition[4]"
Global Const $tagwindowpos = "hwnd hWnd;hwnd InsertAfter;int X;int Y;int CX;int CY;uint Flags"
Global Const $tagscrollinfo = "uint cbSize;uint fMask;int nMin;int nMax;uint nPage;int nPos;int nTrackPos"
Global Const $tagscrollbarinfo = "dword cbSize;" & $tagrect & ";int dxyLineButton;int xyThumbTop;" & "int xyThumbBottom;int reserved;dword rgstate[6]"
Global Const $taglogfont = "struct;long Height;long Width;long Escapement;long Orientation;long Weight;byte Italic;byte Underline;" & "byte Strikeout;byte CharSet;byte OutPrecision;byte ClipPrecision;byte Quality;byte PitchAndFamily;wchar FaceName[32];endstruct"
Global Const $tagkbdllhookstruct = "dword vkCode;dword scanCode;dword flags;dword time;ulong_ptr dwExtraInfo"
Global Const $tagprocess_information = "handle hProcess;handle hThread;dword ProcessID;dword ThreadID"
Global Const $tagstartupinfo = "dword Size;ptr Reserved1;ptr Desktop;ptr Title;dword X;dword Y;dword XSize;dword YSize;dword XCountChars;" & "dword YCountChars;dword FillAttribute;dword Flags;word ShowWindow;word Reserved2;ptr Reserved3;handle StdInput;" & "handle StdOutput;handle StdError"
Global Const $tagsecurity_attributes = "dword Length;ptr Descriptor;bool InheritHandle"
Global Const $tagwin32_find_data = "dword dwFileAttributes;dword ftCreationTime[2];dword ftLastAccessTime[2];dword ftLastWriteTime[2];dword nFileSizeHigh;dword nFileSizeLow;dword dwReserved0;dword dwReserved1;wchar cFileName[260];wchar cAlternateFileName[14]"
Global Const $tagtextmetric = "long tmHeight;long tmAscent;long tmDescent;long tmInternalLeading;long tmExternalLeading;" & "long tmAveCharWidth;long tmMaxCharWidth;long tmWeight;long tmOverhang;long tmDigitizedAspectX;long tmDigitizedAspectY;" & "wchar tmFirstChar;wchar tmLastChar;wchar tmDefaultChar;wchar tmBreakChar;byte tmItalic;byte tmUnderlined;byte tmStruckOut;" & "byte tmPitchAndFamily;byte tmCharSet"
Global Const $tagmemmap = "handle hProc;ulong_ptr Size;ptr Mem"

Func _memfree(ByRef $tmemmap)
	Local $pmemory = DllStructGetData($tmemmap, "Mem")
	Local $hprocess = DllStructGetData($tmemmap, "hProc")
	Local $bresult = _memvirtualfreeex($hprocess, $pmemory, 0, $mem_release)
	DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hprocess)
	If @error Then Return SetError(@error, @extended, False)
	Return $bresult
EndFunc

Func _memglobalalloc($ibytes, $iflags = 0)
	Local $aresult = DllCall("kernel32.dll", "handle", "GlobalAlloc", "uint", $iflags, "ulong_ptr", $ibytes)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _memglobalfree($hmemory)
	Local $aresult = DllCall("kernel32.dll", "ptr", "GlobalFree", "handle", $hmemory)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _memgloballock($hmemory)
	Local $aresult = DllCall("kernel32.dll", "ptr", "GlobalLock", "handle", $hmemory)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _memglobalsize($hmemory)
	Local $aresult = DllCall("kernel32.dll", "ulong_ptr", "GlobalSize", "handle", $hmemory)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _memglobalunlock($hmemory)
	Local $aresult = DllCall("kernel32.dll", "bool", "GlobalUnlock", "handle", $hmemory)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _meminit($hwnd, $isize, ByRef $tmemmap)
	Local $aresult = DllCall("user32.dll", "dword", "GetWindowThreadProcessId", "hwnd", $hwnd, "dword*", 0)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Local $iprocessid = $aresult[2]
	If $iprocessid = 0 Then Return SetError(1, 0, 0)
	Local $iaccess = BitOR($process_vm_operation, $process_vm_read, $process_vm_write)
	Local $hprocess = __mem_openprocess($iaccess, False, $iprocessid, True)
	Local $ialloc = BitOR($mem_reserve, $mem_commit)
	Local $pmemory = _memvirtualallocex($hprocess, 0, $isize, $ialloc, $page_readwrite)
	If $pmemory = 0 Then Return SetError(2, 0, 0)
	$tmemmap = DllStructCreate($tagmemmap)
	DllStructSetData($tmemmap, "hProc", $hprocess)
	DllStructSetData($tmemmap, "Size", $isize)
	DllStructSetData($tmemmap, "Mem", $pmemory)
	Return $pmemory
EndFunc

Func _memmovememory($psource, $pdest, $ilength)
	DllCall("kernel32.dll", "none", "RtlMoveMemory", "struct*", $pdest, "struct*", $psource, "ulong_ptr", $ilength)
	If @error Then Return SetError(@error, @extended)
EndFunc

Func _memread(ByRef $tmemmap, $psrce, $pdest, $isize)
	Local $aresult = DllCall("kernel32.dll", "bool", "ReadProcessMemory", "handle", DllStructGetData($tmemmap, "hProc"), "ptr", $psrce, "struct*", $pdest, "ulong_ptr", $isize, "ulong_ptr*", 0)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _memwrite(ByRef $tmemmap, $psrce, $pdest = 0, $isize = 0, $ssrce = "struct*")
	If $pdest = 0 Then $pdest = DllStructGetData($tmemmap, "Mem")
	If $isize = 0 Then $isize = DllStructGetData($tmemmap, "Size")
	Local $aresult = DllCall("kernel32.dll", "bool", "WriteProcessMemory", "handle", DllStructGetData($tmemmap, "hProc"), "ptr", $pdest, $ssrce, $psrce, "ulong_ptr", $isize, "ulong_ptr*", 0)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _memvirtualalloc($paddress, $isize, $iallocation, $iprotect)
	Local $aresult = DllCall("kernel32.dll", "ptr", "VirtualAlloc", "ptr", $paddress, "ulong_ptr", $isize, "dword", $iallocation, "dword", $iprotect)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _memvirtualallocex($hprocess, $paddress, $isize, $iallocation, $iprotect)
	Local $aresult = DllCall("kernel32.dll", "ptr", "VirtualAllocEx", "handle", $hprocess, "ptr", $paddress, "ulong_ptr", $isize, "dword", $iallocation, "dword", $iprotect)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _memvirtualfree($paddress, $isize, $ifreetype)
	Local $aresult = DllCall("kernel32.dll", "bool", "VirtualFree", "ptr", $paddress, "ulong_ptr", $isize, "dword", $ifreetype)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _memvirtualfreeex($hprocess, $paddress, $isize, $ifreetype)
	Local $aresult = DllCall("kernel32.dll", "bool", "VirtualFreeEx", "handle", $hprocess, "ptr", $paddress, "ulong_ptr", $isize, "dword", $ifreetype)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func __mem_openprocess($iaccess, $binherit, $iprocessid, $bdebugpriv = False)
	Local $aresult = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", $iaccess, "bool", $binherit, "dword", $iprocessid)
	If @error Then Return SetError(@error + 10, @extended, 0)
	If $aresult[0] Then Return $aresult[0]
	If NOT $bdebugpriv Then Return 0
	Local $htoken = _security__openthreadtokenex(BitOR($token_adjust_privileges, $token_query))
	If @error Then Return SetError(@error + 20, @extended, 0)
	_security__setprivilege($htoken, "SeDebugPrivilege", True)
	Local $ierror = @error
	Local $ilasterror = @extended
	Local $iret = 0
	If NOT @error Then
		$aresult = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", $iaccess, "bool", $binherit, "dword", $iprocessid)
		$ierror = @error
		$ilasterror = @extended
		If $aresult[0] Then $iret = $aresult[0]
		_security__setprivilege($htoken, "SeDebugPrivilege", False)
		If @error Then
			$ierror = @error + 30
			$ilasterror = @extended
		EndIf
	Else
		$ierror = @error + 40
	EndIf
	DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $htoken)
	Return SetError($ierror, $ilasterror, $iret)
EndFunc

Func _sendmessage($hwnd, $imsg, $wparam = 0, $lparam = 0, $ireturn = 0, $wparamtype = "wparam", $lparamtype = "lparam", $sreturntype = "lresult")
	Local $aresult = DllCall("user32.dll", $sreturntype, "SendMessageW", "hwnd", $hwnd, "uint", $imsg, $wparamtype, $wparam, $lparamtype, $lparam)
	If @error Then Return SetError(@error, @extended, "")
	If $ireturn >= 0 AND $ireturn <= 4 Then Return $aresult[$ireturn]
	Return $aresult
EndFunc

Func _sendmessagea($hwnd, $imsg, $wparam = 0, $lparam = 0, $ireturn = 0, $wparamtype = "wparam", $lparamtype = "lparam", $sreturntype = "lresult")
	Local $aresult = DllCall("user32.dll", $sreturntype, "SendMessageA", "hwnd", $hwnd, "uint", $imsg, $wparamtype, $wparam, $lparamtype, $lparam)
	If @error Then Return SetError(@error, @extended, "")
	If $ireturn >= 0 AND $ireturn <= 4 Then Return $aresult[$ireturn]
	Return $aresult
EndFunc

Global Const $sbars_sizegrip = 256
Global Const $sbt_tooltips = 2048
Global Const $sbars_tooltips = 2048
Global Const $sbt_sunken = 0
Global Const $sbt_noborders = 256
Global Const $sbt_popout = 512
Global Const $sbt_rtlreading = 1024
Global Const $sbt_notabparsing = 2048
Global Const $sbt_ownerdraw = 4096
Global Const $__statusbarconstant_wm_user = 1024
Global Const $sb_getborders = ($__statusbarconstant_wm_user + 7)
Global Const $sb_geticon = ($__statusbarconstant_wm_user + 20)
Global Const $sb_getparts = ($__statusbarconstant_wm_user + 6)
Global Const $sb_getrect = ($__statusbarconstant_wm_user + 10)
Global Const $sb_gettexta = ($__statusbarconstant_wm_user + 2)
Global Const $sb_gettextw = ($__statusbarconstant_wm_user + 13)
Global Const $sb_gettext = $sb_gettexta
Global Const $sb_gettextlengtha = ($__statusbarconstant_wm_user + 3)
Global Const $sb_gettextlengthw = ($__statusbarconstant_wm_user + 12)
Global Const $sb_gettextlength = $sb_gettextlengtha
Global Const $sb_gettiptexta = ($__statusbarconstant_wm_user + 18)
Global Const $sb_gettiptextw = ($__statusbarconstant_wm_user + 19)
Global Const $sb_getunicodeformat = 8192 + 6
Global Const $sb_issimple = ($__statusbarconstant_wm_user + 14)
Global Const $sb_setbkcolor = 8192 + 1
Global Const $sb_seticon = ($__statusbarconstant_wm_user + 15)
Global Const $sb_setminheight = ($__statusbarconstant_wm_user + 8)
Global Const $sb_setparts = ($__statusbarconstant_wm_user + 4)
Global Const $sb_settexta = ($__statusbarconstant_wm_user + 1)
Global Const $sb_settextw = ($__statusbarconstant_wm_user + 11)
Global Const $sb_settext = $sb_settexta
Global Const $sb_settiptexta = ($__statusbarconstant_wm_user + 16)
Global Const $sb_settiptextw = ($__statusbarconstant_wm_user + 17)
Global Const $sb_setunicodeformat = 8192 + 5
Global Const $sb_simple = ($__statusbarconstant_wm_user + 9)
Global Const $sb_simpleid = 255
Global Const $sbn_first = -880
Global Const $sbn_simplemodechange = $sbn_first + 0
Global Const $hgdi_error = Ptr(-1)
Global Const $invalid_handle_value = Ptr(-1)
Global Const $clr_invalid = -1
Global Const $null_brush = 5
Global Const $null_pen = 8
Global Const $black_brush = 4
Global Const $dkgray_brush = 3
Global Const $dc_brush = 18
Global Const $gray_brush = 2
Global Const $hollow_brush = $null_brush
Global Const $ltgray_brush = 1
Global Const $white_brush = 0
Global Const $black_pen = 7
Global Const $dc_pen = 19
Global Const $white_pen = 6
Global Const $ansi_fixed_font = 11
Global Const $ansi_var_font = 12
Global Const $device_default_font = 14
Global Const $default_gui_font = 17
Global Const $oem_fixed_font = 10
Global Const $system_font = 13
Global Const $system_fixed_font = 16
Global Const $default_palette = 15
Global Const $mb_precomposed = 1
Global Const $mb_composite = 2
Global Const $mb_useglyphchars = 4
Global Const $ulw_alpha = 2
Global Const $ulw_colorkey = 1
Global Const $ulw_opaque = 4
Global Const $ulw_ex_noresize = 8
Global Const $wh_callwndproc = 4
Global Const $wh_callwndprocret = 12
Global Const $wh_cbt = 5
Global Const $wh_debug = 9
Global Const $wh_foregroundidle = 11
Global Const $wh_getmessage = 3
Global Const $wh_journalplayback = 1
Global Const $wh_journalrecord = 0
Global Const $wh_keyboard = 2
Global Const $wh_keyboard_ll = 13
Global Const $wh_mouse = 7
Global Const $wh_mouse_ll = 14
Global Const $wh_msgfilter = -1
Global Const $wh_shell = 10
Global Const $wh_sysmsgfilter = 6
Global Const $wpf_asyncwindowplacement = 4
Global Const $wpf_restoretomaximized = 2
Global Const $wpf_setminposition = 1
Global Const $kf_extended = 256
Global Const $kf_altdown = 8192
Global Const $kf_up = 32768
Global Const $llkhf_extended = BitShift($kf_extended, 8)
Global Const $llkhf_injected = 16
Global Const $llkhf_altdown = BitShift($kf_altdown, 8)
Global Const $llkhf_up = BitShift($kf_up, 8)
Global Const $ofn_allowmultiselect = 512
Global Const $ofn_createprompt = 8192
Global Const $ofn_dontaddtorecent = 33554432
Global Const $ofn_enablehook = 32
Global Const $ofn_enableincludenotify = 4194304
Global Const $ofn_enablesizing = 8388608
Global Const $ofn_enabletemplate = 64
Global Const $ofn_enabletemplatehandle = 128
Global Const $ofn_explorer = 524288
Global Const $ofn_extensiondifferent = 1024
Global Const $ofn_filemustexist = 4096
Global Const $ofn_forceshowhidden = 268435456
Global Const $ofn_hidereadonly = 4
Global Const $ofn_longnames = 2097152
Global Const $ofn_nochangedir = 8
Global Const $ofn_nodereferencelinks = 1048576
Global Const $ofn_nolongnames = 262144
Global Const $ofn_nonetworkbutton = 131072
Global Const $ofn_noreadonlyreturn = 32768
Global Const $ofn_notestfilecreate = 65536
Global Const $ofn_novalidate = 256
Global Const $ofn_overwriteprompt = 2
Global Const $ofn_pathmustexist = 2048
Global Const $ofn_readonly = 1
Global Const $ofn_shareaware = 16384
Global Const $ofn_showhelp = 16
Global Const $ofn_ex_noplacesbar = 1
Global Const $tmpf_fixed_pitch = 1
Global Const $tmpf_vector = 2
Global Const $tmpf_truetype = 4
Global Const $tmpf_device = 8
Global Const $duplicate_close_source = 1
Global Const $duplicate_same_access = 2
Global Const $di_mask = 1
Global Const $di_image = 2
Global Const $di_normal = 3
Global Const $di_compat = 4
Global Const $di_defaultsize = 8
Global Const $di_nomirror = 16
Global Const $display_device_attached_to_desktop = 1
Global Const $display_device_multi_driver = 2
Global Const $display_device_primary_device = 4
Global Const $display_device_mirroring_driver = 8
Global Const $display_device_vga_compatible = 16
Global Const $display_device_removable = 32
Global Const $display_device_disconnect = 33554432
Global Const $display_device_remote = 67108864
Global Const $display_device_modespruned = 134217728
Global Const $flashw_caption = 1
Global Const $flashw_tray = 2
Global Const $flashw_timer = 4
Global Const $flashw_timernofg = 12
Global Const $format_message_allocate_buffer = 256
Global Const $format_message_ignore_inserts = 512
Global Const $format_message_from_string = 1024
Global Const $format_message_from_hmodule = 2048
Global Const $format_message_from_system = 4096
Global Const $format_message_argument_array = 8192
Global Const $gw_hwndfirst = 0
Global Const $gw_hwndlast = 1
Global Const $gw_hwndnext = 2
Global Const $gw_hwndprev = 3
Global Const $gw_owner = 4
Global Const $gw_child = 5
Global Const $gw_enabledpopup = 6
Global Const $gwl_wndproc = -4
Global Const $gwl_hinstance = -6
Global Const $gwl_hwndparent = -8
Global Const $gwl_id = -12
Global Const $gwl_style = -16
Global Const $gwl_exstyle = -20
Global Const $gwl_userdata = -21
Global Const $std_cut = 0
Global Const $std_copy = 1
Global Const $std_paste = 2
Global Const $std_undo = 3
Global Const $std_redow = 4
Global Const $std_delete = 5
Global Const $std_filenew = 6
Global Const $std_fileopen = 7
Global Const $std_filesave = 8
Global Const $std_printpre = 9
Global Const $std_properties = 10
Global Const $std_help = 11
Global Const $std_find = 12
Global Const $std_replace = 13
Global Const $std_print = 14
Global Const $image_bitmap = 0
Global Const $image_icon = 1
Global Const $image_cursor = 2
Global Const $image_enhmetafile = 3
Global Const $kb_sendspecial = 0
Global Const $kb_sendraw = 1
Global Const $kb_capsoff = 0
Global Const $kb_capson = 1
Global Const $dont_resolve_dll_references = 1
Global Const $load_library_as_datafile = 2
Global Const $load_with_altered_search_path = 8
Global Const $load_ignore_code_authz_level = 16
Global Const $load_library_as_datafile_exclusive = 64
Global Const $load_library_as_image_resource = 32
Global Const $load_library_search_application_dir = 512
Global Const $load_library_search_default_dirs = 4096
Global Const $load_library_search_dll_load_dir = 256
Global Const $load_library_search_system32 = 2048
Global Const $load_library_search_user_dirs = 1024
Global Const $s_ok = 0
Global Const $e_abort = -2147467260
Global Const $e_accessdenied = -2147024891
Global Const $e_fail = -2147467259
Global Const $e_handle = -2147024890
Global Const $e_invalidarg = -2147024809
Global Const $e_nointerface = -2147467262
Global Const $e_notimpl = -2147467263
Global Const $e_outofmemory = -2147024882
Global Const $e_pointer = -2147467261
Global Const $e_unexpected = -2147418113
Global Const $lr_defaultcolor = 0
Global Const $lr_monochrome = 1
Global Const $lr_color = 2
Global Const $lr_copyreturnorg = 4
Global Const $lr_copydeleteorg = 8
Global Const $lr_loadfromfile = 16
Global Const $lr_loadtransparent = 32
Global Const $lr_defaultsize = 64
Global Const $lr_vgacolor = 128
Global Const $lr_loadmap3dcolors = 4096
Global Const $lr_createdibsection = 8192
Global Const $lr_copyfromresource = 16384
Global Const $lr_shared = 32768
Global Const $obm_trtype = 32732
Global Const $obm_lfarrowi = 32734
Global Const $obm_rgarrowi = 32735
Global Const $obm_dnarrowi = 32736
Global Const $obm_uparrowi = 32737
Global Const $obm_combo = 32738
Global Const $obm_mnarrow = 32739
Global Const $obm_lfarrowd = 32740
Global Const $obm_rgarrowd = 32741
Global Const $obm_dnarrowd = 32742
Global Const $obm_uparrowd = 32743
Global Const $obm_restored = 32744
Global Const $obm_zoomd = 32745
Global Const $obm_reduced = 32746
Global Const $obm_restore = 32747
Global Const $obm_zoom = 32748
Global Const $obm_reduce = 32749
Global Const $obm_lfarrow = 32750
Global Const $obm_rgarrow = 32751
Global Const $obm_dnarrow = 32752
Global Const $obm_uparrow = 32753
Global Const $obm_close = 32754
Global Const $obm_old_restore = 32755
Global Const $obm_old_zoom = 32756
Global Const $obm_old_reduce = 32757
Global Const $obm_btncorners = 32758
Global Const $obm_checkboxes = 32759
Global Const $obm_check = 32760
Global Const $obm_btsize = 32761
Global Const $obm_old_lfarrow = 32762
Global Const $obm_old_rgarrow = 32763
Global Const $obm_old_dnarrow = 32764
Global Const $obm_old_uparrow = 32765
Global Const $obm_size = 32766
Global Const $obm_old_close = 32767
Global Const $oic_sample = 32512
Global Const $oic_hand = 32513
Global Const $oic_ques = 32514
Global Const $oic_bang = 32515
Global Const $oic_note = 32516
Global Const $oic_winlogo = 32517
Global Const $oic_warning = $oic_bang
Global Const $oic_error = $oic_hand
Global Const $oic_information = $oic_note
Global $__g_ainprocess_winapi[64][2] = [[0, 0]]
Global $__g_awinlist_winapi[64][2] = [[0, 0]]
Global Const $__winapiconstant_wm_setfont = 48
Global Const $__winapiconstant_fw_normal = 400
Global Const $__winapiconstant_default_charset = 1
Global Const $__winapiconstant_out_default_precis = 0
Global Const $__winapiconstant_clip_default_precis = 0
Global Const $__winapiconstant_default_quality = 0
Global Const $__winapiconstant_logpixelsx = 88
Global Const $__winapiconstant_logpixelsy = 90
Global Const $tagcursorinfo = "dword Size;dword Flags;handle hCursor;" & $tagpoint
Global Const $tagdisplay_device = "dword Size;wchar Name[32];wchar String[128];dword Flags;wchar ID[128];wchar Key[128]"
Global Const $tagflashwinfo = "uint Size;hwnd hWnd;dword Flags;uint Count;dword TimeOut"
Global Const $tagiconinfo = "bool Icon;dword XHotSpot;dword YHotSpot;handle hMask;handle hColor"
Global Const $tagmemorystatusex = "dword Length;dword MemoryLoad;" & "uint64 TotalPhys;uint64 AvailPhys;uint64 TotalPageFile;uint64 AvailPageFile;" & "uint64 TotalVirtual;uint64 AvailVirtual;uint64 AvailExtendedVirtual"

Func _winapi_attachconsole($ipid = -1)
	Local $aresult = DllCall("kernel32.dll", "bool", "AttachConsole", "dword", $ipid)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_attachthreadinput($iattach, $iattachto, $battach)
	Local $aresult = DllCall("user32.dll", "bool", "AttachThreadInput", "dword", $iattach, "dword", $iattachto, "bool", $battach)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_beep($ifreq = 500, $iduration = 1000)
	Local $aresult = DllCall("kernel32.dll", "bool", "Beep", "dword", $ifreq, "dword", $iduration)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_bitblt($hdestdc, $ixdest, $iydest, $iwidth, $iheight, $hsrcdc, $ixsrc, $iysrc, $irop)
	Local $aresult = DllCall("gdi32.dll", "bool", "BitBlt", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidth, "int", $iheight, "handle", $hsrcdc, "int", $ixsrc, "int", $iysrc, "dword", $irop)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_callnexthookex($hhook, $icode, $wparam, $lparam)
	Local $aresult = DllCall("user32.dll", "lresult", "CallNextHookEx", "handle", $hhook, "int", $icode, "wparam", $wparam, "lparam", $lparam)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_callwindowproc($pprevwndfunc, $hwnd, $imsg, $wparam, $lparam)
	Local $aresult = DllCall("user32.dll", "lresult", "CallWindowProc", "ptr", $pprevwndfunc, "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_clienttoscreen($hwnd, ByRef $tpoint)
	Local $aret = DllCall("user32.dll", "bool", "ClientToScreen", "hwnd", $hwnd, "struct*", $tpoint)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $tpoint
EndFunc

Func _winapi_closehandle($hobject)
	Local $aresult = DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hobject)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_combinergn($hrgndest, $hrgnsrc1, $hrgnsrc2, $icombinemode)
	Local $aresult = DllCall("gdi32.dll", "int", "CombineRgn", "handle", $hrgndest, "handle", $hrgnsrc1, "handle", $hrgnsrc2, "int", $icombinemode)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_commdlgextendederror()
	Local Const $cderr_dialogfailure = 65535
	Local Const $cderr_findresfailure = 6
	Local Const $cderr_initialization = 2
	Local Const $cderr_loadresfailure = 7
	Local Const $cderr_loadstrfailure = 5
	Local Const $cderr_lockresfailure = 8
	Local Const $cderr_memallocfailure = 9
	Local Const $cderr_memlockfailure = 10
	Local Const $cderr_nohinstance = 4
	Local Const $cderr_nohook = 11
	Local Const $cderr_notemplate = 3
	Local Const $cderr_registermsgfail = 12
	Local Const $cderr_structsize = 1
	Local Const $fnerr_buffertoosmall = 12291
	Local Const $fnerr_invalidfilename = 12290
	Local Const $fnerr_subclassfailure = 12289
	Local $aresult = DllCall("comdlg32.dll", "dword", "CommDlgExtendedError")
	If NOT @error Then
		Switch $aresult[0]
			Case $cderr_dialogfailure
				Return SetError($aresult[0], 0, "The dialog box could not be created." & @LF & "The common dialog box function's call to the DialogBox function failed." & @LF & "For example, this error occurs if the common dialog box call specifies an invalid window handle.")
			Case $cderr_findresfailure
				Return SetError($aresult[0], 0, "The common dialog box function failed to find a specified resource.")
			Case $cderr_initialization
				Return SetError($aresult[0], 0, "The common dialog box function failed during initialization." & @LF & "This error often occurs when sufficient memory is not available.")
			Case $cderr_loadresfailure
				Return SetError($aresult[0], 0, "The common dialog box function failed to load a specified resource.")
			Case $cderr_loadstrfailure
				Return SetError($aresult[0], 0, "The common dialog box function failed to load a specified string.")
			Case $cderr_lockresfailure
				Return SetError($aresult[0], 0, "The common dialog box function failed to lock a specified resource.")
			Case $cderr_memallocfailure
				Return SetError($aresult[0], 0, "The common dialog box function was unable to allocate memory for internal structures.")
			Case $cderr_memlockfailure
				Return SetError($aresult[0], 0, "The common dialog box function was unable to lock the memory associated with a handle.")
			Case $cderr_nohinstance
				Return SetError($aresult[0], 0, "The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the corresponding common dialog box," & @LF & "but you failed to provide a corresponding instance handle.")
			Case $cderr_nohook
				Return SetError($aresult[0], 0, "The ENABLEHOOK flag was set in the Flags member of the initialization structure for the corresponding common dialog box," & @LF & "but you failed to provide a pointer to a corresponding hook procedure.")
			Case $cderr_notemplate
				Return SetError($aresult[0], 0, "The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the corresponding common dialog box," & @LF & "but you failed to provide a corresponding template.")
			Case $cderr_registermsgfail
				Return SetError($aresult[0], 0, "The RegisterWindowMessage function returned an error code when it was called by the common dialog box function.")
			Case $cderr_structsize
				Return SetError($aresult[0], 0, "The lStructSize member of the initialization structure for the corresponding common dialog box is invalid")
			Case $fnerr_buffertoosmall
				Return SetError($aresult[0], 0, "The buffer pointed to by the lpstrFile member of the OPENFILENAME structure is too small for the file name specified by the user." & @LF & "The first two bytes of the lpstrFile buffer contain an integer value specifying the size, in TCHARs, required to receive the full name.")
			Case $fnerr_invalidfilename
				Return SetError($aresult[0], 0, "A file name is invalid.")
			Case $fnerr_subclassfailure
				Return SetError($aresult[0], 0, "An attempt to subclass a list box failed because sufficient memory was not available.")
		EndSwitch
	EndIf
	Return SetError(@error, @extended, "0x" & Hex($aresult[0]))
EndFunc

Func _winapi_copyicon($hicon)
	Local $aresult = DllCall("user32.dll", "handle", "CopyIcon", "handle", $hicon)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createbitmap($iwidth, $iheight, $iplanes = 1, $ibitsperpel = 1, $pbits = 0)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateBitmap", "int", $iwidth, "int", $iheight, "uint", $iplanes, "uint", $ibitsperpel, "struct*", $pbits)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createcompatiblebitmap($hdc, $iwidth, $iheight)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateCompatibleBitmap", "handle", $hdc, "int", $iwidth, "int", $iheight)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createcompatibledc($hdc)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $hdc)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createevent($tattributes = 0, $bmanualreset = True, $binitialstate = True, $sname = "")
	Local $snametype = "wstr"
	If $sname = "" Then
		$sname = 0
		$snametype = "ptr"
	EndIf
	Local $aresult = DllCall("kernel32.dll", "handle", "CreateEventW", "struct*", $tattributes, "bool", $bmanualreset, "bool", $binitialstate, $snametype, $sname)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createfile($sfilename, $icreation, $iaccess = 4, $ishare = 0, $iattributes = 0, $tsecurity = 0)
	Local $ida = 0, $ism = 0, $icd = 0, $ifa = 0
	If BitAND($iaccess, 1) <> 0 Then $ida = BitOR($ida, $generic_execute)
	If BitAND($iaccess, 2) <> 0 Then $ida = BitOR($ida, $generic_read)
	If BitAND($iaccess, 4) <> 0 Then $ida = BitOR($ida, $generic_write)
	If BitAND($ishare, 1) <> 0 Then $ism = BitOR($ism, $file_share_delete)
	If BitAND($ishare, 2) <> 0 Then $ism = BitOR($ism, $file_share_read)
	If BitAND($ishare, 4) <> 0 Then $ism = BitOR($ism, $file_share_write)
	Switch $icreation
		Case 0
			$icd = $create_new
		Case 1
			$icd = $create_always
		Case 2
			$icd = $open_existing
		Case 3
			$icd = $open_always
		Case 4
			$icd = $truncate_existing
	EndSwitch
	If BitAND($iattributes, 1) <> 0 Then $ifa = BitOR($ifa, $file_attribute_archive)
	If BitAND($iattributes, 2) <> 0 Then $ifa = BitOR($ifa, $file_attribute_hidden)
	If BitAND($iattributes, 4) <> 0 Then $ifa = BitOR($ifa, $file_attribute_readonly)
	If BitAND($iattributes, 8) <> 0 Then $ifa = BitOR($ifa, $file_attribute_system)
	Local $aresult = DllCall("kernel32.dll", "handle", "CreateFileW", "wstr", $sfilename, "dword", $ida, "dword", $ism, "struct*", $tsecurity, "dword", $icd, "dword", $ifa, "ptr", 0)
	If @error OR ($aresult[0] = $invalid_handle_value) Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createfont($iheight, $iwidth, $iescape = 0, $iorientn = 0, $iweight = $__winapiconstant_fw_normal, $bitalic = False, $bunderline = False, $bstrikeout = False, $icharset = $__winapiconstant_default_charset, $ioutputprec = $__winapiconstant_out_default_precis, $iclipprec = $__winapiconstant_clip_default_precis, $iquality = $__winapiconstant_default_quality, $ipitch = 0, $sface = "Arial")
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateFontW", "int", $iheight, "int", $iwidth, "int", $iescape, "int", $iorientn, "int", $iweight, "dword", $bitalic, "dword", $bunderline, "dword", $bstrikeout, "dword", $icharset, "dword", $ioutputprec, "dword", $iclipprec, "dword", $iquality, "dword", $ipitch, "wstr", $sface)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createfontindirect($tlogfont)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateFontIndirectW", "struct*", $tlogfont)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createpen($ipenstyle, $iwidth, $icolor)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreatePen", "int", $ipenstyle, "int", $iwidth, "INT", $icolor)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createprocess($sappname, $scommand, $tsecurity, $tthread, $binherit, $iflags, $penviron, $sdir, $tstartupinfo, $tprocess)
	Local $tcommand = 0
	Local $sappnametype = "wstr", $sdirtype = "wstr"
	If $sappname = "" Then
		$sappnametype = "ptr"
		$sappname = 0
	EndIf
	If $scommand <> "" Then
		$tcommand = DllStructCreate("wchar Text[" & 260 + 1 & "]")
		DllStructSetData($tcommand, "Text", $scommand)
	EndIf
	If $sdir = "" Then
		$sdirtype = "ptr"
		$sdir = 0
	EndIf
	Local $aresult = DllCall("kernel32.dll", "bool", "CreateProcessW", $sappnametype, $sappname, "struct*", $tcommand, "struct*", $tsecurity, "struct*", $tthread, "bool", $binherit, "dword", $iflags, "struct*", $penviron, $sdirtype, $sdir, "struct*", $tstartupinfo, "struct*", $tprocess)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_createrectrgn($ileftrect, $itoprect, $irightrect, $ibottomrect)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateRectRgn", "int", $ileftrect, "int", $itoprect, "int", $irightrect, "int", $ibottomrect)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createroundrectrgn($ileftrect, $itoprect, $irightrect, $ibottomrect, $iwidthellipse, $iheightellipse)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateRoundRectRgn", "int", $ileftrect, "int", $itoprect, "int", $irightrect, "int", $ibottomrect, "int", $iwidthellipse, "int", $iheightellipse)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createsolidbitmap($hwnd, $icolor, $iwidth, $iheight, $brgb = 1)
	Local $hdc = _winapi_getdc($hwnd)
	Local $hdestdc = _winapi_createcompatibledc($hdc)
	Local $hbitmap = _winapi_createcompatiblebitmap($hdc, $iwidth, $iheight)
	Local $hold = _winapi_selectobject($hdestdc, $hbitmap)
	Local $trect = DllStructCreate($tagrect)
	DllStructSetData($trect, 1, 0)
	DllStructSetData($trect, 2, 0)
	DllStructSetData($trect, 3, $iwidth)
	DllStructSetData($trect, 4, $iheight)
	If $brgb Then
		$icolor = BitOR(BitAND($icolor, 65280), BitShift(BitAND($icolor, 255), -16), BitShift(BitAND($icolor, 16711680), 16))
	EndIf
	Local $hbrush = _winapi_createsolidbrush($icolor)
	If NOT _winapi_fillrect($hdestdc, $trect, $hbrush) Then
		_winapi_deleteobject($hbitmap)
		$hbitmap = 0
	EndIf
	_winapi_deleteobject($hbrush)
	_winapi_releasedc($hwnd, $hdc)
	_winapi_selectobject($hdestdc, $hold)
	_winapi_deletedc($hdestdc)
	If NOT $hbitmap Then Return SetError(1, 0, 0)
	Return $hbitmap
EndFunc

Func _winapi_createsolidbrush($icolor)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateSolidBrush", "INT", $icolor)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createwindowex($iexstyle, $sclass, $sname, $istyle, $ix, $iy, $iwidth, $iheight, $hparent, $hmenu = 0, $hinstance = 0, $pparam = 0)
	If $hinstance = 0 Then $hinstance = _winapi_getmodulehandle("")
	Local $aresult = DllCall("user32.dll", "hwnd", "CreateWindowExW", "dword", $iexstyle, "wstr", $sclass, "wstr", $sname, "dword", $istyle, "int", $ix, "int", $iy, "int", $iwidth, "int", $iheight, "hwnd", $hparent, "handle", $hmenu, "handle", $hinstance, "struct*", $pparam)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_defwindowproc($hwnd, $imsg, $wparam, $lparam)
	Local $aresult = DllCall("user32.dll", "lresult", "DefWindowProc", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_deletedc($hdc)
	Local $aresult = DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hdc)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_deleteobject($hobject)
	Local $aresult = DllCall("gdi32.dll", "bool", "DeleteObject", "handle", $hobject)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_destroyicon($hicon)
	Local $aresult = DllCall("user32.dll", "bool", "DestroyIcon", "handle", $hicon)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_destroywindow($hwnd)
	Local $aresult = DllCall("user32.dll", "bool", "DestroyWindow", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_drawedge($hdc, $trect, $iedgetype, $iflags)
	Local $aresult = DllCall("user32.dll", "bool", "DrawEdge", "handle", $hdc, "struct*", $trect, "uint", $iedgetype, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_drawframecontrol($hdc, $trect, $itype, $istate)
	Local $aresult = DllCall("user32.dll", "bool", "DrawFrameControl", "handle", $hdc, "struct*", $trect, "uint", $itype, "uint", $istate)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_drawicon($hdc, $ix, $iy, $hicon)
	Local $aresult = DllCall("user32.dll", "bool", "DrawIcon", "handle", $hdc, "int", $ix, "int", $iy, "handle", $hicon)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_drawiconex($hdc, $ix, $iy, $hicon, $iwidth = 0, $iheight = 0, $istep = 0, $hbrush = 0, $iflags = 3)
	Local $ioptions
	Switch $iflags
		Case 1
			$ioptions = $di_mask
		Case 2
			$ioptions = $di_image
		Case 3
			$ioptions = $di_normal
		Case 4
			$ioptions = $di_compat
		Case 5
			$ioptions = $di_defaultsize
		Case Else
			$ioptions = $di_nomirror
	EndSwitch
	Local $aresult = DllCall("user32.dll", "bool", "DrawIconEx", "handle", $hdc, "int", $ix, "int", $iy, "handle", $hicon, "int", $iwidth, "int", $iheight, "uint", $istep, "handle", $hbrush, "uint", $ioptions)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_drawline($hdc, $ix1, $iy1, $ix2, $iy2)
	_winapi_moveto($hdc, $ix1, $iy1)
	If @error Then Return SetError(@error, @extended, False)
	_winapi_lineto($hdc, $ix2, $iy2)
	If @error Then Return SetError(@error + 10, @extended, False)
	Return True
EndFunc

Func _winapi_drawtext($hdc, $stext, ByRef $trect, $iflags)
	Local $aresult = DllCall("user32.dll", "int", "DrawTextW", "handle", $hdc, "wstr", $stext, "int", -1, "struct*", $trect, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_duplicatehandle($hsourceprocesshandle, $hsourcehandle, $htargetprocesshandle, $idesiredaccess, $iinherithandle, $ioptions)
	Local $aresult = DllCall("kernel32.dll", "bool", "DuplicateHandle", "handle", $hsourceprocesshandle, "handle", $hsourcehandle, "handle", $htargetprocesshandle, "handle*", 0, "dword", $idesiredaccess, "bool", $iinherithandle, "dword", $ioptions)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, 0)
	Return $aresult[4]
EndFunc

Func _winapi_enablewindow($hwnd, $benable = True)
	Local $aresult = DllCall("user32.dll", "bool", "EnableWindow", "hwnd", $hwnd, "bool", $benable)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_enumdisplaydevices($sdevice, $idevnum)
	Local $tname = 0, $iflags = 0, $adevice[5]
	If $sdevice <> "" Then
		$tname = DllStructCreate("wchar Text[" & StringLen($sdevice) + 1 & "]")
		DllStructSetData($tname, "Text", $sdevice)
	EndIf
	Local $tdevice = DllStructCreate($tagdisplay_device)
	Local $idevice = DllStructGetSize($tdevice)
	DllStructSetData($tdevice, "Size", $idevice)
	Local $aret = DllCall("user32.dll", "bool", "EnumDisplayDevicesW", "struct*", $tname, "dword", $idevnum, "struct*", $tdevice, "dword", 1)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Local $in = DllStructGetData($tdevice, "Flags")
	If BitAND($in, $display_device_attached_to_desktop) <> 0 Then $iflags = BitOR($iflags, 1)
	If BitAND($in, $display_device_primary_device) <> 0 Then $iflags = BitOR($iflags, 2)
	If BitAND($in, $display_device_mirroring_driver) <> 0 Then $iflags = BitOR($iflags, 4)
	If BitAND($in, $display_device_vga_compatible) <> 0 Then $iflags = BitOR($iflags, 8)
	If BitAND($in, $display_device_removable) <> 0 Then $iflags = BitOR($iflags, 16)
	If BitAND($in, $display_device_modespruned) <> 0 Then $iflags = BitOR($iflags, 32)
	$adevice[0] = True
	$adevice[1] = DllStructGetData($tdevice, "Name")
	$adevice[2] = DllStructGetData($tdevice, "String")
	$adevice[3] = $iflags
	$adevice[4] = DllStructGetData($tdevice, "ID")
	Return $adevice
EndFunc

Func _winapi_enumwindows($bvisible = True, $hwnd = Default)
	__winapi_enumwindowsinit()
	If $hwnd = Default Then $hwnd = _winapi_getdesktopwindow()
	__winapi_enumwindowschild($hwnd, $bvisible)
	Return $__g_awinlist_winapi
EndFunc

Func __winapi_enumwindowsadd($hwnd, $sclass = "")
	If $sclass = "" Then $sclass = _winapi_getclassname($hwnd)
	$__g_awinlist_winapi[0][0] += 1
	Local $icount = $__g_awinlist_winapi[0][0]
	If $icount >= $__g_awinlist_winapi[0][1] Then
		ReDim $__g_awinlist_winapi[$icount + 64][2]
		$__g_awinlist_winapi[0][1] += 64
	EndIf
	$__g_awinlist_winapi[$icount][0] = $hwnd
	$__g_awinlist_winapi[$icount][1] = $sclass
EndFunc

Func __winapi_enumwindowschild($hwnd, $bvisible = True)
	$hwnd = _winapi_getwindow($hwnd, $gw_child)
	While $hwnd <> 0
		If (NOT $bvisible) OR _winapi_iswindowvisible($hwnd) Then
			__winapi_enumwindowsadd($hwnd)
			__winapi_enumwindowschild($hwnd, $bvisible)
		EndIf
		$hwnd = _winapi_getwindow($hwnd, $gw_hwndnext)
	WEnd
EndFunc

Func __winapi_enumwindowsinit()
	ReDim $__g_awinlist_winapi[64][2]
	$__g_awinlist_winapi[0][0] = 0
	$__g_awinlist_winapi[0][1] = 64
EndFunc

Func _winapi_enumwindowspopup()
	__winapi_enumwindowsinit()
	Local $hwnd = _winapi_getwindow(_winapi_getdesktopwindow(), $gw_child)
	Local $sclass
	While $hwnd <> 0
		If _winapi_iswindowvisible($hwnd) Then
			$sclass = _winapi_getclassname($hwnd)
			If $sclass = "#32768" Then
				__winapi_enumwindowsadd($hwnd)
			ElseIf $sclass = "ToolbarWindow32" Then
				__winapi_enumwindowsadd($hwnd)
			ElseIf $sclass = "ToolTips_Class32" Then
				__winapi_enumwindowsadd($hwnd)
			ElseIf $sclass = "BaseBar" Then
				__winapi_enumwindowschild($hwnd)
			EndIf
		EndIf
		$hwnd = _winapi_getwindow($hwnd, $gw_hwndnext)
	WEnd
	Return $__g_awinlist_winapi
EndFunc

Func _winapi_enumwindowstop()
	__winapi_enumwindowsinit()
	Local $hwnd = _winapi_getwindow(_winapi_getdesktopwindow(), $gw_child)
	While $hwnd <> 0
		If _winapi_iswindowvisible($hwnd) Then __winapi_enumwindowsadd($hwnd)
		$hwnd = _winapi_getwindow($hwnd, $gw_hwndnext)
	WEnd
	Return $__g_awinlist_winapi
EndFunc

Func _winapi_expandenvironmentstrings($sstring)
	Local $aresult = DllCall("kernel32.dll", "dword", "ExpandEnvironmentStringsW", "wstr", $sstring, "wstr", "", "dword", 4096)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, "")
	Return $aresult[2]
EndFunc

Func _winapi_extracticonex($sfilepath, $iindex, $palarge, $pasmall, $iicons)
	Local $aresult = DllCall("shell32.dll", "uint", "ExtractIconExW", "wstr", $sfilepath, "int", $iindex, "struct*", $palarge, "struct*", $pasmall, "uint", $iicons)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_fatalappexit($smessage)
	DllCall("kernel32.dll", "none", "FatalAppExitW", "uint", 0, "wstr", $smessage)
	If @error Then Return SetError(@error, @extended)
EndFunc

Func _winapi_fillrect($hdc, $trect, $hbrush)
	Local $aresult
	If IsPtr($hbrush) Then
		$aresult = DllCall("user32.dll", "int", "FillRect", "handle", $hdc, "struct*", $trect, "handle", $hbrush)
	Else
		$aresult = DllCall("user32.dll", "int", "FillRect", "handle", $hdc, "struct*", $trect, "dword_ptr", $hbrush)
	EndIf
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_findexecutable($sfilename, $sdirectory = "")
	Local $aresult = DllCall("shell32.dll", "INT", "FindExecutableW", "wstr", $sfilename, "wstr", $sdirectory, "wstr", "")
	If @error Then Return SetError(@error, @extended, "")
	If $aresult[0] <= 32 Then Return SetError(10, $aresult[0], "")
	Return SetExtended($aresult[0], $aresult[3])
EndFunc

Func _winapi_findwindow($sclassname, $swindowname)
	Local $aresult = DllCall("user32.dll", "hwnd", "FindWindowW", "wstr", $sclassname, "wstr", $swindowname)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_flashwindow($hwnd, $binvert = True)
	Local $aresult = DllCall("user32.dll", "bool", "FlashWindow", "hwnd", $hwnd, "bool", $binvert)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_flashwindowex($hwnd, $iflags = 3, $icount = 3, $itimeout = 0)
	Local $tflash = DllStructCreate($tagflashwinfo)
	Local $iflash = DllStructGetSize($tflash)
	Local $imode = 0
	If BitAND($iflags, 1) <> 0 Then $imode = BitOR($imode, $flashw_caption)
	If BitAND($iflags, 2) <> 0 Then $imode = BitOR($imode, $flashw_tray)
	If BitAND($iflags, 4) <> 0 Then $imode = BitOR($imode, $flashw_timer)
	If BitAND($iflags, 8) <> 0 Then $imode = BitOR($imode, $flashw_timernofg)
	DllStructSetData($tflash, "Size", $iflash)
	DllStructSetData($tflash, "hWnd", $hwnd)
	DllStructSetData($tflash, "Flags", $imode)
	DllStructSetData($tflash, "Count", $icount)
	DllStructSetData($tflash, "Timeout", $itimeout)
	Local $aresult = DllCall("user32.dll", "bool", "FlashWindowEx", "struct*", $tflash)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_floattoint($nfloat)
	Local $tfloat = DllStructCreate("float")
	Local $tint = DllStructCreate("int", DllStructGetPtr($tfloat))
	DllStructSetData($tfloat, 1, $nfloat)
	Return DllStructGetData($tint, 1)
EndFunc

Func _winapi_flushfilebuffers($hfile)
	Local $aresult = DllCall("kernel32.dll", "bool", "FlushFileBuffers", "handle", $hfile)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_formatmessage($iflags, $psource, $imessageid, $ilanguageid, ByRef $pbuffer, $isize, $varguments)
	Local $sbuffertype = "struct*"
	If IsString($pbuffer) Then $sbuffertype = "wstr"
	Local $aresult = DllCall("kernel32.dll", "dword", "FormatMessageW", "dword", $iflags, "struct*", $psource, "dword", $imessageid, "dword", $ilanguageid, $sbuffertype, $pbuffer, "dword", $isize, "ptr", $varguments)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, 0)
	If $sbuffertype = "wstr" Then $pbuffer = $aresult[5]
	Return $aresult[0]
EndFunc

Func _winapi_framerect($hdc, $trect, $hbrush)
	Local $aresult = DllCall("user32.dll", "int", "FrameRect", "handle", $hdc, "struct*", $trect, "handle", $hbrush)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_freelibrary($hmodule)
	Local $aresult = DllCall("kernel32.dll", "bool", "FreeLibrary", "handle", $hmodule)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_getancestor($hwnd, $iflags = 1)
	Local $aresult = DllCall("user32.dll", "hwnd", "GetAncestor", "hwnd", $hwnd, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getasynckeystate($ikey)
	Local $aresult = DllCall("user32.dll", "short", "GetAsyncKeyState", "int", $ikey)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getbkmode($hdc)
	Local $aresult = DllCall("gdi32.dll", "int", "GetBkMode", "handle", $hdc)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getclassname($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $aresult = DllCall("user32.dll", "int", "GetClassNameW", "hwnd", $hwnd, "wstr", "", "int", 4096)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, "")
	Return SetExtended($aresult[0], $aresult[2])
EndFunc

Func _winapi_getclientheight($hwnd)
	Local $trect = _winapi_getclientrect($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($trect, "Bottom") - DllStructGetData($trect, "Top")
EndFunc

Func _winapi_getclientwidth($hwnd)
	Local $trect = _winapi_getclientrect($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($trect, "Right") - DllStructGetData($trect, "Left")
EndFunc

Func _winapi_getclientrect($hwnd)
	Local $trect = DllStructCreate($tagrect)
	Local $aret = DllCall("user32.dll", "bool", "GetClientRect", "hwnd", $hwnd, "struct*", $trect)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $trect
EndFunc

Func _winapi_getcurrentprocess()
	Local $aresult = DllCall("kernel32.dll", "handle", "GetCurrentProcess")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getcurrentprocessid()
	Local $aresult = DllCall("kernel32.dll", "dword", "GetCurrentProcessId")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getcurrentthread()
	Local $aresult = DllCall("kernel32.dll", "handle", "GetCurrentThread")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getcurrentthreadid()
	Local $aresult = DllCall("kernel32.dll", "dword", "GetCurrentThreadId")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getcursorinfo()
	Local $tcursor = DllStructCreate($tagcursorinfo)
	Local $icursor = DllStructGetSize($tcursor)
	DllStructSetData($tcursor, "Size", $icursor)
	Local $aret = DllCall("user32.dll", "bool", "GetCursorInfo", "struct*", $tcursor)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Local $acursor[5]
	$acursor[0] = True
	$acursor[1] = DllStructGetData($tcursor, "Flags") <> 0
	$acursor[2] = DllStructGetData($tcursor, "hCursor")
	$acursor[3] = DllStructGetData($tcursor, "X")
	$acursor[4] = DllStructGetData($tcursor, "Y")
	Return $acursor
EndFunc

Func _winapi_getdc($hwnd)
	Local $aresult = DllCall("user32.dll", "handle", "GetDC", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getdesktopwindow()
	Local $aresult = DllCall("user32.dll", "hwnd", "GetDesktopWindow")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getdevicecaps($hdc, $iindex)
	Local $aresult = DllCall("gdi32.dll", "int", "GetDeviceCaps", "handle", $hdc, "int", $iindex)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getdibits($hdc, $hbitmap, $istartscan, $iscanlines, $pbits, $tbi, $iusage)
	Local $aresult = DllCall("gdi32.dll", "int", "GetDIBits", "handle", $hdc, "handle", $hbitmap, "uint", $istartscan, "uint", $iscanlines, "struct*", $pbits, "struct*", $tbi, "uint", $iusage)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_getdlgctrlid($hwnd)
	Local $aresult = DllCall("user32.dll", "int", "GetDlgCtrlID", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getdlgitem($hwnd, $iitemid)
	Local $aresult = DllCall("user32.dll", "hwnd", "GetDlgItem", "hwnd", $hwnd, "int", $iitemid)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getfilesizeex($hfile)
	Local $aresult = DllCall("kernel32.dll", "bool", "GetFileSizeEx", "handle", $hfile, "int64*", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, -1)
	Return $aresult[2]
EndFunc

Func _winapi_getfocus()
	Local $aresult = DllCall("user32.dll", "hwnd", "GetFocus")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getforegroundwindow()
	Local $aresult = DllCall("user32.dll", "hwnd", "GetForegroundWindow")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getguiresources($iflag = 0, $hprocess = -1)
	If $hprocess = -1 Then $hprocess = _winapi_getcurrentprocess()
	Local $aresult = DllCall("user32.dll", "dword", "GetGuiResources", "handle", $hprocess, "dword", $iflag)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_geticoninfo($hicon)
	Local $tinfo = DllStructCreate($tagiconinfo)
	Local $aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $hicon, "struct*", $tinfo)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Local $aicon[6]
	$aicon[0] = True
	$aicon[1] = DllStructGetData($tinfo, "Icon") <> 0
	$aicon[2] = DllStructGetData($tinfo, "XHotSpot")
	$aicon[3] = DllStructGetData($tinfo, "YHotSpot")
	$aicon[4] = DllStructGetData($tinfo, "hMask")
	$aicon[5] = DllStructGetData($tinfo, "hColor")
	Return $aicon
EndFunc

Func _winapi_getlasterrormessage()
	Local $ilasterror = _winapi_getlasterror()
	Local $tbufferptr = DllStructCreate("ptr")
	Local $ncount = _winapi_formatmessage(BitOR($format_message_allocate_buffer, $format_message_from_system), 0, $ilasterror, 0, $tbufferptr, 0, 0)
	If @error Then Return SetError(@error, 0, "")
	Local $stext = ""
	Local $pbuffer = DllStructGetData($tbufferptr, 1)
	If $pbuffer Then
		If $ncount > 0 Then
			Local $tbuffer = DllStructCreate("wchar[" & ($ncount + 1) & "]", $pbuffer)
			$stext = DllStructGetData($tbuffer, 1)
			If StringRight($stext, 2) = @CRLF Then $stext = StringTrimRight($stext, 2)
		EndIf
		_winapi_localfree($pbuffer)
	EndIf
	Return $stext
EndFunc

Func _winapi_getlayeredwindowattributes($hwnd, ByRef $itranscolor, ByRef $itransgui, $bcolorref = False)
	$itranscolor = -1
	$itransgui = -1
	Local $aresult = DllCall("user32.dll", "bool", "GetLayeredWindowAttributes", "hwnd", $hwnd, "INT*", $itranscolor, "byte*", $itransgui, "dword*", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, 0)
	If NOT $bcolorref Then
		$aresult[2] = Int(BinaryMid($aresult[2], 3, 1) & BinaryMid($aresult[2], 2, 1) & BinaryMid($aresult[2], 1, 1))
	EndIf
	$itranscolor = $aresult[2]
	$itransgui = $aresult[3]
	Return $aresult[4]
EndFunc

Func _winapi_getmodulehandle($smodulename)
	Local $smodulenametype = "wstr"
	If $smodulename = "" Then
		$smodulename = 0
		$smodulenametype = "ptr"
	EndIf
	Local $aresult = DllCall("kernel32.dll", "handle", "GetModuleHandleW", $smodulenametype, $smodulename)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getmousepos($btoclient = False, $hwnd = 0)
	Local $imode = Opt("MouseCoordMode", 1)
	Local $apos = MouseGetPos()
	Opt("MouseCoordMode", $imode)
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $apos[0])
	DllStructSetData($tpoint, "Y", $apos[1])
	If $btoclient AND NOT _winapi_screentoclient($hwnd, $tpoint) Then Return SetError(@error + 20, @extended, 0)
	Return $tpoint
EndFunc

Func _winapi_getmouseposx($btoclient = False, $hwnd = 0)
	Local $tpoint = _winapi_getmousepos($btoclient, $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($tpoint, "X")
EndFunc

Func _winapi_getmouseposy($btoclient = False, $hwnd = 0)
	Local $tpoint = _winapi_getmousepos($btoclient, $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($tpoint, "Y")
EndFunc

Func _winapi_getobject($hobject, $isize, $pobject)
	Local $aresult = DllCall("gdi32.dll", "int", "GetObjectW", "handle", $hobject, "int", $isize, "struct*", $pobject)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getopenfilename($stitle = "", $sfilter = "All files (*.*)", $sinitaldir = ".", $sdefaultfile = "", $sdefaultext = "", $ifilterindex = 1, $iflags = 0, $iflagsex = 0, $hwndowner = 0)
	Local $ipathlen = 4096
	Local $inulls = 0
	Local $tofn = DllStructCreate($tagopenfilename)
	Local $afiles[1] = [0]
	Local $iflag = $iflags
	Local $asflines = StringSplit($sfilter, "|")
	Local $asfilter[$asflines[0] * 2 + 1]
	Local $istart, $ifinal, $tagfilter
	$asfilter[0] = $asflines[0] * 2
	For $i = 1 To $asflines[0]
		$istart = StringInStr($asflines[$i], "(", 0, 1)
		$ifinal = StringInStr($asflines[$i], ")", 0, -1)
		$asfilter[$i * 2 - 1] = StringStripWS(StringLeft($asflines[$i], $istart - 1), $str_stripleading + $str_striptrailing)
		$asfilter[$i * 2] = StringStripWS(StringTrimRight(StringTrimLeft($asflines[$i], $istart), StringLen($asflines[$i]) - $ifinal + 1), $str_stripleading + $str_striptrailing)
		$tagfilter &= "wchar[" & StringLen($asfilter[$i * 2 - 1]) + 1 & "];wchar[" & StringLen($asfilter[$i * 2]) + 1 & "];"
	Next
	Local $ttitle = DllStructCreate("wchar Title[" & StringLen($stitle) + 1 & "]")
	Local $tinitialdir = DllStructCreate("wchar InitDir[" & StringLen($sinitaldir) + 1 & "]")
	Local $tfilter = DllStructCreate($tagfilter & "wchar")
	Local $tpath = DllStructCreate("wchar Path[" & $ipathlen & "]")
	Local $textn = DllStructCreate("wchar Extension[" & StringLen($sdefaultext) + 1 & "]")
	For $i = 1 To $asfilter[0]
		DllStructSetData($tfilter, $i, $asfilter[$i])
	Next
	DllStructSetData($ttitle, "Title", $stitle)
	DllStructSetData($tinitialdir, "InitDir", $sinitaldir)
	DllStructSetData($tpath, "Path", $sdefaultfile)
	DllStructSetData($textn, "Extension", $sdefaultext)
	DllStructSetData($tofn, "StructSize", DllStructGetSize($tofn))
	DllStructSetData($tofn, "hwndOwner", $hwndowner)
	DllStructSetData($tofn, "lpstrFilter", DllStructGetPtr($tfilter))
	DllStructSetData($tofn, "nFilterIndex", $ifilterindex)
	DllStructSetData($tofn, "lpstrFile", DllStructGetPtr($tpath))
	DllStructSetData($tofn, "nMaxFile", $ipathlen)
	DllStructSetData($tofn, "lpstrInitialDir", DllStructGetPtr($tinitialdir))
	DllStructSetData($tofn, "lpstrTitle", DllStructGetPtr($ttitle))
	DllStructSetData($tofn, "Flags", $iflag)
	DllStructSetData($tofn, "lpstrDefExt", DllStructGetPtr($textn))
	DllStructSetData($tofn, "FlagsEx", $iflagsex)
	Local $ares = DllCall("comdlg32.dll", "bool", "GetOpenFileNameW", "struct*", $tofn)
	If @error OR NOT $ares[0] Then Return SetError(@error + 10, @extended, $afiles)
	If BitAND($iflags, $ofn_allowmultiselect) = $ofn_allowmultiselect AND BitAND($iflags, $ofn_explorer) = $ofn_explorer Then
		For $x = 1 To $ipathlen
			If DllStructGetData($tpath, "Path", $x) = Chr(0) Then
				DllStructSetData($tpath, "Path", "|", $x)
				$inulls += 1
			Else
				$inulls = 0
			EndIf
			If $inulls = 2 Then ExitLoop
		Next
		DllStructSetData($tpath, "Path", Chr(0), $x - 1)
		$afiles = StringSplit(DllStructGetData($tpath, "Path"), "|")
		If $afiles[0] = 1 Then Return __winapi_parsefiledialogpath(DllStructGetData($tpath, "Path"))
		Return StringSplit(DllStructGetData($tpath, "Path"), "|")
	ElseIf BitAND($iflags, $ofn_allowmultiselect) = $ofn_allowmultiselect Then
		$afiles = StringSplit(DllStructGetData($tpath, "Path"), " ")
		If $afiles[0] = 1 Then Return __winapi_parsefiledialogpath(DllStructGetData($tpath, "Path"))
		Return StringSplit(StringReplace(DllStructGetData($tpath, "Path"), " ", "|"), "|")
	Else
		Return __winapi_parsefiledialogpath(DllStructGetData($tpath, "Path"))
	EndIf
EndFunc

Func _winapi_getoverlappedresult($hfile, $toverlapped, ByRef $ibytes, $bwait = False)
	Local $aresult = DllCall("kernel32.dll", "bool", "GetOverlappedResult", "handle", $hfile, "struct*", $toverlapped, "dword*", 0, "bool", $bwait)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, False)
	$ibytes = $aresult[3]
	Return $aresult[0]
EndFunc

Func _winapi_getparent($hwnd)
	Local $aresult = DllCall("user32.dll", "hwnd", "GetParent", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getprocaddress($hmodule, $vname)
	Local $stype = "str"
	If IsNumber($vname) Then $stype = "word"
	Local $aresult = DllCall("kernel32.dll", "ptr", "GetProcAddress", "handle", $hmodule, $stype, $vname)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getprocessaffinitymask($hprocess)
	Local $aresult = DllCall("kernel32.dll", "bool", "GetProcessAffinityMask", "handle", $hprocess, "dword_ptr*", 0, "dword_ptr*", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, 0)
	Local $amask[3]
	$amask[0] = True
	$amask[1] = $aresult[2]
	$amask[2] = $aresult[3]
	Return $amask
EndFunc

Func _winapi_getsavefilename($stitle = "", $sfilter = "All files (*.*)", $sinitaldir = ".", $sdefaultfile = "", $sdefaultext = "", $ifilterindex = 1, $iflags = 0, $iflagsex = 0, $hwndowner = 0)
	Local $ipathlen = 4096
	Local $tofn = DllStructCreate($tagopenfilename)
	Local $afiles[1] = [0]
	Local $iflag = $iflags
	Local $asflines = StringSplit($sfilter, "|")
	Local $asfilter[$asflines[0] * 2 + 1]
	Local $istart, $ifinal, $tagfilter
	$asfilter[0] = $asflines[0] * 2
	For $i = 1 To $asflines[0]
		$istart = StringInStr($asflines[$i], "(", 0, 1)
		$ifinal = StringInStr($asflines[$i], ")", 0, -1)
		$asfilter[$i * 2 - 1] = StringStripWS(StringLeft($asflines[$i], $istart - 1), $str_stripleading + $str_striptrailing)
		$asfilter[$i * 2] = StringStripWS(StringTrimRight(StringTrimLeft($asflines[$i], $istart), StringLen($asflines[$i]) - $ifinal + 1), $str_stripleading + $str_striptrailing)
		$tagfilter &= "wchar[" & StringLen($asfilter[$i * 2 - 1]) + 1 & "];wchar[" & StringLen($asfilter[$i * 2]) + 1 & "];"
	Next
	Local $ttitle = DllStructCreate("wchar Title[" & StringLen($stitle) + 1 & "]")
	Local $tinitialdir = DllStructCreate("wchar InitDir[" & StringLen($sinitaldir) + 1 & "]")
	Local $tfilter = DllStructCreate($tagfilter & "wchar")
	Local $tpath = DllStructCreate("wchar Path[" & $ipathlen & "]")
	Local $textn = DllStructCreate("wchar Extension[" & StringLen($sdefaultext) + 1 & "]")
	For $i = 1 To $asfilter[0]
		DllStructSetData($tfilter, $i, $asfilter[$i])
	Next
	DllStructSetData($ttitle, "Title", $stitle)
	DllStructSetData($tinitialdir, "InitDir", $sinitaldir)
	DllStructSetData($tpath, "Path", $sdefaultfile)
	DllStructSetData($textn, "Extension", $sdefaultext)
	DllStructSetData($tofn, "StructSize", DllStructGetSize($tofn))
	DllStructSetData($tofn, "hwndOwner", $hwndowner)
	DllStructSetData($tofn, "lpstrFilter", DllStructGetPtr($tfilter))
	DllStructSetData($tofn, "nFilterIndex", $ifilterindex)
	DllStructSetData($tofn, "lpstrFile", DllStructGetPtr($tpath))
	DllStructSetData($tofn, "nMaxFile", $ipathlen)
	DllStructSetData($tofn, "lpstrInitialDir", DllStructGetPtr($tinitialdir))
	DllStructSetData($tofn, "lpstrTitle", DllStructGetPtr($ttitle))
	DllStructSetData($tofn, "Flags", $iflag)
	DllStructSetData($tofn, "lpstrDefExt", DllStructGetPtr($textn))
	DllStructSetData($tofn, "FlagsEx", $iflagsex)
	Local $ares = DllCall("comdlg32.dll", "bool", "GetSaveFileNameW", "struct*", $tofn)
	If @error OR NOT $ares[0] Then Return SetError(@error + 10, @extended, $afiles)
	Return __winapi_parsefiledialogpath(DllStructGetData($tpath, "Path"))
EndFunc

Func _winapi_getstockobject($iobject)
	Local $aresult = DllCall("gdi32.dll", "handle", "GetStockObject", "int", $iobject)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getstdhandle($istdhandle)
	If $istdhandle < 0 OR $istdhandle > 2 Then Return SetError(2, 0, -1)
	Local Const $ahandle[3] = [-10, -11, -12]
	Local $aresult = DllCall("kernel32.dll", "handle", "GetStdHandle", "dword", $ahandle[$istdhandle])
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_getsyscolor($iindex)
	Local $aresult = DllCall("user32.dll", "INT", "GetSysColor", "int", $iindex)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getsyscolorbrush($iindex)
	Local $aresult = DllCall("user32.dll", "handle", "GetSysColorBrush", "int", $iindex)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getsystemmetrics($iindex)
	Local $aresult = DllCall("user32.dll", "int", "GetSystemMetrics", "int", $iindex)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_gettextextentpoint32($hdc, $stext)
	Local $tsize = DllStructCreate($tagsize)
	Local $isize = StringLen($stext)
	Local $aret = DllCall("gdi32.dll", "bool", "GetTextExtentPoint32W", "handle", $hdc, "wstr", $stext, "int", $isize, "struct*", $tsize)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $tsize
EndFunc

Func _winapi_gettextmetrics($hdc)
	Local $ttextmetric = DllStructCreate($tagtextmetric)
	Local $aret = DllCall("gdi32.dll", "bool", "GetTextMetricsW", "handle", $hdc, "struct*", $ttextmetric)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $ttextmetric
EndFunc

Func _winapi_getwindow($hwnd, $icmd)
	Local $aresult = DllCall("user32.dll", "hwnd", "GetWindow", "hwnd", $hwnd, "uint", $icmd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getwindowdc($hwnd)
	Local $aresult = DllCall("user32.dll", "handle", "GetWindowDC", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getwindowheight($hwnd)
	Local $trect = _winapi_getwindowrect($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($trect, "Bottom") - DllStructGetData($trect, "Top")
EndFunc

Func _winapi_getwindowlong($hwnd, $iindex)
	Local $sfuncname = "GetWindowLongW"
	If @AutoItX64 Then $sfuncname = "GetWindowLongPtrW"
	Local $aresult = DllCall("user32.dll", "long_ptr", $sfuncname, "hwnd", $hwnd, "int", $iindex)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getwindowplacement($hwnd)
	Local $twindowplacement = DllStructCreate($tagwindowplacement)
	DllStructSetData($twindowplacement, "length", DllStructGetSize($twindowplacement))
	Local $aret = DllCall("user32.dll", "bool", "GetWindowPlacement", "hwnd", $hwnd, "struct*", $twindowplacement)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $twindowplacement
EndFunc

Func _winapi_getwindowrect($hwnd)
	Local $trect = DllStructCreate($tagrect)
	Local $aret = DllCall("user32.dll", "bool", "GetWindowRect", "hwnd", $hwnd, "struct*", $trect)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $trect
EndFunc

Func _winapi_getwindowrgn($hwnd, $hrgn)
	Local $aresult = DllCall("user32.dll", "int", "GetWindowRgn", "hwnd", $hwnd, "handle", $hrgn)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getwindowtext($hwnd)
	Local $aresult = DllCall("user32.dll", "int", "GetWindowTextW", "hwnd", $hwnd, "wstr", "", "int", 4096)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, "")
	Return SetExtended($aresult[0], $aresult[2])
EndFunc

Func _winapi_getwindowthreadprocessid($hwnd, ByRef $ipid)
	Local $aresult = DllCall("user32.dll", "dword", "GetWindowThreadProcessId", "hwnd", $hwnd, "dword*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	$ipid = $aresult[2]
	Return $aresult[0]
EndFunc

Func _winapi_getwindowwidth($hwnd)
	Local $trect = _winapi_getwindowrect($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($trect, "Right") - DllStructGetData($trect, "Left")
EndFunc

Func _winapi_getxyfrompoint(ByRef $tpoint, ByRef $ix, ByRef $iy)
	$ix = DllStructGetData($tpoint, "X")
	$iy = DllStructGetData($tpoint, "Y")
EndFunc

Func _winapi_globalmemorystatus()
	Local $tmem = DllStructCreate($tagmemorystatusex)
	DllStructSetData($tmem, 1, DllStructGetSize($tmem))
	Local $aret = DllCall("kernel32.dll", "bool", "GlobalMemoryStatusEx", "struct*", $tmem)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Local $amem[7]
	$amem[0] = DllStructGetData($tmem, 2)
	$amem[1] = DllStructGetData($tmem, 3)
	$amem[2] = DllStructGetData($tmem, 4)
	$amem[3] = DllStructGetData($tmem, 5)
	$amem[4] = DllStructGetData($tmem, 6)
	$amem[5] = DllStructGetData($tmem, 7)
	$amem[6] = DllStructGetData($tmem, 8)
	Return $amem
EndFunc

Func _winapi_guidfromstring($sguid)
	Local $tguid = DllStructCreate($tagguid)
	_winapi_guidfromstringex($sguid, $tguid)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $tguid
EndFunc

Func _winapi_guidfromstringex($sguid, $tguid)
	Local $aresult = DllCall("ole32.dll", "long", "CLSIDFromString", "wstr", $sguid, "struct*", $tguid)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_hiword($ilong)
	Return BitShift($ilong, 16)
EndFunc

Func _winapi_inprocess($hwnd, ByRef $hlastwnd)
	If $hwnd = $hlastwnd Then Return True
	For $ii = $__g_ainprocess_winapi[0][0] To 1 Step -1
		If $hwnd = $__g_ainprocess_winapi[$ii][0] Then
			If $__g_ainprocess_winapi[$ii][1] Then
				$hlastwnd = $hwnd
				Return True
			Else
				Return False
			EndIf
		EndIf
	Next
	Local $ipid
	_winapi_getwindowthreadprocessid($hwnd, $ipid)
	Local $icount = $__g_ainprocess_winapi[0][0] + 1
	If $icount >= 64 Then $icount = 1
	$__g_ainprocess_winapi[0][0] = $icount
	$__g_ainprocess_winapi[$icount][0] = $hwnd
	$__g_ainprocess_winapi[$icount][1] = ($ipid = @AutoItPID)
	Return $__g_ainprocess_winapi[$icount][1]
EndFunc

Func _winapi_inttofloat($iint)
	Local $tint = DllStructCreate("int")
	Local $tfloat = DllStructCreate("float", DllStructGetPtr($tint))
	DllStructSetData($tint, 1, $iint)
	Return DllStructGetData($tfloat, 1)
EndFunc

Func _winapi_isclassname($hwnd, $sclassname)
	Local $sseparator = Opt("GUIDataSeparatorChar")
	Local $aclassname = StringSplit($sclassname, $sseparator)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $sclasscheck = _winapi_getclassname($hwnd)
	For $x = 1 To UBound($aclassname) - 1
		If StringUpper(StringMid($sclasscheck, 1, StringLen($aclassname[$x]))) = StringUpper($aclassname[$x]) Then Return True
	Next
	Return False
EndFunc

Func _winapi_iswindow($hwnd)
	Local $aresult = DllCall("user32.dll", "bool", "IsWindow", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_iswindowvisible($hwnd)
	Local $aresult = DllCall("user32.dll", "bool", "IsWindowVisible", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_invalidaterect($hwnd, $trect = 0, $berase = True)
	Local $aresult = DllCall("user32.dll", "bool", "InvalidateRect", "hwnd", $hwnd, "struct*", $trect, "bool", $berase)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_lineto($hdc, $ix, $iy)
	Local $aresult = DllCall("gdi32.dll", "bool", "LineTo", "handle", $hdc, "int", $ix, "int", $iy)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_loadbitmap($hinstance, $sbitmap)
	Local $sbitmaptype = "int"
	If IsString($sbitmap) Then $sbitmaptype = "wstr"
	Local $aresult = DllCall("user32.dll", "handle", "LoadBitmapW", "handle", $hinstance, $sbitmaptype, $sbitmap)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_loadimage($hinstance, $simage, $itype, $ixdesired, $iydesired, $iload)
	Local $aresult, $simagetype = "int"
	If IsString($simage) Then $simagetype = "wstr"
	$aresult = DllCall("user32.dll", "handle", "LoadImageW", "handle", $hinstance, $simagetype, $simage, "uint", $itype, "int", $ixdesired, "int", $iydesired, "uint", $iload)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_loadlibrary($sfilename)
	Local $aresult = DllCall("kernel32.dll", "handle", "LoadLibraryW", "wstr", $sfilename)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_loadlibraryex($sfilename, $iflags = 0)
	Local $aresult = DllCall("kernel32.dll", "handle", "LoadLibraryExW", "wstr", $sfilename, "ptr", 0, "dword", $iflags)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_loadshell32icon($iiconid)
	Local $ticons = DllStructCreate("ptr Data")
	Local $iicons = _winapi_extracticonex("shell32.dll", $iiconid, 0, $ticons, 1)
	If @error Then Return SetError(@error, @extended, 0)
	If $iicons <= 0 Then Return SetError(10, 0, 0)
	Return DllStructGetData($ticons, "Data")
EndFunc

Func _winapi_loadstring($hinstance, $istringid)
	Local $aresult = DllCall("user32.dll", "int", "LoadStringW", "handle", $hinstance, "uint", $istringid, "wstr", "", "int", 4096)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, "")
	Return SetExtended($aresult[0], $aresult[3])
EndFunc

Func _winapi_localfree($hmemory)
	Local $aresult = DllCall("kernel32.dll", "handle", "LocalFree", "handle", $hmemory)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_loword($ilong)
	Return BitAND($ilong, 65535)
EndFunc

Func _winapi_makelangid($ilngidprimary, $ilngidsub)
	Return BitOR(BitShift($ilngidsub, -10), $ilngidprimary)
EndFunc

Func _winapi_makelcid($ilngid, $isortid)
	Return BitOR(BitShift($isortid, -16), $ilngid)
EndFunc

Func _winapi_makelong($ilo, $ihi)
	Return BitOR(BitShift($ihi, -16), BitAND($ilo, 65535))
EndFunc

Func _winapi_makeqword($ilodword, $ihidword)
	Local $tint64 = DllStructCreate("uint64")
	Local $tdwords = DllStructCreate("dword;dword", DllStructGetPtr($tint64))
	DllStructSetData($tdwords, 1, $ilodword)
	DllStructSetData($tdwords, 2, $ihidword)
	Return DllStructGetData($tint64, 1)
EndFunc

Func _winapi_messagebeep($itype = 1)
	Local $isound
	Switch $itype
		Case 1
			$isound = 0
		Case 2
			$isound = 16
		Case 3
			$isound = 32
		Case 4
			$isound = 48
		Case 5
			$isound = 64
		Case Else
			$isound = -1
	EndSwitch
	Local $aresult = DllCall("user32.dll", "bool", "MessageBeep", "uint", $isound)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_msgbox($iflags, $stitle, $stext)
	BlockInput(0)
	MsgBox($iflags, $stitle, $stext & "      ")
EndFunc

Func _winapi_mouse_event($iflags, $ix = 0, $iy = 0, $idata = 0, $iextrainfo = 0)
	DllCall("user32.dll", "none", "mouse_event", "dword", $iflags, "dword", $ix, "dword", $iy, "dword", $idata, "ulong_ptr", $iextrainfo)
	If @error Then Return SetError(@error, @extended)
EndFunc

Func _winapi_moveto($hdc, $ix, $iy)
	Local $aresult = DllCall("gdi32.dll", "bool", "MoveToEx", "handle", $hdc, "int", $ix, "int", $iy, "ptr", 0)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_movewindow($hwnd, $ix, $iy, $iwidth, $iheight, $brepaint = True)
	Local $aresult = DllCall("user32.dll", "bool", "MoveWindow", "hwnd", $hwnd, "int", $ix, "int", $iy, "int", $iwidth, "int", $iheight, "bool", $brepaint)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_muldiv($inumber, $inumerator, $idenominator)
	Local $aresult = DllCall("kernel32.dll", "int", "MulDiv", "int", $inumber, "int", $inumerator, "int", $idenominator)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_multibytetowidechar($vtext, $icodepage = 0, $iflags = 0, $bretstring = False)
	Local $stexttype = "str"
	If NOT IsString($vtext) Then $stexttype = "struct*"
	Local $aresult = DllCall("kernel32.dll", "int", "MultiByteToWideChar", "uint", $icodepage, "dword", $iflags, $stexttype, $vtext, "int", -1, "ptr", 0, "int", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, 0)
	Local $iout = $aresult[0]
	Local $tout = DllStructCreate("wchar[" & $iout & "]")
	$aresult = DllCall("kernel32.dll", "int", "MultiByteToWideChar", "uint", $icodepage, "dword", $iflags, $stexttype, $vtext, "int", -1, "struct*", $tout, "int", $iout)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 20, @extended, 0)
	If $bretstring Then Return DllStructGetData($tout, 1)
	Return $tout
EndFunc

Func _winapi_multibytetowidecharex($stext, $ptext, $icodepage = 0, $iflags = 0)
	Local $aresult = DllCall("kernel32.dll", "int", "MultiByteToWideChar", "uint", $icodepage, "dword", $iflags, "STR", $stext, "int", -1, "struct*", $ptext, "int", (StringLen($stext) + 1) * 2)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_openprocess($iaccess, $binherit, $ipid, $bdebugpriv = False)
	Local $aresult = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", $iaccess, "bool", $binherit, "dword", $ipid)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return $aresult[0]
	If NOT $bdebugpriv Then Return SetError(100, 0, 0)
	Local $htoken = _security__openthreadtokenex(BitOR($token_adjust_privileges, $token_query))
	If @error Then Return SetError(@error + 10, @extended, 0)
	_security__setprivilege($htoken, "SeDebugPrivilege", True)
	Local $ierror = @error
	Local $iextended = @extended
	Local $iret = 0
	If NOT @error Then
		$aresult = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", $iaccess, "bool", $binherit, "dword", $ipid)
		$ierror = @error
		$iextended = @extended
		If $aresult[0] Then $iret = $aresult[0]
		_security__setprivilege($htoken, "SeDebugPrivilege", False)
		If @error Then
			$ierror = @error + 20
			$iextended = @extended
		EndIf
	Else
		$ierror = @error + 30
	EndIf
	_winapi_closehandle($htoken)
	Return SetError($ierror, $iextended, $iret)
EndFunc

Func __winapi_parsefiledialogpath($spath)
	Local $afiles[3]
	$afiles[0] = 2
	Local $stemp = StringMid($spath, 1, StringInStr($spath, "\", 0, -1) - 1)
	$afiles[1] = $stemp
	$afiles[2] = StringMid($spath, StringInStr($spath, "\", 0, -1) + 1)
	Return $afiles
EndFunc

Func _winapi_pathfindonpath(Const $sfilepath, $aextrapaths = "", Const $spathdelimiter = @LF)
	Local $iextracount = 0
	If IsString($aextrapaths) Then
		If StringLen($aextrapaths) Then
			$aextrapaths = StringSplit($aextrapaths, $spathdelimiter, $str_entiresplit + $str_nocount)
			$iextracount = UBound($aextrapaths, $ubound_rows)
		EndIf
	ElseIf IsArray($aextrapaths) Then
		$iextracount = UBound($aextrapaths)
	EndIf
	Local $tpaths, $tpathptrs
	If $iextracount Then
		Local $tagstruct = ""
		For $path In $aextrapaths
			$tagstruct &= "wchar[" & StringLen($path) + 1 & "];"
		Next
		$tpaths = DllStructCreate($tagstruct)
		$tpathptrs = DllStructCreate("ptr[" & $iextracount + 1 & "]")
		For $i = 1 To $iextracount
			DllStructSetData($tpaths, $i, $aextrapaths[$i - 1])
			DllStructSetData($tpathptrs, 1, DllStructGetPtr($tpaths, $i), $i)
		Next
		DllStructSetData($tpathptrs, 1, Ptr(0), $iextracount + 1)
	EndIf
	Local $aresult = DllCall("shlwapi.dll", "bool", "PathFindOnPathW", "wstr", $sfilepath, "struct*", $tpathptrs)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, $sfilepath)
	Return $aresult[1]
EndFunc

Func _winapi_pointfromrect(ByRef $trect, $bcenter = True)
	Local $ix1 = DllStructGetData($trect, "Left")
	Local $iy1 = DllStructGetData($trect, "Top")
	Local $ix2 = DllStructGetData($trect, "Right")
	Local $iy2 = DllStructGetData($trect, "Bottom")
	If $bcenter Then
		$ix1 = $ix1 + (($ix2 - $ix1) / 2)
		$iy1 = $iy1 + (($iy2 - $iy1) / 2)
	EndIf
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $ix1)
	DllStructSetData($tpoint, "Y", $iy1)
	Return $tpoint
EndFunc

Func _winapi_postmessage($hwnd, $imsg, $wparam, $lparam)
	Local $aresult = DllCall("user32.dll", "bool", "PostMessage", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_primarylangid($ilngid)
	Return BitAND($ilngid, 1023)
EndFunc

Func _winapi_ptinrect(ByRef $trect, ByRef $tpoint)
	Local $aresult = DllCall("user32.dll", "bool", "PtInRect", "struct*", $trect, "struct", $tpoint)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_readfile($hfile, $pbuffer, $itoread, ByRef $iread, $toverlapped = 0)
	Local $aresult = DllCall("kernel32.dll", "bool", "ReadFile", "handle", $hfile, "struct*", $pbuffer, "dword", $itoread, "dword*", 0, "struct*", $toverlapped)
	If @error Then Return SetError(@error, @extended, False)
	$iread = $aresult[4]
	Return $aresult[0]
EndFunc

Func _winapi_readprocessmemory($hprocess, $pbaseaddress, $pbuffer, $isize, ByRef $iread)
	Local $aresult = DllCall("kernel32.dll", "bool", "ReadProcessMemory", "handle", $hprocess, "ptr", $pbaseaddress, "struct*", $pbuffer, "ulong_ptr", $isize, "ulong_ptr*", 0)
	If @error Then Return SetError(@error, @extended, False)
	$iread = $aresult[5]
	Return $aresult[0]
EndFunc

Func _winapi_rectisempty(ByRef $trect)
	Return (DllStructGetData($trect, "Left") = 0) AND (DllStructGetData($trect, "Top") = 0) AND (DllStructGetData($trect, "Right") = 0) AND (DllStructGetData($trect, "Bottom") = 0)
EndFunc

Func _winapi_redrawwindow($hwnd, $trect = 0, $hregion = 0, $iflags = 5)
	Local $aresult = DllCall("user32.dll", "bool", "RedrawWindow", "hwnd", $hwnd, "struct*", $trect, "handle", $hregion, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_registerwindowmessage($smessage)
	Local $aresult = DllCall("user32.dll", "uint", "RegisterWindowMessageW", "wstr", $smessage)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_releasecapture()
	Local $aresult = DllCall("user32.dll", "bool", "ReleaseCapture")
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_releasedc($hwnd, $hdc)
	Local $aresult = DllCall("user32.dll", "int", "ReleaseDC", "hwnd", $hwnd, "handle", $hdc)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_screentoclient($hwnd, ByRef $tpoint)
	Local $aresult = DllCall("user32.dll", "bool", "ScreenToClient", "hwnd", $hwnd, "struct*", $tpoint)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_selectobject($hdc, $hgdiobj)
	Local $aresult = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdc, "handle", $hgdiobj)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setbkcolor($hdc, $icolor)
	Local $aresult = DllCall("gdi32.dll", "INT", "SetBkColor", "handle", $hdc, "INT", $icolor)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_setbkmode($hdc, $ibkmode)
	Local $aresult = DllCall("gdi32.dll", "int", "SetBkMode", "handle", $hdc, "int", $ibkmode)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setcapture($hwnd)
	Local $aresult = DllCall("user32.dll", "hwnd", "SetCapture", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setcursor($hcursor)
	Local $aresult = DllCall("user32.dll", "handle", "SetCursor", "handle", $hcursor)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setdefaultprinter($sprinter)
	Local $aresult = DllCall("winspool.drv", "bool", "SetDefaultPrinterW", "wstr", $sprinter)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setdibits($hdc, $hbitmap, $istartscan, $iscanlines, $pbits, $tbmi, $icoloruse = 0)
	Local $aresult = DllCall("gdi32.dll", "int", "SetDIBits", "handle", $hdc, "handle", $hbitmap, "uint", $istartscan, "uint", $iscanlines, "struct*", $pbits, "struct*", $tbmi, "INT", $icoloruse)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setendoffile($hfile)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetEndOfFile", "handle", $hfile)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setevent($hevent)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetEvent", "handle", $hevent)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setfilepointer($hfile, $ipos, $imethod = 0)
	Local $aresult = DllCall("kernel32.dll", "INT", "SetFilePointer", "handle", $hfile, "long", $ipos, "ptr", 0, "long", $imethod)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_setfocus($hwnd)
	Local $aresult = DllCall("user32.dll", "hwnd", "SetFocus", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setfont($hwnd, $hfont, $bredraw = True)
	_sendmessage($hwnd, $__winapiconstant_wm_setfont, $hfont, $bredraw, 0, "hwnd")
EndFunc

Func _winapi_sethandleinformation($hobject, $imask, $iflags)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetHandleInformation", "handle", $hobject, "dword", $imask, "dword", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setlayeredwindowattributes($hwnd, $itranscolor, $itransgui = 255, $iflags = 3, $bcolorref = False)
	If $iflags = Default OR $iflags = "" OR $iflags < 0 Then $iflags = 3
	If NOT $bcolorref Then
		$itranscolor = Int(BinaryMid($itranscolor, 3, 1) & BinaryMid($itranscolor, 2, 1) & BinaryMid($itranscolor, 1, 1))
	EndIf
	Local $aresult = DllCall("user32.dll", "bool", "SetLayeredWindowAttributes", "hwnd", $hwnd, "INT", $itranscolor, "byte", $itransgui, "dword", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setparent($hwndchild, $hwndparent)
	Local $aresult = DllCall("user32.dll", "hwnd", "SetParent", "hwnd", $hwndchild, "hwnd", $hwndparent)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setprocessaffinitymask($hprocess, $imask)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetProcessAffinityMask", "handle", $hprocess, "ulong_ptr", $imask)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setsyscolors($velements, $vcolors)
	Local $bisearray = IsArray($velements), $biscarray = IsArray($vcolors)
	Local $ielementnum
	If NOT $biscarray AND NOT $bisearray Then
		$ielementnum = 1
	ElseIf $biscarray OR $bisearray Then
		If NOT $biscarray OR NOT $bisearray Then Return SetError(-1, -1, False)
		If UBound($velements) <> UBound($vcolors) Then Return SetError(-1, -1, False)
		$ielementnum = UBound($velements)
	EndIf
	Local $telements = DllStructCreate("int Element[" & $ielementnum & "]")
	Local $tcolors = DllStructCreate("INT NewColor[" & $ielementnum & "]")
	If NOT $bisearray Then
		DllStructSetData($telements, "Element", $velements, 1)
	Else
		For $x = 0 To $ielementnum - 1
			DllStructSetData($telements, "Element", $velements[$x], $x + 1)
		Next
	EndIf
	If NOT $biscarray Then
		DllStructSetData($tcolors, "NewColor", $vcolors, 1)
	Else
		For $x = 0 To $ielementnum - 1
			DllStructSetData($tcolors, "NewColor", $vcolors[$x], $x + 1)
		Next
	EndIf
	Local $aresult = DllCall("user32.dll", "bool", "SetSysColors", "int", $ielementnum, "struct*", $telements, "struct*", $tcolors)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_settextcolor($hdc, $icolor)
	Local $aresult = DllCall("gdi32.dll", "INT", "SetTextColor", "handle", $hdc, "INT", $icolor)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowlong($hwnd, $iindex, $ivalue)
	_winapi_setlasterror(0)
	Local $sfuncname = "SetWindowLongW"
	If @AutoItX64 Then $sfuncname = "SetWindowLongPtrW"
	Local $aresult = DllCall("user32.dll", "long_ptr", $sfuncname, "hwnd", $hwnd, "int", $iindex, "long_ptr", $ivalue)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowplacement($hwnd, $twindowplacement)
	Local $aresult = DllCall("user32.dll", "bool", "SetWindowPlacement", "hwnd", $hwnd, "struct*", $twindowplacement)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowpos($hwnd, $hafter, $ix, $iy, $icx, $icy, $iflags)
	Local $aresult = DllCall("user32.dll", "bool", "SetWindowPos", "hwnd", $hwnd, "hwnd", $hafter, "int", $ix, "int", $iy, "int", $icx, "int", $icy, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowrgn($hwnd, $hrgn, $bredraw = True)
	Local $aresult = DllCall("user32.dll", "int", "SetWindowRgn", "hwnd", $hwnd, "handle", $hrgn, "bool", $bredraw)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowshookex($ihook, $pproc, $hdll, $ithreadid = 0)
	Local $aresult = DllCall("user32.dll", "handle", "SetWindowsHookEx", "int", $ihook, "ptr", $pproc, "handle", $hdll, "dword", $ithreadid)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowtext($hwnd, $stext)
	Local $aresult = DllCall("user32.dll", "bool", "SetWindowTextW", "hwnd", $hwnd, "wstr", $stext)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_showcursor($bshow)
	Local $aresult = DllCall("user32.dll", "int", "ShowCursor", "bool", $bshow)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_showerror($stext, $bexit = True)
	_winapi_msgbox($mb_systemmodal, "Error", $stext)
	If $bexit Then Exit
EndFunc

Func _winapi_showmsg($stext)
	_winapi_msgbox($mb_systemmodal, "Information", $stext)
EndFunc

Func _winapi_showwindow($hwnd, $icmdshow = 5)
	Local $aresult = DllCall("user32.dll", "bool", "ShowWindow", "hwnd", $hwnd, "int", $icmdshow)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_stringfromguid($tguid)
	Local $aresult = DllCall("ole32.dll", "int", "StringFromGUID2", "struct*", $tguid, "wstr", "", "int", 40)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, "")
	Return SetExtended($aresult[0], $aresult[2])
EndFunc

Func _winapi_stringlena(Const ByRef $tstring)
	Local $aresult = DllCall("kernel32.dll", "int", "lstrlenA", "struct*", $tstring)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_stringlenw(Const ByRef $tstring)
	Local $aresult = DllCall("kernel32.dll", "int", "lstrlenW", "struct*", $tstring)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_sublangid($ilngid)
	Return BitShift($ilngid, 10)
EndFunc

Func _winapi_systemparametersinfo($iaction, $iparam = 0, $vparam = 0, $iwinini = 0)
	Local $aresult = DllCall("user32.dll", "bool", "SystemParametersInfoW", "uint", $iaction, "uint", $iparam, "struct*", $vparam, "uint", $iwinini)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_twipsperpixelx()
	Local $hdc, $itwipsperpixelx
	$hdc = _winapi_getdc(0)
	$itwipsperpixelx = 1440 / _winapi_getdevicecaps($hdc, $__winapiconstant_logpixelsx)
	_winapi_releasedc(0, $hdc)
	Return $itwipsperpixelx
EndFunc

Func _winapi_twipsperpixely()
	Local $hdc, $itwipsperpixely
	$hdc = _winapi_getdc(0)
	$itwipsperpixely = 1440 / _winapi_getdevicecaps($hdc, $__winapiconstant_logpixelsy)
	_winapi_releasedc(0, $hdc)
	Return $itwipsperpixely
EndFunc

Func _winapi_unhookwindowshookex($hhook)
	Local $aresult = DllCall("user32.dll", "bool", "UnhookWindowsHookEx", "handle", $hhook)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_updatelayeredwindow($hwnd, $hdestdc, $tptdest, $tsize, $hsrcdc, $tptsrce, $irgb, $tblend, $iflags)
	Local $aresult = DllCall("user32.dll", "bool", "UpdateLayeredWindow", "hwnd", $hwnd, "handle", $hdestdc, "struct*", $tptdest, "struct*", $tsize, "handle", $hsrcdc, "struct*", $tptsrce, "dword", $irgb, "struct*", $tblend, "dword", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_updatewindow($hwnd)
	Local $aresult = DllCall("user32.dll", "bool", "UpdateWindow", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_waitforinputidle($hprocess, $itimeout = -1)
	Local $aresult = DllCall("user32.dll", "dword", "WaitForInputIdle", "handle", $hprocess, "dword", $itimeout)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_waitformultipleobjects($icount, $pahandles, $bwaitall = False, $itimeout = -1)
	Local $aresult = DllCall("kernel32.dll", "INT", "WaitForMultipleObjects", "dword", $icount, "struct*", $pahandles, "bool", $bwaitall, "dword", $itimeout)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_waitforsingleobject($hhandle, $itimeout = -1)
	Local $aresult = DllCall("kernel32.dll", "INT", "WaitForSingleObject", "handle", $hhandle, "dword", $itimeout)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_widechartomultibyte($vunicode, $icodepage = 0, $bretstring = True)
	Local $sunicodetype = "wstr"
	If NOT IsString($vunicode) Then $sunicodetype = "struct*"
	Local $aresult = DllCall("kernel32.dll", "int", "WideCharToMultiByte", "uint", $icodepage, "dword", 0, $sunicodetype, $vunicode, "int", -1, "ptr", 0, "int", 0, "ptr", 0, "ptr", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 20, @extended, "")
	Local $tmultibyte = DllStructCreate("char[" & $aresult[0] & "]")
	$aresult = DllCall("kernel32.dll", "int", "WideCharToMultiByte", "uint", $icodepage, "dword", 0, $sunicodetype, $vunicode, "int", -1, "struct*", $tmultibyte, "int", $aresult[0], "ptr", 0, "ptr", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, "")
	If $bretstring Then Return DllStructGetData($tmultibyte, 1)
	Return $tmultibyte
EndFunc

Func _winapi_windowfrompoint(ByRef $tpoint)
	Local $aresult = DllCall("user32.dll", "hwnd", "WindowFromPoint", "struct", $tpoint)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_writeconsole($hconsole, $stext)
	Local $aresult = DllCall("kernel32.dll", "bool", "WriteConsoleW", "handle", $hconsole, "wstr", $stext, "dword", StringLen($stext), "dword*", 0, "ptr", 0)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_writefile($hfile, $pbuffer, $itowrite, ByRef $iwritten, $toverlapped = 0)
	Local $aresult = DllCall("kernel32.dll", "bool", "WriteFile", "handle", $hfile, "struct*", $pbuffer, "dword", $itowrite, "dword*", 0, "struct*", $toverlapped)
	If @error Then Return SetError(@error, @extended, False)
	$iwritten = $aresult[4]
	Return $aresult[0]
EndFunc

Func _winapi_writeprocessmemory($hprocess, $pbaseaddress, $pbuffer, $isize, ByRef $iwritten, $sbuffer = "ptr")
	Local $aresult = DllCall("kernel32.dll", "bool", "WriteProcessMemory", "handle", $hprocess, "ptr", $pbaseaddress, $sbuffer, $pbuffer, "ulong_ptr", $isize, "ulong_ptr*", 0)
	If @error Then Return SetError(@error, @extended, False)
	$iwritten = $aresult[5]
	Return $aresult[0]
EndFunc

Global Const $_udf_globalids_offset = 2
Global Const $_udf_globalid_max_win = 16
Global Const $_udf_startid = 10000
Global Const $_udf_globalid_max_ids = 55535
Global Const $__udfguiconstant_ws_tabstop = 65536
Global Const $__udfguiconstant_ws_visible = 268435456
Global Const $__udfguiconstant_ws_child = 1073741824
Global $__g_audf_globalids_used[$_udf_globalid_max_win][$_udf_globalid_max_ids + $_udf_globalids_offset + 1]

Func __udf_getnextglobalid($hwnd)
	Local $nctrlid, $iusedindex = -1, $ballused = True
	If NOT WinExists($hwnd) Then Return SetError(-1, -1, 0)
	For $iindex = 0 To $_udf_globalid_max_win - 1
		If $__g_audf_globalids_used[$iindex][0] <> 0 Then
			If NOT WinExists($__g_audf_globalids_used[$iindex][0]) Then
				For $x = 0 To UBound($__g_audf_globalids_used, $ubound_columns) - 1
					$__g_audf_globalids_used[$iindex][$x] = 0
				Next
				$__g_audf_globalids_used[$iindex][1] = $_udf_startid
				$ballused = False
			EndIf
		EndIf
	Next
	For $iindex = 0 To $_udf_globalid_max_win - 1
		If $__g_audf_globalids_used[$iindex][0] = $hwnd Then
			$iusedindex = $iindex
			ExitLoop
		EndIf
	Next
	If $iusedindex = -1 Then
		For $iindex = 0 To $_udf_globalid_max_win - 1
			If $__g_audf_globalids_used[$iindex][0] = 0 Then
				$__g_audf_globalids_used[$iindex][0] = $hwnd
				$__g_audf_globalids_used[$iindex][1] = $_udf_startid
				$ballused = False
				$iusedindex = $iindex
				ExitLoop
			EndIf
		Next
	EndIf
	If $iusedindex = -1 AND $ballused Then Return SetError(16, 0, 0)
	If $__g_audf_globalids_used[$iusedindex][1] = $_udf_startid + $_udf_globalid_max_ids Then
		For $iidindex = $_udf_globalids_offset To UBound($__g_audf_globalids_used, $ubound_columns) - 1
			If $__g_audf_globalids_used[$iusedindex][$iidindex] = 0 Then
				$nctrlid = ($iidindex - $_udf_globalids_offset) + 10000
				$__g_audf_globalids_used[$iusedindex][$iidindex] = $nctrlid
				Return $nctrlid
			EndIf
		Next
		Return SetError(-1, $_udf_globalid_max_ids, 0)
	EndIf
	$nctrlid = $__g_audf_globalids_used[$iusedindex][1]
	$__g_audf_globalids_used[$iusedindex][1] += 1
	$__g_audf_globalids_used[$iusedindex][($nctrlid - 10000) + $_udf_globalids_offset] = $nctrlid
	Return $nctrlid
EndFunc

Func __udf_freeglobalid($hwnd, $iglobalid)
	If $iglobalid - $_udf_startid < 0 OR $iglobalid - $_udf_startid > $_udf_globalid_max_ids Then Return SetError(-1, 0, False)
	For $iindex = 0 To $_udf_globalid_max_win - 1
		If $__g_audf_globalids_used[$iindex][0] = $hwnd Then
			For $x = $_udf_globalids_offset To UBound($__g_audf_globalids_used, $ubound_columns) - 1
				If $__g_audf_globalids_used[$iindex][$x] = $iglobalid Then
					$__g_audf_globalids_used[$iindex][$x] = 0
					Return True
				EndIf
			Next
			Return SetError(-3, 0, False)
		EndIf
	Next
	Return SetError(-2, 0, False)
EndFunc

Global $__g_hsblastwnd
Global Const $__statusbarconstant_classname = "msctls_statusbar32"
Global Const $__statusbarconstant_wm_size = 5
Global Const $__statusbarconstant_clr_default = -16777216
Global Const $tagborders = "int BX;int BY;int RX"

Func _guictrlstatusbar_create($hwnd, $vpartedge = -1, $vparttext = "", $istyles = -1, $iexstyles = 0)
	If NOT IsHWnd($hwnd) Then Return SetError(1, 0, 0)
	Local $istyle = BitOR($__udfguiconstant_ws_child, $__udfguiconstant_ws_visible)
	If $istyles = -1 Then $istyles = 0
	If $iexstyles = -1 Then $iexstyles = 0
	Local $apartwidth[1], $aparttext[1]
	If @NumParams > 1 Then
		If IsArray($vpartedge) Then
			$apartwidth = $vpartedge
		Else
			$apartwidth[0] = $vpartedge
		EndIf
		If @NumParams = 2 Then
			ReDim $aparttext[UBound($apartwidth)]
		Else
			If IsArray($vparttext) Then
				$aparttext = $vparttext
			Else
				$aparttext[0] = $vparttext
			EndIf
			If UBound($apartwidth) <> UBound($aparttext) Then
				Local $ilast
				If UBound($apartwidth) > UBound($aparttext) Then
					$ilast = UBound($aparttext)
					ReDim $aparttext[UBound($apartwidth)]
				Else
					$ilast = UBound($apartwidth)
					ReDim $apartwidth[UBound($aparttext)]
					For $x = $ilast To UBound($apartwidth) - 1
						$apartwidth[$x] = $apartwidth[$x - 1] + 75
					Next
					$apartwidth[UBound($aparttext) - 1] = -1
				EndIf
			EndIf
		EndIf
		If NOT IsHWnd($hwnd) Then $hwnd = HWnd($hwnd)
		If @NumParams > 3 Then $istyle = BitOR($istyle, $istyles)
	EndIf
	Local $nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Local $hwndsbar = _winapi_createwindowex($iexstyles, $__statusbarconstant_classname, "", $istyle, 0, 0, 0, 0, $hwnd, $nctrlid)
	If @error Then Return SetError(@error, @extended, 0)
	If @NumParams > 1 Then
		_guictrlstatusbar_setparts($hwndsbar, UBound($apartwidth), $apartwidth)
		For $x = 0 To UBound($aparttext) - 1
			_guictrlstatusbar_settext($hwndsbar, $aparttext[$x], $x)
		Next
	EndIf
	Return $hwndsbar
EndFunc

Func _guictrlstatusbar_destroy(ByRef $hwnd)
	If NOT _winapi_isclassname($hwnd, $__statusbarconstant_classname) Then Return SetError(2, 2, False)
	Local $idestroyed = 0
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hsblastwnd) Then
			Local $nctrlid = _winapi_getdlgctrlid($hwnd)
			Local $hparent = _winapi_getparent($hwnd)
			$idestroyed = _winapi_destroywindow($hwnd)
			Local $iret = __udf_freeglobalid($hparent, $nctrlid)
			If NOT $iret Then
			EndIf
		Else
			Return SetError(1, 1, False)
		EndIf
	EndIf
	If $idestroyed Then $hwnd = 0
	Return $idestroyed <> 0
EndFunc

Func _guictrlstatusbar_embedcontrol($hwnd, $ipart, $hcontrol, $ifit = 4)
	Local $arect = _guictrlstatusbar_getrect($hwnd, $ipart)
	Local $ibarx = $arect[0]
	Local $ibary = $arect[1]
	Local $ibarw = $arect[2] - $ibarx
	Local $ibarh = $arect[3] - $ibary
	Local $iconx = $ibarx
	Local $icony = $ibary
	Local $iconw = _winapi_getwindowwidth($hcontrol)
	Local $iconh = _winapi_getwindowheight($hcontrol)
	If $iconw > $ibarw Then $iconw = $ibarw
	If $iconh > $ibarh Then $iconh = $ibarh
	Local $ipadx = ($ibarw - $iconw) / 2
	Local $ipady = ($ibarh - $iconh) / 2
	If $ipadx < 0 Then $ipadx = 0
	If $ipady < 0 Then $ipady = 0
	If BitAND($ifit, 1) = 1 Then $iconx = $ibarx + $ipadx
	If BitAND($ifit, 2) = 2 Then $icony = $ibary + $ipady
	If BitAND($ifit, 4) = 4 Then
		$ipadx = _guictrlstatusbar_getbordersrect($hwnd)
		$ipady = _guictrlstatusbar_getbordersvert($hwnd)
		$iconx = $ibarx
		If _guictrlstatusbar_issimple($hwnd) Then $iconx += $ipadx
		$icony = $ibary + $ipady
		$iconw = $ibarw - ($ipadx * 2)
		$iconh = $ibarh - ($ipady * 2)
	EndIf
	_winapi_setparent($hcontrol, $hwnd)
	_winapi_movewindow($hcontrol, $iconx, $icony, $iconw, $iconh)
EndFunc

Func _guictrlstatusbar_getborders($hwnd)
	Local $tborders = DllStructCreate($tagborders)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hsblastwnd) Then
		$iret = _sendmessage($hwnd, $sb_getborders, 0, $tborders, 0, "wparam", "struct*")
	Else
		Local $isize = DllStructGetSize($tborders)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $isize, $tmemmap)
		$iret = _sendmessage($hwnd, $sb_getborders, 0, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $tborders, $isize)
		_memfree($tmemmap)
	EndIf
	Local $aborders[3]
	If $iret = 0 Then Return SetError(-1, -1, $aborders)
	$aborders[0] = DllStructGetData($tborders, "BX")
	$aborders[1] = DllStructGetData($tborders, "BY")
	$aborders[2] = DllStructGetData($tborders, "RX")
	Return $aborders
EndFunc

Func _guictrlstatusbar_getbordershorz($hwnd)
	Local $aborders = _guictrlstatusbar_getborders($hwnd)
	Return SetError(@error, @extended, $aborders[0])
EndFunc

Func _guictrlstatusbar_getbordersrect($hwnd)
	Local $aborders = _guictrlstatusbar_getborders($hwnd)
	Return SetError(@error, @extended, $aborders[2])
EndFunc

Func _guictrlstatusbar_getbordersvert($hwnd)
	Local $aborders = _guictrlstatusbar_getborders($hwnd)
	Return SetError(@error, @extended, $aborders[1])
EndFunc

Func _guictrlstatusbar_getcount($hwnd)
	Return _sendmessage($hwnd, $sb_getparts)
EndFunc

Func _guictrlstatusbar_getheight($hwnd)
	Local $trect = _guictrlstatusbar_getrectex($hwnd, 0)
	Return DllStructGetData($trect, "Bottom") - DllStructGetData($trect, "Top") - (_guictrlstatusbar_getbordersvert($hwnd) * 2)
EndFunc

Func _guictrlstatusbar_geticon($hwnd, $iindex = 0)
	Return _sendmessage($hwnd, $sb_geticon, $iindex, 0, 0, "wparam", "lparam", "handle")
EndFunc

Func _guictrlstatusbar_getparts($hwnd)
	Local $icount = _guictrlstatusbar_getcount($hwnd)
	Local $tparts = DllStructCreate("int[" & $icount & "]")
	Local $aparts[$icount + 1]
	If _winapi_inprocess($hwnd, $__g_hsblastwnd) Then
		$aparts[0] = _sendmessage($hwnd, $sb_getparts, $icount, $tparts, 0, "wparam", "struct*")
	Else
		Local $iparts = DllStructGetSize($tparts)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iparts, $tmemmap)
		$aparts[0] = _sendmessage($hwnd, $sb_getparts, $icount, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $tparts, $iparts)
		_memfree($tmemmap)
	EndIf
	For $ii = 1 To $icount
		$aparts[$ii] = DllStructGetData($tparts, 1, $ii)
	Next
	Return $aparts
EndFunc

Func _guictrlstatusbar_getrect($hwnd, $ipart)
	Local $trect = _guictrlstatusbar_getrectex($hwnd, $ipart)
	If @error Then Return SetError(@error, 0, 0)
	Local $arect[4]
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrlstatusbar_getrectex($hwnd, $ipart)
	Local $trect = DllStructCreate($tagrect)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hsblastwnd) Then
		$iret = _sendmessage($hwnd, $sb_getrect, $ipart, $trect, 0, "wparam", "struct*")
	Else
		Local $irect = DllStructGetSize($trect)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
		$iret = _sendmessage($hwnd, $sb_getrect, $ipart, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $trect, $irect)
		_memfree($tmemmap)
	EndIf
	Return SetError($iret = 0, 0, $trect)
EndFunc

Func _guictrlstatusbar_gettext($hwnd, $ipart)
	Local $bunicode = _guictrlstatusbar_getunicodeformat($hwnd)
	Local $ibuffer = _guictrlstatusbar_gettextlength($hwnd, $ipart) + 1
	If $ibuffer = 1 Then Return SetError(1, 0, "")
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	If _winapi_inprocess($hwnd, $__g_hsblastwnd) Then
		_sendmessage($hwnd, $sb_gettextw, $ipart, $tbuffer, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
		If $bunicode Then
			_sendmessage($hwnd, $sb_gettextw, $ipart, $pmemory, 0, "wparam", "ptr")
		Else
			_sendmessage($hwnd, $sb_gettext, $ipart, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
		_memfree($tmemmap)
	EndIf
	Return DllStructGetData($tbuffer, "Text")
EndFunc

Func _guictrlstatusbar_gettextflags($hwnd, $ipart)
	If _guictrlstatusbar_getunicodeformat($hwnd) Then
		Return _sendmessage($hwnd, $sb_gettextlengthw, $ipart)
	Else
		Return _sendmessage($hwnd, $sb_gettextlength, $ipart)
	EndIf
EndFunc

Func _guictrlstatusbar_gettextlength($hwnd, $ipart)
	Return _winapi_loword(_guictrlstatusbar_gettextflags($hwnd, $ipart))
EndFunc

Func _guictrlstatusbar_gettextlengthex($hwnd, $ipart)
	Return _winapi_hiword(_guictrlstatusbar_gettextflags($hwnd, $ipart))
EndFunc

Func _guictrlstatusbar_gettiptext($hwnd, $ipart)
	Local $bunicode = _guictrlstatusbar_getunicodeformat($hwnd)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	If _winapi_inprocess($hwnd, $__g_hsblastwnd) Then
		_sendmessage($hwnd, $sb_gettiptextw, _winapi_makelong($ipart, 4096), $tbuffer, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, 4096, $tmemmap)
		If $bunicode Then
			_sendmessage($hwnd, $sb_gettiptextw, _winapi_makelong($ipart, 4096), $pmemory, 0, "wparam", "ptr")
		Else
			_sendmessage($hwnd, $sb_gettiptexta, _winapi_makelong($ipart, 4096), $pmemory, 0, "wparam", "ptr")
		EndIf
		_memread($tmemmap, $pmemory, $tbuffer, 4096)
		_memfree($tmemmap)
	EndIf
	Return DllStructGetData($tbuffer, "Text")
EndFunc

Func _guictrlstatusbar_getunicodeformat($hwnd)
	Return _sendmessage($hwnd, $sb_getunicodeformat) <> 0
EndFunc

Func _guictrlstatusbar_getwidth($hwnd, $ipart)
	Local $trect = _guictrlstatusbar_getrectex($hwnd, $ipart)
	Return DllStructGetData($trect, "Right") - DllStructGetData($trect, "Left") - (_guictrlstatusbar_getbordershorz($hwnd) * 2)
EndFunc

Func _guictrlstatusbar_issimple($hwnd)
	Return _sendmessage($hwnd, $sb_issimple) <> 0
EndFunc

Func _guictrlstatusbar_resize($hwnd)
	_sendmessage($hwnd, $__statusbarconstant_wm_size)
EndFunc

Func _guictrlstatusbar_setbkcolor($hwnd, $icolor)
	$icolor = _sendmessage($hwnd, $sb_setbkcolor, 0, $icolor)
	If $icolor = $__statusbarconstant_clr_default Then Return "0x" & Hex($__statusbarconstant_clr_default)
	Return $icolor
EndFunc

Func _guictrlstatusbar_seticon($hwnd, $ipart, $hicon = -1, $siconfile = "")
	If $hicon = -1 Then Return _sendmessage($hwnd, $sb_seticon, $ipart, $hicon, 0, "wparam", "handle") <> 0
	If StringLen($siconfile) <= 0 Then Return _sendmessage($hwnd, $sb_seticon, $ipart, $hicon) <> 0
	Local $ticon = DllStructCreate("handle")
	Local $vresult = DllCall("shell32.dll", "uint", "ExtractIconExW", "wstr", $siconfile, "int", $hicon, "ptr", 0, "struct*", $ticon, "uint", 1)
	If @error Then Return SetError(@error, @extended, False)
	$vresult = $vresult[0]
	If $vresult > 0 Then $vresult = _sendmessage($hwnd, $sb_seticon, $ipart, DllStructGetData($ticon, 1), 0, "wparam", "handle")
	DllCall("user32.dll", "bool", "DestroyIcon", "handle", DllStructGetData($ticon, 1))
	Return $vresult
EndFunc

Func _guictrlstatusbar_setminheight($hwnd, $iminheight)
	_sendmessage($hwnd, $sb_setminheight, $iminheight)
	_guictrlstatusbar_resize($hwnd)
EndFunc

Func _guictrlstatusbar_setparts($hwnd, $aparts = -1, $apartwidth = 25)
	Local $tparts, $iparts = 1
	If IsArray($aparts) <> 0 Then
		$aparts[UBound($aparts) - 1] = -1
		$iparts = UBound($aparts)
		$tparts = DllStructCreate("int[" & $iparts & "]")
		For $x = 0 To $iparts - 2
			DllStructSetData($tparts, 1, $aparts[$x], $x + 1)
		Next
		DllStructSetData($tparts, 1, -1, $iparts)
	ElseIf IsArray($apartwidth) <> 0 Then
		$iparts = UBound($apartwidth)
		$tparts = DllStructCreate("int[" & $iparts & "]")
		For $x = 0 To $iparts - 2
			DllStructSetData($tparts, 1, $apartwidth[$x], $x + 1)
		Next
		DllStructSetData($tparts, 1, -1, $iparts)
	ElseIf $aparts > 1 Then
		$iparts = $aparts
		$tparts = DllStructCreate("int[" & $iparts & "]")
		For $x = 1 To $iparts - 1
			DllStructSetData($tparts, 1, $apartwidth * $x, $x)
		Next
		DllStructSetData($tparts, 1, -1, $iparts)
	Else
		$tparts = DllStructCreate("int")
		DllStructSetData($tparts, $iparts, -1)
	EndIf
	If _winapi_inprocess($hwnd, $__g_hsblastwnd) Then
		_sendmessage($hwnd, $sb_setparts, $iparts, $tparts, 0, "wparam", "struct*")
	Else
		Local $isize = DllStructGetSize($tparts)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $isize, $tmemmap)
		_memwrite($tmemmap, $tparts)
		_sendmessage($hwnd, $sb_setparts, $iparts, $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	EndIf
	_guictrlstatusbar_resize($hwnd)
	Return True
EndFunc

Func _guictrlstatusbar_setsimple($hwnd, $bsimple = True)
	_sendmessage($hwnd, $sb_simple, $bsimple)
EndFunc

Func _guictrlstatusbar_settext($hwnd, $stext = "", $ipart = 0, $iuflag = 0)
	Local $bunicode = _guictrlstatusbar_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($stext) + 1
	Local $ttext
	If $bunicode Then
		$ttext = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$ttext = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	DllStructSetData($ttext, "Text", $stext)
	If _guictrlstatusbar_issimple($hwnd) Then $ipart = $sb_simpleid
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hsblastwnd) Then
		$iret = _sendmessage($hwnd, $sb_settextw, BitOR($ipart, $iuflag), $ttext, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
		_memwrite($tmemmap, $ttext)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $sb_settextw, BitOR($ipart, $iuflag), $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $sb_settext, BitOR($ipart, $iuflag), $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrlstatusbar_settiptext($hwnd, $ipart, $stext)
	Local $bunicode = _guictrlstatusbar_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($stext) + 1
	Local $ttext
	If $bunicode Then
		$ttext = DllStructCreate("wchar TipText[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$ttext = DllStructCreate("char TipText[" & $ibuffer & "]")
	EndIf
	DllStructSetData($ttext, "TipText", $stext)
	If _winapi_inprocess($hwnd, $__g_hsblastwnd) Then
		_sendmessage($hwnd, $sb_settiptextw, $ipart, $ttext, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
		_memwrite($tmemmap, $ttext, $pmemory, $ibuffer)
		If $bunicode Then
			_sendmessage($hwnd, $sb_settiptextw, $ipart, $pmemory, 0, "wparam", "ptr")
		Else
			_sendmessage($hwnd, $sb_settiptexta, $ipart, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
EndFunc

Func _guictrlstatusbar_setunicodeformat($hwnd, $bunicode = True)
	Return _sendmessage($hwnd, $sb_setunicodeformat, $bunicode)
EndFunc

Func _guictrlstatusbar_showhide($hwnd, $istate)
	If $istate <> @SW_HIDE AND $istate <> @SW_SHOW Then Return SetError(1, 1, False)
	Return _winapi_showwindow($hwnd, $istate)
EndFunc

Global Const $lvgs_normal = 0
Global Const $lvgs_collapsed = 1
Global Const $lvgs_hidden = 2
Global Const $lvgs_noheader = 4
Global Const $lvgs_collapsible = 8
Global Const $lvgs_focused = 16
Global Const $lvgs_selected = 32
Global Const $lvgs_subseted = 64
Global Const $lvgs_subsetlinkfocused = 128
Global Const $lvggr_group = 0
Global Const $lvggr_header = 1
Global Const $lvggr_label = 2
Global Const $lvggr_subsetlink = 3
Global Const $lv_err = -1
Global Const $lvbkif_source_none = 0
Global Const $lvbkif_source_hbitmap = 1
Global Const $lvbkif_source_url = 2
Global Const $lvbkif_source_mask = 3
Global Const $lvbkif_style_normal = 0
Global Const $lvbkif_style_tile = 16
Global Const $lvbkif_style_mask = 16
Global Const $lvbkif_flag_tileoffset = 256
Global Const $lvbkif_type_watermark = 268435456
Global Const $lv_view_details = 1
Global Const $lv_view_icon = 0
Global Const $lv_view_list = 3
Global Const $lv_view_smallicon = 2
Global Const $lv_view_tile = 4
Global Const $lva_alignleft = 1
Global Const $lva_aligntop = 2
Global Const $lva_default = 0
Global Const $lva_snaptogrid = 5
Global Const $lvcdi_item = 0
Global Const $lvcdi_group = 1
Global Const $lvcf_alldata = 63
Global Const $lvcf_fmt = 1
Global Const $lvcf_image = 16
Global Const $lvcfmt_justifymask = 3
Global Const $lvcf_text = 4
Global Const $lvcf_width = 2
Global Const $lvcfmt_bitmap_on_right = 4096
Global Const $lvcfmt_center = 2
Global Const $lvcfmt_col_has_images = 32768
Global Const $lvcfmt_image = 2048
Global Const $lvcfmt_left = 0
Global Const $lvcfmt_right = 1
Global Const $lvcfmt_line_break = 1048576
Global Const $lvcfmt_fill = 2097152
Global Const $lvcfmt_wrap = 4194304
Global Const $lvcfmt_no_title = 8388608
Global Const $lvcfmt_tile_placementmask = BitOR($lvcfmt_line_break, $lvcfmt_fill)
Global Const $lvfi_nearestxy = 64
Global Const $lvfi_param = 1
Global Const $lvfi_partial = 8
Global Const $lvfi_string = 2
Global Const $lvfi_substring = 4
Global Const $lvfi_wrap = 32
Global Const $lvga_footer_left = 8
Global Const $lvga_footer_center = 16
Global Const $lvga_footer_right = 32
Global Const $lvga_header_left = 1
Global Const $lvga_header_center = 2
Global Const $lvga_header_right = 4
Global Const $lvgf_align = 8
Global Const $lvgf_descriptiontop = 1024
Global Const $lvgf_descriptionbottom = 2048
Global Const $lvgf_extendedimage = 8192
Global Const $lvgf_footer = 2
Global Const $lvgf_groupid = 16
Global Const $lvgf_header = 1
Global Const $lvgf_items = 16384
Global Const $lvgf_none = 0
Global Const $lvgf_state = 4
Global Const $lvgf_subset = 32768
Global Const $lvgf_subsetitems = 65536
Global Const $lvgf_subtitle = 256
Global Const $lvgf_task = 512
Global Const $lvgf_titleimage = 4096
Global Const $lvht_above = 8
Global Const $lvht_below = 16
Global Const $lvht_nowhere = 1
Global Const $lvht_onitemicon = 2
Global Const $lvht_onitemlabel = 4
Global Const $lvht_onitemstateicon = 8
Global Const $lvht_toleft = 64
Global Const $lvht_toright = 32
Global Const $lvht_onitem = BitOR($lvht_onitemicon, $lvht_onitemlabel, $lvht_onitemstateicon)
Global Const $lvht_ex_group_header = 268435456
Global Const $lvht_ex_group_footer = 536870912
Global Const $lvht_ex_group_collapse = 1073741824
Global Const $lvht_ex_group_background = -2147483648
Global Const $lvht_ex_group_stateicon = 16777216
Global Const $lvht_ex_group_subsetlink = 33554432
Global Const $lvht_ex_group = BitOR($lvht_ex_group_background, $lvht_ex_group_collapse, $lvht_ex_group_footer, $lvht_ex_group_header, $lvht_ex_group_stateicon, $lvht_ex_group_subsetlink)
Global Const $lvht_ex_oncontents = 67108864
Global Const $lvht_ex_footer = 134217728
Global Const $lvif_colfmt = 65536
Global Const $lvif_columns = 512
Global Const $lvif_groupid = 256
Global Const $lvif_image = 2
Global Const $lvif_indent = 16
Global Const $lvif_norecompute = 2048
Global Const $lvif_param = 4
Global Const $lvif_state = 8
Global Const $lvif_text = 1
Global Const $lvim_after = 1
Global Const $lvir_bounds = 0
Global Const $lvir_icon = 1
Global Const $lvir_label = 2
Global Const $lvir_selectbounds = 3
Global Const $lvis_cut = 4
Global Const $lvis_drophilited = 8
Global Const $lvis_focused = 1
Global Const $lvis_overlaymask = 3840
Global Const $lvis_selected = 2
Global Const $lvis_stateimagemask = 61440
Global Const $lvs_alignleft = 2048
Global Const $lvs_alignmask = 3072
Global Const $lvs_aligntop = 0
Global Const $lvs_autoarrange = 256
Global Const $lvs_default = 13
Global Const $lvs_editlabels = 512
Global Const $lvs_icon = 0
Global Const $lvs_list = 3
Global Const $lvs_nocolumnheader = 16384
Global Const $lvs_nolabelwrap = 128
Global Const $lvs_noscroll = 8192
Global Const $lvs_nosortheader = 32768
Global Const $lvs_ownerdata = 4096
Global Const $lvs_ownerdrawfixed = 1024
Global Const $lvs_report = 1
Global Const $lvs_shareimagelists = 64
Global Const $lvs_showselalways = 8
Global Const $lvs_singlesel = 4
Global Const $lvs_smallicon = 2
Global Const $lvs_sortascending = 16
Global Const $lvs_sortdescending = 32
Global Const $lvs_typemask = 3
Global Const $lvs_typestylemask = 64512
Global Const $lvs_ex_autoautoarrange = 16777216
Global Const $lvs_ex_autocheckselect = 134217728
Global Const $lvs_ex_autosizecolumns = 268435456
Global Const $lvs_ex_borderselect = 32768
Global Const $lvs_ex_checkboxes = 4
Global Const $lvs_ex_columnoverflow = -2147483648
Global Const $lvs_ex_columnsnappoints = 1073741824
Global Const $lvs_ex_doublebuffer = 65536
Global Const $lvs_ex_flatsb = 256
Global Const $lvs_ex_fullrowselect = 32
Global Const $lvs_ex_gridlines = 1
Global Const $lvs_ex_headerdragdrop = 16
Global Const $lvs_ex_headerinallviews = 33554432
Global Const $lvs_ex_hidelabels = 131072
Global Const $lvs_ex_infotip = 1024
Global Const $lvs_ex_justifycolumns = 2097152
Global Const $lvs_ex_labeltip = 16384
Global Const $lvs_ex_multiworkareas = 8192
Global Const $lvs_ex_oneclickactivate = 64
Global Const $lvs_ex_regional = 512
Global Const $lvs_ex_simpleselect = 1048576
Global Const $lvs_ex_snaptogrid = 524288
Global Const $lvs_ex_subitemimages = 2
Global Const $lvs_ex_trackselect = 8
Global Const $lvs_ex_transparentbkgnd = 4194304
Global Const $lvs_ex_transparentshadowtext = 8388608
Global Const $lvs_ex_twoclickactivate = 128
Global Const $lvs_ex_underlinecold = 4096
Global Const $lvs_ex_underlinehot = 2048
Global Const $gui_ss_default_listview = BitOR($lvs_showselalways, $lvs_singlesel)
Global Const $lvm_first = 4096
Global Const $lvm_approximateviewrect = ($lvm_first + 64)
Global Const $lvm_arrange = ($lvm_first + 22)
Global Const $lvm_canceleditlabel = ($lvm_first + 179)
Global Const $lvm_createdragimage = ($lvm_first + 33)
Global Const $lvm_deleteallitems = ($lvm_first + 9)
Global Const $lvm_deletecolumn = ($lvm_first + 28)
Global Const $lvm_deleteitem = ($lvm_first + 8)
Global Const $lvm_editlabela = ($lvm_first + 23)
Global Const $lvm_editlabelw = ($lvm_first + 118)
Global Const $lvm_editlabel = $lvm_editlabela
Global Const $lvm_enablegroupview = ($lvm_first + 157)
Global Const $lvm_ensurevisible = ($lvm_first + 19)
Global Const $lvm_finditem = ($lvm_first + 13)
Global Const $lvm_getbkcolor = ($lvm_first + 0)
Global Const $lvm_getbkimagea = ($lvm_first + 69)
Global Const $lvm_getbkimagew = ($lvm_first + 139)
Global Const $lvm_getcallbackmask = ($lvm_first + 10)
Global Const $lvm_getcolumna = ($lvm_first + 25)
Global Const $lvm_getcolumnw = ($lvm_first + 95)
Global Const $lvm_getcolumnorderarray = ($lvm_first + 59)
Global Const $lvm_getcolumnwidth = ($lvm_first + 29)
Global Const $lvm_getcountperpage = ($lvm_first + 40)
Global Const $lvm_geteditcontrol = ($lvm_first + 24)
Global Const $lvm_getemptytext = ($lvm_first + 204)
Global Const $lvm_getextendedlistviewstyle = ($lvm_first + 55)
Global Const $lvm_getfocusedgroup = ($lvm_first + 93)
Global Const $lvm_getfooterinfo = ($lvm_first + 206)
Global Const $lvm_getfooteritem = ($lvm_first + 208)
Global Const $lvm_getfooteritemrect = ($lvm_first + 207)
Global Const $lvm_getfooterrect = ($lvm_first + 205)
Global Const $lvm_getgroupcount = ($lvm_first + 152)
Global Const $lvm_getgroupinfo = ($lvm_first + 149)
Global Const $lvm_getgroupinfobyindex = ($lvm_first + 153)
Global Const $lvm_getgroupmetrics = ($lvm_first + 156)
Global Const $lvm_getgrouprect = ($lvm_first + 98)
Global Const $lvm_getgroupstate = ($lvm_first + 92)
Global Const $lvm_getheader = ($lvm_first + 31)
Global Const $lvm_gethotcursor = ($lvm_first + 63)
Global Const $lvm_gethotitem = ($lvm_first + 61)
Global Const $lvm_gethovertime = ($lvm_first + 72)
Global Const $lvm_getimagelist = ($lvm_first + 2)
Global Const $lvm_getinsertmark = ($lvm_first + 167)
Global Const $lvm_getinsertmarkcolor = ($lvm_first + 171)
Global Const $lvm_getinsertmarkrect = ($lvm_first + 169)
Global Const $lvm_getisearchstringa = ($lvm_first + 52)
Global Const $lvm_getisearchstringw = ($lvm_first + 117)
Global Const $lvm_getitema = ($lvm_first + 5)
Global Const $lvm_getitemw = ($lvm_first + 75)
Global Const $lvm_getitemcount = ($lvm_first + 4)
Global Const $lvm_getitemindexrect = ($lvm_first + 209)
Global Const $lvm_getitemposition = ($lvm_first + 16)
Global Const $lvm_getitemrect = ($lvm_first + 14)
Global Const $lvm_getitemspacing = ($lvm_first + 51)
Global Const $lvm_getitemstate = ($lvm_first + 44)
Global Const $lvm_getitemtexta = ($lvm_first + 45)
Global Const $lvm_getitemtextw = ($lvm_first + 115)
Global Const $lvm_getnextitem = ($lvm_first + 12)
Global Const $lvm_getnextitemindex = ($lvm_first + 211)
Global Const $lvm_getnumberofworkareas = ($lvm_first + 73)
Global Const $lvm_getorigin = ($lvm_first + 41)
Global Const $lvm_getoutlinecolor = ($lvm_first + 176)
Global Const $lvm_getselectedcolumn = ($lvm_first + 174)
Global Const $lvm_getselectedcount = ($lvm_first + 50)
Global Const $lvm_getselectionmark = ($lvm_first + 66)
Global Const $lvm_getstringwidtha = ($lvm_first + 17)
Global Const $lvm_getstringwidthw = ($lvm_first + 87)
Global Const $lvm_getsubitemrect = ($lvm_first + 56)
Global Const $lvm_gettextbkcolor = ($lvm_first + 37)
Global Const $lvm_gettextcolor = ($lvm_first + 35)
Global Const $lvm_gettileinfo = ($lvm_first + 165)
Global Const $lvm_gettileviewinfo = ($lvm_first + 163)
Global Const $lvm_gettooltips = ($lvm_first + 78)
Global Const $lvm_gettopindex = ($lvm_first + 39)
Global Const $lvm_getunicodeformat = 8192 + 6
Global Const $lvm_getview = ($lvm_first + 143)
Global Const $lvm_getviewrect = ($lvm_first + 34)
Global Const $lvm_getworkareas = ($lvm_first + 70)
Global Const $lvm_hasgroup = ($lvm_first + 161)
Global Const $lvm_hittest = ($lvm_first + 18)
Global Const $lvm_insertcolumna = ($lvm_first + 27)
Global Const $lvm_insertcolumnw = ($lvm_first + 97)
Global Const $lvm_insertgroup = ($lvm_first + 145)
Global Const $lvm_insertgroupsorted = ($lvm_first + 159)
Global Const $lvm_insertitema = ($lvm_first + 7)
Global Const $lvm_insertitemw = ($lvm_first + 77)
Global Const $lvm_insertmarkhittest = ($lvm_first + 168)
Global Const $lvm_isgroupviewenabled = ($lvm_first + 175)
Global Const $lvm_isitemvisible = ($lvm_first + 182)
Global Const $lvm_mapidtoindex = ($lvm_first + 181)
Global Const $lvm_mapindextoid = ($lvm_first + 180)
Global Const $lvm_movegroup = ($lvm_first + 151)
Global Const $lvm_redrawitems = ($lvm_first + 21)
Global Const $lvm_removeallgroups = ($lvm_first + 160)
Global Const $lvm_removegroup = ($lvm_first + 150)
Global Const $lvm_scroll = ($lvm_first + 20)
Global Const $lvm_setbkcolor = ($lvm_first + 1)
Global Const $lvm_setbkimagea = ($lvm_first + 68)
Global Const $lvm_setbkimagew = ($lvm_first + 138)
Global Const $lvm_setcallbackmask = ($lvm_first + 11)
Global Const $lvm_setcolumna = ($lvm_first + 26)
Global Const $lvm_setcolumnw = ($lvm_first + 96)
Global Const $lvm_setcolumnorderarray = ($lvm_first + 58)
Global Const $lvm_setcolumnwidth = ($lvm_first + 30)
Global Const $lvm_setextendedlistviewstyle = ($lvm_first + 54)
Global Const $lvm_setgroupinfo = ($lvm_first + 147)
Global Const $lvm_setgroupmetrics = ($lvm_first + 155)
Global Const $lvm_sethotcursor = ($lvm_first + 62)
Global Const $lvm_sethotitem = ($lvm_first + 60)
Global Const $lvm_sethovertime = ($lvm_first + 71)
Global Const $lvm_seticonspacing = ($lvm_first + 53)
Global Const $lvm_setimagelist = ($lvm_first + 3)
Global Const $lvm_setinfotip = ($lvm_first + 173)
Global Const $lvm_setinsertmark = ($lvm_first + 166)
Global Const $lvm_setinsertmarkcolor = ($lvm_first + 170)
Global Const $lvm_setitema = ($lvm_first + 6)
Global Const $lvm_setitemw = ($lvm_first + 76)
Global Const $lvm_setitemcount = ($lvm_first + 47)
Global Const $lvm_setitemindexstate = ($lvm_first + 210)
Global Const $lvm_setitemposition = ($lvm_first + 15)
Global Const $lvm_setitemposition32 = ($lvm_first + 49)
Global Const $lvm_setitemstate = ($lvm_first + 43)
Global Const $lvm_setitemtexta = ($lvm_first + 46)
Global Const $lvm_setitemtextw = ($lvm_first + 116)
Global Const $lvm_setoutlinecolor = ($lvm_first + 177)
Global Const $lvm_setselectedcolumn = ($lvm_first + 140)
Global Const $lvm_setselectionmark = ($lvm_first + 67)
Global Const $lvm_settextbkcolor = ($lvm_first + 38)
Global Const $lvm_settextcolor = ($lvm_first + 36)
Global Const $lvm_settileinfo = ($lvm_first + 164)
Global Const $lvm_settileviewinfo = ($lvm_first + 162)
Global Const $lvm_settilewidth = ($lvm_first + 141)
Global Const $lvm_settooltips = ($lvm_first + 74)
Global Const $lvm_setunicodeformat = 8192 + 5
Global Const $lvm_setview = ($lvm_first + 142)
Global Const $lvm_setworkareas = ($lvm_first + 65)
Global Const $lvm_sortgroups = ($lvm_first + 158)
Global Const $lvm_sortitems = ($lvm_first + 48)
Global Const $lvm_sortitemsex = ($lvm_first + 81)
Global Const $lvm_subitemhittest = ($lvm_first + 57)
Global Const $lvm_update = ($lvm_first + 42)
Global Const $lvn_first = -100
Global Const $lvn_last = -199
Global Const $lvn_begindrag = ($lvn_first - 9)
Global Const $lvn_beginlabeledita = ($lvn_first - 5)
Global Const $lvn_beginlabeleditw = ($lvn_first - 75)
Global Const $lvn_beginrdrag = ($lvn_first - 11)
Global Const $lvn_beginscroll = ($lvn_first - 80)
Global Const $lvn_columnclick = ($lvn_first - 8)
Global Const $lvn_columndropdown = ($lvn_first - 64)
Global Const $lvn_columnoverflowclick = ($lvn_first - 66)
Global Const $lvn_deleteallitems = ($lvn_first - 4)
Global Const $lvn_deleteitem = ($lvn_first - 3)
Global Const $lvn_endlabeledita = ($lvn_first - 6)
Global Const $lvn_endlabeleditw = ($lvn_first - 76)
Global Const $lvn_endscroll = ($lvn_first - 81)
Global Const $lvn_getdispinfoa = ($lvn_first - 50)
Global Const $lvn_getdispinfow = ($lvn_first - 77)
Global Const $lvn_getdispinfo = $lvn_getdispinfoa
Global Const $lvn_getemptymarkup = ($lvn_first - 87)
Global Const $lvn_getinfotipa = ($lvn_first - 57)
Global Const $lvn_getinfotipw = ($lvn_first - 58)
Global Const $lvn_hottrack = ($lvn_first - 21)
Global Const $lvn_incrementalsearcha = ($lvn_first - 62)
Global Const $lvn_incrementalsearchw = ($lvn_first - 63)
Global Const $lvn_insertitem = ($lvn_first - 2)
Global Const $lvn_itemactivate = ($lvn_first - 14)
Global Const $lvn_itemchanged = ($lvn_first - 1)
Global Const $lvn_itemchanging = ($lvn_first + 0)
Global Const $lvn_keydown = ($lvn_first - 55)
Global Const $lvn_linkclick = ($lvn_first - 84)
Global Const $lvn_marqueebegin = ($lvn_first - 56)
Global Const $lvn_odcachehint = ($lvn_first - 13)
Global Const $lvn_odfinditema = ($lvn_first - 52)
Global Const $lvn_odfinditemw = ($lvn_first - 79)
Global Const $lvn_odfinditem = $lvn_odfinditema
Global Const $lvn_odstatechanged = ($lvn_first - 15)
Global Const $lvn_setdispinfoa = ($lvn_first - 51)
Global Const $lvn_setdispinfow = ($lvn_first - 78)
Global Const $lvni_above = 256
Global Const $lvni_below = 512
Global Const $lvni_toleft = 1024
Global Const $lvni_toright = 2048
Global Const $lvni_all = 0
Global Const $lvni_cut = 4
Global Const $lvni_drophilited = 8
Global Const $lvni_focused = 1
Global Const $lvni_selected = 2
Global Const $lvscw_autosize = -1
Global Const $lvscw_autosize_useheader = -2
Global Const $lvsicf_noinvalidateall = 1
Global Const $lvsicf_noscroll = 2
Global Const $lvsil_normal = 0
Global Const $lvsil_small = 1
Global Const $lvsil_state = 2
Global Const $fw_dontcare = 0
Global Const $fw_thin = 100
Global Const $fw_extralight = 200
Global Const $fw_ultralight = 200
Global Const $fw_light = 300
Global Const $fw_normal = 400
Global Const $fw_regular = 400
Global Const $fw_medium = 500
Global Const $fw_semibold = 600
Global Const $fw_demibold = 600
Global Const $fw_bold = 700
Global Const $fw_extrabold = 800
Global Const $fw_ultrabold = 800
Global Const $fw_heavy = 900
Global Const $fw_black = 900
Global Const $cf_effects = 256
Global Const $cf_printerfonts = 2
Global Const $cf_screenfonts = 1
Global Const $cf_noscriptsel = 8388608
Global Const $cf_inittologfontstruct = 64
Global Const $logpixelsx = 88
Global Const $logpixelsy = 90
Global Const $ansi_charset = 0
Global Const $arabic_charset = 178
Global Const $baltic_charset = 186
Global Const $chinesebig5_charset = 136
Global Const $default_charset = 1
Global Const $easteurope_charset = 238
Global Const $gb2312_charset = 134
Global Const $greek_charset = 161
Global Const $hangeul_charset = 129
Global Const $hebrew_charset = 177
Global Const $johab_charset = 130
Global Const $mac_charset = 77
Global Const $oem_charset = 255
Global Const $russian_charset = 204
Global Const $shiftjis_charset = 128
Global Const $symbol_charset = 2
Global Const $thai_charset = 222
Global Const $turkish_charset = 162
Global Const $vietnamese_charset = 163
Global Const $out_character_precis = 2
Global Const $out_default_precis = 0
Global Const $out_device_precis = 5
Global Const $out_outline_precis = 8
Global Const $out_ps_only_precis = 10
Global Const $out_raster_precis = 6
Global Const $out_string_precis = 1
Global Const $out_stroke_precis = 3
Global Const $out_tt_only_precis = 7
Global Const $out_tt_precis = 4
Global Const $clip_character_precis = 1
Global Const $clip_default_precis = 0
Global Const $clip_dfa_disable = 48
Global Const $clip_embedded = 128
Global Const $clip_lh_angles = 16
Global Const $clip_mask = 15
Global Const $clip_dfa_override = 64
Global Const $clip_stroke_precis = 2
Global Const $clip_tt_always = 32
Global Const $antialiased_quality = 4
Global Const $default_quality = 0
Global Const $draft_quality = 1
Global Const $nonantialiased_quality = 3
Global Const $proof_quality = 2
Global Const $cleartype_quality = 5
Global Const $default_pitch = 0
Global Const $fixed_pitch = 1
Global Const $variable_pitch = 2
Global Const $ff_decorative = 80
Global Const $ff_dontcare = 0
Global Const $ff_modern = 48
Global Const $ff_roman = 16
Global Const $ff_script = 64
Global Const $ff_swiss = 32
Global Const $fs_regular = 0
Global Const $fs_bold = 1
Global Const $fs_italic = 2
Global Const $__miscconstant_cc_anycolor = 256
Global Const $__miscconstant_cc_fullopen = 2
Global Const $__miscconstant_cc_rgbinit = 1
Global Const $tagchoosecolor = "dword Size;hwnd hWndOwnder;handle hInstance;dword rgbResult;ptr CustColors;dword Flags;lparam lCustData;" & "ptr lpfnHook;ptr lpTemplateName"
Global Const $tagchoosefont = "dword Size;hwnd hWndOwner;handle hDC;ptr LogFont;int PointSize;dword Flags;dword rgbColors;lparam CustData;" & "ptr fnHook;ptr TemplateName;handle hInstance;ptr szStyle;word FontType;int SizeMin;int SizeMax"

Func _choosecolor($ireturntype = 0, $icolorref = 0, $ireftype = 0, $hwndownder = 0)
	Local $tagcustcolors = "dword[16]"
	Local $tchoose = DllStructCreate($tagchoosecolor)
	Local $tcc = DllStructCreate($tagcustcolors)
	If $ireftype = 1 Then
		$icolorref = Int($icolorref)
	ElseIf $ireftype = 2 Then
		$icolorref = Hex(String($icolorref), 6)
		$icolorref = "0x" & StringMid($icolorref, 5, 2) & StringMid($icolorref, 3, 2) & StringMid($icolorref, 1, 2)
	EndIf
	DllStructSetData($tchoose, "Size", DllStructGetSize($tchoose))
	DllStructSetData($tchoose, "hWndOwnder", $hwndownder)
	DllStructSetData($tchoose, "rgbResult", $icolorref)
	DllStructSetData($tchoose, "CustColors", DllStructGetPtr($tcc))
	DllStructSetData($tchoose, "Flags", BitOR($__miscconstant_cc_anycolor, $__miscconstant_cc_fullopen, $__miscconstant_cc_rgbinit))
	Local $aresult = DllCall("comdlg32.dll", "bool", "ChooseColor", "struct*", $tchoose)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] = 0 Then Return SetError(-3, -3, -1)
	Local $scolor_picked = DllStructGetData($tchoose, "rgbResult")
	If $ireturntype = 1 Then
		Return "0x" & Hex(String($scolor_picked), 6)
	ElseIf $ireturntype = 2 Then
		$scolor_picked = Hex(String($scolor_picked), 6)
		Return "0x" & StringMid($scolor_picked, 5, 2) & StringMid($scolor_picked, 3, 2) & StringMid($scolor_picked, 1, 2)
	ElseIf $ireturntype = 0 Then
		Return $scolor_picked
	Else
		Return SetError(-4, -4, -1)
	EndIf
EndFunc

Func _choosefont($sfontname = "Courier New", $ipointsize = 10, $ifontcolorref = 0, $ifontweight = 0, $bitalic = False, $bunderline = False, $bstrikethru = False, $hwndowner = 0)
	Local $iitalic = 0, $iunderline = 0, $istrikeout = 0
	$ifontcolorref = BitOR(BitShift(BitAND($ifontcolorref, 255), -16), BitAND($ifontcolorref, 65280), BitShift(BitAND($ifontcolorref, 16711680), 16))
	Local $hdc = __misc_getdc(0)
	Local $iheight = Round(($ipointsize * __misc_getdevicecaps($hdc, $logpixelsx)) / 72, 0)
	__misc_releasedc(0, $hdc)
	Local $tchoosefont = DllStructCreate($tagchoosefont)
	Local $tlogfont = DllStructCreate($taglogfont)
	DllStructSetData($tchoosefont, "Size", DllStructGetSize($tchoosefont))
	DllStructSetData($tchoosefont, "hWndOwner", $hwndowner)
	DllStructSetData($tchoosefont, "LogFont", DllStructGetPtr($tlogfont))
	DllStructSetData($tchoosefont, "PointSize", $ipointsize)
	DllStructSetData($tchoosefont, "Flags", BitOR($cf_screenfonts, $cf_printerfonts, $cf_effects, $cf_inittologfontstruct, $cf_noscriptsel))
	DllStructSetData($tchoosefont, "rgbColors", $ifontcolorref)
	DllStructSetData($tchoosefont, "FontType", 0)
	DllStructSetData($tlogfont, "Height", $iheight)
	DllStructSetData($tlogfont, "Weight", $ifontweight)
	DllStructSetData($tlogfont, "Italic", $bitalic)
	DllStructSetData($tlogfont, "Underline", $bunderline)
	DllStructSetData($tlogfont, "Strikeout", $bstrikethru)
	DllStructSetData($tlogfont, "FaceName", $sfontname)
	Local $aresult = DllCall("comdlg32.dll", "bool", "ChooseFontW", "struct*", $tchoosefont)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] = 0 Then Return SetError(-3, -3, -1)
	Local $sfacename = DllStructGetData($tlogfont, "FaceName")
	If StringLen($sfacename) = 0 AND StringLen($sfontname) > 0 Then $sfacename = $sfontname
	If DllStructGetData($tlogfont, "Italic") Then $iitalic = 2
	If DllStructGetData($tlogfont, "Underline") Then $iunderline = 4
	If DllStructGetData($tlogfont, "Strikeout") Then $istrikeout = 8
	Local $iattributes = BitOR($iitalic, $iunderline, $istrikeout)
	Local $isize = DllStructGetData($tchoosefont, "PointSize") / 10
	Local $icolorref = DllStructGetData($tchoosefont, "rgbColors")
	Local $iweight = DllStructGetData($tlogfont, "Weight")
	Local $scolor_picked = Hex(String($icolorref), 6)
	Return StringSplit($iattributes & "," & $sfacename & "," & $isize & "," & $iweight & "," & $icolorref & "," & "0x" & $scolor_picked & "," & "0x" & StringMid($scolor_picked, 5, 2) & StringMid($scolor_picked, 3, 2) & StringMid($scolor_picked, 1, 2), ",")
EndFunc

Func _clipputfile($sfilepath, $sdelimiter = "|")
	Local Const $gmem_moveable = 2, $cf_hdrop = 15
	$sfilepath &= $sdelimiter & $sdelimiter
	Local $nglobmemsize = 2 * (StringLen($sfilepath) + 20)
	Local $aresult = DllCall("user32.dll", "bool", "OpenClipboard", "hwnd", 0)
	If @error OR $aresult[0] = 0 Then Return SetError(1, _winapi_getlasterror(), False)
	Local $ierror = 0, $ilasterror = 0
	$aresult = DllCall("user32.dll", "bool", "EmptyClipboard")
	If @error OR NOT $aresult[0] Then
		$ierror = 2
		$ilasterror = _winapi_getlasterror()
	Else
		$aresult = DllCall("kernel32.dll", "handle", "GlobalAlloc", "uint", $gmem_moveable, "ulong_ptr", $nglobmemsize)
		If @error OR NOT $aresult[0] Then
			$ierror = 3
			$ilasterror = _winapi_getlasterror()
		Else
			Local $hglobal = $aresult[0]
			$aresult = DllCall("kernel32.dll", "ptr", "GlobalLock", "handle", $hglobal)
			If @error OR NOT $aresult[0] Then
				$ierror = 4
				$ilasterror = _winapi_getlasterror()
			Else
				Local $hlock = $aresult[0]
				Local $tdropfiles = DllStructCreate("dword pFiles;" & $tagpoint & ";bool fNC;bool fWide;wchar[" & StringLen($sfilepath) + 1 & "]", $hlock)
				If @error Then Return SetError(5, 6, False)
				Local $tstruct = DllStructCreate("dword;long;long;bool;bool")
				DllStructSetData($tdropfiles, "pFiles", DllStructGetSize($tstruct))
				DllStructSetData($tdropfiles, "X", 0)
				DllStructSetData($tdropfiles, "Y", 0)
				DllStructSetData($tdropfiles, "fNC", 0)
				DllStructSetData($tdropfiles, "fWide", 1)
				DllStructSetData($tdropfiles, 6, $sfilepath)
				For $i = 1 To StringLen($sfilepath)
					If DllStructGetData($tdropfiles, 6, $i) = $sdelimiter Then DllStructSetData($tdropfiles, 6, Chr(0), $i)
				Next
				$aresult = DllCall("user32.dll", "handle", "SetClipboardData", "uint", $cf_hdrop, "handle", $hglobal)
				If @error OR NOT $aresult[0] Then
					$ierror = 6
					$ilasterror = _winapi_getlasterror()
				EndIf
				$aresult = DllCall("kernel32.dll", "bool", "GlobalUnlock", "handle", $hglobal)
				If (@error OR NOT $aresult[0]) AND NOT $ierror AND _winapi_getlasterror() Then
					$ierror = 8
					$ilasterror = _winapi_getlasterror()
				EndIf
			EndIf
			$aresult = DllCall("kernel32.dll", "ptr", "GlobalFree", "handle", $hglobal)
			If (@error OR $aresult[0]) AND NOT $ierror Then
				$ierror = 9
				$ilasterror = _winapi_getlasterror()
			EndIf
		EndIf
	EndIf
	$aresult = DllCall("user32.dll", "bool", "CloseClipboard")
	If (@error OR NOT $aresult[0]) AND NOT $ierror Then Return SetError(7, _winapi_getlasterror(), False)
	If $ierror Then Return SetError($ierror, $ilasterror, False)
	Return True
EndFunc

Func _mousetrap($ileft = 0, $itop = 0, $iright = 0, $ibottom = 0)
	Local $areturn = 0
	If $ileft = Default Then $ileft = 0
	If $itop = Default Then $itop = 0
	If $iright = Default Then $iright = 0
	If $ibottom = Default Then $ibottom = 0
	If @NumParams = 0 Then
		$areturn = DllCall("user32.dll", "bool", "ClipCursor", "ptr", 0)
		If @error OR NOT $areturn[0] Then Return SetError(1, _winapi_getlasterror(), False)
	Else
		If @NumParams = 2 Then
			$iright = $ileft + 1
			$ibottom = $itop + 1
		EndIf
		Local $trect = DllStructCreate($tagrect)
		DllStructSetData($trect, "Left", $ileft)
		DllStructSetData($trect, "Top", $itop)
		DllStructSetData($trect, "Right", $iright)
		DllStructSetData($trect, "Bottom", $ibottom)
		$areturn = DllCall("user32.dll", "bool", "ClipCursor", "struct*", $trect)
		If @error OR NOT $areturn[0] Then Return SetError(2, _winapi_getlasterror(), False)
	EndIf
	Return True
EndFunc

Func _singleton($soccurrencename, $iflag = 0)
	Local Const $error_already_exists = 183
	Local Const $security_descriptor_revision = 1
	Local $tsecurityattributes = 0
	If BitAND($iflag, 2) Then
		Local $tsecuritydescriptor = DllStructCreate("byte;byte;word;ptr[4]")
		Local $aret = DllCall("advapi32.dll", "bool", "InitializeSecurityDescriptor", "struct*", $tsecuritydescriptor, "dword", $security_descriptor_revision)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then
			$aret = DllCall("advapi32.dll", "bool", "SetSecurityDescriptorDacl", "struct*", $tsecuritydescriptor, "bool", 1, "ptr", 0, "bool", 0)
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] Then
				$tsecurityattributes = DllStructCreate($tagsecurity_attributes)
				DllStructSetData($tsecurityattributes, 1, DllStructGetSize($tsecurityattributes))
				DllStructSetData($tsecurityattributes, 2, DllStructGetPtr($tsecuritydescriptor))
				DllStructSetData($tsecurityattributes, 3, 0)
			EndIf
		EndIf
	EndIf
	Local $ahandle = DllCall("kernel32.dll", "handle", "CreateMutexW", "struct*", $tsecurityattributes, "bool", 1, "wstr", $soccurrencename)
	If @error Then Return SetError(@error, @extended, 0)
	Local $alasterror = DllCall("kernel32.dll", "dword", "GetLastError")
	If @error Then Return SetError(@error, @extended, 0)
	If $alasterror[0] = $error_already_exists Then
		If BitAND($iflag, 1) Then
			DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $ahandle[0])
			If @error Then Return SetError(@error, @extended, 0)
			Return SetError($alasterror[0], $alasterror[0], 0)
		Else
			Exit -1
		EndIf
	EndIf
	Return $ahandle[0]
EndFunc

Func _ispressed($shexkey, $vdll = "user32.dll")
	Local $a_r = DllCall($vdll, "short", "GetAsyncKeyState", "int", "0x" & $shexkey)
	If @error Then Return SetError(@error, @extended, False)
	Return BitAND($a_r[0], 32768) <> 0
EndFunc

Func _versioncompare($sversion1, $sversion2)
	If $sversion1 = $sversion2 Then Return 0
	Local $ssubversion1 = "", $ssubversion2 = ""
	If StringIsAlpha(StringRight($sversion1, 1)) Then
		$ssubversion1 = StringRight($sversion1, 1)
		$sversion1 = StringTrimRight($sversion1, 1)
	EndIf
	If StringIsAlpha(StringRight($sversion2, 1)) Then
		$ssubversion2 = StringRight($sversion2, 1)
		$sversion2 = StringTrimRight($sversion2, 1)
	EndIf
	Local $aversion1 = StringSplit($sversion1, ".,"), $aversion2 = StringSplit($sversion2, ".,")
	Local $ipartdifference = ($aversion1[0] - $aversion2[0])
	If $ipartdifference < 0 Then
		ReDim $aversion1[UBound($aversion2)]
		$aversion1[0] = UBound($aversion1) - 1
		For $i = (UBound($aversion1) - Abs($ipartdifference)) To $aversion1[0]
			$aversion1[$i] = "0"
		Next
	ElseIf $ipartdifference > 0 Then
		ReDim $aversion2[UBound($aversion1)]
		$aversion2[0] = UBound($aversion2) - 1
		For $i = (UBound($aversion2) - Abs($ipartdifference)) To $aversion2[0]
			$aversion2[$i] = "0"
		Next
	EndIf
	For $i = 1 To $aversion1[0]
		If StringIsDigit($aversion1[$i]) AND StringIsDigit($aversion2[$i]) Then
			If Number($aversion1[$i]) > Number($aversion2[$i]) Then
				Return SetExtended(2, 1)
			ElseIf Number($aversion1[$i]) < Number($aversion2[$i]) Then
				Return SetExtended(2, -1)
			ElseIf $i = $aversion1[0] Then
				If $ssubversion1 > $ssubversion2 Then
					Return SetExtended(3, 1)
				ElseIf $ssubversion1 < $ssubversion2 Then
					Return SetExtended(3, -1)
				EndIf
			EndIf
		Else
			If $aversion1[$i] > $aversion2[$i] Then
				Return SetExtended(1, 1)
			ElseIf $aversion1[$i] < $aversion2[$i] Then
				Return SetExtended(1, -1)
			EndIf
		EndIf
	Next
	Return SetExtended(Abs($ipartdifference), 0)
EndFunc

Func __misc_getdc($hwnd)
	Local $aresult = DllCall("user32.dll", "handle", "GetDC", "hwnd", $hwnd)
	If @error OR NOT $aresult[0] Then Return SetError(1, _winapi_getlasterror(), 0)
	Return $aresult[0]
EndFunc

Func __misc_getdevicecaps($hdc, $iindex)
	Local $aresult = DllCall("gdi32.dll", "int", "GetDeviceCaps", "handle", $hdc, "int", $iindex)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func __misc_releasedc($hwnd, $hdc)
	Local $aresult = DllCall("user32.dll", "int", "ReleaseDC", "hwnd", $hwnd, "handle", $hdc)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0] <> 0
EndFunc

Func _crc32forfile($sfile)
	Local $a_hcall = DllCall("kernel32.dll", "hwnd", "CreateFileW", "wstr", $sfile, "dword", -2147483648, "dword", 3, "ptr", 0, "dword", 3, "dword", 0, "ptr", 0)
	If @error OR $a_hcall[0] = -1 Then
		Return SetError(1, 0, "")
	EndIf
	Local $hfile = $a_hcall[0]
	$a_hcall = DllCall("kernel32.dll", "ptr", "CreateFileMappingW", "hwnd", $hfile, "dword", 0, "dword", 2, "dword", 0, "dword", 0, "ptr", 0)
	If @error OR NOT $a_hcall[0] Then
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfile)
		Return SetError(2, 0, "")
	EndIf
	DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfile)
	Local $hfilemappingobject = $a_hcall[0]
	$a_hcall = DllCall("kernel32.dll", "ptr", "MapViewOfFile", "hwnd", $hfilemappingobject, "dword", 4, "dword", 0, "dword", 0, "dword", 0)
	If @error OR NOT $a_hcall[0] Then
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(3, 0, "")
	EndIf
	Local $pfile = $a_hcall[0]
	Local $ibuffersize = FileGetSize($sfile)
	Local $a_icall = DllCall("ntdll.dll", "dword", "RtlComputeCrc32", "dword", 0, "ptr", $pfile, "int", $ibuffersize)
	If @error OR NOT $a_icall[0] Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(4, 0, "")
	EndIf
	DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
	DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
	Local $icrc32 = $a_icall[0]
	Return SetError(0, 0, Hex($icrc32))
EndFunc

Func _md4forfile($sfile)
	Local $a_hcall = DllCall("kernel32.dll", "hwnd", "CreateFileW", "wstr", $sfile, "dword", -2147483648, "dword", 3, "ptr", 0, "dword", 3, "dword", 0, "ptr", 0)
	If @error OR $a_hcall[0] = -1 Then
		Return SetError(1, 0, "")
	EndIf
	Local $hfile = $a_hcall[0]
	$a_hcall = DllCall("kernel32.dll", "ptr", "CreateFileMappingW", "hwnd", $hfile, "dword", 0, "dword", 2, "dword", 0, "dword", 0, "ptr", 0)
	If @error OR NOT $a_hcall[0] Then
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfile)
		Return SetError(2, 0, "")
	EndIf
	DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfile)
	Local $hfilemappingobject = $a_hcall[0]
	$a_hcall = DllCall("kernel32.dll", "ptr", "MapViewOfFile", "hwnd", $hfilemappingobject, "dword", 4, "dword", 0, "dword", 0, "dword", 0)
	If @error OR NOT $a_hcall[0] Then
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(3, 0, "")
	EndIf
	Local $pfile = $a_hcall[0]
	Local $ibuffersize = FileGetSize($sfile)
	Local $tmd4_ctx = DllStructCreate("dword i[2];" & "dword buf[4];" & "ubyte in[64];" & "ubyte digest[16]")
	DllCall("advapi32.dll", "none", "MD4Init", "ptr", DllStructGetPtr($tmd4_ctx))
	If @error Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(4, 0, "")
	EndIf
	DllCall("advapi32.dll", "none", "MD4Update", "ptr", DllStructGetPtr($tmd4_ctx), "ptr", $pfile, "dword", $ibuffersize)
	If @error Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(5, 0, "")
	EndIf
	DllCall("advapi32.dll", "none", "MD4Final", "ptr", DllStructGetPtr($tmd4_ctx))
	If @error Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(6, 0, "")
	EndIf
	DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
	DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
	Local $smd4 = Hex(DllStructGetData($tmd4_ctx, "digest"))
	Return SetError(0, 0, $smd4)
EndFunc

Func _md5forfile($sfile)
	Local $a_hcall = DllCall("kernel32.dll", "hwnd", "CreateFileW", "wstr", $sfile, "dword", -2147483648, "dword", 3, "ptr", 0, "dword", 3, "dword", 0, "ptr", 0)
	If @error OR $a_hcall[0] = -1 Then
		Return SetError(1, 0, "")
	EndIf
	Local $hfile = $a_hcall[0]
	$a_hcall = DllCall("kernel32.dll", "ptr", "CreateFileMappingW", "hwnd", $hfile, "dword", 0, "dword", 2, "dword", 0, "dword", 0, "ptr", 0)
	If @error OR NOT $a_hcall[0] Then
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfile)
		Return SetError(2, 0, "")
	EndIf
	DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfile)
	Local $hfilemappingobject = $a_hcall[0]
	$a_hcall = DllCall("kernel32.dll", "ptr", "MapViewOfFile", "hwnd", $hfilemappingobject, "dword", 4, "dword", 0, "dword", 0, "dword", 0)
	If @error OR NOT $a_hcall[0] Then
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(3, 0, "")
	EndIf
	Local $pfile = $a_hcall[0]
	Local $ibuffersize = FileGetSize($sfile)
	Local $tmd5_ctx = DllStructCreate("dword i[2];" & "dword buf[4];" & "ubyte in[64];" & "ubyte digest[16]")
	DllCall("advapi32.dll", "none", "MD5Init", "ptr", DllStructGetPtr($tmd5_ctx))
	If @error Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(4, 0, "")
	EndIf
	DllCall("advapi32.dll", "none", "MD5Update", "ptr", DllStructGetPtr($tmd5_ctx), "ptr", $pfile, "dword", $ibuffersize)
	If @error Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(5, 0, "")
	EndIf
	DllCall("advapi32.dll", "none", "MD5Final", "ptr", DllStructGetPtr($tmd5_ctx))
	If @error Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(6, 0, "")
	EndIf
	DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
	DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
	Local $smd5 = Hex(DllStructGetData($tmd5_ctx, "digest"))
	Return SetError(0, 0, $smd5)
EndFunc

Func _sha1forfile($sfile)
	Local $a_hcall = DllCall("kernel32.dll", "hwnd", "CreateFileW", "wstr", $sfile, "dword", -2147483648, "dword", 3, "ptr", 0, "dword", 3, "dword", 0, "ptr", 0)
	If @error OR $a_hcall[0] = -1 Then
		Return SetError(1, 0, "")
	EndIf
	Local $hfile = $a_hcall[0]
	$a_hcall = DllCall("kernel32.dll", "ptr", "CreateFileMappingW", "hwnd", $hfile, "dword", 0, "dword", 2, "dword", 0, "dword", 0, "ptr", 0)
	If @error OR NOT $a_hcall[0] Then
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfile)
		Return SetError(2, 0, "")
	EndIf
	DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfile)
	Local $hfilemappingobject = $a_hcall[0]
	$a_hcall = DllCall("kernel32.dll", "ptr", "MapViewOfFile", "hwnd", $hfilemappingobject, "dword", 4, "dword", 0, "dword", 0, "dword", 0)
	If @error OR NOT $a_hcall[0] Then
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(3, 0, "")
	EndIf
	Local $pfile = $a_hcall[0]
	Local $ibuffersize = FileGetSize($sfile)
	Local $a_icall = DllCall("advapi32.dll", "int", "CryptAcquireContext", "ptr*", 0, "ptr", 0, "ptr", 0, "dword", 1, "dword", -268435456)
	If @error OR NOT $a_icall[0] Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		Return SetError(4, 0, "")
	EndIf
	Local $hcontext = $a_icall[1]
	$a_icall = DllCall("advapi32.dll", "int", "CryptCreateHash", "ptr", $hcontext, "dword", 32772, "ptr", 0, "dword", 0, "ptr*", 0)
	If @error OR NOT $a_icall[0] Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		DllCall("advapi32.dll", "int", "CryptReleaseContext", "ptr", $hcontext, "dword", 0)
		Return SetError(5, 0, "")
	EndIf
	Local $hhashsha1 = $a_icall[5]
	$a_icall = DllCall("advapi32.dll", "int", "CryptHashData", "ptr", $hhashsha1, "ptr", $pfile, "dword", $ibuffersize, "dword", 0)
	If @error OR NOT $a_icall[0] Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		DllCall("advapi32.dll", "int", "CryptDestroyHash", "ptr", $hhashsha1)
		DllCall("advapi32.dll", "int", "CryptReleaseContext", "ptr", $hcontext, "dword", 0)
		Return SetError(6, 0, "")
	EndIf
	Local $toutsha1 = DllStructCreate("byte[20]")
	$a_icall = DllCall("advapi32.dll", "int", "CryptGetHashParam", "ptr", $hhashsha1, "dword", 2, "ptr", DllStructGetPtr($toutsha1), "dword*", 20, "dword", 0)
	If @error OR NOT $a_icall[0] Then
		DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
		DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
		DllCall("advapi32.dll", "int", "CryptDestroyHash", "ptr", $hhashsha1)
		DllCall("advapi32.dll", "int", "CryptReleaseContext", "ptr", $hcontext, "dword", 0)
		Return SetError(7, 0, "")
	EndIf
	DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pfile)
	DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hfilemappingobject)
	DllCall("advapi32.dll", "int", "CryptDestroyHash", "ptr", $hhashsha1)
	Local $ssha1 = Hex(DllStructGetData($toutsha1, 1))
	DllCall("advapi32.dll", "int", "CryptReleaseContext", "ptr", $hcontext, "dword", 0)
	Return SetError(0, 0, $ssha1)
EndFunc

Global Const $bs_groupbox = 7
Global Const $bs_bottom = 2048
Global Const $bs_center = 768
Global Const $bs_defpushbutton = 1
Global Const $bs_left = 256
Global Const $bs_multiline = 8192
Global Const $bs_pushbox = 10
Global Const $bs_pushlike = 4096
Global Const $bs_right = 512
Global Const $bs_rightbutton = 32
Global Const $bs_top = 1024
Global Const $bs_vcenter = 3072
Global Const $bs_flat = 32768
Global Const $bs_icon = 64
Global Const $bs_bitmap = 128
Global Const $bs_notify = 16384
Global Const $bs_splitbutton = 12
Global Const $bs_defsplitbutton = 13
Global Const $bs_commandlink = 14
Global Const $bs_defcommandlink = 15
Global Const $bcsif_glyph = 1
Global Const $bcsif_image = 2
Global Const $bcsif_style = 4
Global Const $bcsif_size = 8
Global Const $bcss_nosplit = 1
Global Const $bcss_stretch = 2
Global Const $bcss_alignleft = 4
Global Const $bcss_image = 8
Global Const $button_imagelist_align_left = 0
Global Const $button_imagelist_align_right = 1
Global Const $button_imagelist_align_top = 2
Global Const $button_imagelist_align_bottom = 3
Global Const $button_imagelist_align_center = 4
Global Const $bs_3state = 5
Global Const $bs_auto3state = 6
Global Const $bs_autocheckbox = 3
Global Const $bs_checkbox = 2
Global Const $bs_radiobutton = 4
Global Const $bs_autoradiobutton = 9
Global Const $bs_ownerdraw = 11
Global Const $gui_ss_default_button = 0
Global Const $gui_ss_default_checkbox = 0
Global Const $gui_ss_default_group = 0
Global Const $gui_ss_default_radio = 0
Global Const $bcm_first = 5632
Global Const $bcm_getidealsize = ($bcm_first + 1)
Global Const $bcm_getimagelist = ($bcm_first + 3)
Global Const $bcm_getnote = ($bcm_first + 10)
Global Const $bcm_getnotelength = ($bcm_first + 11)
Global Const $bcm_getsplitinfo = ($bcm_first + 8)
Global Const $bcm_gettextmargin = ($bcm_first + 5)
Global Const $bcm_setdropdownstate = ($bcm_first + 6)
Global Const $bcm_setimagelist = ($bcm_first + 2)
Global Const $bcm_setnote = ($bcm_first + 9)
Global Const $bcm_setshield = ($bcm_first + 12)
Global Const $bcm_setsplitinfo = ($bcm_first + 7)
Global Const $bcm_settextmargin = ($bcm_first + 4)
Global Const $bm_click = 245
Global Const $bm_getcheck = 240
Global Const $bm_getimage = 246
Global Const $bm_getstate = 242
Global Const $bm_setcheck = 241
Global Const $bm_setdontclick = 248
Global Const $bm_setimage = 247
Global Const $bm_setstate = 243
Global Const $bm_setstyle = 244
Global Const $bcn_first = -1250
Global Const $bcn_dropdown = ($bcn_first + 2)
Global Const $bcn_hotitemchange = ($bcn_first + 1)
Global Const $bn_clicked = 0
Global Const $bn_paint = 1
Global Const $bn_hilite = 2
Global Const $bn_unhilite = 3
Global Const $bn_disable = 4
Global Const $bn_doubleclicked = 5
Global Const $bn_setfocus = 6
Global Const $bn_killfocus = 7
Global Const $bn_pushed = $bn_hilite
Global Const $bn_unpushed = $bn_unhilite
Global Const $bn_dblclk = $bn_doubleclicked
Global Const $bst_checked = 1
Global Const $bst_indeterminate = 2
Global Const $bst_unchecked = 0
Global Const $bst_focus = 8
Global Const $bst_pushed = 4
Global Const $bst_dontclick = 128
Global Const $es_left = 0
Global Const $es_center = 1
Global Const $es_right = 2
Global Const $es_multiline = 4
Global Const $es_uppercase = 8
Global Const $es_lowercase = 16
Global Const $es_password = 32
Global Const $es_autovscroll = 64
Global Const $es_autohscroll = 128
Global Const $es_nohidesel = 256
Global Const $es_oemconvert = 1024
Global Const $es_readonly = 2048
Global Const $es_wantreturn = 4096
Global Const $es_number = 8192
Global Const $ec_err = -1
Global Const $ecm_first = 5376
Global Const $em_canundo = 198
Global Const $em_charfrompos = 215
Global Const $em_emptyundobuffer = 205
Global Const $em_fmtlines = 200
Global Const $em_getcuebanner = ($ecm_first + 2)
Global Const $em_getfirstvisibleline = 206
Global Const $em_gethandle = 189
Global Const $em_getimestatus = 217
Global Const $em_getlimittext = 213
Global Const $em_getline = 196
Global Const $em_getlinecount = 186
Global Const $em_getmargins = 212
Global Const $em_getmodify = 184
Global Const $em_getpasswordchar = 210
Global Const $em_getrect = 178
Global Const $em_getsel = 176
Global Const $em_getthumb = 190
Global Const $em_getwordbreakproc = 209
Global Const $em_hideballoontip = ($ecm_first + 4)
Global Const $em_limittext = 197
Global Const $em_linefromchar = 201
Global Const $em_lineindex = 187
Global Const $em_linelength = 193
Global Const $em_linescroll = 182
Global Const $em_posfromchar = 214
Global Const $em_replacesel = 194
Global Const $em_scroll = 181
Global Const $em_scrollcaret = 183
Global Const $em_setcuebanner = ($ecm_first + 1)
Global Const $em_sethandle = 188
Global Const $em_setimestatus = 216
Global Const $em_setlimittext = $em_limittext
Global Const $em_setmargins = 211
Global Const $em_setmodify = 185
Global Const $em_setpasswordchar = 204
Global Const $em_setreadonly = 207
Global Const $em_setrect = 179
Global Const $em_setrectnp = 180
Global Const $em_setsel = 177
Global Const $em_settabstops = 203
Global Const $em_setwordbreakproc = 208
Global Const $em_showballoontip = ($ecm_first + 3)
Global Const $em_undo = 199
Global Const $ec_leftmargin = 1
Global Const $ec_rightmargin = 2
Global Const $ec_usefontinfo = 65535
Global Const $emsis_compositionstring = 1
Global Const $eimes_getcompstratonce = 1
Global Const $eimes_cancelcompstrinfocus = 2
Global Const $eimes_completecompstrkillfocus = 4
Global Const $en_align_ltr_ec = 1792
Global Const $en_align_rtl_ec = 1793
Global Const $en_change = 768
Global Const $en_errspace = 1280
Global Const $en_hscroll = 1537
Global Const $en_killfocus = 512
Global Const $en_maxtext = 1281
Global Const $en_setfocus = 256
Global Const $en_update = 1024
Global Const $en_vscroll = 1538
Global Const $gui_ss_default_edit = 3150016
Global Const $gui_ss_default_input = 128
Global Const $ss_left = 0
Global Const $ss_center = 1
Global Const $ss_right = 2
Global Const $ss_icon = 3
Global Const $ss_blackrect = 4
Global Const $ss_grayrect = 5
Global Const $ss_whiterect = 6
Global Const $ss_blackframe = 7
Global Const $ss_grayframe = 8
Global Const $ss_whiteframe = 9
Global Const $ss_simple = 11
Global Const $ss_leftnowordwrap = 12
Global Const $ss_bitmap = 14
Global Const $ss_enhmetafile = 15
Global Const $ss_etchedhorz = 16
Global Const $ss_etchedvert = 17
Global Const $ss_etchedframe = 18
Global Const $ss_realsizecontrol = 64
Global Const $ss_noprefix = 128
Global Const $ss_notify = 256
Global Const $ss_centerimage = 512
Global Const $ss_rightjust = 1024
Global Const $ss_sunken = 4096
Global Const $gui_ss_default_label = 0
Global Const $gui_ss_default_graphic = 0
Global Const $gui_ss_default_icon = $ss_notify
Global Const $gui_ss_default_pic = $ss_notify
Global Const $stm_seticon = 368
Global Const $stm_geticon = 369
Global Const $stm_setimage = 370
Global Const $stm_getimage = 371
Global Const $wc_animate = "SysAnimate32"
Global Const $wc_button = "Button"
Global Const $wc_combobox = "ComboBox"
Global Const $wc_comboboxex = "ComboBoxEx32"
Global Const $wc_datetimepick = "SysDateTimePick32"
Global Const $wc_edit = "Edit"
Global Const $wc_header = "SysHeader32"
Global Const $wc_hotkey = "msctls_hotkey32"
Global Const $wc_ipaddress = "SysIPAddress32"
Global Const $wc_link = "SysLink"
Global Const $wc_listbox = "ListBox"
Global Const $wc_listview = "SysListView32"
Global Const $wc_monthcal = "SysMonthCal32"
Global Const $wc_nativefontctl = "NativeFontCtl"
Global Const $wc_pagescroller = "SysPager"
Global Const $wc_progress = "msctls_progress32"
Global Const $wc_rebar = "ReBarWindow32"
Global Const $wc_scrollbar = "ScrollBar"
Global Const $wc_static = "Static"
Global Const $wc_statusbar = "msctls_statusbar32"
Global Const $wc_tabcontrol = "SysTabControl32"
Global Const $wc_toolbar = "ToolbarWindow32"
Global Const $wc_tooltips = "tooltips_class32"
Global Const $wc_trackbar = "msctls_trackbar32"
Global Const $wc_treeview = "SysTreeView32"
Global Const $wc_updown = "msctls_updown32"
Global Const $ws_overlapped = 0
Global Const $ws_tiled = $ws_overlapped
Global Const $ws_maximizebox = 65536
Global Const $ws_minimizebox = 131072
Global Const $ws_tabstop = 65536
Global Const $ws_group = 131072
Global Const $ws_sizebox = 262144
Global Const $ws_thickframe = $ws_sizebox
Global Const $ws_sysmenu = 524288
Global Const $ws_hscroll = 1048576
Global Const $ws_vscroll = 2097152
Global Const $ws_dlgframe = 4194304
Global Const $ws_border = 8388608
Global Const $ws_caption = 12582912
Global Const $ws_overlappedwindow = BitOR($ws_caption, $ws_maximizebox, $ws_minimizebox, $ws_overlapped, $ws_sysmenu, $ws_thickframe)
Global Const $ws_tiledwindow = $ws_overlappedwindow
Global Const $ws_maximize = 16777216
Global Const $ws_clipchildren = 33554432
Global Const $ws_clipsiblings = 67108864
Global Const $ws_disabled = 134217728
Global Const $ws_visible = 268435456
Global Const $ws_minimize = 536870912
Global Const $ws_iconic = $ws_minimize
Global Const $ws_child = 1073741824
Global Const $ws_childwindow = $ws_child
Global Const $ws_popup = -2147483648
Global Const $ws_popupwindow = -2138570752
Global Const $ds_3dlook = 4
Global Const $ds_absalign = 1
Global Const $ds_center = 2048
Global Const $ds_centermouse = 4096
Global Const $ds_contexthelp = 8192
Global Const $ds_control = 1024
Global Const $ds_fixedsys = 8
Global Const $ds_localedit = 32
Global Const $ds_modalframe = 128
Global Const $ds_nofailcreate = 16
Global Const $ds_noidlemsg = 256
Global Const $ds_setfont = 64
Global Const $ds_setforeground = 512
Global Const $ds_shellfont = BitOR($ds_fixedsys, $ds_setfont)
Global Const $ds_sysmodal = 2
Global Const $ws_ex_acceptfiles = 16
Global Const $ws_ex_appwindow = 262144
Global Const $ws_ex_composited = 33554432
Global Const $ws_ex_controlparent = 65536
Global Const $ws_ex_clientedge = 512
Global Const $ws_ex_contexthelp = 1024
Global Const $ws_ex_dlgmodalframe = 1
Global Const $ws_ex_layered = 524288
Global Const $ws_ex_layoutrtl = 4194304
Global Const $ws_ex_left = 0
Global Const $ws_ex_leftscrollbar = 16384
Global Const $ws_ex_ltrreading = 0
Global Const $ws_ex_mdichild = 64
Global Const $ws_ex_noactivate = 134217728
Global Const $ws_ex_noinheritlayout = 1048576
Global Const $ws_ex_noparentnotify = 4
Global Const $ws_ex_right = 4096
Global Const $ws_ex_rightscrollbar = 0
Global Const $ws_ex_rtlreading = 8192
Global Const $ws_ex_staticedge = 131072
Global Const $ws_ex_toolwindow = 128
Global Const $ws_ex_topmost = 8
Global Const $ws_ex_transparent = 32
Global Const $ws_ex_windowedge = 256
Global Const $ws_ex_overlappedwindow = BitOR($ws_ex_clientedge, $ws_ex_windowedge)
Global Const $ws_ex_palettewindow = BitOR($ws_ex_toolwindow, $ws_ex_topmost, $ws_ex_windowedge)
Global Const $wm_null = 0
Global Const $wm_create = 1
Global Const $wm_destroy = 2
Global Const $wm_move = 3
Global Const $wm_sizewait = 4
Global Const $wm_size = 5
Global Const $wm_activate = 6
Global Const $wm_setfocus = 7
Global Const $wm_killfocus = 8
Global Const $wm_setvisible = 9
Global Const $wm_enable = 10
Global Const $wm_setredraw = 11
Global Const $wm_settext = 12
Global Const $wm_gettext = 13
Global Const $wm_gettextlength = 14
Global Const $wm_paint = 15
Global Const $wm_close = 16
Global Const $wm_queryendsession = 17
Global Const $wm_quit = 18
Global Const $wm_erasebkgnd = 20
Global Const $wm_queryopen = 19
Global Const $wm_syscolorchange = 21
Global Const $wm_endsession = 22
Global Const $wm_systemerror = 23
Global Const $wm_showwindow = 24
Global Const $wm_ctlcolor = 25
Global Const $wm_settingchange = 26
Global Const $wm_wininichange = 26
Global Const $wm_devmodechange = 27
Global Const $wm_activateapp = 28
Global Const $wm_fontchange = 29
Global Const $wm_timechange = 30
Global Const $wm_cancelmode = 31
Global Const $wm_setcursor = 32
Global Const $wm_mouseactivate = 33
Global Const $wm_childactivate = 34
Global Const $wm_queuesync = 35
Global Const $wm_getminmaxinfo = 36
Global Const $wm_logoff = 37
Global Const $wm_painticon = 38
Global Const $wm_iconerasebkgnd = 39
Global Const $wm_nextdlgctl = 40
Global Const $wm_alttabactive = 41
Global Const $wm_spoolerstatus = 42
Global Const $wm_drawitem = 43
Global Const $wm_measureitem = 44
Global Const $wm_deleteitem = 45
Global Const $wm_vkeytoitem = 46
Global Const $wm_chartoitem = 47
Global Const $wm_setfont = 48
Global Const $wm_getfont = 49
Global Const $wm_sethotkey = 50
Global Const $wm_gethotkey = 51
Global Const $wm_filesyschange = 52
Global Const $wm_isactiveicon = 53
Global Const $wm_queryparkicon = 54
Global Const $wm_querydragicon = 55
Global Const $wm_winhelp = 56
Global Const $wm_compareitem = 57
Global Const $wm_fullscreen = 58
Global Const $wm_clientshutdown = 59
Global Const $wm_ddemlevent = 60
Global Const $wm_getobject = 61
Global Const $wm_calcscroll = 63
Global Const $wm_testing = 64
Global Const $wm_compacting = 65
Global Const $wm_otherwindowcreated = 66
Global Const $wm_otherwindowdestroyed = 67
Global Const $wm_commnotify = 68
Global Const $wm_mediastatuschange = 69
Global Const $wm_windowposchanging = 70
Global Const $wm_windowposchanged = 71
Global Const $wm_power = 72
Global Const $wm_copyglobaldata = 73
Global Const $wm_copydata = 74
Global Const $wm_canceljournal = 75
Global Const $wm_logonnotify = 76
Global Const $wm_keyf1 = 77
Global Const $wm_notify = 78
Global Const $wm_access_window = 79
Global Const $wm_inputlangchangerequest = 80
Global Const $wm_inputlangchange = 81
Global Const $wm_tcard = 82
Global Const $wm_help = 83
Global Const $wm_userchanged = 84
Global Const $wm_notifyformat = 85
Global Const $wm_qm_activate = 96
Global Const $wm_hook_do_callback = 97
Global Const $wm_syscopydata = 98
Global Const $wm_finaldestroy = 112
Global Const $wm_measureitem_clientdata = 113
Global Const $wm_contextmenu = 123
Global Const $wm_stylechanging = 124
Global Const $wm_stylechanged = 125
Global Const $wm_displaychange = 126
Global Const $wm_geticon = 127
Global Const $wm_seticon = 128
Global Const $wm_nccreate = 129
Global Const $wm_ncdestroy = 130
Global Const $wm_nccalcsize = 131
Global Const $wm_nchittest = 132
Global Const $wm_ncpaint = 133
Global Const $wm_ncactivate = 134
Global Const $wm_getdlgcode = 135
Global Const $wm_syncpaint = 136
Global Const $wm_synctask = 137
Global Const $wm_kludgeminrect = 139
Global Const $wm_lpkdrawswitchwnd = 140
Global Const $wm_uahdestroywindow = 144
Global Const $wm_uahdrawmenu = 145
Global Const $wm_uahdrawmenuitem = 146
Global Const $wm_uahinitmenu = 147
Global Const $wm_uahmeasuremenuitem = 148
Global Const $wm_uahncpaintmenupopup = 149
Global Const $wm_ncmousemove = 160
Global Const $wm_nclbuttondown = 161
Global Const $wm_nclbuttonup = 162
Global Const $wm_nclbuttondblclk = 163
Global Const $wm_ncrbuttondown = 164
Global Const $wm_ncrbuttonup = 165
Global Const $wm_ncrbuttondblclk = 166
Global Const $wm_ncmbuttondown = 167
Global Const $wm_ncmbuttonup = 168
Global Const $wm_ncmbuttondblclk = 169
Global Const $wm_ncxbuttondown = 171
Global Const $wm_ncxbuttonup = 172
Global Const $wm_ncxbuttondblclk = 173
Global Const $wm_ncuahdrawcaption = 174
Global Const $wm_ncuahdrawframe = 175
Global Const $wm_input_device_change = 254
Global Const $wm_input = 255
Global Const $wm_keydown = 256
Global Const $wm_keyfirst = 256
Global Const $wm_keyup = 257
Global Const $wm_char = 258
Global Const $wm_deadchar = 259
Global Const $wm_syskeydown = 260
Global Const $wm_syskeyup = 261
Global Const $wm_syschar = 262
Global Const $wm_sysdeadchar = 263
Global Const $wm_yomichar = 264
Global Const $wm_keylast = 265
Global Const $wm_unichar = 265
Global Const $wm_convertrequest = 266
Global Const $wm_convertresult = 267
Global Const $wm_im_info = 268
Global Const $wm_ime_startcomposition = 269
Global Const $wm_ime_endcomposition = 270
Global Const $wm_ime_composition = 271
Global Const $wm_ime_keylast = 271
Global Const $wm_initdialog = 272
Global Const $wm_command = 273
Global Const $wm_syscommand = 274
Global Const $wm_timer = 275
Global Const $wm_hscroll = 276
Global Const $wm_vscroll = 277
Global Const $wm_initmenu = 278
Global Const $wm_initmenupopup = 279
Global Const $wm_systimer = 280
Global Const $wm_gesture = 281
Global Const $wm_gesturenotify = 282
Global Const $wm_gestureinput = 283
Global Const $wm_gesturenotified = 284
Global Const $wm_menuselect = 287
Global Const $wm_menuchar = 288
Global Const $wm_enteridle = 289
Global Const $wm_menurbuttonup = 290
Global Const $wm_menudrag = 291
Global Const $wm_menugetobject = 292
Global Const $wm_uninitmenupopup = 293
Global Const $wm_menucommand = 294
Global Const $wm_changeuistate = 295
Global Const $wm_updateuistate = 296
Global Const $wm_queryuistate = 297
Global Const $wm_lbtrackpoint = 305
Global Const $wm_ctlcolormsgbox = 306
Global Const $wm_ctlcoloredit = 307
Global Const $wm_ctlcolorlistbox = 308
Global Const $wm_ctlcolorbtn = 309
Global Const $wm_ctlcolordlg = 310
Global Const $wm_ctlcolorscrollbar = 311
Global Const $wm_ctlcolorstatic = 312
Global Const $mn_gethmenu = 481
Global Const $wm_parentnotify = 528
Global Const $wm_entermenuloop = 529
Global Const $wm_exitmenuloop = 530
Global Const $wm_nextmenu = 531
Global Const $wm_sizing = 532
Global Const $wm_capturechanged = 533
Global Const $wm_moving = 534
Global Const $wm_powerbroadcast = 536
Global Const $wm_devicechange = 537
Global Const $wm_mdicreate = 544
Global Const $wm_mdidestroy = 545
Global Const $wm_mdiactivate = 546
Global Const $wm_mdirestore = 547
Global Const $wm_mdinext = 548
Global Const $wm_mdimaximize = 549
Global Const $wm_mditile = 550
Global Const $wm_mdicascade = 551
Global Const $wm_mdiiconarrange = 552
Global Const $wm_mdigetactive = 553
Global Const $wm_dropobject = 554
Global Const $wm_querydropobject = 555
Global Const $wm_begindrag = 556
Global Const $wm_dragloop = 557
Global Const $wm_dragselect = 558
Global Const $wm_dragmove = 559
Global Const $wm_mdisetmenu = 560
Global Const $wm_entersizemove = 561
Global Const $wm_exitsizemove = 562
Global Const $wm_dropfiles = 563
Global Const $wm_mdirefreshmenu = 564
Global Const $wm_touch = 576
Global Const $wm_ime_setcontext = 641
Global Const $wm_ime_notify = 642
Global Const $wm_ime_control = 643
Global Const $wm_ime_compositionfull = 644
Global Const $wm_ime_select = 645
Global Const $wm_ime_char = 646
Global Const $wm_ime_system = 647
Global Const $wm_ime_request = 648
Global Const $wm_ime_keydown = 656
Global Const $wm_ime_keyup = 657
Global Const $wm_ncmousehover = 672
Global Const $wm_mousehover = 673
Global Const $wm_ncmouseleave = 674
Global Const $wm_mouseleave = 675
Global Const $wm_wtssession_change = 689
Global Const $wm_tablet_first = 704
Global Const $wm_tablet_last = 735
Global Const $wm_cut = 768
Global Const $wm_copy = 769
Global Const $wm_paste = 770
Global Const $wm_clear = 771
Global Const $wm_undo = 772
Global Const $wm_paletteischanging = 784
Global Const $wm_hotkey = 786
Global Const $wm_palettechanged = 785
Global Const $wm_sysmenu = 787
Global Const $wm_hookmsg = 788
Global Const $wm_exitprocess = 789
Global Const $wm_wakethread = 790
Global Const $wm_print = 791
Global Const $wm_printclient = 792
Global Const $wm_appcommand = 793
Global Const $wm_querynewpalette = 783
Global Const $wm_themechanged = 794
Global Const $wm_uahinit = 795
Global Const $wm_desktopnotify = 796
Global Const $wm_clipboardupdate = 797
Global Const $wm_dwmcompositionchanged = 798
Global Const $wm_dwmncrenderingchanged = 799
Global Const $wm_dwmcolorizationcolorchanged = 800
Global Const $wm_dwmwindowmaximizedchange = 801
Global Const $wm_dwmexileframe = 802
Global Const $wm_dwmsendiconicthumbnail = 803
Global Const $wm_magnification_started = 804
Global Const $wm_magnification_ended = 805
Global Const $wm_dwmsendiconiclivepreviewbitmap = 806
Global Const $wm_dwmthumbnailsizechanged = 807
Global Const $wm_magnification_output = 808
Global Const $wm_measurecontrol = 816
Global Const $wm_getactiontext = 817
Global Const $wm_forwardkeydown = 819
Global Const $wm_forwardkeyup = 820
Global Const $wm_gettitlebarinfoex = 831
Global Const $wm_notifywow = 832
Global Const $wm_handheldfirst = 856
Global Const $wm_handheldlast = 863
Global Const $wm_afxfirst = 864
Global Const $wm_afxlast = 895
Global Const $wm_penwinfirst = 896
Global Const $wm_penwinlast = 911
Global Const $wm_dde_initiate = 992
Global Const $wm_dde_terminate = 993
Global Const $wm_dde_advise = 994
Global Const $wm_dde_unadvise = 995
Global Const $wm_dde_ack = 996
Global Const $wm_dde_data = 997
Global Const $wm_dde_request = 998
Global Const $wm_dde_poke = 999
Global Const $wm_dde_execute = 1000
Global Const $wm_dbnotification = 1021
Global Const $wm_netconnect = 1022
Global Const $wm_hibernate = 1023
Global Const $wm_user = 1024
Global Const $wm_app = 32768
Global Const $nm_first = 0
Global Const $nm_outofmemory = $nm_first - 1
Global Const $nm_click = $nm_first - 2
Global Const $nm_dblclk = $nm_first - 3
Global Const $nm_return = $nm_first - 4
Global Const $nm_rclick = $nm_first - 5
Global Const $nm_rdblclk = $nm_first - 6
Global Const $nm_setfocus = $nm_first - 7
Global Const $nm_killfocus = $nm_first - 8
Global Const $nm_customdraw = $nm_first - 12
Global Const $nm_hover = $nm_first - 13
Global Const $nm_nchittest = $nm_first - 14
Global Const $nm_keydown = $nm_first - 15
Global Const $nm_releasedcapture = $nm_first - 16
Global Const $nm_setcursor = $nm_first - 17
Global Const $nm_char = $nm_first - 18
Global Const $nm_tooltipscreated = $nm_first - 19
Global Const $nm_ldown = $nm_first - 20
Global Const $nm_rdown = $nm_first - 21
Global Const $nm_themechanged = $nm_first - 22
Global Const $wm_mousefirst = 512
Global Const $wm_mousemove = 512
Global Const $wm_lbuttondown = 513
Global Const $wm_lbuttonup = 514
Global Const $wm_lbuttondblclk = 515
Global Const $wm_rbuttondown = 516
Global Const $wm_rbuttonup = 517
Global Const $wm_rbuttondblclk = 518
Global Const $wm_mbuttondown = 519
Global Const $wm_mbuttonup = 520
Global Const $wm_mbuttondblclk = 521
Global Const $wm_mousewheel = 522
Global Const $wm_xbuttondown = 523
Global Const $wm_xbuttonup = 524
Global Const $wm_xbuttondblclk = 525
Global Const $wm_mousehwheel = 526
Global Const $ps_solid = 0
Global Const $ps_dash = 1
Global Const $ps_dot = 2
Global Const $ps_dashdot = 3
Global Const $ps_dashdotdot = 4
Global Const $ps_null = 5
Global Const $ps_insideframe = 6
Global Const $ps_userstyle = 7
Global Const $ps_alternate = 8
Global Const $ps_endcap_round = 0
Global Const $ps_endcap_square = 256
Global Const $ps_endcap_flat = 512
Global Const $ps_join_bevel = 4096
Global Const $ps_join_miter = 8192
Global Const $ps_join_round = 0
Global Const $ps_geometric = 65536
Global Const $ps_cosmetic = 0
Global Const $lwa_alpha = 2
Global Const $lwa_colorkey = 1
Global Const $rgn_and = 1
Global Const $rgn_or = 2
Global Const $rgn_xor = 3
Global Const $rgn_diff = 4
Global Const $rgn_copy = 5
Global Const $errorregion = 0
Global Const $nullregion = 1
Global Const $simpleregion = 2
Global Const $complexregion = 3
Global Const $transparent = 1
Global Const $opaque = 2
Global Const $ccm_first = 8192
Global Const $ccm_getunicodeformat = ($ccm_first + 6)
Global Const $ccm_setunicodeformat = ($ccm_first + 5)
Global Const $ccm_setbkcolor = $ccm_first + 1
Global Const $ccm_setcolorscheme = $ccm_first + 2
Global Const $ccm_getcolorscheme = $ccm_first + 3
Global Const $ccm_getdroptarget = $ccm_first + 4
Global Const $ccm_setwindowtheme = $ccm_first + 11
Global Const $ga_parent = 1
Global Const $ga_root = 2
Global Const $ga_rootowner = 3
Global Const $sm_cxscreen = 0
Global Const $sm_cyscreen = 1
Global Const $sm_cxvscroll = 2
Global Const $sm_cyhscroll = 3
Global Const $sm_cycaption = 4
Global Const $sm_cxborder = 5
Global Const $sm_cyborder = 6
Global Const $sm_cxdlgframe = 7
Global Const $sm_cydlgframe = 8
Global Const $sm_cyvthumb = 9
Global Const $sm_cxhthumb = 10
Global Const $sm_cxicon = 11
Global Const $sm_cyicon = 12
Global Const $sm_cxcursor = 13
Global Const $sm_cycursor = 14
Global Const $sm_cymenu = 15
Global Const $sm_cxfullscreen = 16
Global Const $sm_cyfullscreen = 17
Global Const $sm_cykanjiwindow = 18
Global Const $sm_mousepresent = 19
Global Const $sm_cyvscroll = 20
Global Const $sm_cxhscroll = 21
Global Const $sm_debug = 22
Global Const $sm_swapbutton = 23
Global Const $sm_reserved1 = 24
Global Const $sm_reserved2 = 25
Global Const $sm_reserved3 = 26
Global Const $sm_reserved4 = 27
Global Const $sm_cxmin = 28
Global Const $sm_cymin = 29
Global Const $sm_cxsize = 30
Global Const $sm_cysize = 31
Global Const $sm_cxframe = 32
Global Const $sm_cyframe = 33
Global Const $sm_cxmintrack = 34
Global Const $sm_cymintrack = 35
Global Const $sm_cxdoubleclk = 36
Global Const $sm_cydoubleclk = 37
Global Const $sm_cxiconspacing = 38
Global Const $sm_cyiconspacing = 39
Global Const $sm_menudropalignment = 40
Global Const $sm_penwindows = 41
Global Const $sm_dbcsenabled = 42
Global Const $sm_cmousebuttons = 43
Global Const $sm_secure = 44
Global Const $sm_cxedge = 45
Global Const $sm_cyedge = 46
Global Const $sm_cxminspacing = 47
Global Const $sm_cyminspacing = 48
Global Const $sm_cxsmicon = 49
Global Const $sm_cysmicon = 50
Global Const $sm_cysmcaption = 51
Global Const $sm_cxsmsize = 52
Global Const $sm_cysmsize = 53
Global Const $sm_cxmenusize = 54
Global Const $sm_cymenusize = 55
Global Const $sm_arrange = 56
Global Const $sm_cxminimized = 57
Global Const $sm_cyminimized = 58
Global Const $sm_cxmaxtrack = 59
Global Const $sm_cymaxtrack = 60
Global Const $sm_cxmaximized = 61
Global Const $sm_cymaximized = 62
Global Const $sm_network = 63
Global Const $sm_cleanboot = 67
Global Const $sm_cxdrag = 68
Global Const $sm_cydrag = 69
Global Const $sm_showsounds = 70
Global Const $sm_cxmenucheck = 71
Global Const $sm_cymenucheck = 72
Global Const $sm_slowmachine = 73
Global Const $sm_mideastenabled = 74
Global Const $sm_mousewheelpresent = 75
Global Const $sm_xvirtualscreen = 76
Global Const $sm_yvirtualscreen = 77
Global Const $sm_cxvirtualscreen = 78
Global Const $sm_cyvirtualscreen = 79
Global Const $sm_cmonitors = 80
Global Const $sm_samedisplayformat = 81
Global Const $sm_immenabled = 82
Global Const $sm_cxfocusborder = 83
Global Const $sm_cyfocusborder = 84
Global Const $sm_tabletpc = 86
Global Const $sm_mediacenter = 87
Global Const $sm_starter = 88
Global Const $sm_serverr2 = 89
Global Const $sm_cmetrics = 90
Global Const $sm_remotesession = 4096
Global Const $sm_shuttingdown = 8192
Global Const $sm_remotecontrol = 8193
Global Const $sm_caretblinkingenabled = 8194
Global Const $blackness = 66
Global Const $captureblt = 1073741824
Global Const $dstinvert = 5570569
Global Const $mergecopy = 12583114
Global Const $mergepaint = 12255782
Global Const $nomirrorbitmap = -2147483648
Global Const $notsrccopy = 3342344
Global Const $notsrcerase = 1114278
Global Const $patcopy = 15728673
Global Const $patinvert = 5898313
Global Const $patpaint = 16452105
Global Const $srcand = 8913094
Global Const $srccopy = 13369376
Global Const $srcerase = 4457256
Global Const $srcinvert = 6684742
Global Const $srcpaint = 15597702
Global Const $whiteness = 16711778
Global Const $dt_bottom = 8
Global Const $dt_calcrect = 1024
Global Const $dt_center = 1
Global Const $dt_editcontrol = 8192
Global Const $dt_end_ellipsis = 32768
Global Const $dt_expandtabs = 64
Global Const $dt_externalleading = 512
Global Const $dt_hideprefix = 1048576
Global Const $dt_internal = 4096
Global Const $dt_left = 0
Global Const $dt_modifystring = 65536
Global Const $dt_noclip = 256
Global Const $dt_nofullwidthcharbreak = 524288
Global Const $dt_noprefix = 2048
Global Const $dt_path_ellipsis = 16384
Global Const $dt_prefixonly = 2097152
Global Const $dt_right = 2
Global Const $dt_rtlreading = 131072
Global Const $dt_singleline = 32
Global Const $dt_tabstop = 128
Global Const $dt_top = 0
Global Const $dt_vcenter = 4
Global Const $dt_wordbreak = 16
Global Const $dt_word_ellipsis = 262144
Global Const $rdw_erase = 4
Global Const $rdw_frame = 1024
Global Const $rdw_internalpaint = 2
Global Const $rdw_invalidate = 1
Global Const $rdw_noerase = 32
Global Const $rdw_noframe = 2048
Global Const $rdw_nointernalpaint = 16
Global Const $rdw_validate = 8
Global Const $rdw_erasenow = 512
Global Const $rdw_updatenow = 256
Global Const $rdw_allchildren = 128
Global Const $rdw_nochildren = 64
Global Const $wm_renderformat = 773
Global Const $wm_renderallformats = 774
Global Const $wm_destroyclipboard = 775
Global Const $wm_drawclipboard = 776
Global Const $wm_paintclipboard = 777
Global Const $wm_vscrollclipboard = 778
Global Const $wm_sizeclipboard = 779
Global Const $wm_askcbformatname = 780
Global Const $wm_changecbchain = 781
Global Const $wm_hscrollclipboard = 782
Global Const $hterror = -2
Global Const $httransparent = -1
Global Const $htnowhere = 0
Global Const $htclient = 1
Global Const $htcaption = 2
Global Const $htsysmenu = 3
Global Const $htgrowbox = 4
Global Const $htsize = $htgrowbox
Global Const $htmenu = 5
Global Const $hthscroll = 6
Global Const $htvscroll = 7
Global Const $htminbutton = 8
Global Const $htmaxbutton = 9
Global Const $htleft = 10
Global Const $htright = 11
Global Const $httop = 12
Global Const $httopleft = 13
Global Const $httopright = 14
Global Const $htbottom = 15
Global Const $htbottomleft = 16
Global Const $htbottomright = 17
Global Const $htborder = 18
Global Const $htreduce = $htminbutton
Global Const $htzoom = $htmaxbutton
Global Const $htsizefirst = $htleft
Global Const $htsizelast = $htbottomright
Global Const $htobject = 19
Global Const $htclose = 20
Global Const $hthelp = 21
Global Const $color_scrollbar = 0
Global Const $color_background = 1
Global Const $color_activecaption = 2
Global Const $color_inactivecaption = 3
Global Const $color_menu = 4
Global Const $color_window = 5
Global Const $color_windowframe = 6
Global Const $color_menutext = 7
Global Const $color_windowtext = 8
Global Const $color_captiontext = 9
Global Const $color_activeborder = 10
Global Const $color_inactiveborder = 11
Global Const $color_appworkspace = 12
Global Const $color_highlight = 13
Global Const $color_highlighttext = 14
Global Const $color_btnface = 15
Global Const $color_btnshadow = 16
Global Const $color_graytext = 17
Global Const $color_btntext = 18
Global Const $color_inactivecaptiontext = 19
Global Const $color_btnhighlight = 20
Global Const $color_3ddkshadow = 21
Global Const $color_3dlight = 22
Global Const $color_infotext = 23
Global Const $color_infobk = 24
Global Const $color_hotlight = 26
Global Const $color_gradientactivecaption = 27
Global Const $color_gradientinactivecaption = 28
Global Const $color_menuhilight = 29
Global Const $color_menubar = 30
Global Const $color_desktop = 1
Global Const $color_3dface = 15
Global Const $color_3dshadow = 16
Global Const $color_3dhighlight = 20
Global Const $color_3dhilight = 20
Global Const $color_btnhilight = 20
Global Const $hinst_commctrl = -1
Global Const $idb_std_small_color = 0
Global Const $idb_std_large_color = 1
Global Const $idb_view_small_color = 4
Global Const $idb_view_large_color = 5
Global Const $idb_hist_small_color = 8
Global Const $idb_hist_large_color = 9
Global Const $startf_forceofffeedback = 128
Global Const $startf_forceonfeedback = 64
Global Const $startf_preventpinning = 8192
Global Const $startf_runfullscreen = 32
Global Const $startf_titleisappid = 4096
Global Const $startf_titleislinkname = 2048
Global Const $startf_usecountchars = 8
Global Const $startf_usefillattribute = 16
Global Const $startf_usehotkey = 512
Global Const $startf_useposition = 4
Global Const $startf_useshowwindow = 1
Global Const $startf_usesize = 2
Global Const $startf_usestdhandles = 256
Global Const $cdds_prepaint = 1
Global Const $cdds_postpaint = 2
Global Const $cdds_preerase = 3
Global Const $cdds_posterase = 4
Global Const $cdds_item = 65536
Global Const $cdds_itemprepaint = 65537
Global Const $cdds_itempostpaint = 65538
Global Const $cdds_itempreerase = 65539
Global Const $cdds_itemposterase = 65540
Global Const $cdds_subitem = 131072
Global Const $cdis_selected = 1
Global Const $cdis_grayed = 2
Global Const $cdis_disabled = 4
Global Const $cdis_checked = 8
Global Const $cdis_focus = 16
Global Const $cdis_default = 32
Global Const $cdis_hot = 64
Global Const $cdis_marked = 128
Global Const $cdis_indeterminate = 256
Global Const $cdis_showkeyboardcues = 512
Global Const $cdis_nearhot = 1024
Global Const $cdis_othersidehot = 2048
Global Const $cdis_drophilited = 4096
Global Const $cdrf_dodefault = 0
Global Const $cdrf_newfont = 2
Global Const $cdrf_skipdefault = 4
Global Const $cdrf_notifypostpaint = 16
Global Const $cdrf_notifyitemdraw = 32
Global Const $cdrf_notifysubitemdraw = 32
Global Const $cdrf_notifyposterase = 64
Global Const $cdrf_doerase = 8
Global Const $cdrf_skippostpaint = 256
Global Const $gui_ss_default_gui = BitOR($ws_minimizebox, $ws_caption, $ws_popup, $ws_sysmenu)

Func _hextostring($strhex)
	Local $strchar, $aryhex, $i, $idec, $char, $file, $ione, $itwo
	$aryhex = StringSplit($strhex, "")
	For $i = 1 To $aryhex[0]
		$ione = $aryhex[$i]
		$i = $i + 1
		$itwo = $aryhex[$i]
		$idec = Dec($ione & $itwo)
		$char = Chr($idec)
		$strchar = $strchar & $char
	Next
	If $strchar = "" Then
		SetError(1)
		Return -1
	Else
		Return $strchar
	EndIf
EndFunc

Func _stringencrypt($i_encrypt, $s_encrypttext, $s_encryptpassword, $i_encryptlevel = 1)
	If $i_encrypt <> 0 AND $i_encrypt <> 1 Then
		Return ""
		SetError(1)
	ElseIf $s_encrypttext = "" OR $s_encryptpassword = "" Then
		Return ""
		SetError(1)
	Else
		If Number($i_encryptlevel) <= 0 OR Int($i_encryptlevel) <> $i_encryptlevel Then $i_encryptlevel = 1
		Local $v_encryptmodified
		Local $i_encryptcounth
		Local $i_encryptcountg
		Local $v_encryptswap
		Local $av_encryptbox[256][2]
		Local $i_encryptcounta
		Local $i_encryptcountb
		Local $i_encryptcountc
		Local $i_encryptcountd
		Local $i_encryptcounte
		Local $i_encryptcountf
		Local $v_encryptcipher
		Local $v_encryptcipherby
		If $i_encrypt = 1 OR $i_encrypt = 0 Then
			Local $i_encryptcountc = 0
			For $i_encryptcountf = 0 To $i_encryptlevel Step 1
				$i_encryptcountg = ""
				$i_encryptcounth = ""
				$v_encryptmodified = ""
				For $i_encryptcountg = 1 To StringLen($s_encrypttext)
					If $i_encryptcounth = StringLen($s_encryptpassword) Then
						$i_encryptcounth = 1
					Else
						$i_encryptcounth = $i_encryptcounth + 1
					EndIf
					$v_encryptmodified = $v_encryptmodified & Chr(BitXOR(Asc(StringMid($s_encrypttext, $i_encryptcountg, 1)), Asc(StringMid($s_encryptpassword, $i_encryptcounth, 1)), 255))
				Next
				$s_encrypttext = $v_encryptmodified
				$i_encryptcounta = ""
				$i_encryptcountb = 0
				$i_encryptcountc = ""
				$i_encryptcountd = ""
				$i_encryptcounte = ""
				$v_encryptcipherby = ""
				$v_encryptcipher = ""
				$v_encryptswap = ""
				$av_encryptbox = ""
				Local $av_encryptbox[256][2]
				For $i_encryptcounta = 0 To 255
					$av_encryptbox[$i_encryptcounta][1] = Asc(StringMid($s_encryptpassword, Mod($i_encryptcounta, StringLen($s_encryptpassword)) + 1, 1))
					$av_encryptbox[$i_encryptcounta][0] = $i_encryptcounta
				Next
				For $i_encryptcounta = 0 To 255
					$i_encryptcountb = Mod(($i_encryptcountb + $av_encryptbox[$i_encryptcounta][0] + $av_encryptbox[$i_encryptcounta][1]), 256)
					$v_encryptswap = $av_encryptbox[$i_encryptcounta][0]
					$av_encryptbox[$i_encryptcounta][0] = $av_encryptbox[$i_encryptcountb][0]
					$av_encryptbox[$i_encryptcountb][0] = $v_encryptswap
				Next
				For $i_encryptcounta = 1 To StringLen($s_encrypttext)
					$i_encryptcountc = Mod(($i_encryptcountc + 1), 256)
					$i_encryptcountd = Mod(($i_encryptcountd + $av_encryptbox[$i_encryptcountc][0]), 256)
					$i_encryptcounte = $av_encryptbox[Mod(($av_encryptbox[$i_encryptcountc][0] + $av_encryptbox[$i_encryptcountd][0]), 256)][0]
					$v_encryptcipherby = BitXOR(Asc(StringMid($s_encrypttext, $i_encryptcounta, 1)), $i_encryptcounte)
					$v_encryptcipher = $v_encryptcipher & Hex($v_encryptcipherby, 2)
				Next
				$s_encrypttext = $v_encryptcipher
			Next
		EndIf
		Return $s_encrypttext
	EndIf
EndFunc

Func _stringproper($s_str)
	Local $ix = 0
	Local $capnext = 1
	Local $s_nstr = ""
	Local $s_curchar
	For $ix = 1 To StringLen($s_str)
		$s_curchar = StringMid($s_str, $ix, 1)
		Select 
			Case $capnext = 1
				If __characterisapha($s_curchar) Then
					$s_curchar = StringUpper($s_curchar)
					$capnext = 0
				EndIf
			Case NOT __characterisapha($s_curchar)
				$capnext = 1
			Case Else
				$s_curchar = StringLower($s_curchar)
		EndSelect
		$s_nstr = $s_nstr & $s_curchar
	Next
	Return ($s_nstr)
EndFunc

Func _stringrepeat($sstring, $irepeatcount)
	Local $sresult
	Local $icount
	Select 
		Case NOT StringIsInt($irepeatcount)
			SetError(1)
			Return ""
		Case StringLen($sstring) < 1
			SetError(1)
			Return ""
		Case $irepeatcount <= 0
			SetError(1)
			Return ""
		Case Else
			For $icount = 1 To $irepeatcount
				$sresult = $sresult & $sstring
			Next
			Return $sresult
	EndSelect
EndFunc

Func _stringreverse($sstring)
	Local $sreverse
	Local $icount
	If StringLen($sstring) >= 1 Then
		For $icount = 1 To StringLen($sstring)
			$sreverse = StringMid($sstring, $icount, 1) & $sreverse
		Next
		Return $sreverse
	Else
		SetError(1)
		Return ""
	EndIf
EndFunc

Func _stringtohex($strchar)
	Local $arychar, $i, $idec, $hchar, $file, $strhex
	$arychar = StringSplit($strchar, "")
	For $i = 1 To $arychar[0]
		$idec = Asc($arychar[$i])
		$hchar = Hex($idec, 2)
		$strhex = $strhex & $hchar
	Next
	If $strhex = "" Then
		SetError(1)
		Return -1
	Else
		Return $strhex
	EndIf
EndFunc

Func __characterisapha($s_str)
	Local $a_alpha = "abcdefghijklmnopqrstuvwxyz"
	Return (StringInStr($a_alpha, $s_str))
EndFunc

Global Const $lbs_notify = 1
Global Const $lbs_sort = 2
Global Const $lbs_noredraw = 4
Global Const $lbs_multiplesel = 8
Global Const $lbs_ownerdrawfixed = 16
Global Const $lbs_ownerdrawvariable = 32
Global Const $lbs_hasstrings = 64
Global Const $lbs_usetabstops = 128
Global Const $lbs_nointegralheight = 256
Global Const $lbs_multicolumn = 512
Global Const $lbs_wantkeyboardinput = 1024
Global Const $lbs_extendedsel = 2048
Global Const $lbs_disablenoscroll = 4096
Global Const $lbs_nodata = 8192
Global Const $lbs_nosel = 16384
Global Const $lbs_combobox = 32768
Global Const $lbs_standard = 3
Global Const $gui_ss_default_list = 10485763
Global Const $lb_err = -1
Global Const $lb_errattribute = -3
Global Const $lb_errrequired = -4
Global Const $lb_errspace = -2
Global Const $lb_addstring = 384
Global Const $lb_insertstring = 385
Global Const $lb_deletestring = 386
Global Const $lb_selitemrangeex = 387
Global Const $lb_resetcontent = 388
Global Const $lb_setsel = 389
Global Const $lb_setcursel = 390
Global Const $lb_getsel = 391
Global Const $lb_getcursel = 392
Global Const $lb_gettext = 393
Global Const $lb_gettextlen = 394
Global Const $lb_getcount = 395
Global Const $lb_selectstring = 396
Global Const $lb_dir = 397
Global Const $lb_gettopindex = 398
Global Const $lb_findstring = 399
Global Const $lb_getselcount = 400
Global Const $lb_getselitems = 401
Global Const $lb_settabstops = 402
Global Const $lb_gethorizontalextent = 403
Global Const $lb_sethorizontalextent = 404
Global Const $lb_setcolumnwidth = 405
Global Const $lb_addfile = 406
Global Const $lb_settopindex = 407
Global Const $lb_getitemrect = 408
Global Const $lb_getitemdata = 409
Global Const $lb_setitemdata = 410
Global Const $lb_selitemrange = 411
Global Const $lb_setanchorindex = 412
Global Const $lb_getanchorindex = 413
Global Const $lb_setcaretindex = 414
Global Const $lb_getcaretindex = 415
Global Const $lb_setitemheight = 416
Global Const $lb_getitemheight = 417
Global Const $lb_findstringexact = 418
Global Const $lb_setlocale = 421
Global Const $lb_getlocale = 422
Global Const $lb_setcount = 423
Global Const $lb_initstorage = 424
Global Const $lb_itemfrompoint = 425
Global Const $lb_multipleaddstring = 433
Global Const $lb_getlistboxinfo = 434
Global Const $lbn_errspace = -2
Global Const $lbn_selchange = 1
Global Const $lbn_dblclk = 2
Global Const $lbn_selcancel = 3
Global Const $lbn_setfocus = 4
Global Const $lbn_killfocus = 5
Global Const $hdf_left = 0
Global Const $hdf_right = 1
Global Const $hdf_center = 2
Global Const $hdf_justifymask = 3
Global Const $hdf_bitmap_on_right = 4096
Global Const $hdf_bitmap = 8192
Global Const $hdf_string = 16384
Global Const $hdf_ownerdraw = 32768
Global Const $hdf_displaymask = 61440
Global Const $hdf_rtlreading = 4
Global Const $hdf_sortdown = 512
Global Const $hdf_image = 2048
Global Const $hdf_sortup = 1024
Global Const $hdf_flagmask = 3588
Global Const $hdi_width = 1
Global Const $hdi_text = 2
Global Const $hdi_format = 4
Global Const $hdi_param = 8
Global Const $hdi_bitmap = 16
Global Const $hdi_image = 32
Global Const $hdi_di_setitem = 64
Global Const $hdi_order = 128
Global Const $hdi_filter = 256
Global Const $hht_nowhere = 1
Global Const $hht_onheader = 2
Global Const $hht_ondivider = 4
Global Const $hht_ondivopen = 8
Global Const $hht_onfilter = 16
Global Const $hht_onfilterbutton = 32
Global Const $hht_above = 256
Global Const $hht_below = 512
Global Const $hht_toright = 1024
Global Const $hht_toleft = 2048
Global Const $hdm_first = 4608
Global Const $hdm_clearfilter = $hdm_first + 24
Global Const $hdm_createdragimage = $hdm_first + 16
Global Const $hdm_deleteitem = $hdm_first + 2
Global Const $hdm_editfilter = $hdm_first + 23
Global Const $hdm_getbitmapmargin = $hdm_first + 21
Global Const $hdm_getfocuseditem = $hdm_first + 27
Global Const $hdm_getimagelist = $hdm_first + 9
Global Const $hdm_getitema = $hdm_first + 3
Global Const $hdm_getitemw = $hdm_first + 11
Global Const $hdm_getitemcount = $hdm_first + 0
Global Const $hdm_getitemdropdownrect = $hdm_first + 25
Global Const $hdm_getitemrect = $hdm_first + 7
Global Const $hdm_getorderarray = $hdm_first + 17
Global Const $hdm_getoverflowrect = $hdm_first + 26
Global Const $hdm_getunicodeformat = 8192 + 6
Global Const $hdm_hittest = $hdm_first + 6
Global Const $hdm_insertitema = $hdm_first + 1
Global Const $hdm_insertitemw = $hdm_first + 10
Global Const $hdm_layout = $hdm_first + 5
Global Const $hdm_ordertoindex = $hdm_first + 15
Global Const $hdm_setbitmapmargin = $hdm_first + 20
Global Const $hdm_setfilterchangetimeout = $hdm_first + 22
Global Const $hdm_setfocuseditem = $hdm_first + 28
Global Const $hdm_sethotdivider = $hdm_first + 19
Global Const $hdm_setimagelist = $hdm_first + 8
Global Const $hdm_setitema = $hdm_first + 4
Global Const $hdm_setitemw = $hdm_first + 12
Global Const $hdm_setorderarray = $hdm_first + 18
Global Const $hdm_setunicodeformat = 8192 + 5
Global Const $hdn_first = -300
Global Const $hdn_begindrag = $hdn_first - 10
Global Const $hdn_begintrack = $hdn_first - 6
Global Const $hdn_dividerdblclick = $hdn_first - 5
Global Const $hdn_enddrag = $hdn_first - 11
Global Const $hdn_endtrack = $hdn_first - 7
Global Const $hdn_filterbtnclick = $hdn_first - 13
Global Const $hdn_filterchange = $hdn_first - 12
Global Const $hdn_getdispinfo = $hdn_first - 9
Global Const $hdn_itemchanged = $hdn_first - 1
Global Const $hdn_itemchanging = $hdn_first + 0
Global Const $hdn_itemclick = $hdn_first - 2
Global Const $hdn_itemdblclick = $hdn_first - 3
Global Const $hdn_track = $hdn_first - 8
Global Const $hdn_begintrackw = $hdn_first - 26
Global Const $hdn_dividerdblclickw = $hdn_first - 25
Global Const $hdn_endtrackw = $hdn_first - 27
Global Const $hdn_getdispinfow = $hdn_first - 29
Global Const $hdn_itemchangedw = $hdn_first - 21
Global Const $hdn_itemchangingw = $hdn_first - 20
Global Const $hdn_itemclickw = $hdn_first - 22
Global Const $hdn_itemdblclickw = $hdn_first - 23
Global Const $hdn_trackw = $hdn_first - 28
Global Const $hds_buttons = 2
Global Const $hds_checkboxes = 1024
Global Const $hds_dragdrop = 64
Global Const $hds_filterbar = 256
Global Const $hds_flat = 512
Global Const $hds_fulldrag = 128
Global Const $hds_hidden = 8
Global Const $hds_horz = 0
Global Const $hds_hottrack = 4
Global Const $hds_nosizing = 2048
Global Const $hds_overflow = 4096
Global Const $hds_default = 70
Global $__g_hhdrlastwnd
Global Const $__headerconstant_classname = "SysHeader32"
Global Const $__headerconstant_default_gui_font = 17
Global Const $__headerconstant_swp_showwindow = 64
Global Const $taghdhittestinfo = $tagpoint & ";uint Flags;int Item"
Global Const $taghdlayout = "ptr Rect;ptr WindowPos"
Global Const $taghdtextfilter = "ptr Text;int TextMax"

Func _guictrlheader_additem($hwnd, $stext, $iwidth = 50, $ialign = 0, $iimage = -1, $bonright = False)
	Return _guictrlheader_insertitem($hwnd, _guictrlheader_getitemcount($hwnd), $stext, $iwidth, $ialign, $iimage, $bonright)
EndFunc

Func _guictrlheader_clearfilter($hwnd, $iindex)
	Return _sendmessage($hwnd, $hdm_clearfilter, $iindex) <> 0
EndFunc

Func _guictrlheader_clearfilterall($hwnd)
	Return _sendmessage($hwnd, $hdm_clearfilter, -1) <> 0
EndFunc

Func _guictrlheader_create($hwnd, $istyle = 70)
	$istyle = BitOR($istyle, $__udfguiconstant_ws_child, $__udfguiconstant_ws_visible)
	Local $nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Local $hheader = _winapi_createwindowex(0, $__headerconstant_classname, "", $istyle, 0, 0, 0, 0, $hwnd, $nctrlid)
	Local $trect = _winapi_getclientrect($hwnd)
	Local $twindowpos = _guictrlheader_layout($hheader, $trect)
	Local $iflags = BitOR(DllStructGetData($twindowpos, "Flags"), $__headerconstant_swp_showwindow)
	_winapi_setwindowpos($hheader, DllStructGetData($twindowpos, "InsertAfter"), DllStructGetData($twindowpos, "X"), DllStructGetData($twindowpos, "Y"), DllStructGetData($twindowpos, "CX"), DllStructGetData($twindowpos, "CY"), $iflags)
	_winapi_setfont($hheader, _winapi_getstockobject($__headerconstant_default_gui_font))
	Return $hheader
EndFunc

Func _guictrlheader_createdragimage($hwnd, $iindex)
	Return Ptr(_sendmessage($hwnd, $hdm_createdragimage, $iindex))
EndFunc

Func _guictrlheader_deleteitem($hwnd, $iindex)
	Return _sendmessage($hwnd, $hdm_deleteitem, $iindex) <> 0
EndFunc

Func _guictrlheader_destroy(ByRef $hwnd)
	If NOT _winapi_isclassname($hwnd, $__headerconstant_classname) Then Return SetError(2, 2, False)
	Local $idestroyed = 0
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
			Local $nctrlid = _winapi_getdlgctrlid($hwnd)
			Local $hparent = _winapi_getparent($hwnd)
			$idestroyed = _winapi_destroywindow($hwnd)
			Local $iret = __udf_freeglobalid($hparent, $nctrlid)
			If NOT $iret Then
			EndIf
		Else
			Return SetError(1, 1, False)
		EndIf
	Else
		$idestroyed = GUICtrlDelete($hwnd)
	EndIf
	If $idestroyed Then $hwnd = 0
	Return $idestroyed <> 0
EndFunc

Func _guictrlheader_editfilter($hwnd, $iindex, $bdiscard = True)
	Return _sendmessage($hwnd, $hdm_editfilter, $iindex, $bdiscard) <> 0
EndFunc

Func _guictrlheader_getbitmapmargin($hwnd)
	Return _sendmessage($hwnd, $hdm_getbitmapmargin)
EndFunc

Func _guictrlheader_getimagelist($hwnd)
	Return Ptr(_sendmessage($hwnd, $hdm_getimagelist))
EndFunc

Func _guictrlheader_getitem($hwnd, $iindex, ByRef $titem)
	Local $bunicode = _guictrlheader_getunicodeformat($hwnd)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		$iret = _sendmessage($hwnd, $hdm_getitemw, $iindex, $titem, 0, "wparam", "struct*")
	Else
		Local $iitem = DllStructGetSize($titem)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem, $tmemmap)
		_memwrite($tmemmap, $titem)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $hdm_getitemw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $hdm_getitema, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memread($tmemmap, $pmemory, $titem, $iitem)
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrlheader_getitemalign($hwnd, $iindex)
	Switch BitAND(_guictrlheader_getitemformat($hwnd, $iindex), $hdf_justifymask)
		Case $hdf_left
			Return 0
		Case $hdf_right
			Return 1
		Case $hdf_center
			Return 2
		Case Else
			Return -1
	EndSwitch
EndFunc

Func _guictrlheader_getitembitmap($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_bitmap)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "hBmp")
EndFunc

Func _guictrlheader_getitemcount($hwnd)
	Return _sendmessage($hwnd, $hdm_getitemcount)
EndFunc

Func _guictrlheader_getitemdisplay($hwnd, $iindex)
	Local $iret = 0
	Local $iformat = _guictrlheader_getitemformat($hwnd, $iindex)
	If BitAND($iformat, $hdf_bitmap) <> 0 Then $iret = BitOR($iret, 1)
	If BitAND($iformat, $hdf_bitmap_on_right) <> 0 Then $iret = BitOR($iret, 2)
	If BitAND($iformat, $hdf_ownerdraw) <> 0 Then $iret = BitOR($iret, 4)
	If BitAND($iformat, $hdf_string) <> 0 Then $iret = BitOR($iret, 8)
	Return $iret
EndFunc

Func _guictrlheader_getitemflags($hwnd, $iindex)
	Local $iret = 0
	Local $iformat = _guictrlheader_getitemformat($hwnd, $iindex)
	If BitAND($iformat, $hdf_image) <> 0 Then $iret = BitOR($iret, 1)
	If BitAND($iformat, $hdf_rtlreading) <> 0 Then $iret = BitOR($iret, 2)
	If BitAND($iformat, $hdf_sortdown) <> 0 Then $iret = BitOR($iret, 4)
	If BitAND($iformat, $hdf_sortup) <> 0 Then $iret = BitOR($iret, 8)
	Return $iret
EndFunc

Func _guictrlheader_getitemformat($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_format)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "Fmt")
EndFunc

Func _guictrlheader_getitemimage($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_image)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "Image")
EndFunc

Func _guictrlheader_getitemorder($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_order)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "Order")
EndFunc

Func _guictrlheader_getitemparam($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_param)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "Param")
EndFunc

Func _guictrlheader_getitemrect($hwnd, $iindex)
	Local $arect[4]
	Local $trect = _guictrlheader_getitemrectex($hwnd, $iindex)
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrlheader_getitemrectex($hwnd, $iindex)
	Local $trect = DllStructCreate($tagrect)
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		_sendmessage($hwnd, $hdm_getitemrect, $iindex, $trect, 0, "wparam", "struct*")
	Else
		Local $irect = DllStructGetSize($trect)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
		_memwrite($tmemmap, $trect)
		_sendmessage($hwnd, $hdm_getitemrect, $iindex, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $trect, $irect)
		_memfree($tmemmap)
	EndIf
	Return $trect
EndFunc

Func _guictrlheader_getitemtext($hwnd, $iindex)
	Local $bunicode = _guictrlheader_getunicodeformat($hwnd)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_text)
	DllStructSetData($titem, "TextMax", 4096)
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		DllStructSetData($titem, "Text", DllStructGetPtr($tbuffer))
		_sendmessage($hwnd, $hdm_getitemw, $iindex, $titem, 0, "wparam", "struct*")
	Else
		Local $iitem = DllStructGetSize($titem)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem + DllStructGetSize($tbuffer), $tmemmap)
		Local $ptext = $pmemory + $iitem
		DllStructSetData($titem, "Text", $ptext)
		_memwrite($tmemmap, $titem, $pmemory, $iitem)
		If $bunicode Then
			_sendmessage($hwnd, $hdm_getitemw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			_sendmessage($hwnd, $hdm_getitema, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memread($tmemmap, $ptext, $tbuffer, DllStructGetSize($tbuffer))
		_memfree($tmemmap)
	EndIf
	Return DllStructGetData($tbuffer, "Text")
EndFunc

Func _guictrlheader_getitemwidth($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_width)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "XY")
EndFunc

Func _guictrlheader_getorderarray($hwnd)
	Local $iitems = _guictrlheader_getitemcount($hwnd)
	Local $tbuffer = DllStructCreate("int[" & $iitems & "]")
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		_sendmessage($hwnd, $hdm_getorderarray, $iitems, $tbuffer, 0, "wparam", "struct*")
	Else
		Local $ibuffer = DllStructGetSize($tbuffer)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
		_sendmessage($hwnd, $hdm_getorderarray, $iitems, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
		_memfree($tmemmap)
	EndIf
	Local $abuffer[$iitems + 1]
	$abuffer[0] = $iitems
	For $ii = 1 To $iitems
		$abuffer[$ii] = DllStructGetData($tbuffer, 1, $ii)
	Next
	Return $abuffer
EndFunc

Func _guictrlheader_getunicodeformat($hwnd)
	Return _sendmessage($hwnd, $hdm_getunicodeformat) <> 0
EndFunc

Func _guictrlheader_hittest($hwnd, $ix, $iy)
	Local $ttest = DllStructCreate($taghdhittestinfo)
	DllStructSetData($ttest, "X", $ix)
	DllStructSetData($ttest, "Y", $iy)
	Local $atest[11]
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		$atest[0] = _sendmessage($hwnd, $hdm_hittest, 0, $ttest, 0, "wparam", "struct*")
	Else
		Local $itest = DllStructGetSize($ttest)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $itest, $tmemmap)
		_memwrite($tmemmap, $ttest)
		$atest[0] = _sendmessage($hwnd, $hdm_hittest, 0, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $ttest, $itest)
		_memfree($tmemmap)
	EndIf
	Local $iflags = DllStructGetData($ttest, "Flags")
	$atest[1] = BitAND($iflags, $hht_nowhere) <> 0
	$atest[2] = BitAND($iflags, $hht_onheader) <> 0
	$atest[3] = BitAND($iflags, $hht_ondivider) <> 0
	$atest[4] = BitAND($iflags, $hht_ondivopen) <> 0
	$atest[5] = BitAND($iflags, $hht_onfilter) <> 0
	$atest[6] = BitAND($iflags, $hht_onfilterbutton) <> 0
	$atest[7] = BitAND($iflags, $hht_above) <> 0
	$atest[8] = BitAND($iflags, $hht_below) <> 0
	$atest[9] = BitAND($iflags, $hht_toright) <> 0
	$atest[10] = BitAND($iflags, $hht_toleft) <> 0
	Return $atest
EndFunc

Func _guictrlheader_insertitem($hwnd, $iindex, $stext, $iwidth = 50, $ialign = 0, $iimage = -1, $bonright = False)
	Local $aalign[3] = [$hdf_left, $hdf_right, $hdf_center]
	Local $bunicode = _guictrlheader_getunicodeformat($hwnd)
	Local $pbuffer, $ibuffer
	If $stext <> -1 Then
		$ibuffer = StringLen($stext) + 1
		Local $tbuffer
		If $bunicode Then
			$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
			$ibuffer *= 2
		Else
			$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
		EndIf
		DllStructSetData($tbuffer, "Text", $stext)
		$pbuffer = DllStructGetPtr($tbuffer)
	Else
		$ibuffer = 0
		$pbuffer = -1
	EndIf
	Local $titem = DllStructCreate($taghditem)
	Local $ifmt = $aalign[$ialign]
	Local $imask = BitOR($hdi_width, $hdi_format)
	If $stext <> "" Then
		$imask = BitOR($imask, $hdi_text)
		$ifmt = BitOR($ifmt, $hdf_string)
	EndIf
	If $iimage <> -1 Then
		$imask = BitOR($imask, $hdi_image)
		$ifmt = BitOR($ifmt, $hdf_image)
	EndIf
	If $bonright Then $ifmt = BitOR($ifmt, $hdf_bitmap_on_right)
	DllStructSetData($titem, "Mask", $imask)
	DllStructSetData($titem, "XY", $iwidth)
	DllStructSetData($titem, "Fmt", $ifmt)
	DllStructSetData($titem, "Image", $iimage)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		DllStructSetData($titem, "Text", $pbuffer)
		$iret = _sendmessage($hwnd, $hdm_insertitemw, $iindex, $titem, 0, "wparam", "struct*")
	Else
		Local $iitem = DllStructGetSize($titem)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
		If $stext <> -1 Then
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
		Else
			DllStructSetData($titem, "Text", -1)
		EndIf
		_memwrite($tmemmap, $titem, $pmemory, $iitem)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $hdm_insertitemw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $hdm_insertitema, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
	Return $iret
EndFunc

Func _guictrlheader_layout($hwnd, ByRef $trect)
	Local $tlayout = DllStructCreate($taghdlayout)
	Local $twindowpos = DllStructCreate($tagwindowpos)
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		DllStructSetData($tlayout, "Rect", DllStructGetPtr($trect))
		DllStructSetData($tlayout, "WindowPos", DllStructGetPtr($twindowpos))
		_sendmessage($hwnd, $hdm_layout, 0, $tlayout, 0, "wparam", "struct*")
	Else
		Local $ilayout = DllStructGetSize($tlayout)
		Local $irect = DllStructGetSize($trect)
		Local $iwindowpos = DllStructGetSize($twindowpos)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ilayout + $irect + $iwindowpos, $tmemmap)
		DllStructSetData($tlayout, "Rect", $pmemory + $ilayout)
		DllStructSetData($tlayout, "WindowPos", $pmemory + $ilayout + $irect)
		_memwrite($tmemmap, $tlayout, $pmemory, $ilayout)
		_memwrite($tmemmap, $trect, $pmemory + $ilayout, $irect)
		_sendmessage($hwnd, $hdm_layout, 0, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory + $ilayout + $irect, $twindowpos, $iwindowpos)
		_memfree($tmemmap)
	EndIf
	Return $twindowpos
EndFunc

Func _guictrlheader_ordertoindex($hwnd, $iorder)
	Return _sendmessage($hwnd, $hdm_ordertoindex, $iorder)
EndFunc

Func _guictrlheader_setbitmapmargin($hwnd, $iwidth)
	Return _sendmessage($hwnd, $hdm_setbitmapmargin, $iwidth)
EndFunc

Func _guictrlheader_setfilterchangetimeout($hwnd, $itimeout)
	Return _sendmessage($hwnd, $hdm_setfilterchangetimeout, 0, $itimeout)
EndFunc

Func _guictrlheader_sethotdivider($hwnd, $iflag, $iinputvalue)
	Return _sendmessage($hwnd, $hdm_sethotdivider, $iflag, $iinputvalue)
EndFunc

Func _guictrlheader_setimagelist($hwnd, $himage)
	Return _sendmessage($hwnd, $hdm_setimagelist, 0, $himage, 0, "wparam", "handle", "handle")
EndFunc

Func _guictrlheader_setitem($hwnd, $iindex, ByRef $titem)
	Local $bunicode = _guictrlheader_getunicodeformat($hwnd)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		$iret = _sendmessage($hwnd, $hdm_setitemw, $iindex, $titem, 0, "wparam", "struct*")
	Else
		Local $iitem = DllStructGetSize($titem)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem, $tmemmap)
		_memwrite($tmemmap, $titem)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $hdm_setitemw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $hdm_setitema, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrlheader_setitemalign($hwnd, $iindex, $ialign)
	Local $aalign[3] = [$hdf_left, $hdf_right, $hdf_center]
	Local $iformat = _guictrlheader_getitemformat($hwnd, $iindex)
	$iformat = BitAND($iformat, BitNOT($hdf_justifymask))
	$iformat = BitOR($iformat, $aalign[$ialign])
	Return _guictrlheader_setitemformat($hwnd, $iindex, $iformat)
EndFunc

Func _guictrlheader_setitembitmap($hwnd, $iindex, $hbitmap)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", BitOR($hdi_format, $hdi_bitmap))
	DllStructSetData($titem, "Fmt", $hdf_bitmap)
	DllStructSetData($titem, "hBMP", $hbitmap)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setitemdisplay($hwnd, $iindex, $idisplay)
	Local $iformat = BitAND(_guictrlheader_getitemformat($hwnd, $iindex), NOT $hdf_displaymask)
	If BitAND($idisplay, 1) <> 0 Then $iformat = BitOR($iformat, $hdf_bitmap)
	If BitAND($idisplay, 2) <> 0 Then $iformat = BitOR($iformat, $hdf_bitmap_on_right)
	If BitAND($idisplay, 4) <> 0 Then $iformat = BitOR($iformat, $hdf_ownerdraw)
	If BitAND($idisplay, 8) <> 0 Then $iformat = BitOR($iformat, $hdf_string)
	Return _guictrlheader_setitemformat($hwnd, $iindex, $iformat)
EndFunc

Func _guictrlheader_setitemflags($hwnd, $iindex, $iflags)
	Local $iformat = _guictrlheader_getitemformat($hwnd, $iindex)
	$iformat = BitAND($iformat, BitNOT($hdf_flagmask))
	If BitAND($iflags, 1) <> 0 Then $iformat = BitOR($iformat, $hdf_image)
	If BitAND($iflags, 2) <> 0 Then $iformat = BitOR($iformat, $hdf_rtlreading)
	If BitAND($iflags, 4) <> 0 Then $iformat = BitOR($iformat, $hdf_sortdown)
	If BitAND($iflags, 8) <> 0 Then $iformat = BitOR($iformat, $hdf_sortup)
	Return _guictrlheader_setitemformat($hwnd, $iindex, $iformat)
EndFunc

Func _guictrlheader_setitemformat($hwnd, $iindex, $iformat)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_format)
	DllStructSetData($titem, "Fmt", $iformat)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setitemimage($hwnd, $iindex, $iimage)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_image)
	DllStructSetData($titem, "Image", $iimage)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setitemorder($hwnd, $iindex, $iorder)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_order)
	DllStructSetData($titem, "Order", $iorder)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setitemparam($hwnd, $iindex, $iparam)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_param)
	DllStructSetData($titem, "Param", $iparam)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setitemtext($hwnd, $iindex, $stext)
	Local $bunicode = _guictrlheader_getunicodeformat($hwnd)
	Local $ibuffer, $pbuffer
	If $stext <> -1 Then
		$ibuffer = StringLen($stext) + 1
		Local $tbuffer
		If $bunicode Then
			$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
			$ibuffer *= 2
		Else
			$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
		EndIf
		DllStructSetData($tbuffer, "Text", $stext)
		$pbuffer = DllStructGetPtr($tbuffer)
	Else
		$ibuffer = 0
		$pbuffer = -1
	EndIf
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_text)
	DllStructSetData($titem, "TextMax", $ibuffer)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		DllStructSetData($titem, "Text", $pbuffer)
		$iret = _sendmessage($hwnd, $hdm_setitemw, $iindex, $titem, 0, "wparam", "struct*")
	Else
		Local $iitem = DllStructGetSize($titem)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
		If $stext <> -1 Then
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
		Else
			DllStructSetData($titem, "Text", -1)
		EndIf
		_memwrite($tmemmap, $titem, $pmemory, $iitem)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $hdm_setitemw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $hdm_setitema, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrlheader_setitemwidth($hwnd, $iindex, $iwidth)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_width)
	DllStructSetData($titem, "XY", $iwidth)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setorderarray($hwnd, ByRef $aorder)
	Local $tbuffer = DllStructCreate("int[" & $aorder[0] & "]")
	For $ii = 1 To $aorder[0]
		DllStructSetData($tbuffer, 1, $aorder[$ii], $ii)
	Next
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		$iret = _sendmessage($hwnd, $hdm_setorderarray, $aorder[0], $tbuffer, 0, "wparam", "struct*")
	Else
		Local $ibuffer = DllStructGetSize($tbuffer)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
		_memwrite($tmemmap, $tbuffer)
		$iret = _sendmessage($hwnd, $hdm_setorderarray, $aorder[0], $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrlheader_setunicodeformat($hwnd, $bunicode)
	Return _sendmessage($hwnd, $hdm_setunicodeformat, $bunicode)
EndFunc

Global $__g_hlvlastwnd
Global $__g_illistviewsortinfosize = 11
Global $__g_alistviewsortinfo[1][$__g_illistviewsortinfosize]
Global Const $__listviewconstant_classname = "SysListView32"
Global Const $__listviewconstant_ws_maximizebox = 65536
Global Const $__listviewconstant_ws_minimizebox = 131072
Global Const $__listviewconstant_gui_rundefmsg = "GUI_RUNDEFMSG"
Global Const $__listviewconstant_wm_setredraw = 11
Global Const $__listviewconstant_wm_setfont = 48
Global Const $__listviewconstant_wm_notify = 78
Global Const $__listviewconstant_default_gui_font = 17
Global Const $__listviewconstant_ild_transparent = 1
Global Const $__listviewconstant_ild_blend25 = 2
Global Const $__listviewconstant_ild_blend50 = 4
Global Const $__listviewconstant_ild_mask = 16
Global Const $__listviewconstant_vk_down = 40
Global Const $__listviewconstant_vk_end = 35
Global Const $__listviewconstant_vk_home = 36
Global Const $__listviewconstant_vk_left = 37
Global Const $__listviewconstant_vk_next = 34
Global Const $__listviewconstant_vk_prior = 33
Global Const $__listviewconstant_vk_right = 39
Global Const $__listviewconstant_vk_up = 38
Global Const $taglvbkimage = "ulong Flags;hwnd hBmp;ptr Image;uint ImageMax;int XOffPercent;int YOffPercent"
Global Const $taglvcolumn = "uint Mask;int Fmt;int CX;ptr Text;int TextMax;int SubItem;int Image;int Order;int cxMin;int cxDefault;int cxIdeal"
Global Const $taglvgroup = "uint Size;uint Mask;ptr Header;int HeaderMax;ptr Footer;int FooterMax;int GroupID;uint StateMask;uint State;uint Align;" & "ptr  pszSubtitle;uint cchSubtitle;ptr pszTask;uint cchTask;ptr pszDescriptionTop;uint cchDescriptionTop;ptr pszDescriptionBottom;" & "uint cchDescriptionBottom;int iTitleImage;int iExtendedImage;int iFirstItem;uint cItems;ptr pszSubsetTitle;uint cchSubsetTitle"
Global Const $taglvinsertmark = "uint Size;dword Flags;int Item;dword Reserved"
Global Const $taglvsetinfotip = "uint Size;dword Flags;ptr Text;int Item;int SubItem"

Func _guictrllistview_addarray($hwnd, ByRef $aitems)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $titem = DllStructCreate($taglvitem)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	DllStructSetData($titem, "Mask", $lvif_text)
	DllStructSetData($titem, "Text", DllStructGetPtr($tbuffer))
	DllStructSetData($titem, "TextMax", 4096)
	Local $ilastitem = _guictrllistview_getitemcount($hwnd)
	_guictrllistview_beginupdate($hwnd)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			For $ii = 0 To UBound($aitems) - 1
				DllStructSetData($titem, "Item", $ii)
				DllStructSetData($titem, "SubItem", 0)
				DllStructSetData($tbuffer, "Text", $aitems[$ii][0])
				_sendmessage($hwnd, $lvm_insertitemw, 0, $titem, 0, "wparam", "struct*")
				For $ij = 1 To UBound($aitems, $ubound_columns) - 1
					DllStructSetData($titem, "SubItem", $ij)
					DllStructSetData($tbuffer, "Text", $aitems[$ii][$ij])
					_sendmessage($hwnd, $lvm_setitemw, 0, $titem, 0, "wparam", "struct*")
				Next
			Next
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			For $ii = 0 To UBound($aitems) - 1
				DllStructSetData($titem, "Item", $ii + $ilastitem)
				DllStructSetData($titem, "SubItem", 0)
				DllStructSetData($tbuffer, "Text", $aitems[$ii][0])
				_memwrite($tmemmap, $titem, $pmemory, $iitem)
				_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
				If $bunicode Then
					_sendmessage($hwnd, $lvm_insertitemw, 0, $pmemory, 0, "wparam", "ptr")
				Else
					_sendmessage($hwnd, $lvm_insertitema, 0, $pmemory, 0, "wparam", "ptr")
				EndIf
				For $ij = 1 To UBound($aitems, $ubound_columns) - 1
					DllStructSetData($titem, "SubItem", $ij)
					DllStructSetData($tbuffer, "Text", $aitems[$ii][$ij])
					_memwrite($tmemmap, $titem, $pmemory, $iitem)
					_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
					If $bunicode Then
						_sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
					Else
						_sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
					EndIf
				Next
			Next
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		For $ii = 0 To UBound($aitems) - 1
			DllStructSetData($titem, "Item", $ii + $ilastitem)
			DllStructSetData($titem, "SubItem", 0)
			DllStructSetData($tbuffer, "Text", $aitems[$ii][0])
			If $bunicode Then
				GUICtrlSendMsg($hwnd, $lvm_insertitemw, 0, $pitem)
			Else
				GUICtrlSendMsg($hwnd, $lvm_insertitema, 0, $pitem)
			EndIf
			For $ij = 1 To UBound($aitems, $ubound_columns) - 1
				DllStructSetData($titem, "SubItem", $ij)
				DllStructSetData($tbuffer, "Text", $aitems[$ii][$ij])
				If $bunicode Then
					GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem)
				Else
					GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem)
				EndIf
			Next
		Next
	EndIf
	_guictrllistview_endupdate($hwnd)
EndFunc

Func _guictrllistview_addcolumn($hwnd, $stext, $iwidth = 50, $ialign = -1, $iimage = -1, $bonright = False)
	Return _guictrllistview_insertcolumn($hwnd, _guictrllistview_getcolumncount($hwnd), $stext, $iwidth, $ialign, $iimage, $bonright)
EndFunc

Func _guictrllistview_additem($hwnd, $stext, $iimage = -1, $iparam = 0)
	Return _guictrllistview_insertitem($hwnd, $stext, -1, $iimage, $iparam)
EndFunc

Func _guictrllistview_addsubitem($hwnd, $iindex, $stext, $isubitem, $iimage = -1)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $titem = DllStructCreate($taglvitem)
	Local $imask = $lvif_text
	If $iimage <> -1 Then $imask = BitOR($imask, $lvif_image)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($titem, "Mask", $imask)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	DllStructSetData($titem, "Image", $iimage)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($titem, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $titem, $pmemory, $iitem)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		DllStructSetData($titem, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_approximateviewheight($hwnd, $icount = -1, $icx = -1, $icy = -1)
	If IsHWnd($hwnd) Then
		Return BitShift((_sendmessage($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))), 16)
	Else
		Return BitShift((GUICtrlSendMsg($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))), 16)
	EndIf
EndFunc

Func _guictrllistview_approximateviewrect($hwnd, $icount = -1, $icx = -1, $icy = -1)
	Local $iview
	If IsHWnd($hwnd) Then
		$iview = _sendmessage($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))
	Else
		$iview = GUICtrlSendMsg($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))
	EndIf
	Local $aview[2]
	$aview[0] = BitAND($iview, 65535)
	$aview[1] = BitShift($iview, 16)
	Return $aview
EndFunc

Func _guictrllistview_approximateviewwidth($hwnd, $icount = -1, $icx = -1, $icy = -1)
	If IsHWnd($hwnd) Then
		Return BitAND((_sendmessage($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))), 65535)
	Else
		Return BitAND((GUICtrlSendMsg($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))), 65535)
	EndIf
EndFunc

Func _guictrllistview_arrange($hwnd, $iarrange = 0)
	Local $aarrange[4] = [$lva_default, $lva_alignleft, $lva_aligntop, $lva_snaptogrid]
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_arrange, $aarrange[$iarrange]) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_arrange, $aarrange[$iarrange], 0) <> 0
	EndIf
EndFunc

Func __guictrllistview_arraydelete(ByRef $avarray, $ielement)
	If NOT IsArray($avarray) Then Return SetError(1, 0, "")
	Local $iupper = UBound($avarray)
	If $iupper = 1 Then
		SetError(2)
		Return ""
	EndIf
	Local $avnewarray[$iupper - 1][$__g_illistviewsortinfosize]
	$avnewarray[0][0] = $avarray[0][0]
	If $ielement < 0 Then
		$ielement = 0
	EndIf
	If $ielement > ($iupper - 1) Then
		$ielement = ($iupper - 1)
	EndIf
	If $ielement > 0 Then
		For $icntr = 0 To $ielement - 1
			For $x = 1 To $__g_illistviewsortinfosize - 1
				$avnewarray[$icntr][$x] = $avarray[$icntr][$x]
			Next
		Next
	EndIf
	If $ielement < ($iupper - 1) Then
		For $icntr = ($ielement + 1) To ($iupper - 1)
			For $x = 1 To $__g_illistviewsortinfosize - 1
				$avnewarray[$icntr - 1][$x] = $avarray[$icntr][$x]
			Next
		Next
	EndIf
	$avarray = $avnewarray
	SetError(0)
	Return 1
EndFunc

Func _guictrllistview_beginupdate($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $__listviewconstant_wm_setredraw, False) = 0
EndFunc

Func _guictrllistview_canceleditlabel($hwnd)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $lvm_canceleditlabel)
	Else
		GUICtrlSendMsg($hwnd, $lvm_canceleditlabel, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_clickitem($hwnd, $iindex, $sbutton = "left", $bmove = False, $iclicks = 1, $ispeed = 1)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	_guictrllistview_ensurevisible($hwnd, $iindex, False)
	Local $trect = _guictrllistview_getitemrectex($hwnd, $iindex, $lvir_label)
	Local $tpoint = _winapi_pointfromrect($trect, True)
	$tpoint = _winapi_clienttoscreen($hwnd, $tpoint)
	Local $ix, $iy
	_winapi_getxyfrompoint($tpoint, $ix, $iy)
	Local $imode = Opt("MouseCoordMode", 1)
	If NOT $bmove Then
		Local $apos = MouseGetPos()
		_winapi_showcursor(False)
		MouseClick($sbutton, $ix, $iy, $iclicks, $ispeed)
		MouseMove($apos[0], $apos[1], 0)
		_winapi_showcursor(True)
	Else
		MouseClick($sbutton, $ix, $iy, $iclicks, $ispeed)
	EndIf
	Opt("MouseCoordMode", $imode)
EndFunc

Func _guictrllistview_copyitems($hwnd_source, $hwnd_destination, $bdelflag = False)
	Local $a_indices, $titem = DllStructCreate($taglvitem), $iindex
	Local $icols = _guictrllistview_getcolumncount($hwnd_source)
	Local $iitems = _guictrllistview_getitemcount($hwnd_source)
	_guictrllistview_beginupdate($hwnd_source)
	_guictrllistview_beginupdate($hwnd_destination)
	If BitAND(_guictrllistview_getextendedlistviewstyle($hwnd_source), $lvs_ex_checkboxes) == $lvs_ex_checkboxes Then
		For $i = 0 To $iitems - 1
			If (_guictrllistview_getitemchecked($hwnd_source, $i)) Then
				If IsArray($a_indices) Then
					ReDim $a_indices[UBound($a_indices) + 1]
				Else
					Local $a_indices[2]
				EndIf
				$a_indices[0] = $a_indices[0] + 1
				$a_indices[UBound($a_indices) - 1] = $i
			EndIf
		Next
		If (IsArray($a_indices)) Then
			For $i = 1 To $a_indices[0]
				DllStructSetData($titem, "Mask", BitOR($lvif_groupid, $lvif_image, $lvif_indent, $lvif_param, $lvif_state))
				DllStructSetData($titem, "Item", $a_indices[$i])
				DllStructSetData($titem, "SubItem", 0)
				DllStructSetData($titem, "StateMask", -1)
				_guictrllistview_getitemex($hwnd_source, $titem)
				$iindex = _guictrllistview_additem($hwnd_destination, _guictrllistview_getitemtext($hwnd_source, $a_indices[$i], 0), DllStructGetData($titem, "Image"))
				_guictrllistview_setitemchecked($hwnd_destination, $iindex)
				For $x = 1 To $icols - 1
					DllStructSetData($titem, "Item", $a_indices[$i])
					DllStructSetData($titem, "SubItem", $x)
					_guictrllistview_getitemex($hwnd_source, $titem)
					_guictrllistview_addsubitem($hwnd_destination, $iindex, _guictrllistview_getitemtext($hwnd_source, $a_indices[$i], $x), $x, DllStructGetData($titem, "Image"))
				Next
			Next
			If $bdelflag Then
				For $i = $a_indices[0] To 1 Step -1
					_guictrllistview_deleteitem($hwnd_source, $a_indices[$i])
				Next
			EndIf
		EndIf
	EndIf
	If (_guictrllistview_getselectedcount($hwnd_source)) Then
		$a_indices = _guictrllistview_getselectedindices($hwnd_source, 1)
		For $i = 1 To $a_indices[0]
			DllStructSetData($titem, "Mask", BitOR($lvif_groupid, $lvif_image, $lvif_indent, $lvif_param, $lvif_state))
			DllStructSetData($titem, "Item", $a_indices[$i])
			DllStructSetData($titem, "SubItem", 0)
			DllStructSetData($titem, "StateMask", -1)
			_guictrllistview_getitemex($hwnd_source, $titem)
			$iindex = _guictrllistview_additem($hwnd_destination, _guictrllistview_getitemtext($hwnd_source, $a_indices[$i], 0), DllStructGetData($titem, "Image"))
			For $x = 1 To $icols - 1
				DllStructSetData($titem, "Item", $a_indices[$i])
				DllStructSetData($titem, "SubItem", $x)
				_guictrllistview_getitemex($hwnd_source, $titem)
				_guictrllistview_addsubitem($hwnd_destination, $iindex, _guictrllistview_getitemtext($hwnd_source, $a_indices[$i], $x), $x, DllStructGetData($titem, "Image"))
			Next
		Next
		_guictrllistview_setitemselected($hwnd_source, -1, False)
		If $bdelflag Then
			For $i = $a_indices[0] To 1 Step -1
				_guictrllistview_deleteitem($hwnd_source, $a_indices[$i])
			Next
		EndIf
	EndIf
	_guictrllistview_endupdate($hwnd_source)
	_guictrllistview_endupdate($hwnd_destination)
EndFunc

Func _guictrllistview_create($hwnd, $sheadertext, $ix, $iy, $iwidth = 150, $iheight = 150, $istyle = 13, $iexstyle = 0, $bcoinit = False)
	If NOT IsHWnd($hwnd) Then Return SetError(1, 0, 0)
	If NOT IsString($sheadertext) Then Return SetError(2, 0, 0)
	If $iwidth = -1 Then $iwidth = 150
	If $iheight = -1 Then $iheight = 150
	If $istyle = -1 Then $istyle = $lvs_default
	If $iexstyle = -1 Then $iexstyle = 0
	Local Const $s_ok = 0
	Local Const $s_false = 1
	Local Const $rpc_e_changed_mode = -2147417850
	Local Const $e_invalidarg = -2147024809
	Local Const $e_outofmemory = -2147024882
	Local Const $e_unexpected = -2147418113
	Local $sseparatorchar = Opt("GUIDataSeparatorChar")
	Local Const $coinit_apartmentthreaded = 2
	Local $istr_len = StringLen($sheadertext)
	If $istr_len Then $sheadertext = StringSplit($sheadertext, $sseparatorchar)
	$istyle = BitOR($__udfguiconstant_ws_child, $__udfguiconstant_ws_visible, $istyle)
	If $bcoinit Then
		Local $aresult = DllCall("ole32.dll", "long", "CoInitializeEx", "ptr", 0, "dword", $coinit_apartmentthreaded)
		If @error Then Return SetError(@error, @extended, 0)
		Switch $aresult[0]
			Case $s_ok
			Case $s_false
			Case $rpc_e_changed_mode
			Case $e_invalidarg
			Case $e_outofmemory
			Case $e_unexpected
		EndSwitch
	EndIf
	Local $nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Local $hlist = _winapi_createwindowex($iexstyle, $__listviewconstant_classname, "", $istyle, $ix, $iy, $iwidth, $iheight, $hwnd, $nctrlid)
	_sendmessage($hlist, $__listviewconstant_wm_setfont, _winapi_getstockobject($__listviewconstant_default_gui_font), True)
	If $istr_len Then
		For $x = 1 To $sheadertext[0]
			_guictrllistview_insertcolumn($hlist, $x - 1, $sheadertext[$x], 75)
		Next
	EndIf
	Return $hlist
EndFunc

Func _guictrllistview_createdragimage($hwnd, $iindex)
	Local $adrag[3]
	Local $tpoint = DllStructCreate($tagpoint)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$adrag[0] = _sendmessage($hwnd, $lvm_createdragimage, $iindex, $tpoint, 0, "wparam", "struct*", "handle")
		Else
			Local $ipoint = DllStructGetSize($tpoint)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ipoint, $tmemmap)
			$adrag[0] = _sendmessage($hwnd, $lvm_createdragimage, $iindex, $pmemory, 0, "wparam", "ptr", "handle")
			_memread($tmemmap, $pmemory, $tpoint, $ipoint)
			_memfree($tmemmap)
		EndIf
	Else
		$adrag[0] = Ptr(GUICtrlSendMsg($hwnd, $lvm_createdragimage, $iindex, DllStructGetPtr($tpoint)))
	EndIf
	$adrag[1] = DllStructGetData($tpoint, "X")
	$adrag[2] = DllStructGetData($tpoint, "Y")
	Return $adrag
EndFunc

Func _guictrllistview_createsolidbitmap($hwnd, $icolor, $iwidth, $iheight)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _winapi_createsolidbitmap($hwnd, $icolor, $iwidth, $iheight)
EndFunc

Func _guictrllistview_deleteallitems($hwnd)
	If _guictrllistview_getitemcount($hwnd) = 0 Then Return True
	Local $vcid = 0
	If IsHWnd($hwnd) Then
		$vcid = _winapi_getdlgctrlid($hwnd)
	Else
		$vcid = $hwnd
		$hwnd = GUICtrlGetHandle($hwnd)
	EndIf
	If $vcid < $_udf_startid Then
		Local $iparam = 0
		For $iindex = _guictrllistview_getitemcount($hwnd) - 1 To 0 Step -1
			$iparam = _guictrllistview_getitemparam($hwnd, $iindex)
			If GUICtrlGetState($iparam) > 0 AND GUICtrlGetHandle($iparam) = 0 Then
				GUICtrlDelete($iparam)
			EndIf
		Next
		If _guictrllistview_getitemcount($hwnd) = 0 Then Return True
	EndIf
	Return _sendmessage($hwnd, $lvm_deleteallitems) <> 0
EndFunc

Func _guictrllistview_deletecolumn($hwnd, $icol)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_deletecolumn, $icol) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_deletecolumn, $icol, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_deleteitem($hwnd, $iindex)
	Local $vcid = 0
	If IsHWnd($hwnd) Then
		$vcid = _winapi_getdlgctrlid($hwnd)
	Else
		$vcid = $hwnd
		$hwnd = GUICtrlGetHandle($hwnd)
	EndIf
	If $vcid < $_udf_startid Then
		Local $iparam = _guictrllistview_getitemparam($hwnd, $iindex)
		If GUICtrlGetState($iparam) > 0 AND GUICtrlGetHandle($iparam) = 0 Then
			If GUICtrlDelete($iparam) Then
				Return True
			EndIf
		EndIf
	EndIf
	Return _sendmessage($hwnd, $lvm_deleteitem, $iindex) <> 0
EndFunc

Func _guictrllistview_deleteitemsselected($hwnd)
	Local $iitemcount = _guictrllistview_getitemcount($hwnd)
	If _guictrllistview_getselectedcount($hwnd) = $iitemcount Then
		Return _guictrllistview_deleteallitems($hwnd)
	Else
		Local $aselected = _guictrllistview_getselectedindices($hwnd, True)
		If NOT IsArray($aselected) Then Return SetError($lv_err, $lv_err, 0)
		_guictrllistview_setitemselected($hwnd, -1, False)
		Local $vcid = 0, $inative_delete, $iudf_delete
		If IsHWnd($hwnd) Then
			$vcid = _winapi_getdlgctrlid($hwnd)
		Else
			$vcid = $hwnd
			$hwnd = GUICtrlGetHandle($hwnd)
		EndIf
		For $iindex = $aselected[0] To 1 Step -1
			If $vcid < $_udf_startid Then
				Local $iparam = _guictrllistview_getitemparam($hwnd, $aselected[$iindex])
				If GUICtrlGetState($iparam) > 0 AND GUICtrlGetHandle($iparam) = 0 Then
					$inative_delete = GUICtrlDelete($iparam)
					If $inative_delete Then ContinueLoop
				EndIf
			EndIf
			$iudf_delete = _sendmessage($hwnd, $lvm_deleteitem, $aselected[$iindex])
			If $inative_delete + $iudf_delete = 0 Then
				ExitLoop
			EndIf
		Next
		Return NOT $iindex
	EndIf
EndFunc

Func _guictrllistview_destroy(ByRef $hwnd)
	If NOT _winapi_isclassname($hwnd, $__listviewconstant_classname) Then Return SetError(2, 2, False)
	Local $idestroyed = 0
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			Local $nctrlid = _winapi_getdlgctrlid($hwnd)
			Local $hparent = _winapi_getparent($hwnd)
			$idestroyed = _winapi_destroywindow($hwnd)
			Local $iret = __udf_freeglobalid($hparent, $nctrlid)
			If NOT $iret Then
			EndIf
		Else
			Return SetError(1, 1, False)
		EndIf
	Else
		$idestroyed = GUICtrlDelete($hwnd)
	EndIf
	If $idestroyed Then $hwnd = 0
	Return $idestroyed <> 0
EndFunc

Func __guictrllistview_draw($hwnd, $iindex, $hdc, $ix, $iy, $istyle = 0)
	Local $iflags = 0
	If BitAND($istyle, 1) <> 0 Then $iflags = BitOR($iflags, $__listviewconstant_ild_transparent)
	If BitAND($istyle, 2) <> 0 Then $iflags = BitOR($iflags, $__listviewconstant_ild_blend25)
	If BitAND($istyle, 4) <> 0 Then $iflags = BitOR($iflags, $__listviewconstant_ild_blend50)
	If BitAND($istyle, 8) <> 0 Then $iflags = BitOR($iflags, $__listviewconstant_ild_mask)
	Local $aresult = DllCall("comctl32.dll", "bool", "ImageList_Draw", "handle", $hwnd, "int", $iindex, "handle", $hdc, "int", $ix, "int", $iy, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrllistview_drawdragimage(ByRef $hwnd, ByRef $adrag)
	Local $hdc = _winapi_getwindowdc($hwnd)
	Local $tpoint = _winapi_getmousepos(True, $hwnd)
	_winapi_invalidaterect($hwnd)
	__guictrllistview_draw($adrag[0], 0, $hdc, DllStructGetData($tpoint, "X"), DllStructGetData($tpoint, "Y"))
	_winapi_releasedc($hwnd, $hdc)
EndFunc

Func _guictrllistview_editlabel($hwnd, $iindex)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $aresult
	If IsHWnd($hwnd) Then
		$aresult = DllCall("user32.dll", "hwnd", "SetFocus", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult = 0 Then Return 0
		If $bunicode Then
			Return _sendmessage($hwnd, $lvm_editlabelw, $iindex, 0, 0, "wparam", "lparam", "hwnd")
		Else
			Return _sendmessage($hwnd, $lvm_editlabel, $iindex, 0, 0, "wparam", "lparam", "hwnd")
		EndIf
	Else
		$aresult = DllCall("user32.dll", "hwnd", "SetFocus", "hwnd", GUICtrlGetHandle($hwnd))
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult = 0 Then Return 0
		If $bunicode Then
			Return HWnd(GUICtrlSendMsg($hwnd, $lvm_editlabelw, $iindex, 0))
		Else
			Return HWnd(GUICtrlSendMsg($hwnd, $lvm_editlabel, $iindex, 0))
		EndIf
	EndIf
EndFunc

Func _guictrllistview_enablegroupview($hwnd, $benable = True)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_enablegroupview, $benable)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_enablegroupview, $benable, 0)
	EndIf
EndFunc

Func _guictrllistview_endupdate($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $__listviewconstant_wm_setredraw, True) = 0
EndFunc

Func _guictrllistview_ensurevisible($hwnd, $iindex, $bpartialok = False)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_ensurevisible, $iindex, $bpartialok)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_ensurevisible, $iindex, $bpartialok)
	EndIf
EndFunc

Func _guictrllistview_findintext($hwnd, $stext, $istart = -1, $bwrapok = True, $breverse = False)
	Local $icount = _guictrllistview_getitemcount($hwnd)
	Local $icolumns = _guictrllistview_getcolumncount($hwnd)
	If $icolumns = 0 Then $icolumns = 1
	If $breverse AND $istart = -1 Then Return -1
	Local $slist
	If $breverse Then
		For $ii = $istart - 1 To 0 Step -1
			For $ij = 0 To $icolumns - 1
				$slist = _guictrllistview_getitemtext($hwnd, $ii, $ij)
				If StringInStr($slist, $stext) Then Return $ii
			Next
		Next
	Else
		For $ii = $istart + 1 To $icount - 1
			For $ij = 0 To $icolumns - 1
				$slist = _guictrllistview_getitemtext($hwnd, $ii, $ij)
				If StringInStr($slist, $stext) Then Return $ii
			Next
		Next
	EndIf
	If (($istart = -1) OR NOT $bwrapok) AND NOT $breverse Then Return -1
	If $breverse AND $bwrapok Then
		For $ii = $icount - 1 To $istart + 1 Step -1
			For $ij = 0 To $icolumns - 1
				$slist = _guictrllistview_getitemtext($hwnd, $ii, $ij)
				If StringInStr($slist, $stext) Then Return $ii
			Next
		Next
	Else
		For $ii = 0 To $istart - 1
			For $ij = 0 To $icolumns - 1
				$slist = _guictrllistview_getitemtext($hwnd, $ii, $ij)
				If StringInStr($slist, $stext) Then Return $ii
			Next
		Next
	EndIf
	Return -1
EndFunc

Func _guictrllistview_finditem($hwnd, $istart, ByRef $tfindinfo, $stext = "")
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	Local $pbuffer = DllStructGetPtr($tbuffer)
	DllStructSetData($tbuffer, "Text", $stext)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tfindinfo, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_finditem, $istart, $tfindinfo, 0, "wparam", "struct*")
		Else
			Local $ifindinfo = DllStructGetSize($tfindinfo)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ifindinfo + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $ifindinfo
			DllStructSetData($tfindinfo, "Text", $ptext)
			_memwrite($tmemmap, $tfindinfo, $pmemory, $ifindinfo)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			$iret = _sendmessage($hwnd, $lvm_finditem, $istart, $pmemory, 0, "wparam", "ptr")
			_memfree($tmemmap)
		EndIf
	Else
		DllStructSetData($tfindinfo, "Text", $pbuffer)
		$iret = GUICtrlSendMsg($hwnd, $lvm_finditem, $istart, DllStructGetPtr($tfindinfo))
	EndIf
	Return $iret
EndFunc

Func _guictrllistview_findnearest($hwnd, $ix, $iy, $idir = 0, $istart = -1, $bwrapok = True)
	Local $adir[8] = [$__listviewconstant_vk_left, $__listviewconstant_vk_right, $__listviewconstant_vk_up, $__listviewconstant_vk_down, $__listviewconstant_vk_home, $__listviewconstant_vk_end, $__listviewconstant_vk_prior, $__listviewconstant_vk_next]
	Local $tfindinfo = DllStructCreate($taglvfindinfo)
	Local $iflags = $lvfi_nearestxy
	If $bwrapok Then $iflags = BitOR($iflags, $lvfi_wrap)
	DllStructSetData($tfindinfo, "Flags", $iflags)
	DllStructSetData($tfindinfo, "X", $ix)
	DllStructSetData($tfindinfo, "Y", $iy)
	DllStructSetData($tfindinfo, "Direction", $adir[$idir])
	Return _guictrllistview_finditem($hwnd, $istart, $tfindinfo)
EndFunc

Func _guictrllistview_findparam($hwnd, $iparam, $istart = -1)
	Local $tfindinfo = DllStructCreate($taglvfindinfo)
	DllStructSetData($tfindinfo, "Flags", $lvfi_param)
	DllStructSetData($tfindinfo, "Param", $iparam)
	Return _guictrllistview_finditem($hwnd, $istart, $tfindinfo)
EndFunc

Func _guictrllistview_findtext($hwnd, $stext, $istart = -1, $bpartialok = True, $bwrapok = True)
	Local $tfindinfo = DllStructCreate($taglvfindinfo)
	Local $iflags = $lvfi_string
	If $bpartialok Then $iflags = BitOR($iflags, $lvfi_partial)
	If $bwrapok Then $iflags = BitOR($iflags, $lvfi_wrap)
	DllStructSetData($tfindinfo, "Flags", $iflags)
	Return _guictrllistview_finditem($hwnd, $istart, $tfindinfo, $stext)
EndFunc

Func _guictrllistview_getbkcolor($hwnd)
	Local $i_color
	If IsHWnd($hwnd) Then
		$i_color = _sendmessage($hwnd, $lvm_getbkcolor)
	Else
		$i_color = GUICtrlSendMsg($hwnd, $lvm_getbkcolor, 0, 0)
	EndIf
	Return __guictrllistview_reversecolororder($i_color)
EndFunc

Func _guictrllistview_getbkimage($hwnd)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $timage = DllStructCreate($taglvbkimage)
	DllStructSetData($timage, "ImageMax", 4096)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($timage, "Image", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_getbkimagew, 0, $timage, 0, "wparam", "struct*")
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $iimage = DllStructGetSize($timage)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iimage + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iimage
			DllStructSetData($timage, "Image", $ptext)
			_memwrite($tmemmap, $timage, $pmemory, $iimage)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_getbkimagew, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_getbkimagea, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memread($tmemmap, $pmemory, $timage, $iimage)
			_memread($tmemmap, $ptext, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pimage = DllStructGetPtr($timage)
		DllStructSetData($timage, "Image", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_getbkimagew, 0, $pimage)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getbkimagea, 0, $pimage)
		EndIf
	EndIf
	Local $aimage[4]
	Switch BitAND(DllStructGetData($timage, "Flags"), $lvbkif_source_mask)
		Case $lvbkif_source_hbitmap
			$aimage[0] = 1
		Case $lvbkif_source_url
			$aimage[0] = 2
	EndSwitch
	$aimage[1] = DllStructGetData($tbuffer, "Text")
	$aimage[2] = DllStructGetData($timage, "XOffPercent")
	$aimage[3] = DllStructGetData($timage, "YOffPercent")
	Return SetError($iret <> 0, 0, $aimage)
EndFunc

Func _guictrllistview_getcallbackmask($hwnd)
	Local $iflags = 0
	Local $imask = _sendmessage($hwnd, $lvm_getcallbackmask)
	If BitAND($imask, $lvis_cut) <> 0 Then $iflags = BitOR($iflags, 1)
	If BitAND($imask, $lvis_drophilited) <> 0 Then $iflags = BitOR($iflags, 2)
	If BitAND($imask, $lvis_focused) <> 0 Then $iflags = BitOR($iflags, 4)
	If BitAND($imask, $lvis_selected) <> 0 Then $iflags = BitOR($iflags, 8)
	If BitAND($imask, $lvis_overlaymask) <> 0 Then $iflags = BitOR($iflags, 16)
	If BitAND($imask, $lvis_stateimagemask) <> 0 Then $iflags = BitOR($iflags, 32)
	Return $iflags
EndFunc

Func _guictrllistview_getcolumn($hwnd, $iindex)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $tcolumn = DllStructCreate($taglvcolumn)
	DllStructSetData($tcolumn, "Mask", $lvcf_alldata)
	DllStructSetData($tcolumn, "TextMax", 4096)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tcolumn, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_getcolumnw, $iindex, $tcolumn, 0, "wparam", "struct*")
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $icolumn = DllStructGetSize($tcolumn)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $icolumn + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $icolumn
			DllStructSetData($tcolumn, "Text", $ptext)
			_memwrite($tmemmap, $tcolumn, $pmemory, $icolumn)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_getcolumnw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_getcolumna, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memread($tmemmap, $pmemory, $tcolumn, $icolumn)
			_memread($tmemmap, $ptext, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pcolumn = DllStructGetPtr($tcolumn)
		DllStructSetData($tcolumn, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_getcolumnw, $iindex, $pcolumn)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getcolumna, $iindex, $pcolumn)
		EndIf
	EndIf
	Local $acolumn[9]
	Switch BitAND(DllStructGetData($tcolumn, "Fmt"), $lvcfmt_justifymask)
		Case $lvcfmt_right
			$acolumn[0] = 1
		Case $lvcfmt_center
			$acolumn[0] = 2
		Case Else
			$acolumn[0] = 0
	EndSwitch
	$acolumn[1] = BitAND(DllStructGetData($tcolumn, "Fmt"), $lvcfmt_image) <> 0
	$acolumn[2] = BitAND(DllStructGetData($tcolumn, "Fmt"), $lvcfmt_bitmap_on_right) <> 0
	$acolumn[3] = BitAND(DllStructGetData($tcolumn, "Fmt"), $lvcfmt_col_has_images) <> 0
	$acolumn[4] = DllStructGetData($tcolumn, "CX")
	$acolumn[5] = DllStructGetData($tbuffer, "Text")
	$acolumn[6] = DllStructGetData($tcolumn, "SubItem")
	$acolumn[7] = DllStructGetData($tcolumn, "Image")
	$acolumn[8] = DllStructGetData($tcolumn, "Order")
	Return SetError($iret = 0, 0, $acolumn)
EndFunc

Func _guictrllistview_getcolumncount($hwnd)
	Return _sendmessage(_guictrllistview_getheader($hwnd), 4608)
EndFunc

Func _guictrllistview_getcolumnorder($hwnd)
	Local $a_cols = _guictrllistview_getcolumnorderarray($hwnd), $s_cols = ""
	Local $sseparatorchar = Opt("GUIDataSeparatorChar")
	For $i = 1 To $a_cols[0]
		$s_cols &= $a_cols[$i] & $sseparatorchar
	Next
	$s_cols = StringTrimRight($s_cols, 1)
	Return $s_cols
EndFunc

Func _guictrllistview_getcolumnorderarray($hwnd)
	Local $icolumns = _guictrllistview_getcolumncount($hwnd)
	Local $tbuffer = DllStructCreate("int[" & $icolumns & "]")
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getcolumnorderarray, $icolumns, $tbuffer, 0, "wparam", "struct*")
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
			_sendmessage($hwnd, $lvm_getcolumnorderarray, $icolumns, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_getcolumnorderarray, $icolumns, DllStructGetPtr($tbuffer))
	EndIf
	Local $abuffer[$icolumns + 1]
	$abuffer[0] = $icolumns
	For $ii = 1 To $icolumns
		$abuffer[$ii] = DllStructGetData($tbuffer, 1, $ii)
	Next
	Return $abuffer
EndFunc

Func _guictrllistview_getcolumnwidth($hwnd, $icol)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getcolumnwidth, $icol)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getcolumnwidth, $icol, 0)
	EndIf
EndFunc

Func _guictrllistview_getcounterpage($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getcountperpage)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getcountperpage, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_geteditcontrol($hwnd)
	If IsHWnd($hwnd) Then
		Return HWnd(_sendmessage($hwnd, $lvm_geteditcontrol))
	Else
		Return HWnd(GUICtrlSendMsg($hwnd, $lvm_geteditcontrol, 0, 0))
	EndIf
EndFunc

Func _guictrllistview_getemptytext($hwnd)
	Local $ttext = DllStructCreate("char[4096]")
	Local $iret
	If IsHWnd($hwnd) Then
		Local $itext = DllStructGetSize($ttext)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $itext + 4096, $tmemmap)
		Local $ptext = $pmemory + $itext
		DllStructSetData($ttext, "Text", $ptext)
		_memwrite($tmemmap, $ptext, $pmemory, $itext)
		$iret = _sendmessage($hwnd, $lvm_getemptytext, 4096, $pmemory)
		_memread($tmemmap, $ptext, $ttext, 4096)
		_memfree($tmemmap)
		If $iret = 0 Then Return SetError(-1, 0, "")
		Return DllStructGetData($ttext, 1)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getemptytext, 4096, DllStructGetPtr($ttext))
		If $iret = 0 Then Return SetError(-1, 0, "")
		Return DllStructGetData($ttext, 1)
	EndIf
EndFunc

Func _guictrllistview_getextendedlistviewstyle($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getextendedlistviewstyle)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getextendedlistviewstyle, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getfocusedgroup($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getfocusedgroup)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getfocusedgroup, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getgroupcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getgroupcount)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getgroupcount, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getgroupinfo($hwnd, $igroupid)
	Local $tgroup = __guictrllistview_getgroupinfoex($hwnd, $igroupid, BitOR($lvgf_header, $lvgf_align))
	Local $ierr = @error
	Local $agroup[2]
	$agroup[0] = _winapi_widechartomultibyte(DllStructGetData($tgroup, "Header"))
	Select 
		Case BitAND(DllStructGetData($tgroup, "Align"), $lvga_header_center) <> 0
			$agroup[1] = 1
		Case BitAND(DllStructGetData($tgroup, "Align"), $lvga_header_right) <> 0
			$agroup[1] = 2
		Case Else
			$agroup[1] = 0
	EndSelect
	Return SetError($ierr, 0, $agroup)
EndFunc

Func __guictrllistview_getgroupinfoex($hwnd, $igroupid, $imask)
	Local $tgroup = DllStructCreate($taglvgroup)
	Local $igroup = DllStructGetSize($tgroup)
	DllStructSetData($tgroup, "Size", $igroup)
	DllStructSetData($tgroup, "Mask", $imask)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getgroupinfo, $igroupid, $tgroup, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $igroup, $tmemmap)
			_memwrite($tmemmap, $tgroup, $pmemory, $igroup)
			$iret = _sendmessage($hwnd, $lvm_getgroupinfo, $igroupid, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tgroup, $igroup)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getgroupinfo, $igroupid, DllStructGetPtr($tgroup))
	EndIf
	Return SetError($iret <> $igroupid, 0, $tgroup)
EndFunc

Func _guictrllistview_getgroupinfobyindex($hwnd, $iindex)
	Local $tgroup = DllStructCreate($taglvgroup)
	Local $igroup = DllStructGetSize($tgroup)
	DllStructSetData($tgroup, "Size", $igroup)
	DllStructSetData($tgroup, "Mask", BitOR($lvgf_header, $lvgf_align, $lvgf_groupid))
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getgroupinfobyindex, $iindex, $tgroup, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $igroup, $tmemmap)
			_memwrite($tmemmap, $tgroup, $pmemory, $igroup)
			$iret = _sendmessage($hwnd, $lvm_getgroupinfobyindex, $iindex, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tgroup, $igroup)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getgroupinfobyindex, $iindex, DllStructGetPtr($tgroup))
	EndIf
	Local $agroup[3]
	$agroup[0] = _winapi_widechartomultibyte(DllStructGetData($tgroup, "Header"))
	Select 
		Case BitAND(DllStructGetData($tgroup, "Align"), $lvga_header_center) <> 0
			$agroup[1] = 1
		Case BitAND(DllStructGetData($tgroup, "Align"), $lvga_header_right) <> 0
			$agroup[1] = 2
		Case Else
			$agroup[1] = 0
	EndSelect
	$agroup[2] = DllStructGetData($tgroup, "GroupID")
	Return SetError($iret = 0, 0, $agroup)
EndFunc

Func _guictrllistview_getgrouprect($hwnd, $igroupid, $iget = $lvggr_group)
	Local $tgroup = DllStructCreate($tagrect)
	DllStructSetData($tgroup, "Top", $iget)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getgrouprect, $igroupid, $tgroup, 0, "wparam", "struct*")
		Else
			Local $igroup = DllStructGetSize($tgroup)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $igroup, $tmemmap)
			_memwrite($tmemmap, $tgroup, $pmemory, $igroup)
			$iret = _sendmessage($hwnd, $lvm_getgrouprect, $igroupid, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tgroup, $igroup)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getgrouprect, $igroupid, DllStructGetPtr($tgroup))
	EndIf
	Local $agroup[4]
	For $x = 0 To 3
		$agroup[$x] = DllStructGetData($tgroup, $x + 1)
	Next
	Return SetError($iret = 0, 0, $agroup)
EndFunc

Func _guictrllistview_getgroupstate($hwnd, $igroupid, $imask)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getgroupstate, $igroupid, $imask)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getgroupstate, $igroupid, $imask)
	EndIf
EndFunc

Func _guictrllistview_getgroupviewenabled($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_isgroupviewenabled) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_isgroupviewenabled, 0, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_getheader($hwnd)
	If IsHWnd($hwnd) Then
		Return HWnd(_sendmessage($hwnd, $lvm_getheader))
	Else
		Return HWnd(GUICtrlSendMsg($hwnd, $lvm_getheader, 0, 0))
	EndIf
EndFunc

Func _guictrllistview_gethotcursor($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gethotcursor, 0, 0, 0, "wparam", "lparam", "handle")
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $lvm_gethotcursor, 0, 0))
	EndIf
EndFunc

Func _guictrllistview_gethotitem($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gethotitem)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_gethotitem, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_gethovertime($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gethovertime)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_gethovertime, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getimagelist($hwnd, $iimagelist)
	Local $aimagelist[3] = [$lvsil_normal, $lvsil_small, $lvsil_state]
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getimagelist, $aimagelist[$iimagelist], 0, 0, "wparam", "lparam", "handle")
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $lvm_getimagelist, $aimagelist[$iimagelist], 0))
	EndIf
EndFunc

Func _guictrllistview_getinsertmark($hwnd)
	Local $tmark = DllStructCreate($taglvinsertmark)
	Local $imark = DllStructGetSize($tmark)
	DllStructSetData($tmark, "Size", $imark)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getinsertmark, 0, $tmark, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $imark, $tmemmap)
			_memwrite($tmemmap, $tmark)
			$iret = _sendmessage($hwnd, $lvm_getinsertmark, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tmark, $imark)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getinsertmark, 0, DllStructGetPtr($tmark))
	EndIf
	Local $amark[2]
	$amark[0] = DllStructGetData($tmark, "Flags") = $lvim_after
	$amark[1] = DllStructGetData($tmark, "Item")
	Return SetError($iret = 0, 0, $amark)
EndFunc

Func _guictrllistview_getinsertmarkcolor($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getinsertmarkcolor, $lvsil_state)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getinsertmarkcolor, $lvsil_state, 0)
	EndIf
EndFunc

Func _guictrllistview_getinsertmarkrect($hwnd)
	Local $arect[5]
	Local $trect = DllStructCreate($tagrect)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$arect[0] = _sendmessage($hwnd, $lvm_getinsertmarkrect, 0, $trect, 0, "wparam", "struct*") <> 0
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			$arect[0] = _sendmessage($hwnd, $lvm_getinsertmarkrect, 0, $pmemory, 0, "wparam", "ptr") <> 0
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	Else
		$arect[0] = GUICtrlSendMsg($hwnd, $lvm_getinsertmarkrect, 0, DllStructGetPtr($trect)) <> 0
	EndIf
	$arect[1] = DllStructGetData($trect, "Left")
	$arect[2] = DllStructGetData($trect, "Top")
	$arect[3] = DllStructGetData($trect, "Right")
	$arect[4] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrllistview_getisearchstring($hwnd)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $ibuffer
	If IsHWnd($hwnd) Then
		If $bunicode Then
			$ibuffer = _sendmessage($hwnd, $lvm_getisearchstringw) + 1
		Else
			$ibuffer = _sendmessage($hwnd, $lvm_getisearchstringa) + 1
		EndIf
	Else
		If $bunicode Then
			$ibuffer = GUICtrlSendMsg($hwnd, $lvm_getisearchstringw, 0, 0) + 1
		Else
			$ibuffer = GUICtrlSendMsg($hwnd, $lvm_getisearchstringa, 0, 0) + 1
		EndIf
	EndIf
	If $ibuffer = 1 Then Return ""
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getisearchstringw, 0, $tbuffer, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
			If $bunicode Then
				_sendmessage($hwnd, $lvm_getisearchstringw, 0, $pmemory)
			Else
				_sendmessage($hwnd, $lvm_getisearchstringa, 0, $pmemory)
			EndIf
			_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pbuffer = DllStructGetPtr($tbuffer)
		If $bunicode Then
			GUICtrlSendMsg($hwnd, $lvm_getisearchstringw, 0, $pbuffer)
		Else
			GUICtrlSendMsg($hwnd, $lvm_getisearchstringa, 0, $pbuffer)
		EndIf
	EndIf
	Return DllStructGetData($tbuffer, "Text")
EndFunc

Func _guictrllistview_getitem($hwnd, $iindex, $isubitem = 0)
	Local $aitem[8]
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", BitOR($lvif_groupid, $lvif_image, $lvif_indent, $lvif_param, $lvif_state))
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	DllStructSetData($titem, "StateMask", -1)
	_guictrllistview_getitemex($hwnd, $titem)
	Local $istate = DllStructGetData($titem, "State")
	If BitAND($istate, $lvis_cut) <> 0 Then $aitem[0] = BitOR($aitem[0], 1)
	If BitAND($istate, $lvis_drophilited) <> 0 Then $aitem[0] = BitOR($aitem[0], 2)
	If BitAND($istate, $lvis_focused) <> 0 Then $aitem[0] = BitOR($aitem[0], 4)
	If BitAND($istate, $lvis_selected) <> 0 Then $aitem[0] = BitOR($aitem[0], 8)
	$aitem[1] = __guictrllistview_overlayimagemasktoindex($istate)
	$aitem[2] = __guictrllistview_stateimagemasktoindex($istate)
	$aitem[3] = _guictrllistview_getitemtext($hwnd, $iindex, $isubitem)
	$aitem[4] = DllStructGetData($titem, "Image")
	$aitem[5] = DllStructGetData($titem, "Param")
	$aitem[6] = DllStructGetData($titem, "Indent")
	$aitem[7] = DllStructGetData($titem, "GroupID")
	Return $aitem
EndFunc

Func _guictrllistview_getitemchecked($hwnd, $iindex)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $tlvitem = DllStructCreate($taglvitem)
	Local $isize = DllStructGetSize($tlvitem)
	If @error Then Return SetError($lv_err, $lv_err, False)
	DllStructSetData($tlvitem, "Mask", $lvif_state)
	DllStructSetData($tlvitem, "Item", $iindex)
	DllStructSetData($tlvitem, "StateMask", 65535)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getitemw, 0, $tlvitem, 0, "wparam", "struct*") <> 0
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $isize, $tmemmap)
			_memwrite($tmemmap, $tlvitem)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_getitemw, 0, $pmemory, 0, "wparam", "ptr") <> 0
			Else
				$iret = _sendmessage($hwnd, $lvm_getitema, 0, $pmemory, 0, "wparam", "ptr") <> 0
			EndIf
			_memread($tmemmap, $pmemory, $tlvitem, $isize)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($tlvitem)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_getitemw, 0, $pitem) <> 0
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getitema, 0, $pitem) <> 0
		EndIf
	EndIf
	If NOT $iret Then Return SetError($lv_err, $lv_err, False)
	Return BitAND(DllStructGetData($tlvitem, "State"), 8192) <> 0
EndFunc

Func _guictrllistview_getitemcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getitemcount)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getitemcount, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getitemcut($hwnd, $iindex)
	Return _guictrllistview_getitemstate($hwnd, $iindex, $lvis_cut) <> 0
EndFunc

Func _guictrllistview_getitemdrophilited($hwnd, $iindex)
	Return _guictrllistview_getitemstate($hwnd, $iindex, $lvis_drophilited) <> 0
EndFunc

Func _guictrllistview_getitemex($hwnd, ByRef $titem)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getitemw, 0, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem, $tmemmap)
			_memwrite($tmemmap, $titem)
			If $bunicode Then
				_sendmessage($hwnd, $lvm_getitemw, 0, $pmemory, 0, "wparam", "ptr")
			Else
				_sendmessage($hwnd, $lvm_getitema, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memread($tmemmap, $pmemory, $titem, $iitem)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_getitemw, 0, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getitema, 0, $pitem)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_getitemfocused($hwnd, $iindex)
	Return _guictrllistview_getitemstate($hwnd, $iindex, $lvis_focused) <> 0
EndFunc

Func _guictrllistview_getitemgroupid($hwnd, $iindex)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_groupid)
	DllStructSetData($titem, "Item", $iindex)
	_guictrllistview_getitemex($hwnd, $titem)
	Return DllStructGetData($titem, "GroupID")
EndFunc

Func _guictrllistview_getitemimage($hwnd, $iindex, $isubitem = 0)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_image)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	_guictrllistview_getitemex($hwnd, $titem)
	Return DllStructGetData($titem, "Image")
EndFunc

Func _guictrllistview_getitemindent($hwnd, $iindex)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_indent)
	DllStructSetData($titem, "Item", $iindex)
	_guictrllistview_getitemex($hwnd, $titem)
	Return DllStructGetData($titem, "Indent")
EndFunc

Func __guictrllistview_getitemoverlayimage($hwnd, $iindex)
	Return BitShift(_guictrllistview_getitemstate($hwnd, $iindex, $lvis_overlaymask), 8)
EndFunc

Func _guictrllistview_getitemparam($hwnd, $iindex)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_param)
	DllStructSetData($titem, "Item", $iindex)
	_guictrllistview_getitemex($hwnd, $titem)
	Return DllStructGetData($titem, "Param")
EndFunc

Func _guictrllistview_getitemposition($hwnd, $iindex)
	Local $apoint[2], $iret
	Local $tpoint = DllStructCreate($tagpoint)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			If NOT _sendmessage($hwnd, $lvm_getitemposition, $iindex, $tpoint, 0, "wparam", "struct*") Then Return $apoint
		Else
			Local $ipoint = DllStructGetSize($tpoint)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ipoint, $tmemmap)
			If NOT _sendmessage($hwnd, $lvm_getitemposition, $iindex, $pmemory, 0, "wparam", "ptr") Then Return $apoint
			_memread($tmemmap, $pmemory, $tpoint, $ipoint)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getitemposition, $iindex, DllStructGetPtr($tpoint))
		If NOT $iret Then Return $apoint
	EndIf
	$apoint[0] = DllStructGetData($tpoint, "X")
	$apoint[1] = DllStructGetData($tpoint, "Y")
	Return $apoint
EndFunc

Func _guictrllistview_getitempositionx($hwnd, $iindex)
	Local $apoint = _guictrllistview_getitemposition($hwnd, $iindex)
	Return $apoint[0]
EndFunc

Func _guictrllistview_getitempositiony($hwnd, $iindex)
	Local $apoint = _guictrllistview_getitemposition($hwnd, $iindex)
	Return $apoint[1]
EndFunc

Func _guictrllistview_getitemrect($hwnd, $iindex, $ipart = 3)
	Local $trect = _guictrllistview_getitemrectex($hwnd, $iindex, $ipart)
	Local $arect[4]
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrllistview_getitemrectex($hwnd, $iindex, $ipart = 3)
	Local $trect = DllStructCreate($tagrect)
	DllStructSetData($trect, "Left", $ipart)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getitemrect, $iindex, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_memwrite($tmemmap, $trect, $pmemory, $irect)
			_sendmessage($hwnd, $lvm_getitemrect, $iindex, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_getitemrect, $iindex, DllStructGetPtr($trect))
	EndIf
	Return $trect
EndFunc

Func _guictrllistview_getitemselected($hwnd, $iindex)
	Return _guictrllistview_getitemstate($hwnd, $iindex, $lvis_selected) <> 0
EndFunc

Func _guictrllistview_getitemspacing($hwnd, $bsmall = False)
	Local $ispace
	If IsHWnd($hwnd) Then
		$ispace = _sendmessage($hwnd, $lvm_getitemspacing, $bsmall)
	Else
		$ispace = GUICtrlSendMsg($hwnd, $lvm_getitemspacing, $bsmall, 0)
	EndIf
	Local $aspace[2]
	$aspace[0] = BitAND($ispace, 65535)
	$aspace[1] = BitShift($ispace, 16)
	Return $aspace
EndFunc

Func _guictrllistview_getitemspacingx($hwnd, $bsmall = False)
	If IsHWnd($hwnd) Then
		Return BitAND(_sendmessage($hwnd, $lvm_getitemspacing, $bsmall, 0), 65535)
	Else
		Return BitAND(GUICtrlSendMsg($hwnd, $lvm_getitemspacing, $bsmall, 0), 65535)
	EndIf
EndFunc

Func _guictrllistview_getitemspacingy($hwnd, $bsmall = False)
	If IsHWnd($hwnd) Then
		Return BitShift(_sendmessage($hwnd, $lvm_getitemspacing, $bsmall, 0), 16)
	Else
		Return BitShift(GUICtrlSendMsg($hwnd, $lvm_getitemspacing, $bsmall, 0), 16)
	EndIf
EndFunc

Func _guictrllistview_getitemstate($hwnd, $iindex, $imask)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getitemstate, $iindex, $imask)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getitemstate, $iindex, $imask)
	EndIf
EndFunc

Func _guictrllistview_getitemstateimage($hwnd, $iindex)
	Return BitShift(_guictrllistview_getitemstate($hwnd, $iindex, $lvis_stateimagemask), 12)
EndFunc

Func _guictrllistview_getitemtext($hwnd, $iindex, $isubitem = 0)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "SubItem", $isubitem)
	DllStructSetData($titem, "TextMax", 4096)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($titem, "Text", $pbuffer)
			_sendmessage($hwnd, $lvm_getitemtextw, $iindex, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + 4096, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $titem, $pmemory, $iitem)
			If $bunicode Then
				_sendmessage($hwnd, $lvm_getitemtextw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				_sendmessage($hwnd, $lvm_getitemtexta, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memread($tmemmap, $ptext, $tbuffer, 4096)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		DllStructSetData($titem, "Text", $pbuffer)
		If $bunicode Then
			GUICtrlSendMsg($hwnd, $lvm_getitemtextw, $iindex, $pitem)
		Else
			GUICtrlSendMsg($hwnd, $lvm_getitemtexta, $iindex, $pitem)
		EndIf
	EndIf
	Return DllStructGetData($tbuffer, "Text")
EndFunc

Func _guictrllistview_getitemtextarray($hwnd, $iitem = -1)
	Local $sitems = _guictrllistview_getitemtextstring($hwnd, $iitem)
	If $sitems = "" Then
		Local $aitems[1] = [0]
		Return SetError($lv_err, $lv_err, $aitems)
	EndIf
	Return StringSplit($sitems, Opt("GUIDataSeparatorChar"))
EndFunc

Func _guictrllistview_getitemtextstring($hwnd, $iitem = -1)
	Local $srow = "", $sseparatorchar = Opt("GUIDataSeparatorChar"), $iselected
	If $iitem = -1 Then
		$iselected = _guictrllistview_getnextitem($hwnd)
	Else
		$iselected = $iitem
	EndIf
	For $x = 0 To _guictrllistview_getcolumncount($hwnd) - 1
		$srow &= _guictrllistview_getitemtext($hwnd, $iselected, $x) & $sseparatorchar
	Next
	Return StringTrimRight($srow, 1)
EndFunc

Func _guictrllistview_getnextitem($hwnd, $istart = -1, $isearch = 0, $istate = 8)
	Local $asearch[5] = [$lvni_all, $lvni_above, $lvni_below, $lvni_toleft, $lvni_toright]
	Local $iflags = $asearch[$isearch]
	If BitAND($istate, 1) <> 0 Then $iflags = BitOR($iflags, $lvni_cut)
	If BitAND($istate, 2) <> 0 Then $iflags = BitOR($iflags, $lvni_drophilited)
	If BitAND($istate, 4) <> 0 Then $iflags = BitOR($iflags, $lvni_focused)
	If BitAND($istate, 8) <> 0 Then $iflags = BitOR($iflags, $lvni_selected)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getnextitem, $istart, $iflags)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getnextitem, $istart, $iflags)
	EndIf
EndFunc

Func _guictrllistview_getnumberofworkareas($hwnd)
	Local $tbuffer = DllStructCreate("int Data")
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getnumberofworkareas, 0, $tbuffer, 0, "wparam", "struct*")
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
			_sendmessage($hwnd, $lvm_getnumberofworkareas, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_getnumberofworkareas, 0, DllStructGetPtr($tbuffer))
	EndIf
	Return DllStructGetData($tbuffer, "Data")
EndFunc

Func _guictrllistview_getorigin($hwnd)
	Local $tpoint = DllStructCreate($tagpoint)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getorigin, 0, $tpoint, 0, "wparam", "struct*")
		Else
			Local $ipoint = DllStructGetSize($tpoint)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ipoint, $tmemmap)
			$iret = _sendmessage($hwnd, $lvm_getorigin, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tpoint, $ipoint)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getorigin, 0, DllStructGetPtr($tpoint))
	EndIf
	Local $aorigin[2]
	$aorigin[0] = DllStructGetData($tpoint, "X")
	$aorigin[1] = DllStructGetData($tpoint, "Y")
	Return SetError(@error, $iret = 1, $aorigin)
EndFunc

Func _guictrllistview_getoriginx($hwnd)
	Local $aorigin = _guictrllistview_getorigin($hwnd)
	Return $aorigin[0]
EndFunc

Func _guictrllistview_getoriginy($hwnd)
	Local $aorigin = _guictrllistview_getorigin($hwnd)
	Return $aorigin[1]
EndFunc

Func _guictrllistview_getoutlinecolor($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getoutlinecolor)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getoutlinecolor, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getselectedcolumn($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getselectedcolumn)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getselectedcolumn, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getselectedcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getselectedcount)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getselectedcount, 0, 0)
	EndIf
EndFunc

Func __guictrllistview_getcheckedindices($hwnd)
	Local $icount = _guictrllistview_getitemcount($hwnd)
	Local $aselected[$icount + 1] = [0]
	For $i = 0 To $icount - 1
		If _guictrllistview_getitemchecked($hwnd, $i) Then
			$aselected[0] += 1
			$aselected[$aselected[0]] = $i
		EndIf
	Next
	ReDim $aselected[$aselected[0] + 1]
	Return $aselected
EndFunc

Func _guictrllistview_getselectedindices($hwnd, $barray = False)
	Local $sindices, $aindices[1] = [0]
	Local $iret, $icount = _guictrllistview_getitemcount($hwnd)
	For $iitem = 0 To $icount
		If IsHWnd($hwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getitemstate, $iitem, $lvis_selected)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getitemstate, $iitem, $lvis_selected)
		EndIf
		If $iret Then
			If (NOT $barray) Then
				If StringLen($sindices) Then
					$sindices &= "|" & $iitem
				Else
					$sindices = $iitem
				EndIf
			Else
				ReDim $aindices[UBound($aindices) + 1]
				$aindices[0] = UBound($aindices) - 1
				$aindices[UBound($aindices) - 1] = $iitem
			EndIf
		EndIf
	Next
	If (NOT $barray) Then
		Return String($sindices)
	Else
		Return $aindices
	EndIf
EndFunc

Func _guictrllistview_getselectionmark($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getselectionmark)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getselectionmark, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getstringwidth($hwnd, $sstring)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($sstring) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	DllStructSetData($tbuffer, "Text", $sstring)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getstringwidthw, 0, $tbuffer, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
			_memwrite($tmemmap, $tbuffer, $pmemory, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_getstringwidthw, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_getstringwidtha, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pbuffer = DllStructGetPtr($tbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_getstringwidthw, 0, $pbuffer)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getstringwidtha, 0, $pbuffer)
		EndIf
	EndIf
	Return $iret
EndFunc

Func _guictrllistview_getsubitemrect($hwnd, $iindex, $isubitem, $ipart = 0)
	Local $apart[2] = [$lvir_bounds, $lvir_icon]
	Local $trect = DllStructCreate($tagrect)
	DllStructSetData($trect, "Top", $isubitem)
	DllStructSetData($trect, "Left", $apart[$ipart])
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getsubitemrect, $iindex, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_memwrite($tmemmap, $trect, $pmemory, $irect)
			_sendmessage($hwnd, $lvm_getsubitemrect, $iindex, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_getsubitemrect, $iindex, DllStructGetPtr($trect))
	EndIf
	Local $arect[4]
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrllistview_gettextbkcolor($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gettextbkcolor)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_gettextbkcolor, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_gettextcolor($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gettextcolor)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_gettextcolor, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_gettooltips($hwnd)
	If IsHWnd($hwnd) Then
		Return HWnd(_sendmessage($hwnd, $lvm_gettooltips))
	Else
		Return HWnd(GUICtrlSendMsg($hwnd, $lvm_gettooltips, 0, 0))
	EndIf
EndFunc

Func _guictrllistview_gettopindex($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gettopindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_gettopindex, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getunicodeformat($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getunicodeformat) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getunicodeformat, 0, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_getview($hwnd)
	Local $iview
	If IsHWnd($hwnd) Then
		$iview = _sendmessage($hwnd, $lvm_getview)
	Else
		$iview = GUICtrlSendMsg($hwnd, $lvm_getview, 0, 0)
	EndIf
	Switch $iview
		Case $lv_view_icon
			Return Int($lv_view_icon)
		Case $lv_view_details
			Return Int($lv_view_details)
		Case $lv_view_list
			Return Int($lv_view_list)
		Case $lv_view_smallicon
			Return Int($lv_view_smallicon)
		Case $lv_view_tile
			Return Int($lv_view_tile)
		Case Else
			Return -1
	EndSwitch
EndFunc

Func _guictrllistview_getviewdetails($hwnd)
	Return _guictrllistview_getview($hwnd) = $lv_view_details
EndFunc

Func _guictrllistview_getviewlarge($hwnd)
	Return _guictrllistview_getview($hwnd) = $lv_view_icon
EndFunc

Func _guictrllistview_getviewlist($hwnd)
	Return _guictrllistview_getview($hwnd) = $lv_view_list
EndFunc

Func _guictrllistview_getviewsmall($hwnd)
	Return _guictrllistview_getview($hwnd) = $lv_view_smallicon
EndFunc

Func _guictrllistview_getviewtile($hwnd)
	Return _guictrllistview_getview($hwnd) = $lv_view_tile
EndFunc

Func _guictrllistview_getviewrect($hwnd)
	Local $arect[4] = [0, 0, 0, 0]
	Local $iview = _guictrllistview_getview($hwnd)
	If ($iview <> 1) AND ($iview <> 3) Then Return $arect
	Local $trect = DllStructCreate($tagrect)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getviewrect, 0, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_sendmessage($hwnd, $lvm_getviewrect, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_getviewrect, 0, DllStructGetPtr($trect))
	EndIf
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrllistview_hidecolumn($hwnd, $icol)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setcolumnwidth, $icol) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setcolumnwidth, $icol, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_hittest($hwnd, $ix = -1, $iy = -1)
	Local $atest[10]
	Local $imode = Opt("MouseCoordMode", 1)
	Local $apos = MouseGetPos()
	Opt("MouseCoordMode", $imode)
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $apos[0])
	DllStructSetData($tpoint, "Y", $apos[1])
	Local $aresult = DllCall("user32.dll", "bool", "ScreenToClient", "hwnd", $hwnd, "struct*", $tpoint)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] = 0 Then Return 0
	If $ix = -1 Then $ix = DllStructGetData($tpoint, "X")
	If $iy = -1 Then $iy = DllStructGetData($tpoint, "Y")
	Local $ttest = DllStructCreate($taglvhittestinfo)
	DllStructSetData($ttest, "X", $ix)
	DllStructSetData($ttest, "Y", $iy)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$atest[0] = _sendmessage($hwnd, $lvm_hittest, 0, $ttest, 0, "wparam", "struct*")
		Else
			Local $itest = DllStructGetSize($ttest)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $itest, $tmemmap)
			_memwrite($tmemmap, $ttest, $pmemory, $itest)
			$atest[0] = _sendmessage($hwnd, $lvm_hittest, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $ttest, $itest)
			_memfree($tmemmap)
		EndIf
	Else
		$atest[0] = GUICtrlSendMsg($hwnd, $lvm_hittest, 0, DllStructGetPtr($ttest))
	EndIf
	Local $iflags = DllStructGetData($ttest, "Flags")
	$atest[1] = BitAND($iflags, $lvht_nowhere) <> 0
	$atest[2] = BitAND($iflags, $lvht_onitemicon) <> 0
	$atest[3] = BitAND($iflags, $lvht_onitemlabel) <> 0
	$atest[4] = BitAND($iflags, $lvht_onitemstateicon) <> 0
	$atest[5] = BitAND($iflags, $lvht_onitem) <> 0
	$atest[6] = BitAND($iflags, $lvht_above) <> 0
	$atest[7] = BitAND($iflags, $lvht_below) <> 0
	$atest[8] = BitAND($iflags, $lvht_toleft) <> 0
	$atest[9] = BitAND($iflags, $lvht_toright) <> 0
	Return $atest
EndFunc

Func __guictrllistview_indextooverlayimagemask($iindex)
	Return BitShift($iindex, -8)
EndFunc

Func __guictrllistview_indextostateimagemask($iindex)
	Return BitShift($iindex, -12)
EndFunc

Func _guictrllistview_insertcolumn($hwnd, $iindex, $stext, $iwidth = 50, $ialign = -1, $iimage = -1, $bonright = False)
	Local $aalign[3] = [$lvcfmt_left, $lvcfmt_right, $lvcfmt_center]
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $tcolumn = DllStructCreate($taglvcolumn)
	Local $imask = BitOR($lvcf_fmt, $lvcf_width, $lvcf_text)
	If $ialign < 0 OR $ialign > 2 Then $ialign = 0
	Local $ifmt = $aalign[$ialign]
	If $iimage <> -1 Then
		$imask = BitOR($imask, $lvcf_image)
		$ifmt = BitOR($ifmt, $lvcfmt_col_has_images, $lvcfmt_image)
	EndIf
	If $bonright Then $ifmt = BitOR($ifmt, $lvcfmt_bitmap_on_right)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($tcolumn, "Mask", $imask)
	DllStructSetData($tcolumn, "Fmt", $ifmt)
	DllStructSetData($tcolumn, "CX", $iwidth)
	DllStructSetData($tcolumn, "TextMax", $ibuffer)
	DllStructSetData($tcolumn, "Image", $iimage)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tcolumn, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_insertcolumnw, $iindex, $tcolumn, 0, "wparam", "struct*")
		Else
			Local $icolumn = DllStructGetSize($tcolumn)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $icolumn + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $icolumn
			DllStructSetData($tcolumn, "Text", $ptext)
			_memwrite($tmemmap, $tcolumn, $pmemory, $icolumn)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_insertcolumnw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_insertcolumna, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pcolumn = DllStructGetPtr($tcolumn)
		DllStructSetData($tcolumn, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_insertcolumnw, $iindex, $pcolumn)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_insertcolumna, $iindex, $pcolumn)
		EndIf
	EndIf
	If $ialign > 0 Then _guictrllistview_setcolumn($hwnd, $iret, $stext, $iwidth, $ialign, $iimage, $bonright)
	Return $iret
EndFunc

Func _guictrllistview_insertgroup($hwnd, $iindex, $igroupid, $sheader, $ialign = 0)
	Local $aalign[3] = [$lvga_header_left, $lvga_header_center, $lvga_header_right]
	If $ialign < 0 OR $ialign > 2 Then $ialign = 0
	Local $theader = _winapi_multibytetowidechar($sheader)
	Local $pheader = DllStructGetPtr($theader)
	Local $iheader = StringLen($sheader)
	Local $tgroup = DllStructCreate($taglvgroup)
	Local $igroup = DllStructGetSize($tgroup)
	Local $imask = BitOR($lvgf_header, $lvgf_align, $lvgf_groupid)
	DllStructSetData($tgroup, "Size", $igroup)
	DllStructSetData($tgroup, "Mask", $imask)
	DllStructSetData($tgroup, "HeaderMax", $iheader)
	DllStructSetData($tgroup, "GroupID", $igroupid)
	DllStructSetData($tgroup, "Align", $aalign[$ialign])
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tgroup, "Header", $pheader)
			$iret = _sendmessage($hwnd, $lvm_insertgroup, $iindex, $tgroup, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $igroup + $iheader, $tmemmap)
			Local $ptext = $pmemory + $igroup
			DllStructSetData($tgroup, "Header", $ptext)
			_memwrite($tmemmap, $tgroup, $pmemory, $igroup)
			_memwrite($tmemmap, $theader, $ptext, $iheader)
			$iret = _sendmessage($hwnd, $lvm_insertgroup, $iindex, $tgroup, 0, "wparam", "struct*")
			_memfree($tmemmap)
		EndIf
	Else
		DllStructSetData($tgroup, "Header", $pheader)
		$iret = GUICtrlSendMsg($hwnd, $lvm_insertgroup, $iindex, DllStructGetPtr($tgroup))
	EndIf
	Return $iret
EndFunc

Func _guictrllistview_insertitem($hwnd, $stext, $iindex = -1, $iimage = -1, $iparam = 0)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $ibuffer, $tbuffer, $iret
	If $iindex = -1 Then $iindex = 999999999
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Param", $iparam)
	$ibuffer = StringLen($stext) + 1
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($titem, "Text", DllStructGetPtr($tbuffer))
	DllStructSetData($titem, "TextMax", $ibuffer)
	Local $imask = BitOR($lvif_text, $lvif_param)
	If $iimage >= 0 Then $imask = BitOR($imask, $lvif_image)
	DllStructSetData($titem, "Mask", $imask)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "Image", $iimage)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) OR ($stext = -1) Then
			$iret = _sendmessage($hwnd, $lvm_insertitemw, 0, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $titem, $pmemory, $iitem)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_insertitemw, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_insertitema, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_insertitemw, 0, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_insertitema, 0, $pitem)
		EndIf
	EndIf
	Return $iret
EndFunc

Func _guictrllistview_insertmarkhittest($hwnd, $ix = -1, $iy = -1)
	Local $imode = Opt("MouseCoordMode", 1)
	Local $apos = MouseGetPos()
	Opt("MouseCoordMode", $imode)
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $apos[0])
	DllStructSetData($tpoint, "Y", $apos[1])
	Local $aresult = DllCall("user32.dll", "bool", "ScreenToClient", "hwnd", $hwnd, "struct*", $tpoint)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] = 0 Then Return 0
	If $ix = -1 Then $ix = DllStructGetData($tpoint, "X")
	If $iy = -1 Then $iy = DllStructGetData($tpoint, "Y")
	Local $tmark = DllStructCreate($taglvinsertmark)
	Local $imark = DllStructGetSize($tmark)
	DllStructSetData($tpoint, "X", $ix)
	DllStructSetData($tpoint, "Y", $iy)
	DllStructSetData($tmark, "Size", $imark)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_insertmarkhittest, $tpoint, $tmark, 0, "struct*", "struct*")
		Else
			Local $ipoint = DllStructGetSize($tpoint)
			Local $tmemmap
			Local $pmemm = _meminit($hwnd, $ipoint + $imark, $tmemmap)
			Local $pmemp = $pmemm + $ipoint
			_memwrite($tmemmap, $tmark, $pmemm, $imark)
			_memwrite($tmemmap, $tpoint, $pmemp, $ipoint)
			_sendmessage($hwnd, $lvm_insertmarkhittest, $pmemp, $pmemm, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemm, $tmark, $imark)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_insertmarkhittest, DllStructGetPtr($tpoint), DllStructGetPtr($tmark))
	EndIf
	Local $atest[2]
	$atest[0] = DllStructGetData($tmark, "Flags") = $lvim_after
	$atest[1] = DllStructGetData($tmark, "Item")
	Return $atest
EndFunc

Func _guictrllistview_isitemvisible($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_isitemvisible, $iindex) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_isitemvisible, $iindex, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_justifycolumn($hwnd, $iindex, $ialign = -1)
	Local $aalign[3] = [$lvcfmt_left, $lvcfmt_right, $lvcfmt_center]
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $tcolumn = DllStructCreate($taglvcolumn)
	If $ialign < 0 OR $ialign > 2 Then $ialign = 0
	Local $imask = $lvcf_fmt
	Local $ifmt = $aalign[$ialign]
	DllStructSetData($tcolumn, "Mask", $imask)
	DllStructSetData($tcolumn, "Fmt", $ifmt)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_setcolumnw, $iindex, $tcolumn, 0, "wparam", "struct*")
		Else
			Local $icolumn = DllStructGetSize($tcolumn)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $icolumn, $tmemmap)
			_memwrite($tmemmap, $tcolumn, $pmemory, $icolumn)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_setcolumnw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_setcolumna, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pcolumn = DllStructGetPtr($tcolumn)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setcolumnw, $iindex, $pcolumn)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setcolumna, $iindex, $pcolumn)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_mapidtoindex($hwnd, $iid)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_mapidtoindex, $iid)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_mapidtoindex, $iid, 0)
	EndIf
EndFunc

Func _guictrllistview_mapindextoid($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_mapindextoid, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_mapindextoid, $iindex, 0)
	EndIf
EndFunc

Func _guictrllistview_movegroup($hwnd, $igroupid, $iindex = -1)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_movegroup, $igroupid, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_movegroup, $igroupid, $iindex)
	EndIf
EndFunc

Func __guictrllistview_overlayimagemasktoindex($imask)
	Return BitShift(BitAND($lvis_overlaymask, $imask), 8)
EndFunc

Func _guictrllistview_redrawitems($hwnd, $ifirst, $ilast)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_redrawitems, $ifirst, $ilast) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_redrawitems, $ifirst, $ilast) <> 0
	EndIf
EndFunc

Func _guictrllistview_registersortcallback($hwnd, $bnumbers = True, $barrows = True)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $hheader = _guictrllistview_getheader($hwnd)
	ReDim $__g_alistviewsortinfo[UBound($__g_alistviewsortinfo) + 1][$__g_illistviewsortinfosize]
	$__g_alistviewsortinfo[0][0] = UBound($__g_alistviewsortinfo) - 1
	Local $iindex = $__g_alistviewsortinfo[0][0]
	$__g_alistviewsortinfo[$iindex][1] = $hwnd
	$__g_alistviewsortinfo[$iindex][2] = DllCallbackRegister("__GUICtrlListView_Sort", "int", "int;int;hwnd")
	$__g_alistviewsortinfo[$iindex][3] = -1
	$__g_alistviewsortinfo[$iindex][4] = -1
	$__g_alistviewsortinfo[$iindex][5] = 1
	$__g_alistviewsortinfo[$iindex][6] = -1
	$__g_alistviewsortinfo[$iindex][7] = 0
	$__g_alistviewsortinfo[$iindex][8] = $bnumbers
	$__g_alistviewsortinfo[$iindex][9] = $barrows
	$__g_alistviewsortinfo[$iindex][10] = $hheader
	Return $__g_alistviewsortinfo[$iindex][2] <> 0
EndFunc

Func _guictrllistview_removeallgroups($hwnd)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $lvm_removeallgroups)
	Else
		GUICtrlSendMsg($hwnd, $lvm_removeallgroups, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_removegroup($hwnd, $igroupid)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_removegroup, $igroupid)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_removegroup, $igroupid, 0)
	EndIf
EndFunc

Func __guictrllistview_reversecolororder($icolor)
	Local $sh = Hex(String($icolor), 6)
	Return "0x" & StringMid($sh, 5, 2) & StringMid($sh, 3, 2) & StringMid($sh, 1, 2)
EndFunc

Func _guictrllistview_scroll($hwnd, $idx, $idy)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_scroll, $idx, $idy) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_scroll, $idx, $idy) <> 0
	EndIf
EndFunc

Func _guictrllistview_setbkcolor($hwnd, $icolor)
	Local $iret
	If IsHWnd($hwnd) Then
		$iret = _sendmessage($hwnd, $lvm_setbkcolor, 0, $icolor)
		_winapi_invalidaterect($hwnd)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setbkcolor, 0, $icolor)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setbkimage($hwnd, $surl = "", $istyle = 0, $ixoffset = 0, $iyoffset = 0)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	If NOT IsHWnd($hwnd) Then Return SetError($lv_err, $lv_err, False)
	Local $astyle[2] = [$lvbkif_style_normal, $lvbkif_style_tile]
	Local $ibuffer = StringLen($surl) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	If @error Then Return SetError($lv_err, $lv_err, $lv_err)
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $timage = DllStructCreate($taglvbkimage)
	Local $iret = 0
	If $surl <> "" Then $iret = $lvbkif_source_url
	$iret = BitOR($iret, $astyle[$istyle])
	DllStructSetData($tbuffer, "Text", $surl)
	DllStructSetData($timage, "Flags", $iret)
	DllStructSetData($timage, "XOffPercent", $ixoffset)
	DllStructSetData($timage, "YOffPercent", $iyoffset)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($timage, "Image", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_setbkimagew, 0, $timage, 0, "wparam", "struct*")
		Else
			Local $iimage = DllStructGetSize($timage)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iimage + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iimage
			DllStructSetData($timage, "Image", $ptext)
			_memwrite($tmemmap, $timage, $pmemory, $iimage)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_setbkimagew, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_setbkimagea, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pimage = DllStructGetPtr($timage)
		DllStructSetData($timage, "Image", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setbkimagew, 0, $pimage)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setbkimagea, 0, $pimage)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setcallbackmask($hwnd, $imask)
	Local $iflags = 0
	If BitAND($imask, 1) <> 0 Then $iflags = BitOR($iflags, $lvis_cut)
	If BitAND($imask, 2) <> 0 Then $iflags = BitOR($iflags, $lvis_drophilited)
	If BitAND($imask, 4) <> 0 Then $iflags = BitOR($iflags, $lvis_focused)
	If BitAND($imask, 8) <> 0 Then $iflags = BitOR($iflags, $lvis_selected)
	If BitAND($imask, 16) <> 0 Then $iflags = BitOR($iflags, $lvis_overlaymask)
	If BitAND($imask, 32) <> 0 Then $iflags = BitOR($iflags, $lvis_stateimagemask)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setcallbackmask, $iflags) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setcallbackmask, $iflags, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_setcolumn($hwnd, $iindex, $stext, $iwidth = -1, $ialign = -1, $iimage = -1, $bonright = False)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $aalign[3] = [$lvcfmt_left, $lvcfmt_right, $lvcfmt_center]
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $tcolumn = DllStructCreate($taglvcolumn)
	Local $imask = $lvcf_text
	If $ialign < 0 OR $ialign > 2 Then $ialign = 0
	$imask = BitOR($imask, $lvcf_fmt)
	Local $ifmt = $aalign[$ialign]
	If $iwidth <> -1 Then $imask = BitOR($imask, $lvcf_width)
	If $iimage <> -1 Then
		$imask = BitOR($imask, $lvcf_image)
		$ifmt = BitOR($ifmt, $lvcfmt_col_has_images, $lvcfmt_image)
	Else
		$iimage = 0
	EndIf
	If $bonright Then $ifmt = BitOR($ifmt, $lvcfmt_bitmap_on_right)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($tcolumn, "Mask", $imask)
	DllStructSetData($tcolumn, "Fmt", $ifmt)
	DllStructSetData($tcolumn, "CX", $iwidth)
	DllStructSetData($tcolumn, "TextMax", $ibuffer)
	DllStructSetData($tcolumn, "Image", $iimage)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tcolumn, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_setcolumnw, $iindex, $tcolumn, 0, "wparam", "struct*")
		Else
			Local $icolumn = DllStructGetSize($tcolumn)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $icolumn + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $icolumn
			DllStructSetData($tcolumn, "Text", $ptext)
			_memwrite($tmemmap, $tcolumn, $pmemory, $icolumn)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_setcolumnw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_setcolumna, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pcolumn = DllStructGetPtr($tcolumn)
		DllStructSetData($tcolumn, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setcolumnw, $iindex, $pcolumn)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setcolumna, $iindex, $pcolumn)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setcolumnorder($hwnd, $sorder)
	Local $sseparatorchar = Opt("GUIDataSeparatorChar")
	Return _guictrllistview_setcolumnorderarray($hwnd, StringSplit($sorder, $sseparatorchar))
EndFunc

Func _guictrllistview_setcolumnorderarray($hwnd, $aorder)
	Local $tbuffer = DllStructCreate("int[" & $aorder[0] & "]")
	For $ii = 1 To $aorder[0]
		DllStructSetData($tbuffer, 1, $aorder[$ii], $ii)
	Next
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_setcolumnorderarray, $aorder[0], $tbuffer, 0, "wparam", "struct*")
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
			_memwrite($tmemmap, $tbuffer, $pmemory, $ibuffer)
			$iret = _sendmessage($hwnd, $lvm_setcolumnorderarray, $aorder[0], $pmemory, 0, "wparam", "ptr")
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setcolumnorderarray, $aorder[0], DllStructGetPtr($tbuffer))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setcolumnwidth($hwnd, $icol, $iwidth)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setcolumnwidth, $icol, $iwidth)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setcolumnwidth, $icol, $iwidth)
	EndIf
EndFunc

Func _guictrllistview_setextendedlistviewstyle($hwnd, $iexstyle, $iexmask = 0)
	Local $iret
	If IsHWnd($hwnd) Then
		$iret = _sendmessage($hwnd, $lvm_setextendedlistviewstyle, $iexmask, $iexstyle)
		_winapi_invalidaterect($hwnd)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setextendedlistviewstyle, $iexmask, $iexstyle)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	Return $iret
EndFunc

Func _guictrllistview_setgroupinfo($hwnd, $igroupid, $sheader, $ialign = 0, $istate = $lvgs_normal)
	Local $tgroup = 0
	If BitAND($istate, $lvgs_selected) Then
		$tgroup = __guictrllistview_getgroupinfoex($hwnd, $igroupid, BitOR($lvgf_groupid, $lvgf_items))
		If DllStructGetData($tgroup, "GroupId") <> $igroupid OR DllStructGetData($tgroup, "cItems") = 0 Then Return False
	EndIf
	Local $aalign[3] = [$lvga_header_left, $lvga_header_center, $lvga_header_right]
	If $ialign < 0 OR $ialign > 2 Then $ialign = 0
	Local $theader = _winapi_multibytetowidechar($sheader)
	Local $pheader = DllStructGetPtr($theader)
	Local $iheader = StringLen($sheader)
	$tgroup = DllStructCreate($taglvgroup)
	Local $pgroup = DllStructGetPtr($tgroup)
	Local $igroup = DllStructGetSize($tgroup)
	Local $imask = BitOR($lvgf_header, $lvgf_align, $lvgf_state)
	DllStructSetData($tgroup, "Size", $igroup)
	DllStructSetData($tgroup, "Mask", $imask)
	DllStructSetData($tgroup, "HeaderMax", $iheader)
	DllStructSetData($tgroup, "Align", $aalign[$ialign])
	DllStructSetData($tgroup, "State", $istate)
	DllStructSetData($tgroup, "StateMask", $istate)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tgroup, "Header", $pheader)
			$iret = _sendmessage($hwnd, $lvm_setgroupinfo, $igroupid, $pgroup)
			DllStructSetData($tgroup, "Mask", $lvgf_groupid)
			DllStructSetData($tgroup, "GroupID", $igroupid)
			_sendmessage($hwnd, $lvm_setgroupinfo, 0, $pgroup)
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $igroup + $iheader, $tmemmap)
			Local $ptext = $pmemory + $igroup
			DllStructSetData($tgroup, "Header", $ptext)
			_memwrite($tmemmap, $tgroup, $pmemory, $igroup)
			_memwrite($tmemmap, $theader, $ptext, $iheader)
			$iret = _sendmessage($hwnd, $lvm_setgroupinfo, $igroupid, $pmemory)
			DllStructSetData($tgroup, "Mask", $lvgf_groupid)
			DllStructSetData($tgroup, "GroupID", $igroupid)
			_sendmessage($hwnd, $lvm_setgroupinfo, 0, $pmemory)
			_memfree($tmemmap)
		EndIf
		_winapi_invalidaterect($hwnd)
	Else
		DllStructSetData($tgroup, "Header", $pheader)
		$iret = GUICtrlSendMsg($hwnd, $lvm_setgroupinfo, $igroupid, $pgroup)
		DllStructSetData($tgroup, "Mask", $lvgf_groupid)
		DllStructSetData($tgroup, "GroupID", $igroupid)
		GUICtrlSendMsg($hwnd, $lvm_setgroupinfo, 0, $pgroup)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_sethotcursor($hwnd, $hcursor)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_sethotcursor, 0, $hcursor, 0, "wparam", "handle", "handle")
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $lvm_sethotcursor, 0, $hcursor))
	EndIf
EndFunc

Func _guictrllistview_sethotitem($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_sethotitem, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_sethotitem, $iindex, 0)
	EndIf
EndFunc

Func _guictrllistview_sethovertime($hwnd, $itime)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_sethovertime, 0, $itime)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_sethovertime, 0, $itime)
	EndIf
EndFunc

Func _guictrllistview_seticonspacing($hwnd, $icx, $icy)
	Local $iret, $apadding[2]
	If IsHWnd($hwnd) Then
		$iret = _sendmessage($hwnd, $lvm_seticonspacing, 0, _winapi_makelong($icx, $icy))
		_winapi_invalidaterect($hwnd)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_seticonspacing, 0, _winapi_makelong($icx, $icy))
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	$apadding[0] = BitAND($iret, 65535)
	$apadding[1] = BitShift($iret, 16)
	Return $apadding
EndFunc

Func _guictrllistview_setimagelist($hwnd, $hhandle, $itype = 0)
	Local $atype[3] = [$lvsil_normal, $lvsil_small, $lvsil_state]
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setimagelist, $atype[$itype], $hhandle, 0, "wparam", "handle", "handle")
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $lvm_setimagelist, $atype[$itype], $hhandle))
	EndIf
EndFunc

Func _guictrllistview_setinfotip($hwnd, $iindex, $stext, $isubitem = 0)
	Local $tbuffer = _winapi_multibytetowidechar($stext)
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $ibuffer = StringLen($stext)
	Local $tinfo = DllStructCreate($taglvsetinfotip)
	Local $iinfo = DllStructGetSize($tinfo)
	DllStructSetData($tinfo, "Size", $iinfo)
	DllStructSetData($tinfo, "Item", $iindex)
	DllStructSetData($tinfo, "SubItem", $isubitem)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tinfo, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_setinfotip, 0, $tinfo, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iinfo + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iinfo
			DllStructSetData($tinfo, "Text", $ptext)
			_memwrite($tmemmap, $tinfo, $pmemory, $iinfo)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			$iret = _sendmessage($hwnd, $lvm_setinfotip, 0, $pmemory, 0, "wparam", "ptr")
			_memfree($tmemmap)
		EndIf
	Else
		DllStructSetData($tinfo, "Text", $pbuffer)
		$iret = GUICtrlSendMsg($hwnd, $lvm_setinfotip, 0, DllStructGetPtr($tinfo))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setinsertmark($hwnd, $iindex, $bafter = False)
	Local $tmark = DllStructCreate($taglvinsertmark)
	Local $imark = DllStructGetSize($tmark)
	DllStructSetData($tmark, "Size", $imark)
	If $bafter Then DllStructSetData($tmark, "Flags", $lvim_after)
	DllStructSetData($tmark, "Item", $iindex)
	DllStructSetData($tmark, "Reserved", 0)
	Local $iret
	If IsHWnd($hwnd) Then
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $imark, $tmemmap)
		_memwrite($tmemmap, $tmark, $pmemory, $imark)
		$iret = _sendmessage($hwnd, $lvm_setinsertmark, 0, $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setinsertmark, 0, DllStructGetPtr($tmark))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setinsertmarkcolor($hwnd, $icolor)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setinsertmarkcolor, 0, $icolor)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setinsertmarkcolor, 0, $icolor)
	EndIf
EndFunc

Func _guictrllistview_setitem($hwnd, $stext, $iindex = 0, $isubitem = 0, $iimage = -1, $iparam = -1, $iindent = -1)
	Local $pbuffer, $ibuffer
	If $stext <> -1 Then
		$ibuffer = StringLen($stext) + 1
		Local $tbuffer
		If _guictrllistview_getunicodeformat($hwnd) Then
			$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		Else
			$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
		EndIf
		$pbuffer = DllStructGetPtr($tbuffer)
		DllStructSetData($tbuffer, "Text", $stext)
	Else
		$ibuffer = 0
		$pbuffer = -1
	EndIf
	Local $titem = DllStructCreate($taglvitem)
	Local $imask = $lvif_text
	If $iimage <> -1 Then $imask = BitOR($imask, $lvif_image)
	If $iparam <> -1 Then $imask = BitOR($imask, $lvif_param)
	If $iindent <> -1 Then $imask = BitOR($imask, $lvif_indent)
	DllStructSetData($titem, "Mask", $imask)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	DllStructSetData($titem, "Text", $pbuffer)
	DllStructSetData($titem, "TextMax", $ibuffer)
	DllStructSetData($titem, "Image", $iimage)
	DllStructSetData($titem, "Param", $iparam)
	DllStructSetData($titem, "Indent", $iindent)
	Return _guictrllistview_setitemex($hwnd, $titem)
EndFunc

Func _guictrllistview_setitemchecked($hwnd, $iindex, $bcheck = True)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $pmemory, $tmemmap, $iret
	Local $titem = DllStructCreate($taglvitem)
	Local $pitem = DllStructGetPtr($titem)
	Local $iitem = DllStructGetSize($titem)
	If @error Then Return SetError($lv_err, $lv_err, $lv_err)
	If $iindex <> -1 Then
		DllStructSetData($titem, "Mask", $lvif_state)
		DllStructSetData($titem, "Item", $iindex)
		If ($bcheck) Then
			DllStructSetData($titem, "State", 8192)
		Else
			DllStructSetData($titem, "State", 4096)
		EndIf
		DllStructSetData($titem, "StateMask", 61440)
		If IsHWnd($hwnd) Then
			If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
				Return _sendmessage($hwnd, $lvm_setitemw, 0, $titem, 0, "wparam", "struct*") <> 0
			Else
				$pmemory = _meminit($hwnd, $iitem, $tmemmap)
				_memwrite($tmemmap, $titem)
				If $bunicode Then
					$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
				Else
					$iret = _sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
				EndIf
				_memfree($tmemmap)
				Return $iret <> 0
			EndIf
		Else
			If $bunicode Then
				Return GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem) <> 0
			Else
				Return GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem) <> 0
			EndIf
		EndIf
	Else
		For $x = 0 To _guictrllistview_getitemcount($hwnd) - 1
			DllStructSetData($titem, "Mask", $lvif_state)
			DllStructSetData($titem, "Item", $x)
			If ($bcheck) Then
				DllStructSetData($titem, "State", 8192)
			Else
				DllStructSetData($titem, "State", 4096)
			EndIf
			DllStructSetData($titem, "StateMask", 61440)
			If IsHWnd($hwnd) Then
				If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
					If NOT _sendmessage($hwnd, $lvm_setitemw, 0, $titem, 0, "wparam", "struct*") <> 0 Then Return SetError($lv_err, $lv_err, $lv_err)
				Else
					$pmemory = _meminit($hwnd, $iitem, $tmemmap)
					_memwrite($tmemmap, $titem)
					If $bunicode Then
						$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
					Else
						$iret = _sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
					EndIf
					_memfree($tmemmap)
					If NOT $iret <> 0 Then Return SetError($lv_err, $lv_err, $lv_err)
				EndIf
			Else
				If $bunicode Then
					If NOT GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem) <> 0 Then Return SetError($lv_err, $lv_err, $lv_err)
				Else
					If NOT GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem) <> 0 Then Return SetError($lv_err, $lv_err, $lv_err)
				EndIf
			EndIf
		Next
		Return True
	EndIf
	Return False
EndFunc

Func _guictrllistview_setitemcount($hwnd, $iitems)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setitemcount, $iitems, BitOR($lvsicf_noinvalidateall, $lvsicf_noscroll)) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setitemcount, $iitems, BitOR($lvsicf_noinvalidateall, $lvsicf_noscroll)) <> 0
	EndIf
EndFunc

Func _guictrllistview_setitemcut($hwnd, $iindex, $benabled = True)
	Local $istate = 0
	If $benabled Then $istate = $lvis_cut
	Return _guictrllistview_setitemstate($hwnd, $iindex, $istate, $lvis_cut)
EndFunc

Func _guictrllistview_setitemdrophilited($hwnd, $iindex, $benabled = True)
	Local $istate = 0
	If $benabled Then $istate = $lvis_drophilited
	Return _guictrllistview_setitemstate($hwnd, $iindex, $istate, $lvis_drophilited)
EndFunc

Func _guictrllistview_setitemex($hwnd, ByRef $titem)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $iret
	If IsHWnd($hwnd) Then
		Local $iitem = DllStructGetSize($titem)
		Local $ibuffer = DllStructGetData($titem, "TextMax")
		Local $pbuffer = DllStructGetData($titem, "Text")
		If $bunicode Then $ibuffer *= 2
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
		Local $ptext = $pmemory + $iitem
		DllStructSetData($titem, "Text", $ptext)
		_memwrite($tmemmap, $titem, $pmemory, $iitem)
		If $pbuffer <> 0 Then _memwrite($tmemmap, $pbuffer, $ptext, $ibuffer)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	Else
		Local $pitem = DllStructGetPtr($titem)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setitemfocused($hwnd, $iindex, $benabled = True)
	Local $istate = 0
	If $benabled Then $istate = $lvis_focused
	Return _guictrllistview_setitemstate($hwnd, $iindex, $istate, $lvis_focused)
EndFunc

Func _guictrllistview_setitemgroupid($hwnd, $iindex, $igroupid)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_groupid)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "GroupID", $igroupid)
	_guictrllistview_setitemex($hwnd, $titem)
EndFunc

Func _guictrllistview_setitemimage($hwnd, $iindex, $iimage, $isubitem = 0)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_image)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	DllStructSetData($titem, "Image", $iimage)
	Return _guictrllistview_setitemex($hwnd, $titem)
EndFunc

Func _guictrllistview_setitemindent($hwnd, $iindex, $iindent)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_indent)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "Indent", $iindent)
	Return _guictrllistview_setitemex($hwnd, $titem)
EndFunc

Func __guictrllistview_setitemoverlayimage($hwnd, $iindex, $iimage)
	Return _guictrllistview_setitemstate($hwnd, $iindex, __guictrllistview_indextooverlayimagemask($iimage), $lvis_overlaymask)
EndFunc

Func _guictrllistview_setitemparam($hwnd, $iindex, $iparam)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_param)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "Param", $iparam)
	Return _guictrllistview_setitemex($hwnd, $titem)
EndFunc

Func _guictrllistview_setitemposition($hwnd, $iindex, $icx, $icy)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setitemposition, $iindex, _winapi_makelong($icx, $icy)) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setitemposition, $iindex, _winapi_makelong($icx, $icy)) <> 0
	EndIf
EndFunc

Func _guictrllistview_setitemposition32($hwnd, $iindex, $icx, $icy)
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $icx)
	DllStructSetData($tpoint, "Y", $icy)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_setitemposition32, $iindex, $tpoint, 0, "wparam", "struct*")
		Else
			Local $ipoint = DllStructGetSize($tpoint)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ipoint, $tmemmap)
			_memwrite($tmemmap, $tpoint)
			$iret = _sendmessage($hwnd, $lvm_setitemposition32, $iindex, $pmemory, 0, "wparam", "ptr")
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setitemposition32, $iindex, DllStructGetPtr($tpoint))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setitemselected($hwnd, $iindex, $bselected = True, $bfocused = False)
	Local $tstruct = DllStructCreate($taglvitem)
	Local $iret, $iselected = 0, $ifocused = 0, $isize, $tmemmap, $pmemory
	If ($bselected = True) Then $iselected = $lvis_selected
	If ($bfocused = True AND $iindex <> -1) Then $ifocused = $lvis_focused
	DllStructSetData($tstruct, "Mask", $lvif_state)
	DllStructSetData($tstruct, "Item", $iindex)
	DllStructSetData($tstruct, "State", BitOR($iselected, $ifocused))
	DllStructSetData($tstruct, "StateMask", BitOR($lvis_selected, $ifocused))
	$isize = DllStructGetSize($tstruct)
	If IsHWnd($hwnd) Then
		$pmemory = _meminit($hwnd, $isize, $tmemmap)
		_memwrite($tmemmap, $tstruct, $pmemory, $isize)
		$iret = _sendmessage($hwnd, $lvm_setitemstate, $iindex, $pmemory)
		_memfree($tmemmap)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setitemstate, $iindex, DllStructGetPtr($tstruct))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setitemstate($hwnd, $iindex, $istate, $istatemask)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_state)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "State", $istate)
	DllStructSetData($titem, "StateMask", $istatemask)
	Return _guictrllistview_setitemex($hwnd, $titem) <> 0
EndFunc

Func _guictrllistview_setitemstateimage($hwnd, $iindex, $iimage)
	Return _guictrllistview_setitemstate($hwnd, $iindex, BitShift($iimage, -12), $lvis_stateimagemask)
EndFunc

Func _guictrllistview_setitemtext($hwnd, $iindex, $stext, $isubitem = 0)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $iret
	If $isubitem = -1 Then
		Local $sseparatorchar = Opt("GUIDataSeparatorChar")
		Local $i_cols = _guictrllistview_getcolumncount($hwnd)
		Local $a_text = StringSplit($stext, $sseparatorchar)
		If $i_cols > $a_text[0] Then $i_cols = $a_text[0]
		For $i = 1 To $i_cols
			$iret = _guictrllistview_setitemtext($hwnd, $iindex, $a_text[$i], $i - 1)
			If NOT $iret Then ExitLoop
		Next
		Return $iret
	EndIf
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($titem, "Mask", $lvif_text)
	DllStructSetData($titem, "item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($titem, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $titem, $pmemory, $iitem)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		DllStructSetData($titem, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setoutlinecolor($hwnd, $icolor)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setoutlinecolor, 0, $icolor)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setoutlinecolor, 0, $icolor)
	EndIf
EndFunc

Func _guictrllistview_setselectedcolumn($hwnd, $icol)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $lvm_setselectedcolumn, $icol)
		_winapi_invalidaterect($hwnd)
	Else
		GUICtrlSendMsg($hwnd, $lvm_setselectedcolumn, $icol, 0)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
EndFunc

Func _guictrllistview_setselectionmark($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setselectionmark, 0, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setselectionmark, 0, $iindex)
	EndIf
EndFunc

Func _guictrllistview_settextbkcolor($hwnd, $icolor)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_settextbkcolor, 0, $icolor) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_settextbkcolor, 0, $icolor) <> 0
	EndIf
EndFunc

Func _guictrllistview_settextcolor($hwnd, $icolor)
	Local $iret
	If IsHWnd($hwnd) Then
		$iret = _sendmessage($hwnd, $lvm_settextcolor, 0, $icolor)
		_winapi_invalidaterect($hwnd)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_settextcolor, 0, $icolor)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_settooltips($hwnd, $htooltip)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_settooltips, 0, $htooltip, 0, "wparam", "hwnd", "hwnd")
	Else
		Return HWnd(GUICtrlSendMsg($hwnd, $lvm_settooltips, 0, $htooltip))
	EndIf
EndFunc

Func _guictrllistview_setunicodeformat($hwnd, $bunicode)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setunicodeformat, $bunicode)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setunicodeformat, $bunicode, 0)
	EndIf
EndFunc

Func _guictrllistview_setview($hwnd, $iview)
	Local $aview[5] = [$lv_view_icon, $lv_view_details, $lv_view_list, $lv_view_smallicon, $lv_view_tile]
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setview, $aview[$iview]) <> -1
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setview, $aview[$iview], 0) <> -1
	EndIf
EndFunc

Func _guictrllistview_setworkareas($hwnd, $ileft, $itop, $iright, $ibottom)
	Local $trect = DllStructCreate($tagrect)
	DllStructSetData($trect, "Left", $ileft)
	DllStructSetData($trect, "Top", $itop)
	DllStructSetData($trect, "Right", $iright)
	DllStructSetData($trect, "Bottom", $ibottom)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_setworkareas, 1, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_memwrite($tmemmap, $trect, $pmemory, $irect)
			_sendmessage($hwnd, $lvm_setworkareas, 1, $pmemory, 0, "wparam", "ptr")
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_setworkareas, 1, DllStructGetPtr($trect))
	EndIf
EndFunc

Func _guictrllistview_simplesort($hwnd, ByRef $vsortsense, $icol, $btogglesense = True)
	Local $iitemcount = _guictrllistview_getitemcount($hwnd)
	If $iitemcount Then
		Local $idescending = 0
		If UBound($vsortsense) Then
			$idescending = $vsortsense[$icol]
		Else
			$idescending = $vsortsense
		EndIf
		Local $vseparatorchar = Opt("GUIDataSeparatorChar")
		Local $icolumncount = _guictrllistview_getcolumncount($hwnd)
		Local Enum $iindexvalue = $icolumncount, $iitemparam
		Local $alistviewitems[$iitemcount][$icolumncount + 2]
		Local $aselecteditems = StringSplit(_guictrllistview_getselectedindices($hwnd), $vseparatorchar)
		Local $acheckeditems = __guictrllistview_getcheckedindices($hwnd)
		Local $sitemtext, $ifocused = -1
		For $i = 0 To $iitemcount - 1
			If $ifocused = -1 Then
				If _guictrllistview_getitemfocused($hwnd, $i) Then $ifocused = $i
			EndIf
			_guictrllistview_setitemselected($hwnd, $i, False)
			_guictrllistview_setitemchecked($hwnd, $i, False)
			For $j = 0 To $icolumncount - 1
				$sitemtext = StringStripWS(_guictrllistview_getitemtext($hwnd, $i, $j), $str_striptrailing)
				If (StringIsFloat($sitemtext) OR StringIsInt($sitemtext)) Then
					$alistviewitems[$i][$j] = Number($sitemtext)
				Else
					$alistviewitems[$i][$j] = $sitemtext
				EndIf
			Next
			$alistviewitems[$i][$iindexvalue] = $i
			$alistviewitems[$i][$iitemparam] = _guictrllistview_getitemparam($hwnd, $i)
		Next
		_arraysort($alistviewitems, $idescending, 0, 0, $icol)
		For $i = 0 To $iitemcount - 1
			For $j = 0 To $icolumncount - 1
				_guictrllistview_setitemtext($hwnd, $i, $alistviewitems[$i][$j], $j)
			Next
			_guictrllistview_setitemparam($hwnd, $i, $alistviewitems[$i][$iitemparam])
			For $j = 1 To $aselecteditems[0]
				If $alistviewitems[$i][$iindexvalue] = $aselecteditems[$j] Then
					If $alistviewitems[$i][$iindexvalue] = $ifocused Then
						_guictrllistview_setitemselected($hwnd, $i, True, True)
					Else
						_guictrllistview_setitemselected($hwnd, $i, True)
					EndIf
					ExitLoop
				EndIf
			Next
			For $j = 1 To $acheckeditems[0]
				If $alistviewitems[$i][$iindexvalue] = $acheckeditems[$j] Then
					_guictrllistview_setitemchecked($hwnd, $i, True)
					ExitLoop
				EndIf
			Next
		Next
		If $btogglesense Then
			If UBound($vsortsense) Then
				$vsortsense[$icol] = NOT $idescending
			Else
				$vsortsense = NOT $idescending
			EndIf
		EndIf
	EndIf
EndFunc

Func __guictrllistview_sort($nitem1, $nitem2, $hwnd)
	Local $iindex, $sval1, $sval2, $nresult
	For $x = 1 To $__g_alistviewsortinfo[0][0]
		If $hwnd = $__g_alistviewsortinfo[$x][1] Then
			$iindex = $x
			ExitLoop
		EndIf
	Next
	If $__g_alistviewsortinfo[$iindex][3] = $__g_alistviewsortinfo[$iindex][4] Then
		If NOT $__g_alistviewsortinfo[$iindex][7] Then
			$__g_alistviewsortinfo[$iindex][5] *= -1
			$__g_alistviewsortinfo[$iindex][7] = 1
		EndIf
	Else
		$__g_alistviewsortinfo[$iindex][7] = 1
	EndIf
	$__g_alistviewsortinfo[$iindex][6] = $__g_alistviewsortinfo[$iindex][3]
	$sval1 = _guictrllistview_getitemtext($hwnd, $nitem1, $__g_alistviewsortinfo[$iindex][3])
	$sval2 = _guictrllistview_getitemtext($hwnd, $nitem2, $__g_alistviewsortinfo[$iindex][3])
	If $__g_alistviewsortinfo[$iindex][8] Then
		If (StringIsFloat($sval1) OR StringIsInt($sval1)) Then $sval1 = Number($sval1)
		If (StringIsFloat($sval2) OR StringIsInt($sval2)) Then $sval2 = Number($sval2)
	EndIf
	$nresult = 0
	If $sval1 < $sval2 Then
		$nresult = -1
	ElseIf $sval1 > $sval2 Then
		$nresult = 1
	EndIf
	$nresult = $nresult * $__g_alistviewsortinfo[$iindex][5]
	Return $nresult
EndFunc

Func _guictrllistview_sortitems($hwnd, $icol)
	Local $iret, $iindex, $pfunction, $hheader, $iformat
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	For $x = 1 To $__g_alistviewsortinfo[0][0]
		If $hwnd = $__g_alistviewsortinfo[$x][1] Then
			$iindex = $x
			ExitLoop
		EndIf
	Next
	$pfunction = DllCallbackGetPtr($__g_alistviewsortinfo[$iindex][2])
	$__g_alistviewsortinfo[$iindex][3] = $icol
	$__g_alistviewsortinfo[$iindex][7] = 0
	$__g_alistviewsortinfo[$iindex][4] = $__g_alistviewsortinfo[$iindex][6]
	$iret = _sendmessage($hwnd, $lvm_sortitemsex, $hwnd, $pfunction, 0, "hwnd", "ptr")
	If $iret <> 0 Then
		If $__g_alistviewsortinfo[$iindex][9] Then
			$hheader = $__g_alistviewsortinfo[$iindex][10]
			For $x = 0 To _guictrlheader_getitemcount($hheader) - 1
				$iformat = _guictrlheader_getitemformat($hheader, $x)
				If BitAND($iformat, $hdf_sortdown) Then
					_guictrlheader_setitemformat($hheader, $x, BitXOR($iformat, $hdf_sortdown))
				ElseIf BitAND($iformat, $hdf_sortup) Then
					_guictrlheader_setitemformat($hheader, $x, BitXOR($iformat, $hdf_sortup))
				EndIf
			Next
			$iformat = _guictrlheader_getitemformat($hheader, $icol)
			If $__g_alistviewsortinfo[$iindex][5] = 1 Then
				_guictrlheader_setitemformat($hheader, $icol, BitOR($iformat, $hdf_sortup))
			Else
				_guictrlheader_setitemformat($hheader, $icol, BitOR($iformat, $hdf_sortdown))
			EndIf
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func __guictrllistview_stateimagemasktoindex($imask)
	Return BitShift(BitAND($imask, $lvis_stateimagemask), 12)
EndFunc

Func _guictrllistview_subitemhittest($hwnd, $ix = -1, $iy = -1)
	Local $itest, $ttest, $pmemory, $tmemmap, $iflags, $atest[11]
	If $ix = -1 Then $ix = _winapi_getmouseposx(True, $hwnd)
	If $iy = -1 Then $iy = _winapi_getmouseposy(True, $hwnd)
	$ttest = DllStructCreate($taglvhittestinfo)
	DllStructSetData($ttest, "X", $ix)
	DllStructSetData($ttest, "Y", $iy)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_subitemhittest, 0, $ttest, 0, "wparam", "struct*")
		Else
			$itest = DllStructGetSize($ttest)
			$pmemory = _meminit($hwnd, $itest, $tmemmap)
			_memwrite($tmemmap, $ttest)
			_sendmessage($hwnd, $lvm_subitemhittest, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $ttest, $itest)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_subitemhittest, 0, DllStructGetPtr($ttest))
	EndIf
	$iflags = DllStructGetData($ttest, "Flags")
	$atest[0] = DllStructGetData($ttest, "Item")
	$atest[1] = DllStructGetData($ttest, "SubItem")
	$atest[2] = BitAND($iflags, $lvht_nowhere) <> 0
	$atest[3] = BitAND($iflags, $lvht_onitemicon) <> 0
	$atest[4] = BitAND($iflags, $lvht_onitemlabel) <> 0
	$atest[5] = BitAND($iflags, $lvht_onitemstateicon) <> 0
	$atest[6] = BitAND($iflags, $lvht_onitem) <> 0
	$atest[7] = BitAND($iflags, $lvht_above) <> 0
	$atest[8] = BitAND($iflags, $lvht_below) <> 0
	$atest[9] = BitAND($iflags, $lvht_toleft) <> 0
	$atest[10] = BitAND($iflags, $lvht_toright) <> 0
	Return $atest
EndFunc

Func _guictrllistview_unregistersortcallback($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	For $x = 1 To $__g_alistviewsortinfo[0][0]
		If $hwnd = $__g_alistviewsortinfo[$x][1] Then
			DllCallbackFree($__g_alistviewsortinfo[$x][2])
			__guictrllistview_arraydelete($__g_alistviewsortinfo, $x)
			$__g_alistviewsortinfo[0][0] -= 1
			ExitLoop
		EndIf
	Next
EndFunc

Global Const $tcs_ex_flatseparators = 1
Global Const $tcs_ex_registerdrop = 2
Global Const $tcht_nowhere = 1
Global Const $tcht_onitemicon = 2
Global Const $tcht_onitemlabel = 4
Global Const $tcht_onitem = 6
Global Const $tcif_text = 1
Global Const $tcif_image = 2
Global Const $tcif_rtlreading = 4
Global Const $tcif_param = 8
Global Const $tcif_state = 16
Global Const $tcif_alldata = 27
Global Const $tcis_buttonpressed = 1
Global Const $tcis_highlighted = 2
Global Const $tc_err = -1
Global Const $tcs_bottom = 2
Global Const $tcs_buttons = 256
Global Const $tcs_fixedwidth = 1024
Global Const $tcs_flatbuttons = 8
Global Const $tcs_focusnever = 32768
Global Const $tcs_focusonbuttondown = 4096
Global Const $tcs_forceiconleft = 16
Global Const $tcs_forcelabelleft = 32
Global Const $tcs_hottrack = 64
Global Const $tcs_multiline = 512
Global Const $tcs_multiselect = 4
Global Const $tcs_ownerdrawfixed = 8192
Global Const $tcs_raggedright = 2048
Global Const $tcs_right = 2
Global Const $tcs_rightjustify = 0
Global Const $tcs_scrollopposite = 1
Global Const $tcs_singleline = 0
Global Const $tcs_tabs = 0
Global Const $tcs_tooltips = 16384
Global Const $tcs_vertical = 128
Global Const $gui_ss_default_tab = 0
Global Const $tcm_first = 4864
Global Const $tccm_first = 8192
Global Const $tcm_adjustrect = ($tcm_first + 40)
Global Const $tcm_deleteallitems = ($tcm_first + 9)
Global Const $tcm_deleteitem = ($tcm_first + 8)
Global Const $tcm_deselectall = ($tcm_first + 50)
Global Const $tcm_getcurfocus = ($tcm_first + 47)
Global Const $tcm_getcursel = ($tcm_first + 11)
Global Const $tcm_getextendedstyle = ($tcm_first + 53)
Global Const $tcm_getimagelist = ($tcm_first + 2)
Global Const $tcm_getitema = ($tcm_first + 5)
Global Const $tcm_getitemw = ($tcm_first + 60)
Global Const $tcm_getitemcount = ($tcm_first + 4)
Global Const $tcm_getitemrect = ($tcm_first + 10)
Global Const $tcm_getrowcount = ($tcm_first + 44)
Global Const $tcm_gettooltips = ($tcm_first + 45)
Global Const $tccm_getunicodeformat = ($tccm_first + 6)
Global Const $tcm_getunicodeformat = $tccm_getunicodeformat
Global Const $tcm_highlightitem = ($tcm_first + 51)
Global Const $tcm_hittest = ($tcm_first + 13)
Global Const $tcm_insertitema = ($tcm_first + 7)
Global Const $tcm_insertitemw = ($tcm_first + 62)
Global Const $tcm_removeimage = ($tcm_first + 42)
Global Const $tcm_setitema = ($tcm_first + 6)
Global Const $tcm_setitemw = ($tcm_first + 61)
Global Const $tcm_setitemextra = ($tcm_first + 14)
Global Const $tcm_setitemsize = $tcm_first + 41
Global Const $tcm_setcurfocus = ($tcm_first + 48)
Global Const $tcm_setcursel = ($tcm_first + 12)
Global Const $tcm_setextendedstyle = ($tcm_first + 52)
Global Const $tcm_setimagelist = $tcm_first + 3
Global Const $tcm_setmintabwidth = ($tcm_first + 49)
Global Const $tcm_setpadding = ($tcm_first + 43)
Global Const $tcm_settooltips = ($tcm_first + 46)
Global Const $tccm_setunicodeformat = ($tccm_first + 5)
Global Const $tcm_setunicodeformat = $tccm_setunicodeformat
Global Const $tcn_first = -550
Global Const $tcn_focuschange = ($tcn_first - 4)
Global Const $tcn_getobject = ($tcn_first - 3)
Global Const $tcn_keydown = ($tcn_first + 0)
Global Const $tcn_selchange = ($tcn_first - 1)
Global Const $tcn_selchanging = ($tcn_first - 2)
Global $__g_htablastwnd
Global Const $__tabconstant_classname = "SysTabControl32"
Global Const $__tabconstant_ws_clipsiblings = 67108864
Global Const $__tabconstant_wm_notify = 78
Global Const $__tabconstant_default_gui_font = 17
Global Const $tagtcitem = "uint Mask;dword State;dword StateMask;ptr Text;int TextMax;int Image;lparam Param"
Global Const $tagtchittestinfo = $tagpoint & ";uint Flags"

Func __guictrltab_adjustrect($hwnd, ByRef $trect, $blarger = False)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_htablastwnd) Then
			_sendmessage($hwnd, $tcm_adjustrect, $blarger, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_memwrite($tmemmap, $trect)
			_sendmessage($hwnd, $tcm_adjustrect, $blarger, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	EndIf
	Return $trect
EndFunc

Func _guictrltab_activatetab($hwnd, $iindex)
	Local $nindx
	If $hwnd = -1 Then $hwnd = GUICtrlGetHandle(-1)
	If IsHWnd($hwnd) Then
		$nindx = _winapi_getdlgctrlid($hwnd)
	Else
		$nindx = $hwnd
		$hwnd = GUICtrlGetHandle($hwnd)
	EndIf
	Local $hparent = _winapi_getparent($hwnd)
	If @error Then Return SetError(1, 0, -1)
	Local $tnmhdr = DllStructCreate($tagnmhdr)
	DllStructSetData($tnmhdr, 1, $hwnd)
	DllStructSetData($tnmhdr, 2, $nindx)
	DllStructSetData($tnmhdr, 3, $tcn_selchanging)
	_sendmessage($hparent, $__tabconstant_wm_notify, $nindx, $tnmhdr, 0, "wparam", "struct*")
	Local $iret = _guictrltab_setcursel($hwnd, $iindex)
	DllStructSetData($tnmhdr, 3, $tcn_selchange)
	_sendmessage($hparent, $__tabconstant_wm_notify, $nindx, $tnmhdr, 0, "wparam", "struct*")
	Return $iret
EndFunc

Func _guictrltab_clicktab($hwnd, $iindex, $sbutton = "left", $bmove = False, $iclicks = 1, $ispeed = 1)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $ix, $iy
	If NOT $bmove Then
		Local $hwinparent = _winapi_getparent($hwnd)
		Local $avtabpos = _guictrltab_getitemrect($hwnd, $iindex)
		$ix = $avtabpos[0] + (($avtabpos[2] - $avtabpos[0]) / 2)
		$iy = $avtabpos[1] + (($avtabpos[3] - $avtabpos[1]) / 2)
		ControlClick($hwinparent, "", $hwnd, $sbutton, $iclicks, $ix, $iy)
	Else
		Local $trect = _guictrltab_getitemrectex($hwnd, $iindex)
		Local $tpoint = _winapi_pointfromrect($trect, True)
		$tpoint = _winapi_clienttoscreen($hwnd, $tpoint)
		_winapi_getxyfrompoint($tpoint, $ix, $iy)
		Local $imode = Opt("MouseCoordMode", 1)
		MouseClick($sbutton, $ix, $iy, $iclicks, $ispeed)
		Opt("MouseCoordMode", $imode)
	EndIf
EndFunc

Func _guictrltab_create($hwnd, $ix, $iy, $iwidth = 150, $iheight = 150, $istyle = 64, $iexstyle = 0)
	If NOT IsHWnd($hwnd) Then
		Return SetError(1, 0, 0)
	EndIf
	If $iwidth = -1 Then $iwidth = 150
	If $iheight = -1 Then $iheight = 150
	If $istyle = -1 Then $istyle = $tcs_hottrack
	If $iexstyle = -1 Then $iexstyle = 0
	$istyle = BitOR($istyle, $__udfguiconstant_ws_child, $__tabconstant_ws_clipsiblings, $__udfguiconstant_ws_visible)
	Local $nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Local $htab = _winapi_createwindowex($iexstyle, $__tabconstant_classname, "", $istyle, $ix, $iy, $iwidth, $iheight, $hwnd, $nctrlid)
	_winapi_setfont($htab, _winapi_getstockobject($__tabconstant_default_gui_font))
	Return $htab
EndFunc

Func _guictrltab_deleteallitems($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_deleteallitems) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_deleteallitems, 0, 0) <> 0
	EndIf
EndFunc

Func _guictrltab_deleteitem($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_deleteitem, $iindex) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_deleteitem, $iindex, 0) <> 0
	EndIf
EndFunc

Func _guictrltab_deselectall($hwnd, $bexclude = True)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $tcm_deselectall, $bexclude)
	Else
		GUICtrlSendMsg($hwnd, $tcm_deselectall, $bexclude, 0)
	EndIf
EndFunc

Func _guictrltab_destroy(ByRef $hwnd)
	If NOT _winapi_isclassname($hwnd, $__tabconstant_classname) Then Return SetError(2, 2, False)
	Local $idestroyed = 0
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_htablastwnd) Then
			Local $nctrlid = _winapi_getdlgctrlid($hwnd)
			Local $hparent = _winapi_getparent($hwnd)
			$idestroyed = _winapi_destroywindow($hwnd)
			Local $iret = __udf_freeglobalid($hparent, $nctrlid)
			If NOT $iret Then
			EndIf
		Else
			Return SetError(1, 1, False)
		EndIf
	Else
		$idestroyed = GUICtrlDelete($hwnd)
	EndIf
	If $idestroyed Then $hwnd = 0
	Return $idestroyed <> 0
EndFunc

Func _guictrltab_findtab($hwnd, $stext, $binstr = False, $istart = 0)
	Local $stab
	For $ii = $istart To _guictrltab_getitemcount($hwnd)
		$stab = _guictrltab_getitemtext($hwnd, $ii)
		Switch $binstr
			Case False
				If $stab = $stext Then Return $ii
			Case True
				If StringInStr($stab, $stext) Then Return $ii
		EndSwitch
	Next
	Return -1
EndFunc

Func _guictrltab_getcurfocus($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getcurfocus)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getcurfocus, 0, 0)
	EndIf
EndFunc

Func _guictrltab_getcursel($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getcursel)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getcursel, 0, 0)
	EndIf
EndFunc

Func _guictrltab_getdisplayrect($hwnd)
	Local $arect[4]
	Local $trect = _guictrltab_getdisplayrectex($hwnd)
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrltab_getdisplayrectex($hwnd)
	Local $trect = _winapi_getclientrect($hwnd)
	Return __guictrltab_adjustrect($hwnd, $trect)
EndFunc

Func _guictrltab_getextendedstyle($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getextendedstyle)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getextendedstyle, 0, 0)
	EndIf
EndFunc

Func _guictrltab_getimagelist($hwnd)
	If IsHWnd($hwnd) Then
		Return Ptr(_sendmessage($hwnd, $tcm_getimagelist))
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $tcm_getimagelist, 0, 0))
	EndIf
EndFunc

Func _guictrltab_getitem($hwnd, $iindex)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $bunicode = _guictrltab_getunicodeformat($hwnd)
	Local $ibuffer = 4096
	Local $tagtcitemex = $tagtcitem & ";ptr Filler"
	Local $titem = DllStructCreate($tagtcitemex)
	DllStructSetData($titem, "Mask", $tcif_alldata)
	DllStructSetData($titem, "TextMax", $ibuffer)
	DllStructSetData($titem, "StateMask", BitOR($tcis_highlighted, $tcis_buttonpressed))
	Local $iitem = DllStructGetSize($titem)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $tmemmap
	Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
	Local $ptext = $pmemory + $iitem
	DllStructSetData($titem, "Text", $ptext)
	_memwrite($tmemmap, $titem, $pmemory, $iitem)
	Local $iret
	If $bunicode Then
		$iret = _sendmessage($hwnd, $tcm_getitemw, $iindex, $pmemory)
	Else
		$iret = _sendmessage($hwnd, $tcm_getitema, $iindex, $pmemory)
	EndIf
	_memread($tmemmap, $pmemory, $titem, $iitem)
	_memread($tmemmap, $ptext, $tbuffer, $ibuffer)
	_memfree($tmemmap)
	Local $aitem[4]
	$aitem[0] = DllStructGetData($titem, "State")
	$aitem[1] = DllStructGetData($tbuffer, "Text")
	$aitem[2] = DllStructGetData($titem, "Image")
	$aitem[3] = DllStructGetData($titem, "Param")
	Return SetError($iret = 0, 0, $aitem)
EndFunc

Func _guictrltab_getitemcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getitemcount)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getitemcount, 0, 0)
	EndIf
EndFunc

Func _guictrltab_getitemimage($hwnd, $iindex)
	Local $aitem = _guictrltab_getitem($hwnd, $iindex)
	Return $aitem[2]
EndFunc

Func _guictrltab_getitemparam($hwnd, $iindex)
	Local $aitem = _guictrltab_getitem($hwnd, $iindex)
	Return $aitem[3]
EndFunc

Func _guictrltab_getitemrect($hwnd, $iindex)
	Local $arect[4]
	Local $trect = _guictrltab_getitemrectex($hwnd, $iindex)
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrltab_getitemrectex($hwnd, $iindex)
	Local $trect = DllStructCreate($tagrect)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_htablastwnd) Then
			_sendmessage($hwnd, $tcm_getitemrect, $iindex, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_sendmessage($hwnd, $tcm_getitemrect, $iindex, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $tcm_getitemrect, $iindex, DllStructGetPtr($trect))
	EndIf
	Return $trect
EndFunc

Func _guictrltab_getitemstate($hwnd, $iindex)
	Local $aitem = _guictrltab_getitem($hwnd, $iindex)
	Return $aitem[0]
EndFunc

Func _guictrltab_getitemtext($hwnd, $iindex)
	Local $aitem = _guictrltab_getitem($hwnd, $iindex)
	Return $aitem[1]
EndFunc

Func _guictrltab_getrowcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getrowcount)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getrowcount, 0, 0)
	EndIf
EndFunc

Func _guictrltab_gettooltips($hwnd)
	If IsHWnd($hwnd) Then
		Return HWnd(_sendmessage($hwnd, $tcm_gettooltips))
	Else
		Return HWnd(GUICtrlSendMsg($hwnd, $tcm_gettooltips, 0, 0))
	EndIf
EndFunc

Func _guictrltab_getunicodeformat($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getunicodeformat) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getunicodeformat, 0, 0) <> 0
	EndIf
EndFunc

Func _guictrltab_highlightitem($hwnd, $iindex, $bhighlight = True)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_highlightitem, $iindex, $bhighlight) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_highlightitem, $iindex, $bhighlight) <> 0
	EndIf
EndFunc

Func _guictrltab_hittest($hwnd, $ix, $iy)
	Local $ahit[2] = [-1, 1]
	Local $thit = DllStructCreate($tagtchittestinfo)
	DllStructSetData($thit, "X", $ix)
	DllStructSetData($thit, "Y", $iy)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_htablastwnd) Then
			$ahit[0] = _sendmessage($hwnd, $tcm_hittest, 0, $thit, 0, "wparam", "struct*")
		Else
			Local $ihit = DllStructGetSize($thit)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ihit, $tmemmap)
			_memwrite($tmemmap, $thit)
			$ahit[0] = _sendmessage($hwnd, $tcm_hittest, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $thit, $ihit)
			_memfree($tmemmap)
		EndIf
	Else
		$ahit[0] = GUICtrlSendMsg($hwnd, $tcm_hittest, 0, DllStructGetPtr($thit))
	EndIf
	$ahit[1] = DllStructGetData($thit, "Flags")
	Return $ahit
EndFunc

Func _guictrltab_insertitem($hwnd, $iindex, $stext, $iimage = -1, $iparam = 0)
	Local $bunicode = _guictrltab_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $titem = DllStructCreate($tagtcitem)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($titem, "Mask", BitOR($tcif_text, $tcif_image, $tcif_param))
	DllStructSetData($titem, "TextMax", $ibuffer)
	DllStructSetData($titem, "Image", $iimage)
	DllStructSetData($titem, "Param", $iparam)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_htablastwnd) Then
			DllStructSetData($titem, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $tcm_insertitemw, $iindex, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $titem, $pmemory, $iitem)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $tcm_insertitemw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $tcm_insertitema, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		DllStructSetData($titem, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $tcm_insertitemw, $iindex, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $tcm_insertitema, $iindex, $pitem)
		EndIf
	EndIf
	Return $iret
EndFunc

Func _guictrltab_removeimage($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $tcm_removeimage, $iindex)
		_winapi_invalidaterect($hwnd)
	Else
		GUICtrlSendMsg($hwnd, $tcm_removeimage, $iindex, 0)
	EndIf
EndFunc

Func _guictrltab_setcurfocus($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $tcm_setcurfocus, $iindex)
	Else
		GUICtrlSendMsg($hwnd, $tcm_setcurfocus, $iindex, 0)
	EndIf
EndFunc

Func _guictrltab_setcursel($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setcursel, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_setcursel, $iindex, 0)
	EndIf
EndFunc

Func _guictrltab_setextendedstyle($hwnd, $istyle)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setextendedstyle, 0, $istyle)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_setextendedstyle, 0, $istyle)
	EndIf
EndFunc

Func _guictrltab_setimagelist($hwnd, $himage)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setimagelist, 0, $himage, 0, "wparam", "handle", "handle")
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $tcm_setimagelist, 0, $himage))
	EndIf
EndFunc

Func _guictrltab_setitem($hwnd, $iindex, $stext = -1, $istate = -1, $iimage = -1, $iparam = -1)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $titem = DllStructCreate($tagtcitem)
	Local $ibuffer, $tbuffer, $imask = 0, $iret
	Local $bunicode = _guictrltab_getunicodeformat($hwnd)
	If IsString($stext) Then
		$ibuffer = StringLen($stext) + 1
		If $bunicode Then
			$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
			$ibuffer *= 2
		Else
			$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
		EndIf
		DllStructSetData($tbuffer, "Text", $stext)
		DllStructSetData($titem, "Text", DllStructGetPtr($tbuffer))
		$imask = $tcif_text
	EndIf
	If $istate <> -1 Then
		DllStructSetData($titem, "State", $istate)
		DllStructSetData($titem, "StateMask", $istate)
		$imask = BitOR($imask, $tcif_state)
	EndIf
	If $iimage <> -1 Then
		DllStructSetData($titem, "Image", $iimage)
		$imask = BitOR($imask, $tcif_image)
	EndIf
	If $iparam <> -1 Then
		DllStructSetData($titem, "Param", $iparam)
		$imask = BitOR($imask, $tcif_param)
	EndIf
	DllStructSetData($titem, "Mask", $imask)
	Local $iitem = DllStructGetSize($titem)
	Local $tmemmap
	Local $pmemory = _meminit($hwnd, $iitem + 8192, $tmemmap)
	Local $ptext = $pmemory + 4096
	DllStructSetData($titem, "Text", $ptext)
	_memwrite($tmemmap, $titem, $pmemory, $iitem)
	If IsString($stext) Then _memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
	If $bunicode Then
		$iret = _sendmessage($hwnd, $tcm_setitemw, $iindex, $pmemory) <> 0
	Else
		$iret = _sendmessage($hwnd, $tcm_setitema, $iindex, $pmemory) <> 0
	EndIf
	_memfree($tmemmap)
	Return $iret
EndFunc

Func _guictrltab_setitemimage($hwnd, $iindex, $iimage)
	Return _guictrltab_setitem($hwnd, $iindex, -1, -1, $iimage)
EndFunc

Func _guictrltab_setitemparam($hwnd, $iindex, $iparam)
	Return _guictrltab_setitem($hwnd, $iindex, -1, -1, -1, $iparam)
EndFunc

Func _guictrltab_setitemsize($hwnd, $iwidth, $iheight)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setitemsize, 0, _winapi_makelong($iwidth, $iheight))
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_setitemsize, 0, _winapi_makelong($iwidth, $iheight))
	EndIf
EndFunc

Func _guictrltab_setitemstate($hwnd, $iindex, $istate)
	Return _guictrltab_setitem($hwnd, $iindex, -1, $istate)
EndFunc

Func _guictrltab_setitemtext($hwnd, $iindex, $stext)
	Return _guictrltab_setitem($hwnd, $iindex, $stext)
EndFunc

Func _guictrltab_setmintabwidth($hwnd, $iminwidth)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setmintabwidth, 0, $iminwidth)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_setmintabwidth, 0, $iminwidth)
	EndIf
EndFunc

Func _guictrltab_setpadding($hwnd, $ihorz, $ivert)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $tcm_setpadding, 0, _winapi_makelong($ihorz, $ivert))
	Else
		GUICtrlSendMsg($hwnd, $tcm_setpadding, 0, _winapi_makelong($ihorz, $ivert))
	EndIf
EndFunc

Func _guictrltab_settooltips($hwnd, $htooltip)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $tcm_settooltips, $htooltip, 0, 0, "hwnd")
	Else
		GUICtrlSendMsg($hwnd, $tcm_settooltips, $htooltip, 0)
	EndIf
EndFunc

Func _guictrltab_setunicodeformat($hwnd, $bunicode)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setunicodeformat, $bunicode) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_setunicodeformat, $bunicode, 0) <> 0
	EndIf
EndFunc

Global Const $coinit_apartmentthreaded = 2
Global Const $coinit_disable_ole1dde = 4
Global Const $coinit_multithreaded = 0
Global Const $coinit_speed_over_memory = 8
#Region Global Variables and Constants
	Global $__g_venum, $__g_vext = 0
	Global $__g_hheap = 0, $__g_irgbmode = 1
	Global Const $tagosversioninfo = "struct;dword OSVersionInfoSize;dword MajorVersion;dword MinorVersion;dword BuildNumber;dword PlatformId;wchar CSDVersion[128];endstruct"
	Global Const $__winver = __winver()
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_arraytostruct(Const ByRef $adata, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($adata, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "wchar[" & (StringLen($adata[$i]) + 1) & "];"
		Next
		Local $tdata = DllStructCreate($tagstruct & "wchar[1]")
		Local $icount = 1
		For $i = $istart To $iend
			DllStructSetData($tdata, $icount, $adata[$i])
			$icount += 1
		Next
		DllStructSetData($tdata, $icount, ChrW(0))
		Return $tdata
	EndFunc

	Func _winapi_createmargins($ileftwidth, $irightwidth, $itopheight, $ibottomheight)
		Local $tmargins = DllStructCreate($tagmargins)
		DllStructSetData($tmargins, 1, $ileftwidth)
		DllStructSetData($tmargins, 2, $irightwidth)
		DllStructSetData($tmargins, 3, $itopheight)
		DllStructSetData($tmargins, 4, $ibottomheight)
		Return $tmargins
	EndFunc

	Func _winapi_createpoint($ix, $iy)
		Local $tpoint = DllStructCreate($tagpoint)
		DllStructSetData($tpoint, 1, $ix)
		DllStructSetData($tpoint, 2, $iy)
		Return $tpoint
	EndFunc

	Func _winapi_createrect($ileft, $itop, $iright, $ibottom)
		Local $trect = DllStructCreate($tagrect)
		DllStructSetData($trect, 1, $ileft)
		DllStructSetData($trect, 2, $itop)
		DllStructSetData($trect, 3, $iright)
		DllStructSetData($trect, 4, $ibottom)
		Return $trect
	EndFunc

	Func _winapi_createrectex($ix, $iy, $iwidth, $iheight)
		Local $trect = DllStructCreate($tagrect)
		DllStructSetData($trect, 1, $ix)
		DllStructSetData($trect, 2, $iy)
		DllStructSetData($trect, 3, $ix + $iwidth)
		DllStructSetData($trect, 4, $iy + $iheight)
		Return $trect
	EndFunc

	Func _winapi_createsize($iwidth, $iheight)
		Local $tsize = DllStructCreate($tagsize)
		DllStructSetData($tsize, 1, $iwidth)
		DllStructSetData($tsize, 2, $iheight)
		Return $tsize
	EndFunc

	Func _winapi_fatalexit($icode)
		DllCall("kernel32.dll", "none", "FatalExit", "int", $icode)
		If @error Then Return SetError(@error, @extended)
	EndFunc

	Func _winapi_getbitmapdimension($hbitmap)
		Local Const $tagbitmap = "struct;long bmType;long bmWidth;long bmHeight;long bmWidthBytes;ushort bmPlanes;ushort bmBitsPixel;ptr bmBits;endstruct"
		Local $tobj = DllStructCreate($tagbitmap)
		Local $aret = DllCall("gdi32.dll", "int", "GetObject", "handle", $hbitmap, "int", DllStructGetSize($tobj), "struct*", $tobj)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return _winapi_createsize(DllStructGetData($tobj, "bmWidth"), DllStructGetData($tobj, "bmHeight"))
	EndFunc

	Func _winapi_getstring($pstring, $bunicode = True)
		Local $ilength = _winapi_strlen($pstring, $bunicode)
		If @error OR NOT $ilength Then Return SetError(@error + 10, @extended, "")
		Local $tstring = DllStructCreate(__iif($bunicode, "wchar", "char") & "[" & ($ilength + 1) & "]", $pstring)
		If @error Then Return SetError(@error, @extended, "")
		Return SetExtended($ilength, DllStructGetData($tstring, 1))
	EndFunc

	Func _winapi_isbadreadptr($paddress, $ilength)
		Local $aret = DllCall("kernel32.dll", "bool", "IsBadReadPtr", "struct*", $paddress, "uint_ptr", $ilength)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isbadwriteptr($paddress, $ilength)
		Local $aret = DllCall("kernel32.dll", "bool", "IsBadWritePtr", "struct*", $paddress, "uint_ptr", $ilength)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_iswow64process($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1024, 4096), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, False)
		Local $aret = DllCall("kernel32.dll", "bool", "IsWow64Process", "handle", $hprocess[0], "bool*", 0)
		If __checkerrorclosehandle($aret, $hprocess[0]) Then Return SetError(@error, @extended, False)
		Return $aret[2]
	EndFunc

	Func _winapi_movememory($pdestination, $psource, $ilength)
		If _winapi_isbadreadptr($psource, $ilength) Then Return SetError(10, @extended, 0)
		If _winapi_isbadwriteptr($pdestination, $ilength) Then Return SetError(11, @extended, 0)
		DllCall("ntdll.dll", "none", "RtlMoveMemory", "struct*", $pdestination, "struct*", $psource, "ulong_ptr", $ilength)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_pathisdirectory($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsDirectoryW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_strlen($pstring, $bunicode = True)
		Local $w = ""
		If $bunicode Then $w = "W"
		Local $aret = DllCall("kernel32.dll", "int", "lstrlen" & $w, "struct*", $pstring)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_structtoarray(ByRef $tstruct, $iitems = 0)
		Local $isize = 2 * Floor(DllStructGetSize($tstruct) / 2)
		Local $pstruct = DllStructGetPtr($tstruct)
		If NOT $isize OR NOT $pstruct Then Return SetError(1, 0, 0)
		Local $tdata, $ilength, $ioffset = 0
		Local $aresult[101] = [0]
		While 1
			$ilength = _winapi_strlen($pstruct + $ioffset)
			If NOT $ilength Then
				ExitLoop
			EndIf
			If 2 * (1 + $ilength) + $ioffset > $isize Then Return SetError(3, 0, 0)
			$tdata = DllStructCreate("wchar[" & (1 + $ilength) & "]", $pstruct + $ioffset)
			If @error Then Return SetError(@error + 10, 0, 0)
			__inc($aresult)
			$aresult[$aresult[0]] = DllStructGetData($tdata, 1)
			If $aresult[0] = $iitems Then
				ExitLoop
			EndIf
			$ioffset += 2 * (1 + $ilength)
			If $ioffset >= $isize Then Return SetError(3, 0, 0)
		WEnd
		If NOT $aresult[0] Then Return SetError(2, 0, 0)
		__inc($aresult, -1)
		Return $aresult
	EndFunc

	Func _winapi_swapdword($ivalue)
		Local $tstruct1 = DllStructCreate("dword;dword")
		Local $tstruct2 = DllStructCreate("byte[4];byte[4]", DllStructGetPtr($tstruct1))
		DllStructSetData($tstruct1, 1, $ivalue)
		For $i = 1 To 4
			DllStructSetData($tstruct2, 2, DllStructGetData($tstruct2, 1, 5 - $i), $i)
		Next
		Return DllStructGetData($tstruct1, 2)
	EndFunc

	Func _winapi_swapqword($ivalue)
		Local $tstruct1 = DllStructCreate("int64;int64")
		Local $tstruct2 = DllStructCreate("byte[8];byte[8]", DllStructGetPtr($tstruct1))
		DllStructSetData($tstruct1, 1, $ivalue)
		For $i = 1 To 8
			DllStructSetData($tstruct2, 2, DllStructGetData($tstruct2, 1, 9 - $i), $i)
		Next
		Return DllStructGetData($tstruct1, 2)
	EndFunc

	Func _winapi_swapword($ivalue)
		Local $tstruct1 = DllStructCreate("word;word")
		Local $tstruct2 = DllStructCreate("byte[2];byte[2]", DllStructGetPtr($tstruct1))
		DllStructSetData($tstruct1, 1, $ivalue)
		For $i = 1 To 2
			DllStructSetData($tstruct2, 2, DllStructGetData($tstruct2, 1, 3 - $i), $i)
		Next
		Return DllStructGetData($tstruct1, 2)
	EndFunc

	Func _winapi_switchcolor($icolor)
		If $icolor = -1 Then Return $icolor
		Return BitOR(BitAND($icolor, 65280), BitShift(BitAND($icolor, 255), -16), BitShift(BitAND($icolor, 16711680), 16))
	EndFunc

	Func _winapi_zeromemory($pmemory, $ilength)
		If _winapi_isbadwriteptr($pmemory, $ilength) Then Return SetError(11, @extended, 0)
		DllCall("ntdll.dll", "none", "RtlZeroMemory", "struct*", $pmemory, "ulong_ptr", $ilength)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

#EndRegion Public Functions
#Region Internal Functions

	Func __checkerrorarraybounds(Const ByRef $adata, ByRef $istart, ByRef $iend, $ndim = 1, $idim = $ubound_dimensions)
		If NOT IsArray($adata) Then Return SetError(1, 0, 1)
		If UBound($adata, $idim) <> $ndim Then Return SetError(2, 0, 1)
		If $istart < 0 Then $istart = 0
		Local $iubound = UBound($adata) - 1
		If $iend < 1 OR $iend > $iubound Then $iend = $iubound
		If $istart > $iend Then Return SetError(4, 0, 1)
		Return 0
	EndFunc

	Func __checkerrorclosehandle($aret, $hfile, $blasterror = 0, $icurerr = @error, $icurext = @extended)
		If NOT $icurerr AND NOT $aret[0] Then $icurerr = 10
		Local $ilasterror = _winapi_getlasterror()
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hfile)
		If $icurerr Then _winapi_setlasterror($ilasterror)
		If $blasterror Then $icurext = $ilasterror
		Return SetError($icurerr, $icurext, $icurerr)
	EndFunc

	Func __dll($spath, $bpin = False)
		Local $aret = DllCall("kernel32.dll", "bool", "GetModuleHandleExW", "dword", __iif($bpin, 1, 2), "wstr", $spath, "ptr*", 0)
		If NOT $aret[3] Then
			Local $aresult = DllCall("kernel32.dll", "handle", "LoadLibraryW", "wstr", $spath)
			If NOT $aresult[0] Then Return 0
		EndIf
		Return 1
	EndFunc

	Func __enumwindowsproc($hwnd, $bvisible)
		Local $aresult
		If $bvisible Then
			$aresult = DllCall("user32.dll", "bool", "IsWindowVisible", "hwnd", $hwnd)
			If NOT $aresult[0] Then
				Return 1
			EndIf
		EndIf
		__inc($__g_venum)
		$__g_venum[$__g_venum[0][0]][0] = $hwnd
		$aresult = DllCall("user32.dll", "int", "GetClassNameW", "hwnd", $hwnd, "wstr", "", "int", 4096)
		$__g_venum[$__g_venum[0][0]][1] = $aresult[2]
		Return 1
	EndFunc

	Func __fatalexit($icode, $stext = "")
		If $stext Then MsgBox($mb_systemmodal, "AutoIt", $stext)
		_winapi_fatalexit($icode)
	EndFunc

	Func __heapalloc($isize, $babort = False)
		Local $aret
		If NOT $__g_hheap Then
			$aret = DllCall("kernel32.dll", "handle", "HeapCreate", "dword", 0, "ulong_ptr", 0, "ulong_ptr", 0)
			If @error OR NOT $aret[0] Then __fatalexit(1, "Error allocating memory.")
			$__g_hheap = $aret[0]
		EndIf
		$aret = DllCall("kernel32.dll", "ptr", "HeapAlloc", "handle", $__g_hheap, "dword", 8, "ulong_ptr", $isize)
		If @error OR NOT $aret[0] Then
			If $babort Then __fatalexit(1, "Error allocating memory.")
			Return SetError(@error + 30, @extended, 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func __heapfree(ByRef $pmemory, $bcheck = False, $icurerr = @error, $icurext = @extended)
		If $bcheck AND (NOT __heapvalidate($pmemory)) Then Return SetError(@error, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "int", "HeapFree", "handle", $__g_hheap, "dword", 0, "ptr", $pmemory)
		If @error OR NOT $aret[0] Then Return SetError(@error + 40, @extended, 0)
		$pmemory = 0
		Return SetError($icurerr, $icurext, 1)
	EndFunc

	Func __heaprealloc($pmemory, $isize, $bamount = False, $babort = False)
		Local $aret, $pret
		If __heapvalidate($pmemory) Then
			If $bamount AND (__heapsize($pmemory) >= $isize) Then Return SetExtended(1, Ptr($pmemory))
			$aret = DllCall("kernel32.dll", "ptr", "HeapReAlloc", "handle", $__g_hheap, "dword", 8, "ptr", $pmemory, "ulong_ptr", $isize)
			If @error OR NOT $aret[0] Then
				If $babort Then __fatalexit(1, "Error allocating memory.")
				Return SetError(@error + 20, @extended, Ptr($pmemory))
			EndIf
			$pret = $aret[0]
		Else
			$pret = __heapalloc($isize, $babort)
			If @error Then Return SetError(@error, @extended, 0)
		EndIf
		Return $pret
	EndFunc

	Func __heapsize($pmemory, $bcheck = False)
		If $bcheck AND (NOT __heapvalidate($pmemory)) Then Return SetError(@error, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "ulong_ptr", "HeapSize", "handle", $__g_hheap, "dword", 0, "ptr", $pmemory)
		If @error OR ($aret[0] = Ptr(-1)) Then Return SetError(@error + 50, @extended, 0)
		Return $aret[0]
	EndFunc

	Func __heapvalidate($pmemory)
		If (NOT $__g_hheap) OR (NOT Ptr($pmemory)) Then Return SetError(9, 0, False)
		Local $aret = DllCall("kernel32.dll", "int", "HeapValidate", "handle", $__g_hheap, "dword", 0, "ptr", $pmemory)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func __inc(ByRef $adata, $iincrement = 100)
		Select 
			Case UBound($adata, $ubound_columns)
				If $iincrement < 0 Then
					ReDim $adata[$adata[0][0] + 1][UBound($adata, $ubound_columns)]
				Else
					$adata[0][0] += 1
					If $adata[0][0] > UBound($adata) - 1 Then
						ReDim $adata[$adata[0][0] + $iincrement][UBound($adata, $ubound_columns)]
					EndIf
				EndIf
			Case UBound($adata, $ubound_rows)
				If $iincrement < 0 Then
					ReDim $adata[$adata[0] + 1]
				Else
					$adata[0] += 1
					If $adata[0] > UBound($adata) - 1 Then
						ReDim $adata[$adata[0] + $iincrement]
					EndIf
				EndIf
			Case Else
				Return 0
		EndSelect
		Return 1
	EndFunc

	Func __iif($btest, $vtrue, $vfalse)
		Return $btest ? $vtrue : $vfalse
	EndFunc

	Func __init($ddata)
		Local $ilength = BinaryLen($ddata)
		Local $aret = DllCall("kernel32.dll", "ptr", "VirtualAlloc", "ptr", 0, "ulong_ptr", $ilength, "dword", 4096, "dword", 64)
		If @error OR NOT $aret[0] Then __fatalexit(1, "Error allocating memory.")
		Local $tdata = DllStructCreate("byte[" & $ilength & "]", $aret[0])
		DllStructSetData($tdata, 1, $ddata)
		Return $aret[0]
	EndFunc

	Func __rgb($icolor)
		If $__g_irgbmode Then
			$icolor = _winapi_switchcolor($icolor)
		EndIf
		Return $icolor
	EndFunc

	Func __winver()
		Local $tosvi = DllStructCreate($tagosversioninfo)
		DllStructSetData($tosvi, 1, DllStructGetSize($tosvi))
		Local $aret = DllCall("kernel32.dll", "bool", "GetVersionExW", "struct*", $tosvi)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return BitOR(BitShift(DllStructGetData($tosvi, 2), -8), DllStructGetData($tosvi, 3))
	EndFunc

#EndRegion Internal Functions
#Region Global Variables and Constants
	Global Const $__tagwinapicom_guid = "struct;ulong Data1;ushort Data2;ushort Data3;byte Data4[8];endstruct"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_clsidfromprogid($sprogid)
		Local $tguid = DllStructCreate($__tagwinapicom_guid)
		Local $areturn = DllCall("ole32.dll", "long", "CLSIDFromProgID", "wstr", $sprogid, "struct*", $tguid)
		If @error Then Return SetError(@error, @extended, "")
		If $areturn[0] Then Return SetError(10, $areturn[0], "")
		$areturn = DllCall("ole32.dll", "int", "StringFromGUID2", "struct*", $tguid, "wstr", "", "int", 39)
		If @error OR NOT $areturn[0] Then Return SetError(@error + 20, @extended, "")
		Return $areturn[2]
	EndFunc

	Func _winapi_coinitialize($iflags = 0)
		Local $areturn = DllCall("ole32.dll", "long", "CoInitializeEx", "ptr", 0, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		If $areturn[0] Then Return SetError(10, $areturn[0], 0)
		Return 1
	EndFunc

	Func _winapi_cotaskmemalloc($isize)
		Local $areturn = DllCall("ole32.dll", "ptr", "CoTaskMemAlloc", "uint_ptr", $isize)
		If @error Then Return SetError(@error, @extended, 0)
		Return $areturn[0]
	EndFunc

	Func _winapi_cotaskmemfree($pmemory)
		DllCall("ole32.dll", "none", "CoTaskMemFree", "ptr", $pmemory)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_cotaskmemrealloc($pmemory, $isize)
		Local $areturn = DllCall("ole32.dll", "ptr", "CoTaskMemRealloc", "ptr", $pmemory, "ulong_ptr", $isize)
		If @error Then Return SetError(@error, @extended, 0)
		Return $areturn[0]
	EndFunc

	Func _winapi_couninitialize()
		DllCall("ole32.dll", "none", "CoUninitialize")
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_createguid()
		Local $tguid = DllStructCreate($__tagwinapicom_guid)
		Local $areturn = DllCall("ole32.dll", "long", "CoCreateGuid", "struct*", $tguid)
		If @error Then Return SetError(@error, @extended, "")
		If $areturn[0] Then Return SetError(10, $areturn[0], "")
		$areturn = DllCall("ole32.dll", "int", "StringFromGUID2", "struct*", $tguid, "wstr", "", "int", 65536)
		If @error OR NOT $areturn[0] Then Return SetError(@error + 20, @extended, "")
		Return $areturn[2]
	EndFunc

	Func _winapi_createstreamonhglobal($hglobal = 0, $bdeleteonrelease = True)
		Local $areturn = DllCall("ole32.dll", "long", "CreateStreamOnHGlobal", "handle", $hglobal, "bool", $bdeleteonrelease, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $areturn[0] Then Return SetError(10, $areturn[0], 0)
		Return $areturn[3]
	EndFunc

	Func _winapi_gethglobalfromstream($pstream)
		Local $areturn = DllCall("ole32.dll", "uint", "GetHGlobalFromStream", "ptr", $pstream, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $areturn[0] Then Return SetError(10, $areturn[0], 0)
		Return $areturn[2]
	EndFunc

	Func _winapi_progidfromclsid($sclsid)
		Local $tguid = DllStructCreate($__tagwinapicom_guid)
		Local $areturn = DllCall("ole32.dll", "uint", "CLSIDFromString", "wstr", $sclsid, "struct*", $tguid)
		If @error OR $areturn[0] Then Return SetError(@error + 20, @extended, "")
		$areturn = DllCall("ole32.dll", "uint", "ProgIDFromCLSID", "struct*", $tguid, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $areturn[0] Then Return SetError(10, $areturn[0], "")
		Local $sid = _winapi_getstring($areturn[2])
		_winapi_cotaskmemfree($areturn[2])
		Return $sid
	EndFunc

	Func _winapi_releasestream($pstream)
		Local $areturn = DllCall("oleaut32.dll", "long", "DispCallFunc", "ptr", $pstream, "ulong_ptr", 8 * (1 + @AutoItX64), "uint", 4, "ushort", 23, "uint", 0, "ptr", 0, "ptr", 0, "str", "")
		If @error Then Return SetError(@error, @extended, 0)
		If $areturn[0] Then Return SetError(10, $areturn[0], 0)
		Return 1
	EndFunc

#EndRegion Public Functions
Global Const $symopt_allow_absolute_symbols = 2048
Global Const $symopt_allow_zero_address = 16777216
Global Const $symopt_auto_publics = 65536
Global Const $symopt_case_insensitive = 1
Global Const $symopt_debug = -2147483648
Global Const $symopt_deferred_loads = 4
Global Const $symopt_disable_symsrv_autodetect = 33554432
Global Const $symopt_exact_symbols = 1024
Global Const $symopt_fail_critical_errors = 512
Global Const $symopt_favor_compressed = 8388608
Global Const $symopt_flat_directory = 4194304
Global Const $symopt_ignore_cvrec = 128
Global Const $symopt_ignore_imagedir = 2097152
Global Const $symopt_ignore_nt_sympath = 4096
Global Const $symopt_include_32bit_modules = 8192
Global Const $symopt_load_anything = 64
Global Const $symopt_load_lines = 16
Global Const $symopt_no_cpp = 8
Global Const $symopt_no_image_search = 131072
Global Const $symopt_no_prompts = 524288
Global Const $symopt_no_publics = 32768
Global Const $symopt_no_unqualified_loads = 256
Global Const $symopt_overwrite = 1048576
Global Const $symopt_publics_only = 16384
Global Const $symopt_secure = 262144
Global Const $symopt_undname = 2
Global Const $sem_failcriticalerrors = 1
Global Const $sem_noalignmentfaultexcept = 4
Global Const $sem_nogpfaulterrorbox = 2
Global Const $sem_noopenfileerrorbox = 32768
Global Const $network_alive_lan = 1
Global Const $network_alive_wan = 2
Global Const $network_alive_aol = 4
Global Const $restart_no_crash = 1
Global Const $restart_no_hang = 2
Global Const $restart_no_patch = 4
Global Const $restart_no_reboot = 8
Global Const $uhid_mb = 0
Global Const $uhid_bios = 1
Global Const $uhid_cpu = 2
Global Const $uhid_hdd = 4
Global Const $uhid_all = BitOR($uhid_mb, $uhid_bios, $uhid_cpu, $uhid_hdd)
Global Const $backup_alternate_data = 4
Global Const $backup_data = 1
Global Const $backup_ea_data = 2
Global Const $backup_link = 5
Global Const $backup_object_id = 7
Global Const $backup_property_data = 6
Global Const $backup_reparse_data = 8
Global Const $backup_security_data = 3
Global Const $backup_sparse_block = 9
Global Const $backup_txfs_data = 10
Global Const $copy_file_allow_decrypted_destination = 8
Global Const $copy_file_copy_symlink = 2048
Global Const $copy_file_fail_if_exists = 1
Global Const $copy_file_no_buffering = 4096
Global Const $copy_file_open_source_for_write = 4
Global Const $copy_file_restartable = 2
Global Const $move_file_copy_allowed = 2
Global Const $move_file_create_hardlink = 16
Global Const $move_file_delay_until_reboot = 4
Global Const $move_file_fail_if_not_trackable = 32
Global Const $move_file_replace_existing = 1
Global Const $move_file_write_through = 8
Global Const $progress_continue = 0
Global Const $progress_cancel = 1
Global Const $progress_stop = 2
Global Const $progress_quiet = 3
Global Const $file_append_data = 4
Global Const $file_delete_child = 64
Global Const $file_execute = 32
Global Const $file_read_attributes = 128
Global Const $file_read_data = 1
Global Const $file_read_ea = 8
Global Const $file_write_attributes = 256
Global Const $file_write_data = 2
Global Const $file_write_ea = 16
Global Const $file_add_file = $file_write_data
Global Const $file_add_subdirectory = $file_append_data
Global Const $file_create_pipe_instance = $file_append_data
Global Const $file_list_directory = $file_read_data
Global Const $file_traverse = $file_execute
Global Const $file_all_access = 2032127
Global Const $file_flag_backup_semantics = 33554432
Global Const $file_flag_delete_on_close = 67108864
Global Const $file_flag_no_buffering = 536870912
Global Const $file_flag_open_no_recall = 1048576
Global Const $file_flag_open_reparse_point = 2097152
Global Const $file_flag_overlapped = 1073741824
Global Const $file_flag_posix_semantics = 1048576
Global Const $file_flag_random_access = 268435456
Global Const $file_flag_sequential_scan = 134217728
Global Const $file_flag_write_through = -2147483648
Global Const $security_anonymous = 0
Global Const $security_context_tracking = 262144
Global Const $security_delegation = 196608
Global Const $security_effective_only = 524288
Global Const $security_identification = 65536
Global Const $security_impersonation = 131072
Global Const $sec_commit = 134217728
Global Const $sec_image = 16777216
Global Const $sec_large_pages = -2147483648
Global Const $sec_nocache = 268435456
Global Const $sec_reserve = 67108864
Global Const $sec_writecombine = 1073741824
Global Const $section_extend_size = 16
Global Const $section_map_execute = 8
Global Const $section_map_read = 4
Global Const $section_map_write = 2
Global Const $section_query = 1
Global Const $section_all_access = 2031647
Global Const $file_map_copy = 1
Global Const $file_map_execute = 32
Global Const $file_map_read = 4
Global Const $file_map_write = 2
Global Const $file_map_all_access = $section_all_access
Global Const $ddd_exact_match_on_remove = 4
Global Const $ddd_no_broadcast_system = 8
Global Const $ddd_raw_target_path = 1
Global Const $ddd_remove_definition = 2
Global Const $fsctl_allow_extended_dasd_io = 589955
Global Const $fsctl_create_or_get_object_id = 590016
Global Const $fsctl_create_usn_journal = 590055
Global Const $fsctl_delete_object_id = 589984
Global Const $fsctl_delete_reparse_point = 589996
Global Const $fsctl_delete_usn_journal = 590072
Global Const $fsctl_dismount_volume = 589856
Global Const $fsctl_dump_property_data = 589975
Global Const $fsctl_enable_upgrade = 622800
Global Const $fsctl_encryption_fsctl_io = 590043
Global Const $fsctl_enum_usn_data = 590003
Global Const $fsctl_extend_volume = 590064
Global Const $fsctl_filesystem_get_statistics = 589920
Global Const $fsctl_find_files_by_sid = 589967
Global Const $fsctl_get_compression = 589884
Global Const $fsctl_get_ntfs_file_record = 589928
Global Const $fsctl_get_ntfs_volume_data = 589924
Global Const $fsctl_get_object_id = 589980
Global Const $fsctl_get_reparse_point = 589992
Global Const $fsctl_get_retrieval_pointers = 589939
Global Const $fsctl_get_volume_bitmap = 589935
Global Const $fsctl_hsm_data = 639251
Global Const $fsctl_hsm_msg = 639240
Global Const $fsctl_invalidate_volumes = 589908
Global Const $fsctl_is_pathname_valid = 589868
Global Const $fsctl_is_volume_dirty = 589944
Global Const $fsctl_is_volume_mounted = 589864
Global Const $fsctl_lock_volume = 589848
Global Const $fsctl_mark_as_system_hive = 589903
Global Const $fsctl_mark_handle = 590076
Global Const $fsctl_mark_volume_dirty = 589872
Global Const $fsctl_move_file = 589940
Global Const $fsctl_opbatch_ack_close_pending = 589840
Global Const $fsctl_oplock_break_ack_no_2 = 589904
Global Const $fsctl_oplock_break_acknowledge = 589836
Global Const $fsctl_oplock_break_notify = 589844
Global Const $fsctl_query_allocated_ranges = 606415
Global Const $fsctl_query_fat_bpb = 589912
Global Const $fsctl_query_retrieval_pointers = 589883
Global Const $fsctl_query_usn_journal = 590068
Global Const $fsctl_read_file_usn_data = 590059
Global Const $fsctl_read_property_data = 589959
Global Const $fsctl_read_raw_encrypted = 590051
Global Const $fsctl_read_usn_journal = 590011
Global Const $fsctl_recall_file = 590103
Global Const $fsctl_request_batch_oplock = 589832
Global Const $fsctl_request_filter_oplock = 589916
Global Const $fsctl_request_oplock_level_1 = 589824
Global Const $fsctl_request_oplock_level_2 = 589828
Global Const $fsctl_security_id_check = 606391
Global Const $fsctl_set_compression = 639040
Global Const $fsctl_set_encryption = 590039
Global Const $fsctl_set_object_id = 589976
Global Const $fsctl_set_object_id_extended = 590012
Global Const $fsctl_set_reparse_point = 589988
Global Const $fsctl_set_sparse = 590020
Global Const $fsctl_set_zero_data = 622792
Global Const $fsctl_sis_copyfile = 590080
Global Const $fsctl_sis_link_files = 639236
Global Const $fsctl_unlock_volume = 589852
Global Const $fsctl_write_property_data = 589963
Global Const $fsctl_write_raw_encrypted = 590047
Global Const $fsctl_write_usn_close_record = 590063
Global Const $ioctl_aacs_end_session = 3363020
Global Const $ioctl_aacs_generate_binding_nonce = 3395824
Global Const $ioctl_aacs_get_certificate = 3363028
Global Const $ioctl_aacs_get_challenge_key = 3363032
Global Const $ioctl_aacs_read_binding_nonce = 3363052
Global Const $ioctl_aacs_read_media_id = 3363048
Global Const $ioctl_aacs_read_media_key_block = 3363012
Global Const $ioctl_aacs_read_media_key_block_size = 3363008
Global Const $ioctl_aacs_read_serial_number = 3363044
Global Const $ioctl_aacs_read_volume_id = 3363040
Global Const $ioctl_aacs_send_certificate = 3363024
Global Const $ioctl_aacs_send_challenge_key = 3363036
Global Const $ioctl_aacs_start_session = 3363016
Global Const $ioctl_ata_pass_through = 315436
Global Const $ioctl_ata_pass_through_direct = 315440
Global Const $ioctl_cdrom_check_verify = 149504
Global Const $ioctl_cdrom_disk_type = 131136
Global Const $ioctl_cdrom_eject_media = 149512
Global Const $ioctl_cdrom_find_new_devices = 149528
Global Const $ioctl_cdrom_get_configuration = 147544
Global Const $ioctl_cdrom_get_control = 147508
Global Const $ioctl_cdrom_get_drive_geometry = 147532
Global Const $ioctl_cdrom_get_drive_geometry_ex = 147536
Global Const $ioctl_cdrom_get_last_session = 147512
Global Const $ioctl_cdrom_get_volume = 147476
Global Const $ioctl_cdrom_load_media = 149516
Global Const $ioctl_cdrom_media_removal = 149508
Global Const $ioctl_cdrom_pause_audio = 147468
Global Const $ioctl_cdrom_play_audio_msf = 147480
Global Const $ioctl_cdrom_raw_read = 147518
Global Const $ioctl_cdrom_read_q_channel = 147500
Global Const $ioctl_cdrom_read_toc = 147456
Global Const $ioctl_cdrom_read_toc_ex = 147540
Global Const $ioctl_cdrom_release = 149524
Global Const $ioctl_cdrom_reserve = 149520
Global Const $ioctl_cdrom_resume_audio = 147472
Global Const $ioctl_cdrom_seek_audio_msf = 147460
Global Const $ioctl_cdrom_set_volume = 147496
Global Const $ioctl_cdrom_stop_audio = 147464
Global Const $ioctl_cdrom_unload_driver = 151560
Global Const $ioctl_disk_check_verify = 477184
Global Const $ioctl_disk_controller_number = 458820
Global Const $ioctl_disk_create_disk = 507992
Global Const $ioctl_disk_delete_drive_layout = 508160
Global Const $ioctl_disk_eject_media = 477192
Global Const $ioctl_disk_find_new_devices = 477208
Global Const $ioctl_disk_format_tracks = 507928
Global Const $ioctl_disk_format_tracks_ex = 507948
Global Const $ioctl_disk_get_cache_information = 475348
Global Const $ioctl_disk_get_drive_geometry = 458752
Global Const $ioctl_disk_get_drive_geometry_ex = 458912
Global Const $ioctl_disk_get_drive_layout = 475148
Global Const $ioctl_disk_get_drive_layout_ex = 458832
Global Const $ioctl_disk_get_length_info = 475228
Global Const $ioctl_disk_get_media_types = 461824
Global Const $ioctl_disk_get_partition_info = 475140
Global Const $ioctl_disk_get_partition_info_ex = 458824
Global Const $ioctl_disk_get_write_cache_state = 475356
Global Const $ioctl_disk_grow_partition = 508112
Global Const $ioctl_disk_histogram_data = 458804
Global Const $ioctl_disk_histogram_reset = 458808
Global Const $ioctl_disk_histogram_structure = 458800
Global Const $ioctl_disk_internal_clear_verify = 459783
Global Const $ioctl_disk_internal_set_notify = 459784
Global Const $ioctl_disk_internal_set_verify = 459779
Global Const $ioctl_disk_is_writable = 458788
Global Const $ioctl_disk_load_media = 477196
Global Const $ioctl_disk_logging = 458792
Global Const $ioctl_disk_media_removal = 477188
Global Const $ioctl_disk_performance = 458784
Global Const $ioctl_disk_performance_off = 458848
Global Const $ioctl_disk_reassign_blocks = 507932
Global Const $ioctl_disk_release = 477204
Global Const $ioctl_disk_request_data = 458816
Global Const $ioctl_disk_request_structure = 458812
Global Const $ioctl_disk_reserve = 477200
Global Const $ioctl_disk_set_cache_information = 508120
Global Const $ioctl_disk_set_drive_layout = 507920
Global Const $ioctl_disk_set_drive_layout_ex = 507988
Global Const $ioctl_disk_set_partition_info = 507912
Global Const $ioctl_disk_set_partition_info_ex = 507980
Global Const $ioctl_disk_update_drive_size = 508104
Global Const $ioctl_disk_update_properties = 459072
Global Const $ioctl_disk_verify = 458772
Global Const $ioctl_dvd_end_session = 3362828
Global Const $ioctl_dvd_get_region = 3362836
Global Const $ioctl_dvd_read_key = 3362820
Global Const $ioctl_dvd_read_structure = 3363136
Global Const $ioctl_dvd_send_key = 3362824
Global Const $ioctl_dvd_send_key2 = 3395608
Global Const $ioctl_dvd_set_read_ahead = 3362832
Global Const $ioctl_dvd_start_session = 3362816
Global Const $ioctl_mountdev_link_created = 5046288
Global Const $ioctl_mountdev_link_deleted = 5046292
Global Const $ioctl_mountdev_query_stable_guid = 5046296
Global Const $ioctl_mountdev_query_suggested_link_name = 5046284
Global Const $ioctl_mountdev_query_unique_id = 5046272
Global Const $ioctl_mountdev_unique_id_change_notify = 5046276
Global Const $ioctl_mountmgr_auto_dl_assignments = 7192596
Global Const $ioctl_mountmgr_change_notify = 7159840
Global Const $ioctl_mountmgr_check_unprocessed_volumes = 7159848
Global Const $ioctl_mountmgr_create_point = 7192576
Global Const $ioctl_mountmgr_delete_points = 7192580
Global Const $ioctl_mountmgr_delete_points_dbonly = 7192588
Global Const $ioctl_mountmgr_keep_links_when_offline = 7192612
Global Const $ioctl_mountmgr_next_drive_letter = 7192592
Global Const $ioctl_mountmgr_query_dos_volume_path = 7143472
Global Const $ioctl_mountmgr_query_dos_volume_paths = 7143476
Global Const $ioctl_mountmgr_query_points = 7143432
Global Const $ioctl_mountmgr_volume_arrival_notification = 7159852
Global Const $ioctl_mountmgr_volume_mount_point_created = 7192600
Global Const $ioctl_mountmgr_volume_mount_point_deleted = 7192604
Global Const $ioctl_scsi_get_inquiry_data = 266252
Global Const $ioctl_scsi_get_capabilities = 266256
Global Const $ioctl_scsi_get_address = 266264
Global Const $ioctl_scsi_miniport = 315400
Global Const $ioctl_scsi_pass_through = 315396
Global Const $ioctl_scsi_pass_through_direct = 315412
Global Const $ioctl_scsi_rescan_bus = 266268
Global Const $ioctl_storage_break_reservation = 2969620
Global Const $ioctl_storage_check_verify = 2967552
Global Const $ioctl_storage_check_verify2 = 2951168
Global Const $ioctl_storage_eject_media = 2967560
Global Const $ioctl_storage_ejection_control = 2951488
Global Const $ioctl_storage_find_new_devices = 2967576
Global Const $ioctl_storage_get_device_number = 2953344
Global Const $ioctl_storage_get_hotplug_info = 2952212
Global Const $ioctl_storage_get_media_serial_number = 2952208
Global Const $ioctl_storage_get_media_types = 2952192
Global Const $ioctl_storage_get_media_types_ex = 2952196
Global Const $ioctl_storage_load_media = 2967564
Global Const $ioctl_storage_load_media2 = 2951180
Global Const $ioctl_storage_manage_data_set_attributes = 2987012
Global Const $ioctl_storage_mcn_control = 2951492
Global Const $ioctl_storage_media_removal = 2967556
Global Const $ioctl_storage_persistent_reserve_in = 2969624
Global Const $ioctl_storage_persistent_reserve_out = 2969628
Global Const $ioctl_storage_predict_failure = 2953472
Global Const $ioctl_storage_query_property = 2954240
Global Const $ioctl_storage_release = 2967572
Global Const $ioctl_storage_reserve = 2967568
Global Const $ioctl_storage_reset_bus = 2969600
Global Const $ioctl_storage_reset_device = 2969604
Global Const $ioctl_storage_set_hotplug_info = 3001368
Global Const $ioctl_storage_set_read_ahead = 2966528
Global Const $ioctl_volume_get_gpt_attributes = 5636152
Global Const $ioctl_volume_get_volume_disk_extents = 5636096
Global Const $ioctl_volume_is_clustered = 5636144
Global Const $ioctl_volume_is_io_capable = 5636116
Global Const $ioctl_volume_is_offline = 5636112
Global Const $ioctl_volume_is_partition = 5636136
Global Const $ioctl_volume_logical_to_physical = 5636128
Global Const $ioctl_volume_offline = 5685260
Global Const $ioctl_volume_online = 5685256
Global Const $ioctl_volume_physical_to_logical = 5636132
Global Const $ioctl_volume_query_failover_set = 5636120
Global Const $ioctl_volume_query_volume_number = 5636124
Global Const $ioctl_volume_read_plex = 5652526
Global Const $ioctl_volume_set_gpt_attributes = 5636148
Global Const $ioctl_volume_supports_online_offline = 5636100
Global Const $smart_get_version = 475264
Global Const $smart_rcv_drive_data = 508040
Global Const $smart_send_drive_command = 508036
Global Const $file_encryptable = 0
Global Const $file_is_encrypted = 1
Global Const $file_read_only = 8
Global Const $file_root_dir = 3
Global Const $file_system_attr = 2
Global Const $file_system_dir = 4
Global Const $file_system_not_support = 6
Global Const $file_unknown = 5
Global Const $file_user_disallowed = 7
Global Const $scs_32bit_binary = 0
Global Const $scs_64bit_binary = 6
Global Const $scs_dos_binary = 1
Global Const $scs_os216_binary = 5
Global Const $scs_pif_binary = 3
Global Const $scs_posix_binary = 4
Global Const $scs_wow_binary = 2
Global Const $drive_bus_type_unknown = 0
Global Const $drive_bus_type_scsi = 1
Global Const $drive_bus_type_atapi = 2
Global Const $drive_bus_type_ata = 3
Global Const $drive_bus_type_1394 = 4
Global Const $drive_bus_type_ssa = 5
Global Const $drive_bus_type_fibre = 6
Global Const $drive_bus_type_usb = 7
Global Const $drive_bus_type_raid = 8
Global Const $drive_bus_type_iscsi = 9
Global Const $drive_bus_type_sas = 10
Global Const $drive_bus_type_sata = 11
Global Const $drive_bus_type_sd = 12
Global Const $drive_bus_type_mmc = 13
Global Const $drive_unknown = 0
Global Const $drive_no_root_dir = 1
Global Const $drive_removable = 2
Global Const $drive_fixed = 3
Global Const $drive_remote = 4
Global Const $drive_cdrom = 5
Global Const $drive_ramdisk = 6
Global Const $file_type_char = 2
Global Const $file_type_disk = 1
Global Const $file_type_pipe = 3
Global Const $file_type_remote = 32768
Global Const $file_type_unknown = 0
Global Const $file_name_normalized = 0
Global Const $file_name_opened = 8
Global Const $volume_name_dos = 0
Global Const $volume_name_guid = 1
Global Const $volume_name_none = 4
Global Const $volume_name_nt = 2
Global Const $image_file_machine_unknown = 0
Global Const $image_file_machine_am33 = 467
Global Const $image_file_machine_amd64 = 34404
Global Const $image_file_machine_arm = 448
Global Const $image_file_machine_ebc = 3772
Global Const $image_file_machine_i386 = 332
Global Const $image_file_machine_ia64 = 512
Global Const $image_file_machine_m32r = 36929
Global Const $image_file_machine_mips16 = 614
Global Const $image_file_machine_mipsfpu = 870
Global Const $image_file_machine_mipsfpu16 = 1126
Global Const $image_file_machine_powerpc = 496
Global Const $image_file_machine_powerpcfp = 497
Global Const $image_file_machine_r4000 = 358
Global Const $image_file_machine_sh3 = 418
Global Const $image_file_machine_sh3dsp = 419
Global Const $image_file_machine_sh4 = 422
Global Const $image_file_machine_sh5 = 424
Global Const $image_file_machine_thumb = 450
Global Const $image_file_machine_wcemipsv2 = 361
Global Const $file_case_preserved_names = 2
Global Const $file_case_sensitive_search = 1
Global Const $file_file_compression = 16
Global Const $file_named_streams = 262144
Global Const $file_persistent_acls = 8
Global Const $file_read_only_volume = 524288
Global Const $file_sequential_write_once = 1048576
Global Const $file_supports_encryption = 131072
Global Const $file_supports_extended_attributes = 8388608
Global Const $file_supports_hard_links = 4194304
Global Const $file_supports_object_ids = 65536
Global Const $file_supports_open_by_file_id = 16777216
Global Const $file_supports_reparse_points = 128
Global Const $file_supports_sparse_files = 64
Global Const $file_supports_transactions = 2097152
Global Const $file_supports_usn_journal = 33554432
Global Const $file_unicode_on_disk = 4
Global Const $file_volume_is_compressed = 32768
Global Const $file_volume_quotas = 32
Global Const $file_device_8042_port = 39
Global Const $file_device_acpi = 50
Global Const $file_device_battery = 41
Global Const $file_device_beep = 1
Global Const $file_device_bus_extender = 42
Global Const $file_device_cd_rom = 2
Global Const $file_device_cd_rom_file_system = 3
Global Const $file_device_changer = 48
Global Const $file_device_controller = 4
Global Const $file_device_datalink = 5
Global Const $file_device_dfs = 6
Global Const $file_device_dfs_file_system = 53
Global Const $file_device_dfs_volume = 54
Global Const $file_device_disk = 7
Global Const $file_device_disk_file_system = 8
Global Const $file_device_dvd = 51
Global Const $file_device_file_system = 9
Global Const $file_device_fips = 58
Global Const $file_device_fullscreen_video = 52
Global Const $file_device_inport_port = 10
Global Const $file_device_keyboard = 11
Global Const $file_device_ks = 47
Global Const $file_device_ksec = 57
Global Const $file_device_mailslot = 12
Global Const $file_device_mass_storage = 45
Global Const $file_device_midi_in = 13
Global Const $file_device_midi_out = 14
Global Const $file_device_modem = 43
Global Const $file_device_mouse = 15
Global Const $file_device_multi_unc_provider = 16
Global Const $file_device_named_pipe = 17
Global Const $file_device_network = 18
Global Const $file_device_network_browser = 19
Global Const $file_device_network_file_system = 20
Global Const $file_device_network_redirector = 40
Global Const $file_device_null = 21
Global Const $file_device_parallel_port = 22
Global Const $file_device_physical_netcard = 23
Global Const $file_device_printer = 24
Global Const $file_device_scanner = 25
Global Const $file_device_screen = 28
Global Const $file_device_serenum = 55
Global Const $file_device_serial_mouse_port = 26
Global Const $file_device_serial_port = 27
Global Const $file_device_smartcard = 49
Global Const $file_device_smb = 46
Global Const $file_device_sound = 29
Global Const $file_device_streams = 30
Global Const $file_device_tape = 31
Global Const $file_device_tape_file_system = 32
Global Const $file_device_termsrv = 56
Global Const $file_device_transport = 33
Global Const $file_device_unknown = 34
Global Const $file_device_vdm = 44
Global Const $file_device_video = 35
Global Const $file_device_virtual_disk = 36
Global Const $file_device_wave_in = 37
Global Const $file_device_wave_out = 38
Global Const $file_any_access = 0
Global Const $file_special_access = $file_any_access
Global Const $file_read_access = 1
Global Const $file_write_access = 2
Global Const $method_buffered = 0
Global Const $method_in_direct = 1
Global Const $method_out_direct = 2
Global Const $method_neither = 3
Global Const $file_notify_change_file_name = 1
Global Const $file_notify_change_dir_name = 2
Global Const $file_notify_change_attributes = 4
Global Const $file_notify_change_size = 8
Global Const $file_notify_change_last_write = 16
Global Const $file_notify_change_last_access = 32
Global Const $file_notify_change_creation = 64
Global Const $file_notify_change_security = 256
Global Const $file_action_added = 1
Global Const $file_action_removed = 2
Global Const $file_action_modified = 3
Global Const $file_action_renamed_old_name = 4
Global Const $file_action_renamed_new_name = 5
Global Const $replacefile_write_through = 1
Global Const $replacefile_ignore_merge_errors = 2
Global Const $replacefile_ignore_acl_errors = 4
Global Const $base_search_path_enable_safe_searchmode = 1
Global Const $base_search_path_disable_safe_searchmode = 65536
Global Const $base_search_path_permanent = 32768
Global Const $snd_application = 128
Global Const $snd_alias = 65536
Global Const $snd_alias_id = 1114112
Global Const $snd_async = 1
Global Const $snd_filename = 131072
Global Const $snd_loop = 8
Global Const $snd_memory = 4
Global Const $snd_nodefault = 2
Global Const $snd_nostop = 16
Global Const $snd_nowait = 8192
Global Const $snd_purge = 64
Global Const $snd_resource = 262148
Global Const $snd_sentry = 524288
Global Const $snd_sync = 0
Global Const $snd_system = 2097152
Global Const $snd_system_nostop = 2097168
Global Const $snd_alias_systemasterisk = "SystemAsterisk"
Global Const $snd_alias_systemdefault = "SystemDefault"
Global Const $snd_alias_systemexclamation = "SystemExclamation"
Global Const $snd_alias_systemexit = "SystemExit"
Global Const $snd_alias_systemhand = "SystemHand"
Global Const $snd_alias_systemquestion = "SystemQuestion"
Global Const $snd_alias_systemstart = "SystemStart"
Global Const $snd_alias_systemwelcome = "SystemWelcome"
#Region Global Variables and Constants
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_chartooem($sstr)
		Local $aret = DllCall("user32.dll", "bool", "CharToOemW", "wstr", $sstr, "wstr", "")
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_copystruct($tstruct, $sstruct = "")
		Local $isize = DllStructGetSize($tstruct)
		If NOT $isize Then Return SetError(1, 0, 0)
		Local $tresult
		If NOT StringStripWS($sstruct, $str_stripleading + $str_striptrailing + $str_stripspaces) Then
			$tresult = DllStructCreate("byte[" & $isize & "]")
		Else
			$tresult = DllStructCreate($sstruct)
		EndIf
		If DllStructGetSize($tresult) < $isize Then Return SetError(2, 0, 0)
		_winapi_movememory($tresult, $tstruct, $isize)
		Return $tresult
	EndFunc

	Func _winapi_dwordtofloat($ivalue)
		Local $tdword = DllStructCreate("dword")
		Local $tfloat = DllStructCreate("float", DllStructGetPtr($tdword))
		DllStructSetData($tdword, 1, $ivalue)
		Return DllStructGetData($tfloat, 1)
	EndFunc

	Func _winapi_dwordtoint($ivalue)
		Local $tdata = DllStructCreate("int")
		DllStructSetData($tdata, 1, $ivalue)
		Return DllStructGetData($tdata, 1)
	EndFunc

	Func _winapi_floattodword($ivalue)
		Local $tfloat = DllStructCreate("float")
		Local $tdword = DllStructCreate("dword", DllStructGetPtr($tfloat))
		DllStructSetData($tfloat, 1, $ivalue)
		Return DllStructGetData($tdword, 1)
	EndFunc

	Func _winapi_getextended()
		Return $__g_vext
	EndFunc

	Func _winapi_hashdata($pmemory, $isize, $ilength = 32)
		If ($ilength <= 0) OR ($ilength > 256) Then Return SetError(11, 0, 0)
		Local $tdata = DllStructCreate("byte[" & $ilength & "]")
		Local $aret = DllCall("shlwapi.dll", "uint", "HashData", "struct*", $pmemory, "dword", $isize, "struct*", $tdata, "dword", $ilength)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return DllStructGetData($tdata, 1)
	EndFunc

	Func _winapi_hashstring($sstring, $bcasesensitive = True, $ilength = 32)
		Local $ilengths = StringLen($sstring)
		If NOT $ilengths OR ($ilength > 256) Then Return SetError(12, 0, 0)
		Local $tstring = DllStructCreate("wchar[" & ($ilengths + 1) & "]")
		If NOT $bcasesensitive Then
			$sstring = StringLower($sstring)
		EndIf
		DllStructSetData($tstring, 1, $sstring)
		Local $shash = _winapi_hashdata($tstring, 2 * $ilengths, $ilength)
		If @error Then Return SetError(@error, @extended, 0)
		Return $shash
	EndFunc

	Func _winapi_hibyte($ivalue)
		Return BitAND(BitShift($ivalue, 8), 255)
	EndFunc

	Func _winapi_hidword($ivalue)
		Local $tint64 = DllStructCreate("int64")
		Local $tqword = DllStructCreate("dword;dword", DllStructGetPtr($tint64))
		DllStructSetData($tint64, 1, $ivalue)
		Return DllStructGetData($tqword, 2)
	EndFunc

	Func _winapi_inttodword($ivalue)
		Local $tdata = DllStructCreate("dword")
		DllStructSetData($tdata, 1, $ivalue)
		Return DllStructGetData($tdata, 1)
	EndFunc

	Func _winapi_lobyte($ivalue)
		Return BitAND($ivalue, 255)
	EndFunc

	Func _winapi_lodword($ivalue)
		Local $tint64 = DllStructCreate("int64")
		Local $tqword = DllStructCreate("dword;dword", DllStructGetPtr($tint64))
		DllStructSetData($tint64, 1, $ivalue)
		Return DllStructGetData($tqword, 1)
	EndFunc

	Func _winapi_longmid($ivalue, $istart, $icount)
		Return BitAND(BitShift($ivalue, $istart), BitOR(BitShift(BitShift(2147483647, 32 - ($icount + 1)), 1), BitShift(1, -($icount - 1))))
	EndFunc

	Func _winapi_makeword($ilo, $ihi)
		Local $tword = DllStructCreate("ushort")
		Local $tbyte = DllStructCreate("byte;byte", DllStructGetPtr($tword))
		DllStructSetData($tbyte, 1, $ihi)
		DllStructSetData($tbyte, 2, $ilo)
		Return DllStructGetData($tword, 1)
	EndFunc

	Func _winapi_oemtochar($sstr)
		Local $aret = DllCall("user32.dll", "bool", "OemToChar", "str", $sstr, "str", "")
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_playsound($ssound, $iflags = $snd_system_nostop, $hinstance = 0)
		Local $stypeofsound = "ptr"
		If $ssound Then
			If IsString($ssound) Then
				$stypeofsound = "wstr"
			EndIf
		Else
			$ssound = 0
			$iflags = 0
		EndIf
		Local $aret = DllCall("winmm.dll", "bool", "PlaySoundW", $stypeofsound, $ssound, "handle", $hinstance, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_shorttoword($ivalue)
		Return BitAND($ivalue, 65535)
	EndFunc

	Func _winapi_strformatbytesize($isize)
		Local $aret = DllCall("shlwapi.dll", "ptr", "StrFormatByteSizeW", "int64", $isize, "wstr", "", "uint", 1024)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_strformatbytesizeex($isize)
		Local $asymbol = DllCall("kernel32.dll", "int", "GetLocaleInfoW", "dword", 1024, "dword", 15, "wstr", "", "int", 2048)
		If @error Then Return SetError(@error + 10, @extended, "")
		Local $ssize = _winapi_strformatbytesize(0)
		If @error Then Return SetError(@error, @extended, "")
		Return StringReplace($ssize, "0", StringRegExpReplace(Number($isize), "(?<=\d)(?=(\d{3})+\z)", $asymbol[3]))
	EndFunc

	Func _winapi_strformatkbsize($isize)
		Local $aret = DllCall("shlwapi.dll", "ptr", "StrFormatKBSizeW", "int64", $isize, "wstr", "", "uint", 1024)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_strfromtimeinterval($itime, $idigits = 7)
		Local $aret = DllCall("shlwapi.dll", "int", "StrFromTimeIntervalW", "wstr", "", "uint", 1024, "dword", $itime, "int", $idigits)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return StringStripWS($aret[1], $str_stripleading + $str_striptrailing)
	EndFunc

	Func _winapi_unionstruct($tstruct1, $tstruct2, $sstruct = "")
		Local $asize[2] = [DllStructGetSize($tstruct1), DllStructGetSize($tstruct2)]
		If NOT $asize[0] OR NOT $asize[1] Then Return SetError(1, 0, 0)
		Local $tresult
		If NOT StringStripWS($sstruct, $str_stripleading + $str_striptrailing + $str_stripspaces) Then
			$tresult = DllStructCreate("byte[" & ($asize[0] + $asize[1]) & "]")
		Else
			$tresult = DllStructCreate($sstruct)
		EndIf
		If DllStructGetSize($tresult) < ($asize[0] + $asize[1]) Then Return SetError(2, 0, 0)
		_winapi_movememory($tresult, $tstruct1, $asize[0])
		_winapi_movememory(DllStructGetPtr($tresult) + $asize[0], $tstruct2, $asize[1])
		Return $tresult
	EndFunc

	Func _winapi_wordtoshort($ivalue)
		If BitAND($ivalue, 32768) Then
			Return BitOR($ivalue, -32768)
		EndIf
		Return BitAND($ivalue, 32767)
	EndFunc

#EndRegion Public Functions
Global Const $url_scheme_invalid = -1
Global Const $url_scheme_unknown = 0
Global Const $url_scheme_ftp = 1
Global Const $url_scheme_http = 2
Global Const $url_scheme_gopher = 3
Global Const $url_scheme_mailto = 4
Global Const $url_scheme_news = 5
Global Const $url_scheme_nntp = 6
Global Const $url_scheme_telnet = 7
Global Const $url_scheme_wais = 8
Global Const $url_scheme_file = 9
Global Const $url_scheme_mk = 10
Global Const $url_scheme_https = 11
Global Const $url_scheme_shell = 12
Global Const $url_scheme_snews = 13
Global Const $url_scheme_local = 14
Global Const $url_scheme_javascript = 15
Global Const $url_scheme_vbscript = 16
Global Const $url_scheme_about = 17
Global Const $url_scheme_res = 18
Global Const $url_scheme_msshellrooted = 19
Global Const $url_scheme_msshellidlist = 20
Global Const $url_scheme_mshelp = 21
Global Const $url_scheme_msshelldevice = 22
Global Const $url_scheme_wildcard = 23
Global Const $url_scheme_search_ms = 24
Global Const $url_scheme_search = 25
Global Const $url_scheme_knownfolder = 26
Global Const $gct_invalid = 0
Global Const $gct_lfnchar = 1
Global Const $gct_separator = 8
Global Const $gct_shortchar = 2
Global Const $gct_wild = 4
Global Const $url_apply_default = 1
Global Const $url_apply_guessscheme = 2
Global Const $url_apply_guessfile = 4
Global Const $url_apply_forceapply = 8
Global Const $url_dont_simplify = 134217728
Global Const $url_escape_as_utf8 = 262144
Global Const $url_escape_percent = 4096
Global Const $url_escape_spaces_only = 67108864
Global Const $url_escape_unsafe = 536870912
Global Const $url_no_meta = 134217728
Global Const $url_pluggable_protocol = 1073741824
Global Const $url_unescape = 268435456
Global Const $url_part_hostname = 2
Global Const $url_part_password = 4
Global Const $url_part_port = 5
Global Const $url_part_query = 6
Global Const $url_part_scheme = 1
Global Const $url_part_username = 3
Global Const $urlis_appliable = 4
Global Const $urlis_directory = 5
Global Const $urlis_fileurl = 3
Global Const $urlis_hasquery = 6
Global Const $urlis_nohistory = 2
Global Const $urlis_opaque = 1
Global Const $urlis_url = 0
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_commandlinetoargv($scmd)
		Local $aresult[1] = [0]
		$scmd = StringStripWS($scmd, $str_stripleading + $str_striptrailing)
		If NOT $scmd Then
			Return $aresult
		EndIf
		Local $aret = DllCall("shell32.dll", "ptr", "CommandLineToArgvW", "wstr", $scmd, "int*", 0)
		If @error OR NOT $aret[0] OR (NOT $aret[2]) Then Return SetError(@error + 10, @extended, 0)
		Local $tptr = DllStructCreate("ptr[" & $aret[2] & "]", $aret[0])
		Dim $aresult[$aret[2] + 1] = [$aret[2]]
		For $i = 1 To $aret[2]
			$aresult[$i] = _winapi_getstring(DllStructGetData($tptr, 1, $i))
		Next
		DllCall("kernel32.dll", "handle", "LocalFree", "handle", $aret[0])
		Return $aresult
	EndFunc

	Func _winapi_isnameinexpression($sstring, $spattern, $bcasesensitive = False)
		If NOT $bcasesensitive Then $spattern = StringUpper($spattern)
		Local $tus1 = __us($spattern)
		Local $tus2 = __us($sstring)
		Local $aret = DllCall("ntdll.dll", "boolean", "RtlIsNameInExpression", "struct*", $tus1, "struct*", $tus2, "boolean", NOT $bcasesensitive, "ptr", 0)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_parseurl($surl)
		Local $tagparsedurl = "dword Size;ptr Protocol;uint cchProtocol;ptr Suffix;uint cchSuffix;uint Scheme"
		Local $tpurl = DllStructCreate($tagparsedurl)
		DllStructSetData($tpurl, 1, DllStructGetSize($tpurl))
		Local $turl = DllStructCreate("wchar[4096]")
		DllStructSetData($turl, 1, $surl)
		Local $aret = DllCall("shlwapi.dll", "long", "ParseURLW", "struct*", $turl, "struct*", $tpurl)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Local $aresult[3]
		$aresult[0] = DllStructGetData(DllStructCreate("wchar[" & DllStructGetData($tpurl, 3) & "]", DllStructGetData($tpurl, 2)), 1)
		$aresult[1] = DllStructGetData(DllStructCreate("wchar[" & DllStructGetData($tpurl, 5) & "]", DllStructGetData($tpurl, 4)), 1)
		$aresult[2] = DllStructGetData($tpurl, 6)
		Return $aresult
	EndFunc

	Func _winapi_parseusername($suser)
		If NOT __dll("credui.dll") Then Return SetError(103, 0, 0)
		Local $aret = DllCall("credui.dll", "dword", "CredUIParseUserNameW", "wstr", $suser, "wstr", "", "ulong", 4096, "wstr", "", "ulong", 4096)
		If @error Then Return SetError(@error, @extended, 0)
		Switch $aret[0]
			Case 0
			Case 1315
				If StringStripWS($suser, $str_stripleading + $str_striptrailing) Then
					$aret[2] = $suser
					$aret[4] = ""
				Else
					ContinueCase
				EndIf
			Case Else
				Return SetError(10, $aret[0], 0)
		EndSwitch
		Local $aresult[2]
		$aresult[0] = $aret[4]
		$aresult[1] = $aret[2]
		Return $aresult
	EndFunc

	Func _winapi_pathaddbackslash($sfilepath)
		Local $tpath = DllStructCreate("wchar[260]")
		DllStructSetData($tpath, 1, $sfilepath)
		Local $aret = DllCall("shlwapi.dll", "ptr", "PathAddBackslashW", "struct*", $tpath)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return DllStructGetData($tpath, 1)
	EndFunc

	Func _winapi_pathaddextension($sfilepath, $sext = "")
		Local $tpath = DllStructCreate("wchar[260]")
		DllStructSetData($tpath, 1, $sfilepath)
		Local $stypeofext = "wstr"
		If NOT StringStripWS($sext, $str_stripleading + $str_striptrailing) Then
			$stypeofext = "ptr"
			$sext = 0
		EndIf
		Local $aret = DllCall("shlwapi.dll", "bool", "PathAddExtensionW", "struct*", $tpath, $stypeofext, $sext)
		If @error Then Return SetError(@error, @extended, "")
		Return SetExtended($aret[0], DllStructGetData($tpath, 1))
	EndFunc

	Func _winapi_pathappend($sfilepath, $smore)
		Local $tpath = DllStructCreate("wchar[260]")
		DllStructSetData($tpath, 1, $sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathAppendW", "struct*", $tpath, "wstr", $smore)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return DllStructGetData($tpath, 1)
	EndFunc

	Func _winapi_pathbuildroot($idrive)
		Local $aret = DllCall("shlwapi.dll", "ptr", "PathBuildRootW", "wstr", "", "int", $idrive)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_pathcanonicalize($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathCanonicalizeW", "wstr", "", "wstr", $sfilepath)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, $sfilepath)
		Return $aret[1]
	EndFunc

	Func _winapi_pathcommonprefix($spath1, $spath2)
		Local $aret = DllCall("shlwapi.dll", "int", "PathCommonPrefixW", "wstr", $spath1, "wstr", $spath2, "wstr", "")
		If @error Then Return SetError(@error, @extended, "")
		Return SetExtended($aret[0], $aret[3])
	EndFunc

	Func _winapi_pathcompactpath($hwnd, $sfilepath, $iwidth = 0)
		If $iwidth < 1 Then
			Local $trect = DllStructCreate($tagrect)
			DllCall("user32.dll", "bool", "GetClientRect", "hwnd", $hwnd, "struct*", $trect)
			$iwidth += DllStructGetData($trect, "Right") - DllStructGetData($trect, "Left")
		EndIf
		Local $aret = DllCall("user32.dll", "handle", "GetDC", "hwnd", $hwnd)
		If @error OR NOT $aret[0] Then Return SetError(@error + 20, @extended, $sfilepath)
		Local $hdc = $aret[0]
		Local Const $wm_getfont = 49
		$aret = DllCall("user32.dll", "ptr", "SendMessage", "hwnd", $hwnd, "uint", $wm_getfont, "wparam", 0, "lparam", 0)
		Local $hback = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdc, "handle", $aret[0])
		Local $ierror = 0
		$aret = DllCall("shlwapi.dll", "bool", "PathCompactPathW", "handle", $hdc, "wstr", $sfilepath, "int", $iwidth)
		If @error OR NOT $aret[0] Then $ierror = @error + 10
		DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdc, "handle", $hback[0])
		DllCall("user32.dll", "int", "ReleaseDC", "hwnd", $hwnd, "handle", $hdc)
		If $ierror Then Return SetError($ierror, 0, $sfilepath)
		Return $aret[2]
	EndFunc

	Func _winapi_pathcompactpathex($sfilepath, $imax)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathCompactPathExW", "wstr", "", "wstr", $sfilepath, "uint", $imax + 1, "dword", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, $sfilepath)
		Return $aret[1]
	EndFunc

	Func _winapi_pathcreatefromurl($surl)
		Local $aret = DllCall("shlwapi.dll", "long", "PathCreateFromUrlW", "wstr", $surl, "wstr", "", "dword*", 4096, "dword", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[2]
	EndFunc

	Func _winapi_pathfindextension($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "wstr", "PathFindExtensionW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[0]
	EndFunc

	Func _winapi_pathfindfilename($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "wstr", "PathFindFileNameW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, $sfilepath)
		Return $aret[0]
	EndFunc

	Func _winapi_pathfindnextcomponent($sfilepath)
		Local $tpath = DllStructCreate("wchar[" & (StringLen($sfilepath) + 1) & "]")
		DllStructSetData($tpath, 1, $sfilepath)
		Local $aret = DllCall("shlwapi.dll", "ptr", "PathFindNextComponentW", "struct*", $tpath)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return _winapi_getstring($aret[0])
	EndFunc

	Func _winapi_pathgetargs($sfilepath)
		Local $tpath = DllStructCreate("wchar[" & (StringLen($sfilepath) + 1) & "]")
		DllStructSetData($tpath, 1, $sfilepath)
		Local $aret = DllCall("shlwapi.dll", "ptr", "PathGetArgsW", "struct*", $tpath)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return _winapi_getstring($aret[0])
	EndFunc

	Func _winapi_pathgetchartype($schar)
		Local $aret = DllCall("shlwapi.dll", "uint", "PathGetCharTypeW", "word", AscW($schar))
		If @error Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_pathgetdrivenumber($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "int", "PathGetDriveNumberW", "wstr", $sfilepath)
		If @error OR ($aret[0] = -1) Then Return SetError(@error, @extended, "")
		Return Chr($aret[0] + 65) & ":"
	EndFunc

	Func _winapi_pathiscontenttype($sfilepath, $stype)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsContentTypeW", "wstr", $sfilepath, "wstr", $stype)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathisexe($sfilepath)
		Local $aret = DllCall("shell32.dll", "bool", "PathIsExe", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathisfilespec($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsFileSpecW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathislfnfilespec($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsLFNFileSpecW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathisrelative($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsRelativeW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathisroot($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsRootW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathissameroot($spath1, $spath2)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsSameRootW", "wstr", $spath1, "wstr", $spath2)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathissystemfolder($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsSystemFolderW", "wstr", $sfilepath, "dword", 0)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathisunc($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsUNCW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathisuncserver($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsUNCServerW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathisuncservershare($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsUNCServerShareW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathmakesystemfolder($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathMakeSystemFolderW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathmatchspec($sfilepath, $sspec)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathMatchSpecW", "wstr", $sfilepath, "wstr", $sspec)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathparseiconlocation($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "int", "PathParseIconLocationW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, 0)
		Local $aresult[2]
		$aresult[0] = $aret[1]
		$aresult[1] = $aret[0]
		Return $aresult
	EndFunc

	Func _winapi_pathrelativepathto($spathfrom, $bdirfrom, $spathto, $bdirto)
		If $bdirfrom Then
			$bdirfrom = 16
		EndIf
		If $bdirto Then
			$bdirto = 16
		EndIf
		Local $aret = DllCall("shlwapi.dll", "bool", "PathRelativePathToW", "wstr", "", "wstr", $spathfrom, "dword", $bdirfrom, "wstr", $spathto, "dword", $bdirto)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_pathremoveargs($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "none", "PathRemoveArgsW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_pathremovebackslash($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "ptr", "PathRemoveBackslashW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_pathremoveextension($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "none", "PathRemoveExtensionW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_pathremovefilespec($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathRemoveFileSpecW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, "")
		Return SetExtended($aret[0], $aret[1])
	EndFunc

	Func _winapi_pathrenameextension($sfilepath, $sext)
		Local $tpath = DllStructCreate("wchar[260]")
		DllStructSetData($tpath, 1, $sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathRenameExtensionW", "struct*", $tpath, "wstr", $sext)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return DllStructGetData($tpath, 1)
	EndFunc

	Func _winapi_pathsearchandqualify($sfilepath, $bexists = False)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathSearchAndQualifyW", "wstr", $sfilepath, "wstr", "", "int", 4096)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		If $bexists AND NOT FileExists($aret[2]) Then Return SetError(20, 0, "")
		Return $aret[2]
	EndFunc

	Func _winapi_pathskiproot($sfilepath)
		Local $tpath = DllStructCreate("wchar[" & (StringLen($sfilepath) + 1) & "]")
		DllStructSetData($tpath, 1, $sfilepath)
		Local $aret = DllCall("shlwapi.dll", "ptr", "PathSkipRootW", "struct*", $tpath)
		If @error Then Return SetError(@error, @extended, "")
		If NOT $aret[0] Then Return $sfilepath
		Return _winapi_getstring($aret[0])
	EndFunc

	Func _winapi_pathstrippath($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "none", "PathStripPathW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_pathstriptoroot($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathStripToRootW", "wstr", $sfilepath)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_pathundecorate($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "none", "PathUndecorateW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_pathunexpandenvstrings($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathUnExpandEnvStringsW", "wstr", $sfilepath, "wstr", "", "uint", 4096)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_pathunmakesystemfolder($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathUnmakeSystemFolderW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathunquotespaces($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "none", "PathUnquoteSpacesW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_pathyetanothermakeuniquename($sfilepath)
		Local $aret = DllCall("shell32.dll", "int", "PathYetAnotherMakeUniqueName", "wstr", "", "wstr", $sfilepath, "ptr", 0, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_shellgetimagelist($bsmall = False)
		Local $plarge, $psmall, $tptr = DllStructCreate("ptr")
		If $bsmall Then
			$plarge = 0
			$psmall = DllStructGetPtr($tptr)
		Else
			$plarge = DllStructGetPtr($tptr)
			$psmall = 0
		EndIf
		Local $aret = DllCall("shell32.dll", "int", "Shell_GetImageLists", "ptr", $plarge, "ptr", $psmall)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return DllStructGetData($tptr, 1)
	EndFunc

	Func _winapi_urlapplyscheme($surl, $iflags = 1)
		Local $aret = DllCall("shlwapi.dll", "long", "UrlApplySchemeW", "wstr", $surl, "wstr", "", "dword*", 4096, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[2]
	EndFunc

	Func _winapi_urlcanonicalize($surl, $iflags)
		Local $aret = DllCall("shlwapi.dll", "long", "UrlCanonicalizeW", "wstr", $surl, "wstr", "", "dword*", 4096, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[2]
	EndFunc

	Func _winapi_urlcombine($surl, $spart, $iflags = 0)
		Local $aret = DllCall("shlwapi.dll", "long", "UrlCombineW", "wstr", $surl, "wstr", $spart, "wstr", "", "dword*", 4096, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[3]
	EndFunc

	Func _winapi_urlcompare($surl1, $surl2, $bignoreslash = False)
		Local $aret = DllCall("shlwapi.dll", "int", "UrlCompareW", "wstr", $surl1, "wstr", $surl2, "bool", $bignoreslash)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_urlcreatefrompath($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "long", "UrlCreateFromPathW", "wstr", $sfilepath, "wstr", "", "dword*", 4096, "dword", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] < 0 OR $aret[0] > 1 Then
			Return SetError(10, $aret[0], "")
		EndIf
		Return $aret[2]
	EndFunc

	Func _winapi_urlfixup($surl)
		Local $aret = DllCall("shlwapi.dll", "long", "UrlFixupW", "wstr", $surl, "wstr", "", "dword", 4096)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[2]
	EndFunc

	Func _winapi_urlgetpart($surl, $ipart)
		Local $aret = DllCall("shlwapi.dll", "long", "UrlGetPartW", "wstr", $surl, "wstr", "", "dword*", 4096, "dword", $ipart, "dword", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[2]
	EndFunc

	Func _winapi_urlhash($surl, $ilength = 32)
		If $ilength <= 0 OR $ilength > 256 Then Return SetError(256, 0, 0)
		Local $tdata = DllStructCreate("byte[" & $ilength & "]")
		Local $aret = DllCall("shlwapi.dll", "long", "UrlHashW", "wstr", $surl, "struct*", $tdata, "dword", $ilength)
		If @error Then Return SetError(@error + 10, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return DllStructGetData($tdata, 1)
	EndFunc

	Func _winapi_urlis($surl, $itype = 0)
		Local $aret = DllCall("shlwapi.dll", "bool", "UrlIsW", "wstr", $surl, "uint", $itype)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

#EndRegion Public Functions
#Region Internal Functions

	Func __us($sstring, $ilength = 0)
		If $ilength Then
			$sstring = StringLeft($sstring, $ilength)
		Else
			$ilength = StringLen($sstring)
		EndIf
		Local $tus = DllStructCreate("ushort;ushort;ptr;wchar[" & ($ilength + 1) & "]")
		DllStructSetData($tus, 1, 2 * StringLen($sstring))
		DllStructSetData($tus, 2, 2 * $ilength)
		DllStructSetData($tus, 3, DllStructGetPtr($tus, 4))
		DllStructSetData($tus, 4, $sstring)
		Return $tus
	EndFunc

#EndRegion Internal Functions
#Region Global Variables and Constants
	Global $__g_iheapsize = 8388608
	Global Const $tagdevmode = "wchar DeviceName[32];ushort SpecVersion;ushort DriverVersion;ushort Size;ushort DriverExtra;dword Fields;short Orientation;short PaperSize;short PaperLength;short PaperWidth;short Scale;short Copies;short DefaultSource;short PrintQuality;short Color;short Duplex;short YResolution;short TTOption;short Collate;wchar FormName[32];ushort Unused1;dword Unused2[3];dword Nup;dword Unused3;dword ICMMethod;dword ICMIntent;dword MediaType;dword DitherType;dword Reserved1;dword Reserved2;dword PanningWidth;dword PanningHeight"
	Global Const $tagdevnames = "ushort DriverOffset;ushort DeviceOffset;ushort OutputOffset;ushort Default"
	Global Const $tagfileinfo = "uint64 CreationTime;uint64 LastAccessTime;uint64 LastWriteTime;uint64 ChangeTime;dword Attributes"
	Global Const $tagfile_id_descriptor = "dword Size;uint Type;" & $tagguid
	Global Const $tagwin32_find_stream_data = "int64 StreamSize;wchar StreamName[296]"
	Global Const $tagwin32_stream_id = "dword StreamId;dword StreamAttributes;int64 Size;dword StreamNameSize;wchar StreamName[1]"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_backupread($hfile, $pbuffer, $ilength, ByRef $ibytes, ByRef $pcontext, $bsecurity = False)
		$ibytes = 0
		Local $aret = DllCall("kernel32.dll", "bool", "BackupRead", "handle", $hfile, "struct*", $pbuffer, "dword", $ilength, "dword*", 0, "bool", 0, "bool", $bsecurity, "ptr*", $pcontext)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, False)
		$ibytes = $aret[4]
		$pcontext = $aret[7]
		Return $aret[0]
	EndFunc

	Func _winapi_backupreadabort(ByRef $pcontext)
		Local $aret = DllCall("kernel32.dll", "bool", "BackupRead", "handle", 0, "ptr", 0, "dword", 0, "dword*", 0, "bool", 1, "bool", 0, "ptr*", $pcontext)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, False)
		$pcontext = $aret[7]
		Return $aret[0]
	EndFunc

	Func _winapi_backupseek($hfile, $iseek, ByRef $ibytes, ByRef $pcontext)
		$ibytes = 0
		Local $aret = DllCall("kernel32.dll", "bool", "BackupSeek", "handle", $hfile, "dword", _winapi_lodword($iseek), "dword", _winapi_hidword($iseek), "dword*", 0, "dword*", 0, "ptr*", $pcontext)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, False)
		$ibytes = __winapi_makeqword($aret[4], $aret[5])
		$pcontext = $aret[6]
		Return $aret[0]
	EndFunc

	Func _winapi_backupwrite($hfile, $pbuffer, $ilength, ByRef $ibytes, ByRef $pcontext, $bsecurity = False)
		$ibytes = 0
		Local $aret = DllCall("kernel32.dll", "bool", "BackupWrite", "handle", $hfile, "struct*", $pbuffer, "dword", $ilength, "dword*", 0, "bool", 0, "bool", $bsecurity, "ptr*", $pcontext)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, False)
		$ibytes = $aret[4]
		$pcontext = $aret[7]
		Return $aret[0]
	EndFunc

	Func _winapi_backupwriteabort(ByRef $pcontext)
		Local $aret = DllCall("kernel32.dll", "bool", "BackupWrite", "handle", 0, "ptr", 0, "dword", 0, "dword*", 0, "bool", 1, "bool", 0, "ptr*", $pcontext)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, False)
		$pcontext = $aret[7]
		Return $aret[0]
	EndFunc

	Func _winapi_copyfileex($sexistingfile, $snewfile, $iflags = 0, $pprogressproc = 0, $pdata = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "CopyFileExW", "wstr", $sexistingfile, "wstr", $snewfile, "ptr", $pprogressproc, "struct*", $pdata, "bool*", 0, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createdirectory($sdir, $tsecurity = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "CreateDirectoryW", "wstr", $sdir, "struct*", $tsecurity)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_createdirectoryex($snewdir, $stemplatedir, $tsecurity = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "CreateDirectoryExW", "wstr", $stemplatedir, "wstr", $snewdir, "struct*", $tsecurity)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_createfileex($sfilepath, $icreation, $iaccess = 0, $ishare = 0, $iflagsandattributes = 0, $tsecurity = 0, $htemplate = 0)
		Local $aret = DllCall("kernel32.dll", "handle", "CreateFileW", "wstr", $sfilepath, "dword", $iaccess, "dword", $ishare, "struct*", $tsecurity, "dword", $icreation, "dword", $iflagsandattributes, "handle", $htemplate)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] = Ptr(-1) Then Return SetError(10, _winapi_getlasterror(), 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createfilemapping($hfile, $isize = 0, $sname = "", $iprotect = 4, $tsecurity = 0)
		Local $stypeofname = "wstr"
		If NOT StringStripWS($sname, $str_stripleading + $str_striptrailing) Then
			$stypeofname = "ptr"
			$sname = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "handle", "CreateFileMappingW", "handle", $hfile, "struct*", $tsecurity, "dword", $iprotect, "dword", _winapi_hidword($isize), "dword", _winapi_lodword($isize), $stypeofname, $sname)
		If @error Then Return SetError(@error, @extended, 0)
		Return SetExtended(_winapi_getlasterror(), $aret[0])
	EndFunc

	Func _winapi_createhardlink($snewfile, $sexistingfile)
		Local $aret = DllCall("kernel32.dll", "bool", "CreateHardLinkW", "wstr", $snewfile, "wstr", $sexistingfile, "ptr", 0)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_createobjectid($sfilepath)
		Local $hfile = _winapi_createfileex($sfilepath, $open_existing, 0, $file_share_readwrite, $file_flag_backup_semantics)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $tfoid = DllStructCreate("byte[16];byte[48]")
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 590016, "ptr", 0, "dword", 0, "struct*", $tfoid, "dword", DllStructGetSize($tfoid), "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, 0)
		Local $tguid = DllStructCreate($tagguid)
		_winapi_movememory($tguid, $tfoid, 16)
		Return $tguid
	EndFunc

	Func _winapi_createsymboliclink($ssymlink, $starget, $bdirectory = False)
		If $bdirectory Then
			$bdirectory = 1
		EndIf
		Local $aret = DllCall("kernel32.dll", "boolean", "CreateSymbolicLinkW", "wstr", $ssymlink, "wstr", $starget, "dword", $bdirectory)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_decryptfile($sfilepath)
		Local $aret = DllCall("advapi32.dll", "bool", "DecryptFileW", "wstr", $sfilepath, "dword", 0)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_definedosdevice($sdevice, $iflags, $sfilepath = "")
		Local $stypeofpath = "wstr"
		If NOT StringStripWS($sfilepath, $str_stripleading + $str_striptrailing) Then
			$stypeofpath = "ptr"
			$sfilepath = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "bool", "DefineDosDeviceW", "dword", $iflags, "wstr", $sdevice, $stypeofpath, $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_deletefile($sfilepath)
		Local $aret = DllCall("kernel32.dll", "bool", "DeleteFileW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_deleteobjectid($sfilepath)
		Local $hfile = _winapi_createfileex($sfilepath, $open_existing, $generic_write, $file_share_readwrite, $file_flag_backup_semantics)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 589984, "ptr", 0, "dword", 0, "ptr", 0, "dword", 0, "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_deletevolumemountpoint($smountedpath)
		Local $aret = DllCall("kernel32.dll", "bool", "DeleteVolumeMountPointW", "wstr", $smountedpath)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_deviceiocontrol($hdevice, $icontrolcode, $pinbuffer = 0, $iinbuffersize = 0, $poutbuffer = 0, $ioutbuffersize = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hdevice, "dword", $icontrolcode, "struct*", $pinbuffer, "dword", $iinbuffersize, "struct*", $poutbuffer, "dword", $ioutbuffersize, "dword*", 0, "ptr", 0)
		If @error Then Return SetError(@error, @extended, False)
		Return SetExtended($aret[7], $aret[0])
	EndFunc

	Func _winapi_duplicateencryptioninfofile($ssrcfilepath, $sdestfilepath, $icreation = 2, $iattributes = 0, $tsecurity = 0)
		Local $aret = DllCall("advapi32.dll", "dword", "DuplicateEncryptionInfoFile", "wstr", $ssrcfilepath, "wstr", $sdestfilepath, "dword", $icreation, "dword", $iattributes, "struct*", $tsecurity)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_ejectmedia($sdrive)
		Local $hfile = _winapi_createfileex("\\.\" & $sdrive, $open_existing, $generic_read, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 2967560, "ptr", 0, "dword", 0, "ptr", 0, "dword", 0, "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_encryptfile($sfilepath)
		Local $aret = DllCall("advapi32.dll", "bool", "EncryptFileW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_encryptiondisable($sdir, $bdisable)
		Local $aret = DllCall("advapi32.dll", "bool", "EncryptionDisable", "wstr", $sdir, "bool", $bdisable)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_enumfiles($sdir, $iflag = 0, $stemplate = "", $bexclude = False)
		Local $aret = 0, $ierror = 0
		Local $adata[501][7] = [[0]]
		Local $hdir = _winapi_createfileex($sdir, $open_existing, 1, $file_share_any, $file_flag_backup_semantics)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $pbuffer = __heapalloc($__g_iheapsize)
		If @error Then
			$ierror = @error
		Else
			Local $tiosb = DllStructCreate("ptr;ulong_ptr")
			$aret = DllCall("ntdll.dll", "uint", "ZwQueryDirectoryFile", "handle", $hdir, "ptr", 0, "ptr", 0, "ptr", 0, "struct*", $tiosb, "struct*", $pbuffer, "ulong", 8388608, "uint", 1, "boolean", 0, "ptr", 0, "boolean", 1)
			If @error OR $aret[0] Then
				$ierror = @error + 40
			EndIf
		EndIf
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hdir)
		If $ierror Then
			__heapfree($pbuffer, 1)
			If IsArray($aret) Then
				Return SetError(10, $aret[0], 0)
			Else
				Return SetError($ierror, 0, 0)
			EndIf
		EndIf
		Local $tfdi, $iattrib, $starget, $ilength = 0, $ioffset = 0
		Do
			$ilength += $ioffset
			$tfdi = DllStructCreate("ulong;ulong;int64;int64;int64;int64;int64;int64;ulong;ulong;wchar[" & (DllStructGetData(DllStructCreate("ulong", $pbuffer + $ilength + 60), 1) / 2) & "]", $pbuffer + $ilength)
			$starget = DllStructGetData($tfdi, 11)
			$iattrib = DllStructGetData($tfdi, 9)
			$ioffset = DllStructGetData($tfdi, 1)
			Switch $starget
				Case ".", ".."
					ContinueLoop
				Case Else
					Switch $iflag
						Case 1, 2
							If BitAND($iattrib, 16) Then
								If $iflag = 1 Then
									ContinueLoop
								EndIf
							Else
								If $iflag = 2 Then
									ContinueLoop
								EndIf
							EndIf
					EndSwitch
					If $stemplate Then
						$aret = DllCall("shlwapi.dll", "int", "PathMatchSpecW", "wstr", $starget, "wstr", $stemplate)
						If @error OR ($aret[0] AND $bexclude) OR (NOT $aret[0] AND NOT $bexclude) Then
							ContinueLoop
						EndIf
					EndIf
			EndSwitch
			__inc($adata, 500)
			$adata[$adata[0][0]][0] = $starget
			$adata[$adata[0][0]][1] = DllStructGetData($tfdi, 3)
			$adata[$adata[0][0]][2] = DllStructGetData($tfdi, 4)
			$adata[$adata[0][0]][3] = DllStructGetData($tfdi, 5)
			$adata[$adata[0][0]][4] = DllStructGetData($tfdi, 7)
			$adata[$adata[0][0]][5] = DllStructGetData($tfdi, 8)
			$adata[$adata[0][0]][6] = $iattrib
		Until NOT $ioffset
		__heapfree($pbuffer)
		__inc($adata, -1)
		Return $adata
	EndFunc

	Func _winapi_enumfilestreams($sfilepath)
		Local $tdata = DllStructCreate("byte[32768]")
		Local $pdata = DllStructGetPtr($tdata)
		Local $adata[101][2] = [[0]]
		Local $hfile = _winapi_createfileex($sfilepath, $open_existing, 0, $file_share_readwrite, $file_flag_backup_semantics)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $ierror = 0
		Local $tiosb = DllStructCreate("ptr;ulong_ptr")
		Local $aret = DllCall("ntdll.dll", "long", "ZwQueryInformationFile", "handle", $hfile, "struct*", $tiosb, "ptr", $pdata, "ulong", 32768, "uint", 22)
		If @error Then $ierror = @error
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hfile)
		If $ierror Then Return SetError($ierror, 0, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $tfsi, $ilength = 0, $ioffset = 0
		Do
			$ilength += $ioffset
			$tfsi = DllStructCreate("ulong;ulong;int64;int64;wchar[" & (DllStructGetData(DllStructCreate("ulong", $pdata + $ilength + 4), 1) / 2) & "]", $pdata + $ilength)
			__inc($adata)
			$adata[$adata[0][0]][0] = DllStructGetData($tfsi, 5)
			$adata[$adata[0][0]][1] = DllStructGetData($tfsi, 3)
			$ioffset = DllStructGetData($tfsi, 1)
		Until NOT $ioffset
		__inc($adata, -1)
		Return $adata
	EndFunc

	Func _winapi_enumhardlinks($sfilepath)
		Local $tdata = DllStructCreate("byte[32768]")
		Local $pdata = DllStructGetPtr($tdata)
		Local $hfile = _winapi_createfileex($sfilepath, $open_existing, 0, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $ierror = 0
		Local $tiosb = DllStructCreate("ptr;ulong_ptr")
		Local $aret = DllCall("ntdll.dll", "long", "ZwQueryInformationFile", "handle", $hfile, "struct*", $tiosb, "ptr", $pdata, "ulong", 32768, "uint", 46)
		If @error OR $aret[0] Then
			$ierror = @error + 10
			DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hfile)
			If $aret Then Return SetError($ierror, 0, 0)
			If $aret[0] Then Return SetError(10, $ierror, 0)
		EndIf
		Local $icount = DllStructGetData(DllStructCreate("ulong;ulong", $pdata), 2)
		Local $adata[$icount + 1] = [$icount]
		Local $tflei, $hpath, $spath, $ilength = 8
		For $i = 1 To $icount
			$tflei = DllStructCreate("ulong;int64;ulong;wchar[" & (DllStructGetData(DllStructCreate("ulong", $pdata + $ilength + 16), 1)) & "]", $pdata + $ilength)
			$ierror = 0
			Do
				$hpath = _winapi_openfilebyid($hfile, DllStructGetData($tflei, 2), 1048704, $file_share_readwrite, $file_flag_backup_semantics)
				If @error Then
					$ierror = @error + 100
					ExitLoop
				EndIf
				$spath = _winapi_getfinalpathnamebyhandleex($hpath)
				If @error Then
					$ierror = @error + 200
					ExitLoop
				EndIf
			Until 1
			If $hpath Then
				DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hpath)
			EndIf
			If $ierror Then ExitLoop
			$adata[$i] = _winapi_pathappend($spath, DllStructGetData($tflei, 4))
			$ilength += DllStructGetData($tflei, 1)
		Next
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hfile)
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $adata
	EndFunc

	Func _winapi_fileencryptionstatus($sfilepath)
		Local $aret = DllCall("advapi32.dll", "bool", "FileEncryptionStatusW", "wstr", $sfilepath, "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, -1)
		Return $aret[2]
	EndFunc

	Func _winapi_fileexists($sfilepath)
		If NOT FileExists($sfilepath) Then Return 0
		If _winapi_pathisdirectory($sfilepath) Then Return SetExtended(1, 0)
		Return 1
	EndFunc

	Func _winapi_fileinuse($sfilepath)
		Local $hfile = _winapi_createfileex($sfilepath, $open_existing, $generic_read)
		If @error Then
			If @extended = 32 Then Return 1
			Return SetError(@error, @extended, 0)
		EndIf
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hfile)
		Return 0
	EndFunc

	Func _winapi_findclose($hsearch)
		Local $aret = DllCall("kernel32.dll", "bool", "FindClose", "handle", $hsearch)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_findclosechangenotification($hchange)
		Local $aret = DllCall("kernel32.dll", "bool", "FindCloseChangeNotification", "handle", $hchange)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_findfirstchangenotification($sdirectory, $iflags, $bsubtree = False)
		Local $aret = DllCall("kernel32.dll", "handle", "FindFirstChangeNotificationW", "wstr", $sdirectory, "bool", $bsubtree, "dword", $iflags)
		If @error OR ($aret[0] = Ptr(-1)) Then Return SetError(@error + 10, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_findfirstfile($sfilepath, $tdata)
		Local $aret = DllCall("kernel32.dll", "handle", "FindFirstFileW", "wstr", $sfilepath, "struct*", $tdata)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] = Ptr(-1) Then Return SetError(10, _winapi_getlasterror(), 0)
		Return $aret[0]
	EndFunc

	Func _winapi_findfirstfilename($sfilepath, ByRef $slink)
		$slink = ""
		Local $aret = DllCall("kernel32.dll", "handle", "FindFirstFileNameW", "wstr", $sfilepath, "dword", 0, "dword*", 4096, "wstr", "")
		If @error OR ($aret[0] = Ptr(-1)) Then Return SetError(@error + 10, @extended, 0)
		$slink = $aret[4]
		Return $aret[0]
	EndFunc

	Func _winapi_findfirststream($sfilepath, $tdata)
		Local $aret = DllCall("kernel32.dll", "handle", "FindFirstStreamW", "wstr", $sfilepath, "uint", 0, "struct*", $tdata, "dword", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] = Ptr(-1) Then Return SetError(10, _winapi_getlasterror(), 0)
		Return $aret[0]
	EndFunc

	Func _winapi_findnextchangenotification($hchange)
		Local $aret = DllCall("kernel32.dll", "bool", "FindNextChangeNotification", "handle", $hchange)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_findnextfile($hsearch, $tdata)
		Local $aret = DllCall("kernel32.dll", "bool", "FindNextFileW", "handle", $hsearch, "struct*", $tdata)
		If @error Then Return SetError(@error, @extended, False)
		If NOT $aret[0] Then Return SetError(10, _winapi_getlasterror(), 0)
		Return $aret[0]
	EndFunc

	Func _winapi_findnextfilename($hsearch, ByRef $slink)
		$slink = ""
		Local $aret = DllCall("kernel32.dll", "bool", "FindNextFileNameW", "handle", $hsearch, "dword*", 4096, "wstr", "")
		If @error Then Return SetError(@error, @extended, False)
		If NOT $aret[0] Then Return SetError(10, _winapi_getlasterror(), 0)
		$slink = $aret[3]
		Return $aret[0]
	EndFunc

	Func _winapi_findnextstream($hsearch, $tdata)
		Local $aret = DllCall("kernel32.dll", "bool", "FindNextStreamW", "handle", $hsearch, "struct*", $tdata)
		If @error Then Return SetError(@error, @extended, False)
		If NOT $aret[0] Then Return SetError(10, _winapi_getlasterror(), 0)
		Return $aret[0]
	EndFunc

	Func _winapi_flushviewoffile($paddress, $ibytes = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "FlushViewOfFile", "struct*", $paddress, "dword", $ibytes)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getbinarytype($sfilepath)
		Local $aret = DllCall("kernel32.dll", "int", "GetBinaryTypeW", "wstr", $sfilepath, "dword*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If NOT $aret[0] Then $aret[2] = 0
		Return SetExtended($aret[2], $aret[0])
	EndFunc

	Func _winapi_getcdtype($sdrive)
		Local $hfile = _winapi_createfileex("\\.\" & $sdrive, $open_existing, $generic_readwrite, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $tagscsi_pass_through = "struct;ushort Length;byte ScsiStatus;byte PathId;byte TargetId;byte Lun;byte CdbLength;byte SenseInfoLength;byte DataIn;ulong DataTransferLength;ulong TimeOutValue;ulong_ptr DataBufferOffset;ulong SenseInfoOffset;byte Cdb[16];endstruct"
		Local $tspt = DllStructCreate($tagscsi_pass_through & ";byte Hdr[8]")
		Local $tcdb = DllStructCreate("byte;byte;byte[2];byte[3];byte[2];byte;byte[2];byte[4]", DllStructGetPtr($tspt, "Cdb"))
		Local $thdr = DllStructCreate("byte[4];byte;byte;byte[2]", DllStructGetPtr($tspt, "Hdr"))
		Local $isize = DllStructGetPtr($tspt, "Hdr") - DllStructGetPtr($tspt)
		DllStructSetData($tspt, "Length", $isize)
		DllStructSetData($tspt, "ScsiStatus", 0)
		DllStructSetData($tspt, "PathId", 0)
		DllStructSetData($tspt, "TargetId", 0)
		DllStructSetData($tspt, "Lun", 0)
		DllStructSetData($tspt, "CdbLength", 12)
		DllStructSetData($tspt, "SenseInfoLength", 0)
		DllStructSetData($tspt, "DataIn", 1)
		DllStructSetData($tspt, "DataTransferLength", 8)
		DllStructSetData($tspt, "TimeOutValue", 86400)
		DllStructSetData($tspt, "DataBufferOffset", $isize)
		DllStructSetData($tspt, "SenseInfoOffset", 0)
		DllStructSetData($tcdb, 1, 70)
		DllStructSetData($tcdb, 2, 0)
		DllStructSetData($tcdb, 3, 0, 1)
		DllStructSetData($tcdb, 3, 0, 2)
		DllStructSetData($tcdb, 5, 0, 1)
		DllStructSetData($tcdb, 5, 8, 2)
		DllStructSetData($tcdb, 6, 0)
		DllStructSetData($tcdb, 7, 0, 1)
		DllStructSetData($tcdb, 7, 0, 2)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 315396, "struct*", $tspt, "dword", $isize, "struct*", $tspt, "dword", DllStructGetSize($tspt), "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, 0)
		Return BitOR(BitShift(DllStructGetData($thdr, 4, 1), -8), DllStructGetData($thdr, 4, 2))
	EndFunc

	Func _winapi_getcompressedfilesize($sfilepath)
		Local $aret = DllCall("kernel32.dll", "dword", "GetCompressedFileSizeW", "wstr", $sfilepath, "dword*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] = -1 Then
			Local $ilasterror = _winapi_getlasterror()
			If $aret[2] = 0 Then Return SetError(10, $ilasterror, 0)
			If $ilasterror Then Return SetError(11, $ilasterror, 0)
		EndIf
		Return __winapi_makeqword($aret[0], $aret[2])
	EndFunc

	Func _winapi_getcompression($sfilepath)
		Local $hfile = _winapi_createfileex($sfilepath, $open_existing, $generic_read, $file_share_readwrite, $file_flag_backup_semantics)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 589884, "ptr", 0, "dword", 0, "ushort*", 0, "dword", 2, "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, -1)
		Return $aret[5]
	EndFunc

	Func _winapi_getcurrentdirectory()
		Local $aret = DllCall("kernel32.dll", "dword", "GetCurrentDirectoryW", "dword", 4096, "wstr", "")
		If @error Then Return SetError(@error, @extended, "")
		Return SetExtended($aret[0], $aret[2])
	EndFunc

	Func _winapi_getdiskfreespaceex($sdrive)
		Local $aret = DllCall("kernel32.dll", "bool", "GetDiskFreeSpaceEx", "str", $sdrive, "int64*", 0, "int64*", 0, "int64*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[3]
		For $i = 0 To 2
			$aresult[$i] = $aret[$i + 2]
		Next
		Return $aresult
	EndFunc

	Func _winapi_getdrivebustype($sdrive)
		Local $hfile = _winapi_createfileex("\\.\" & $sdrive, $open_existing, 0, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, -1)
		Local $tagstorage_property_query = "ulong PropertyId;ulong QueryType;byte AdditionalParameters[1]"
		Local $tspq = DllStructCreate($tagstorage_property_query)
		Local $tsdd = DllStructCreate("ulong Version;ulong Size;byte DeviceType;byte DeviceTypeModifier;byte RemovableMedia;byte CommandQueueing;ulong VendorIdOffset;ulong ProductIdOffset;ulong ProductRevisionOffset;ulong SerialNumberOffset;ulong BusType;ulong RawPropertiesLength;byte RawDeviceProperties[1]")
		DllStructSetData($tspq, "PropertyId", 0)
		DllStructSetData($tspq, "QueryType", 0)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 2954240, "struct*", $tspq, "dword", DllStructGetSize($tspq), "struct*", $tsdd, "dword", DllStructGetSize($tsdd), "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, -1)
		Return DllStructGetData($tsdd, "BusType")
	EndFunc

	Func _winapi_getdrivegeometryex($idrive)
		Local $hfile = _winapi_createfileex("\\.\PhysicalDrive" & $idrive, $open_existing, 0, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $tdgex = DllStructCreate("uint64;dword;dword;dword;dword;uint64")
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 458912, "ptr", 0, "dword", 0, "struct*", $tdgex, "dword", DllStructGetSize($tdgex), "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, 0)
		Local $aresult[6]
		For $i = 0 To 5
			$aresult[$i] = DllStructGetData($tdgex, $i + 1)
		Next
		Return $aresult
	EndFunc

	Func _winapi_getdrivenumber($sdrive)
		Local $hfile = _winapi_createfileex("\\.\" & $sdrive, $open_existing, 0, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $tsdn = DllStructCreate("dword;ulong;ulong")
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 2953344, "ptr", 0, "dword", 0, "struct*", $tsdn, "dword", DllStructGetSize($tsdn), "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, 0)
		Local $aresult[3]
		For $i = 0 To 2
			$aresult[$i] = DllStructGetData($tsdn, $i + 1)
		Next
		Return $aresult
	EndFunc

	Func _winapi_getdrivetype($sdrive = "")
		Local $itypeofdrive = "str"
		If NOT StringStripWS($sdrive, $str_stripleading + $str_striptrailing) Then
			$itypeofdrive = "ptr"
			$sdrive = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "uint", "GetDriveType", $itypeofdrive, $sdrive)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getfileattributes($sfilepath)
		Local $aret = DllCall("kernel32.dll", "dword", "GetFileAttributesW", "wstr", $sfilepath)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getfileid($hfile)
		Local $tiosb = DllStructCreate("ptr;ulong_ptr")
		Local $aret = DllCall("ntdll.dll", "long", "ZwQueryInformationFile", "handle", $hfile, "struct*", $tiosb, "int64*", 0, "ulong", 8, "uint", 6)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[3]
	EndFunc

	Func _winapi_getfileinformationbyhandle($hfile)
		Local $tbhfi = DllStructCreate("dword;dword[2];dword[2];dword[2];dword;dword;dword;dword;dword;dword")
		Local $aret = DllCall("kernel32.dll", "bool", "GetFileInformationByHandle", "handle", $hfile, "struct*", $tbhfi)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[8]
		$aresult[0] = DllStructGetData($tbhfi, 1)
		For $i = 1 To 3
			If DllStructGetData($tbhfi, $i + 1) Then
				$aresult[$i] = DllStructCreate($tagfiletime)
				_winapi_movememory($aresult[$i], DllStructGetPtr($tbhfi, $i + 1), 8)
			Else
				$aresult[$i] = 0
			EndIf
		Next
		$aresult[4] = DllStructGetData($tbhfi, 5)
		$aresult[5] = __winapi_makeqword(DllStructGetData($tbhfi, 7), DllStructGetData($tbhfi, 6))
		$aresult[6] = DllStructGetData($tbhfi, 8)
		$aresult[7] = __winapi_makeqword(DllStructGetData($tbhfi, 9), DllStructGetData($tbhfi, 10))
		Return $aresult
	EndFunc

	Func _winapi_getfileinformationbyhandleex($hfile)
		Local $tfi = DllStructCreate($tagfileinfo)
		Local $tiosb = DllStructCreate("ptr;ulong_ptr")
		Local $aret = DllCall("ntdll.dll", "long", "ZwQueryInformationFile", "handle", $hfile, "struct*", $tiosb, "struct*", $tfi, "ulong", DllStructGetSize($tfi), "uint", 4)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tfi
	EndFunc

	Func _winapi_getfilepointerex($hfile)
		Local $tiosb = DllStructCreate("ptr;ulong_ptr")
		Local $aret = DllCall("ntdll.dll", "long", "ZwQueryInformationFile", "handle", $hfile, "struct*", $tiosb, "int64*", 0, "ulong", 8, "uint", 14)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[3]
	EndFunc

	Func _winapi_getfilesizeondisk($sfilepath)
		Local $isize = FileGetSize($sfilepath)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "bool", "GetDiskFreeSpaceW", "wstr", _winapi_pathstriptoroot(_winapi_getfullpathname($sfilepath)), "dword*", 0, "dword*", 0, "dword*", 0, "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return Ceiling($isize / ($aret[2] * $aret[3])) * ($aret[2] * $aret[3])
	EndFunc

	Func _winapi_getfiletitle($sfilepath)
		Local $aret = DllCall("comdlg32.dll", "short", "GetFileTitleW", "wstr", $sfilepath, "wstr", "", "word", 4096)
		If @error OR $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_getfiletype($hfile)
		Local $aret = DllCall("kernel32.dll", "dword", "GetFileType", "handle", $hfile)
		If @error Then Return SetError(@error, @extended, -1)
		Local $ilasterror = _winapi_getlasterror()
		If NOT $aret[0] AND $ilasterror Then Return SetError(10, $ilasterror, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_getfinalpathnamebyhandle($hfile)
		Local $tfni = DllStructCreate("ulong;wchar[4096]")
		Local $tiosb = DllStructCreate("ptr;ulong_ptr")
		Local $aret = DllCall("ntdll.dll", "long", "ZwQueryInformationFile", "handle", $hfile, "struct*", $tiosb, "struct*", $tfni, "ulong", DllStructGetSize($tfni), "uint", 9)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Local $ilength = DllStructGetData($tfni, 1)
		If NOT $ilength Then Return SetError(12, 0, "")
		Return DllStructGetData(DllStructCreate("wchar[" & ($ilength / 2) & "]", DllStructGetPtr($tfni, 2)), 1)
	EndFunc

	Func _winapi_getfinalpathnamebyhandleex($hfile, $iflags = 0)
		Local $aret = DllCall("kernel32.dll", "dword", "GetFinalPathNameByHandleW", "handle", $hfile, "wstr", "", "dword", 4096, "dword", $iflags)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_getfullpathname($sfilepath)
		Local $aret = DllCall("kernel32.dll", "dword", "GetFullPathNameW", "wstr", $sfilepath, "dword", 4096, "wstr", "", "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[3]
	EndFunc

	Func _winapi_getlogicaldrives()
		Local $aret = DllCall("kernel32.dll", "dword", "GetLogicalDrives")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getobjectid($sfilepath)
		Local $hfile = _winapi_createfileex($sfilepath, $open_existing, 0, $file_share_readwrite, $file_flag_backup_semantics)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $tfoid = DllStructCreate("byte[16];byte[48]")
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 589980, "ptr", 0, "dword", 0, "struct*", $tfoid, "dword", DllStructGetSize($tfoid), "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, 0)
		Local $tguid = DllStructCreate($tagguid)
		_winapi_movememory($tguid, $tfoid, 16)
		Return $tguid
	EndFunc

	Func _winapi_getpetype($sfilepath)
		Local $tdata = DllStructCreate("ushort[2]")
		Local $tuint = DllStructCreate("uint", DllStructGetPtr($tdata))
		Local $hfile = _winapi_createfileex($sfilepath, $open_existing, $generic_read, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $ierror = 0, $ival
		Do
			Local $aret = DllCall("kernel32.dll", "bool", "ReadFile", "handle", $hfile, "struct*", $tdata, "dword", 2, "dword*", 0, "ptr", 0)
			If @error OR (NOT $aret[0]) OR ($aret[4] <> 2) Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			$ival = DllStructGetData($tdata, 1, 1)
			If $ival <> 23117 Then
				$ierror = 3
				ExitLoop
			EndIf
			If NOT _winapi_setfilepointerex($hfile, 60) Then
				$ierror = @error + 40
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "ReadFile", "handle", $hfile, "struct*", $tdata, "dword", 4, "dword*", 0, "ptr", 0)
			If @error OR (NOT $aret[0]) OR ($aret[4] <> 4) Then
				$ierror = @error + 50
				ExitLoop
			EndIf
			If NOT _winapi_setfilepointerex($hfile, DllStructGetData($tuint, 1)) Then
				$ierror = @error + 60
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "ReadFile", "handle", $hfile, "struct*", $tdata, "dword", 4, "dword*", 0, "ptr", 0)
			If @error OR (NOT $aret[0]) OR ($aret[4] <> 4) Then
				$ierror = @error + 70
				ExitLoop
			EndIf
			$ival = DllStructGetData($tuint, 1)
			If $ival <> 17744 Then
				$ierror = 4
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "ReadFile", "handle", $hfile, "struct*", $tdata, "dword", 2, "dword*", 0, "ptr", 0)
			If @error OR (NOT $aret[0]) OR ($aret[4] <> 2) Then
				$ierror = @error + 80
				ExitLoop
			EndIf
			$ival = DllStructGetData($tdata, 1, 1)
		Until 1
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hfile)
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $ival
	EndFunc

	Func _winapi_getprofilesdirectory()
		Local $aret = DllCall("userenv.dll", "bool", "GetProfilesDirectoryW", "wstr", "", "dword*", 4096)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_gettempfilename($sfilepath, $sprefix = "")
		Local $aret = DllCall("kernel32.dll", "uint", "GetTempFileNameW", "wstr", $sfilepath, "wstr", $sprefix, "uint", 0, "wstr", "")
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[4]
	EndFunc

	Func _winapi_getvolumeinformation($sroot = "")
		Local $stypeofroot = "wstr"
		If NOT StringStripWS($sroot, $str_stripleading + $str_striptrailing) Then
			$stypeofroot = "ptr"
			$sroot = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "bool", "GetVolumeInformationW", $stypeofroot, $sroot, "wstr", "", "dword", 4096, "dword*", 0, "dword*", 0, "dword*", 0, "wstr", "", "dword", 4096)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[5]
		For $i = 0 To 4
			Switch $i
				Case 0
					$aresult[$i] = $aret[2]
				Case Else
					$aresult[$i] = $aret[$i + 3]
			EndSwitch
		Next
		Return $aresult
	EndFunc

	Func _winapi_getvolumeinformationbyhandle($hfile)
		Local $aret = DllCall("kernel32.dll", "bool", "GetVolumeInformationByHandleW", "handle", $hfile, "wstr", "", "dword", 4096, "dword*", 0, "dword*", 0, "dword*", 0, "wstr", "", "dword", 4096)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[5]
		For $i = 0 To 4
			Switch $i
				Case 0
					$aresult[$i] = $aret[2]
				Case Else
					$aresult[$i] = $aret[$i + 3]
			EndSwitch
		Next
		Return $aresult
	EndFunc

	Func _winapi_getvolumenameforvolumemountpoint($smountedpath)
		Local $aret = DllCall("kernel32.dll", "bool", "GetVolumeNameForVolumeMountPointW", "wstr", $smountedpath, "wstr", "", "dword", 80)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_ioctl($idevicetype, $ifunction, $imethod, $iaccess)
		Return BitOR(BitShift($idevicetype, -16), BitShift($iaccess, -14), BitShift($ifunction, -2), $imethod)
	EndFunc

	Func _winapi_isdooropen($sdrive)
		Local $hfile = _winapi_createfileex("\\.\" & $sdrive, $open_existing, $generic_readwrite, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, False)
		Local $tspt = DllStructCreate("ushort Length;byte ScsiStatus;byte PathId;byte TargetId;byte Lun;byte CdbLength;byte SenseInfoLength;byte DataIn;byte Alignment[3];ulong DataTransferLength;ulong TimeOutValue;ulong_ptr DataBufferOffset;ulong SenseInfoOffset;byte Cdb[16]" & __iif(@AutoItX64, ";byte[4]", "") & ";byte Hdr[8]")
		Local $tcdb = DllStructCreate("byte;byte;byte[6];byte[2];byte;byte;byte[4]", DllStructGetPtr($tspt, "Cdb"))
		Local $thdr = DllStructCreate("byte;byte;byte[3];byte;byte[2]", DllStructGetPtr($tspt, "Hdr"))
		Local $isize = DllStructGetPtr($tspt, "Hdr") - DllStructGetPtr($tspt)
		DllStructSetData($tspt, "Length", $isize)
		DllStructSetData($tspt, "ScsiStatus", 0)
		DllStructSetData($tspt, "PathId", 0)
		DllStructSetData($tspt, "TargetId", 0)
		DllStructSetData($tspt, "Lun", 0)
		DllStructSetData($tspt, "CdbLength", 12)
		DllStructSetData($tspt, "SenseInfoLength", 0)
		DllStructSetData($tspt, "DataIn", 1)
		DllStructSetData($tspt, "DataTransferLength", 8)
		DllStructSetData($tspt, "TimeOutValue", 86400)
		DllStructSetData($tspt, "DataBufferOffset", $isize)
		DllStructSetData($tspt, "SenseInfoOffset", 0)
		DllStructSetData($tcdb, 1, 189)
		DllStructSetData($tcdb, 2, 0)
		DllStructSetData($tcdb, 4, 0, 1)
		DllStructSetData($tcdb, 4, 8, 2)
		DllStructSetData($tcdb, 5, 0)
		DllStructSetData($tcdb, 6, 0)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 315396, "struct*", $tspt, "dword", $isize, "struct*", $tspt, "dword", DllStructGetSize($tspt), "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, False)
		Return (BitAND(DllStructGetData($thdr, 2), 16) = 16)
	EndFunc

	Func _winapi_ispathshared($sfilepath)
		If NOT __dll("ntshrui.dll") Then Return SetError(103, 0, 0)
		Local $aret = DllCall("ntshrui.dll", "bool", "IsPathSharedW", "wstr", _winapi_pathremovebackslash($sfilepath), "int", 1)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_iswritable($sdrive)
		DriveGetFileSystem($sdrive)
		If @error Then Return SetError(40 + @error, _winapi_getlasterror(), 0)
		Local $hfile = _winapi_createfileex("\\.\" & $sdrive, $open_existing, 0, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 458788, "ptr", 0, "dword", 0, "ptr", 0, "dword", 0, "dword*", 0, "ptr", 0)
		Local Const $error_write_protect = 19
		If __checkerrorclosehandle($aret, $hfile, 1) <> 10 AND @extended = $error_write_protect Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_loadmedia($sdrive)
		Local $hfile = _winapi_createfileex("\\.\" & $sdrive, $open_existing, $generic_read, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, False)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 2967564, "ptr", 0, "dword", 0, "ptr", 0, "dword", 0, "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_lockdevice($sdrive, $block)
		Local $hfile = _winapi_createfileex("\\.\" & $sdrive, $open_existing, $generic_readwrite, $file_share_readwrite)
		If @error Then Return SetError(@error + 20, @extended, False)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 2967556, "boolean*", $block, "dword", 1, "ptr", 0, "dword", 0, "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_lockfile($hfile, $ioffset, $ilength)
		Local $aret = DllCall("kernel32.dll", "bool", "LockFile", "handle", $hfile, "dword", _winapi_lodword($ioffset), "dword", _winapi_hidword($ioffset), "dword", _winapi_lodword($ilength), "dword", _winapi_hidword($ilength))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_mapviewoffile($hmapping, $ioffset = 0, $ibytes = 0, $iaccess = 6)
		Local $aret = DllCall("kernel32.dll", "ptr", "MapViewOfFile", "handle", $hmapping, "dword", $iaccess, "dword", _winapi_hidword($ioffset), "dword", _winapi_lodword($ioffset), "ulong_ptr", $ibytes)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_movefileex($sexistingfile, $snewfile, $iflags = 0, $pprogressproc = 0, $pdata = 0)
		Local $stypeofnewfile = "wstr"
		If NOT StringStripWS($snewfile, $str_stripleading + $str_striptrailing) Then
			$stypeofnewfile = "ptr"
			$snewfile = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "bool", "MoveFileWithProgressW", "wstr", $sexistingfile, $stypeofnewfile, $snewfile, "ptr", $pprogressproc, "ptr", $pdata, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_openfilebyid($hfile, $vid, $iaccess = 0, $ishare = 0, $iflags = 0)
		Local $tfidd = DllStructCreate("dword;uint;int64;int64")
		Local $hobj, $aret, $itype, $ierror = 0
		Select 
			Case IsString($vid)
				$aret = DllCall("ole32.dll", "long", "CLSIDFromString", "wstr", $vid, "ptr", DllStructGetPtr($tfidd, 3))
				If @error OR $aret[0] Then
					Return SetError(@error + 30, 0, 0)
				EndIf
				$itype = 1
			Case IsDllStruct($vid)
				If NOT _winapi_movememory(DllStructGetPtr($tfidd, 3), DllStructGetPtr($vid), 16) Then
					Return SetError(@error + 40, 0, 0)
				EndIf
				$itype = 1
			Case Else
				DllStructSetData($tfidd, 3, $vid)
				$itype = 0
		EndSelect
		DllStructSetData($tfidd, 1, DllStructGetSize($tfidd))
		DllStructSetData($tfidd, 2, $itype)
		If IsString($hfile) Then
			$hobj = _winapi_createfileex($hfile, $open_existing, 0, $file_share_readwrite, $file_flag_backup_semantics)
			If @error Then Return SetError(@error + 20, @extended, 0)
		Else
			$hobj = $hfile
		EndIf
		$aret = DllCall("kernel32.dll", "handle", "OpenFileById", "handle", $hobj, "struct*", $tfidd, "dword", $iaccess, "dword", $ishare, "ptr", 0, "dword", $iflags)
		If @error OR ($aret[0] = Ptr(-1)) Then $ierror = @error + 10
		If IsString($hfile) Then
			DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hobj)
		EndIf
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_openfilemapping($sname, $iaccess = 6, $binherit = False)
		Local $aret = DllCall("kernel32.dll", "handle", "OpenFileMappingW", "dword", $iaccess, "bool", $binherit, "wstr", $sname)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_pathisdirectoryempty($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsDirectoryEmptyW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_querydosdevice($sdevice)
		Local $stypeofdevice = "wstr"
		If NOT StringStripWS($sdevice, $str_stripleading + $str_striptrailing) Then
			$stypeofdevice = "ptr"
			$sdevice = 0
		EndIf
		Local $tdata = DllStructCreate("wchar[16384]")
		Local $aret = DllCall("kernel32.dll", "dword", "QueryDosDeviceW", $stypeofdevice, $sdevice, "struct*", $tdata, "dword", 16384)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Local $aresult = _winapi_structtoarray($tdata)
		If IsString($sdevice) Then
			$aresult = $aresult[1]
		EndIf
		Return $aresult
	EndFunc

	Func _winapi_readdirectorychanges($hdirectory, $ifilter, $pbuffer, $ilength, $bsubtree = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "ReadDirectoryChangesW", "handle", $hdirectory, "struct*", $pbuffer, "dword", $ilength - Mod($ilength, 4), "bool", $bsubtree, "dword", $ifilter, "dword*", 0, "ptr", 0, "ptr", 0)
		If @error OR NOT $aret[0] OR (NOT $aret[6]) Then Return SetError(@error + 10, @extended, 0)
		$pbuffer = $aret[2]
		Local $adata[101][2] = [[0]]
		Local $tfni, $ibuffer = 0, $ioffset = 0
		Do
			$ibuffer += $ioffset
			$tfni = DllStructCreate("dword NextEntryOffset;dword Action;dword FileNameLength;wchar FileName[" & (DllStructGetData(DllStructCreate("dword FileNameLength", $pbuffer + $ibuffer + 8), 1) / 2) & "]", $pbuffer + $ibuffer)
			__inc($adata)
			$adata[$adata[0][0]][0] = DllStructGetData($tfni, "FileName")
			$adata[$adata[0][0]][1] = DllStructGetData($tfni, "Action")
			$ioffset = DllStructGetData($tfni, "NextEntryOffset")
		Until NOT $ioffset
		__inc($adata, -1)
		Return $adata
	EndFunc

	Func _winapi_removedirectory($sdirpath)
		Local $aret = DllCall("kernel32.dll", "bool", "RemoveDirectoryW", "wstr", $sdirpath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_reopenfile($hfile, $iaccess, $ishare, $iflags = 0)
		Local $aret = DllCall("kernel32.dll", "handle", "ReOpenFile", "handle", $hfile, "dword", $iaccess, "dword", $ishare, "dword", $iflags)
		If @error OR ($aret[0] = Ptr(-1)) Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_replacefile($sreplacedfile, $sreplacementfile, $sbackupfile = "", $iflags = 0)
		Local $stypeofbackupfile = "wstr"
		If NOT StringStripWS($sbackupfile, $str_stripleading + $str_striptrailing) Then
			$stypeofbackupfile = "ptr"
			$sbackupfile = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "bool", "ReplaceFileW", "wstr", $sreplacedfile, "wstr", $sreplacementfile, $stypeofbackupfile, $sbackupfile, "dword", $iflags, "ptr", 0, "ptr", 0)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_searchpath($sfilepath, $ssearchpath = "")
		Local $stypeofpath = "wstr"
		If NOT StringStripWS($ssearchpath, $str_stripleading + $str_striptrailing) Then
			$stypeofpath = "ptr"
			$ssearchpath = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "dword", "SearchPathW", $stypeofpath, $ssearchpath, "wstr", $sfilepath, "ptr", 0, "dword", 4096, "wstr", "", "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[5]
	EndFunc

	Func _winapi_setcompression($sfilepath, $icompression)
		Local $hfile = _winapi_createfileex($sfilepath, $open_existing, $generic_readwrite, $file_share_readwrite, $file_flag_backup_semantics)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "bool", "DeviceIoControl", "handle", $hfile, "dword", 639040, "ushort*", $icompression, "dword", 2, "ptr", 0, "dword", 0, "dword*", 0, "ptr", 0)
		If __checkerrorclosehandle($aret, $hfile) Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_setcurrentdirectory($sdir)
		Local $aret = DllCall("kernel32.dll", "int", "SetCurrentDirectoryW", "wstr", $sdir)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setfileattributes($sfilepath, $iattributes)
		Local $aret = DllCall("kernel32.dll", "int", "SetFileAttributesW", "wstr", $sfilepath, "dword", $iattributes)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setfileinformationbyhandleex($hfile, $tfileinfo)
		Local $aret = DllCall("ntdll.dll", "long", "ZwSetInformationFile", "handle", $hfile, "struct*", $tfileinfo, "struct*", $tfileinfo, "ulong", DllStructGetSize($tfileinfo), "uint", 4)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_setfilepointerex($hfile, $ipos, $imethod = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "SetFilePointerEx", "handle", $hfile, "int64", $ipos, "int64*", 0, "dword", $imethod)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setfileshortname($hfile, $sshortname)
		Local $aret = DllCall("kernel32.dll", "bool", "SetFileShortNameW", "handle", $hfile, "wstr", $sshortname)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setfilevaliddata($hfile, $ilength)
		Local $aret = DllCall("kernel32.dll", "bool", "SetFileValidData", "handle", $hfile, "int64", $ilength)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setsearchpathmode($iflags)
		Local $aret = DllCall("kernel32.dll", "bool", "SetSearchPathMode", "dword", $iflags)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setvolumemountpoint($sfilepath, $sguid)
		Local $aret = DllCall("kernel32.dll", "bool", "SetVolumeMountPointW", "wstr", $sfilepath, "wstr", $sguid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_sfcisfileprotected($sfilepath)
		If NOT __dll("sfc.dll") Then Return SetError(103, 0, False)
		Local $aret = DllCall("sfc.dll", "bool", "SfcIsFileProtected", "handle", 0, "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_unlockfile($hfile, $ioffset, $ilength)
		Local $aret = DllCall("kernel32.dll", "bool", "UnlockFile", "handle", $hfile, "dword", _winapi_lodword($ioffset), "dword", _winapi_hidword($ioffset), "dword", _winapi_lodword($ilength), "dword", _winapi_hidword($ilength))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_unmapviewoffile($paddress)
		Local $aret = DllCall("kernel32.dll", "bool", "UnmapViewOfFile", "ptr", $paddress)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_wow64enablewow64fsredirection($benable)
		Local $aret = DllCall("kernel32.dll", "boolean", "Wow64EnableWow64FsRedirection", "boolean", $benable)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

#EndRegion Public Functions
#Region Internal Functions

	Func __winapi_makeqword($ilodword, $ihidword)
		Local $tint64 = DllStructCreate("uint64")
		Local $tdwords = DllStructCreate("dword;dword", DllStructGetPtr($tint64))
		DllStructSetData($tdwords, 1, $ilodword)
		DllStructSetData($tdwords, 2, $ihidword)
		Return DllStructGetData($tint64, 1)
	EndFunc

#EndRegion Internal Functions
Global Const $create_breakaway_from_job = 16777216
Global Const $create_default_error_mode = 67108864
Global Const $create_new_console = 16
Global Const $create_new_process_group = 512
Global Const $create_no_window = 134217728
Global Const $create_protected_process = 262144
Global Const $create_preserve_code_authz_level = 33554432
Global Const $create_separate_wow_vdm = 2048
Global Const $create_shared_wow_vdm = 4096
Global Const $create_suspended = 4
Global Const $create_unicode_environment = 1024
Global Const $list_modules_32bit = 1
Global Const $list_modules_64bit = 2
Global Const $list_modules_all = 3
Global Const $list_modules_default = 0
Global Const $above_normal_priority_class = 32768
Global Const $below_normal_priority_class = 16384
Global Const $high_priority_class = 128
Global Const $idle_priority_class = 64
Global Const $normal_priority_class = 32
Global Const $realtime_priority_class = 256
Global Const $process_mode_background_begin = 1048576
Global Const $process_mode_background_end = 2097152
Global Const $mutex_modify_state = 1
Global Const $mutex_all_access = 2031617
Global Const $job_object_assign_process = 1
Global Const $job_object_query = 4
Global Const $job_object_set_attributes = 2
Global Const $job_object_set_security_attributes = 16
Global Const $job_object_terminate = 8
Global Const $job_object_all_access = 2031647
Global Const $job_object_limit_active_process = 8
Global Const $job_object_limit_affinity = 16
Global Const $job_object_limit_breakaway_ok = 2048
Global Const $job_object_limit_die_on_unhandled_exception = 1024
Global Const $job_object_limit_job_memory = 512
Global Const $job_object_limit_job_time = 4
Global Const $job_object_limit_kill_on_job_close = 8192
Global Const $job_object_limit_preserve_job_time = 64
Global Const $job_object_limit_priority_class = 32
Global Const $job_object_limit_process_memory = 256
Global Const $job_object_limit_process_time = 2
Global Const $job_object_limit_scheduling_class = 128
Global Const $job_object_limit_silent_breakaway_ok = 4096
Global Const $job_object_limit_workingset = 1
Global Const $job_object_uilimit_desktop = 64
Global Const $job_object_uilimit_displaysettings = 16
Global Const $job_object_uilimit_exitwindows = 128
Global Const $job_object_uilimit_globalatoms = 32
Global Const $job_object_uilimit_handles = 1
Global Const $job_object_uilimit_readclipboard = 2
Global Const $job_object_uilimit_systemparameters = 8
Global Const $job_object_uilimit_writeclipboard = 4
Global Const $job_object_security_filter_tokens = 8
Global Const $job_object_security_no_admin = 1
Global Const $job_object_security_only_token = 4
Global Const $job_object_security_restricted_token = 2
Global Const $job_object_terminate_at_end_of_job = 0
Global Const $job_object_post_at_end_of_job = 1
Global Const $semaphore_modify_state = 2
Global Const $semaphore_query_state = 1
Global Const $semaphore_all_access = 2031619
Global Const $es_awaymode_required = 64
Global Const $es_continuous = -2147483648
Global Const $es_display_required = 2
Global Const $es_system_required = 1
Global Const $es_user_present = 4
#Region Global Variables and Constants
	Global Const $tagio_counters = "struct;uint64 ReadOperationCount;uint64 WriteOperationCount;uint64 OtherOperationCount;uint64 ReadTransferCount;uint64 WriteTransferCount;uint64 OtherTransferCount;endstruct"
	Global Const $tagjobobject_associate_completion_port = "ulong_ptr CompletionKey;ptr CompletionPort"
	Global Const $tagjobobject_basic_accounting_information = "struct;int64 TotalUserTime;int64 TotalKernelTime;int64 ThisPeriodTotalUserTime;int64 ThisPeriodTotalKernelTime;dword TotalPageFaultCount;dword TotalProcesses;dword ActiveProcesses;dword TotalTerminatedProcesses;endstruct"
	Global Const $tagjobobject_basic_and_io_accounting_information = $tagjobobject_basic_accounting_information & ";" & $tagio_counters
	Global Const $tagjobobject_basic_limit_information = "struct;int64 PerProcessUserTimeLimit;int64 PerJobUserTimeLimit;dword LimitFlags;ulong_ptr MinimumWorkingSetSize;ulong_ptr MaximumWorkingSetSize;dword ActiveProcessLimit;ulong_ptr Affinity;dword PriorityClass;dword SchedulingClass;endstruct"
	Global Const $tagjobobject_basic_process_id_list = "dword NumberOfAssignedProcesses;dword NumberOfProcessIdsInList"
	Global Const $tagjobobject_basic_ui_restrictions = "dword UIRestrictionsClass"
	Global Const $tagjobobject_end_of_job_time_information = "dword EndOfJobTimeAction"
	Global Const $tagjobobject_extended_limit_information = $tagjobobject_basic_limit_information & ";" & $tagio_counters & ";ulong_ptr ProcessMemoryLimit;ulong_ptr JobMemoryLimit;ulong_ptr PeakProcessMemoryUsed;ulong_ptr PeakJobMemoryUsed"
	Global Const $tagjobobject_group_information = ""
	Global Const $tagjobobject_security_limit_information = "dword SecurityLimitFlags;ptr JobToken;ptr SidsToDisable;ptr PrivilegesToDelete;ptr RestrictedSids"
	Global Const $tagmoduleinfo = "ptr BaseOfDll;dword SizeOfImage;ptr EntryPoint"
	Global Const $tagprocessentry32 = "dword Size;dword Usage;dword ProcessID;ulong_ptr DefaultHeapID;dword ModuleID;dword Threads;dword ParentProcessID;long PriClassBase;dword Flags;wchar ExeFile[260]"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_adjusttokenprivileges($htoken, $aprivileges, $iattributes, ByRef $aadjust)
		$aadjust = 0
		If NOT $aprivileges AND IsNumber($aprivileges) Then Return 0
		Local $ttp1 = 0, $ttp2, $icount, $aret, $bdisable = False
		If $aprivileges = -1 Then
			$ttp2 = DllStructCreate("dword")
			$aret = DllCall("advapi32.dll", "bool", "AdjustTokenPrivileges", "handle", $htoken, "bool", 1, "ptr", 0, "dword", 0, "struct*", $ttp2, "dword*", 0)
			If @error Then Return SetError(@error, @extended, 0)
			Local $ilasterror = _winapi_getlasterror()
			Switch $ilasterror
				Case 122
					$ttp2 = DllStructCreate("dword;dword[" & ($aret[6] / 4 - 1) & "]")
					If @error Then
						ContinueCase
					EndIf
				Case Else
					Return SetError(10, $ilasterror, 0)
			EndSwitch
			$bdisable = True
		Else
			Local $aprev = 0
			If NOT IsArray($aprivileges) Then
				Dim $aprev[1][2]
				$aprev[0][0] = $aprivileges
				$aprev[0][1] = $iattributes
			Else
				If NOT UBound($aprivileges, $ubound_columns) Then
					$icount = UBound($aprivileges)
					Dim $aprev[$icount][2]
					For $i = 0 To $icount - 1
						$aprev[$i][0] = $aprivileges[$i]
						$aprev[$i][1] = $iattributes
					Next
				EndIf
			EndIf
			If IsArray($aprev) Then
				$aprivileges = $aprev
			EndIf
			Local $tagstruct = "dword;dword[" & (3 * UBound($aprivileges)) & "]"
			$ttp1 = DllStructCreate($tagstruct)
			$ttp2 = DllStructCreate($tagstruct)
			If @error Then Return SetError(@error + 20, 0, 0)
			DllStructSetData($ttp1, 1, UBound($aprivileges))
			For $i = 0 To UBound($aprivileges) - 1
				DllStructSetData($ttp1, 2, $aprivileges[$i][1], 3 * $i + 3)
				$aret = DllCall("advapi32.dll", "bool", "LookupPrivilegeValueW", "ptr", 0, "wstr", $aprivileges[$i][0], "ptr", DllStructGetPtr($ttp1, 2) + 12 * $i)
				If @error OR NOT $aret[0] Then Return SetError(@error + 100, @extended, 0)
			Next
		EndIf
		$aret = DllCall("advapi32.dll", "bool", "AdjustTokenPrivileges", "handle", $htoken, "bool", $bdisable, "struct*", $ttp1, "dword", DllStructGetSize($ttp2), "struct*", $ttp2, "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 200, @extended, 0)
		Local $iresult
		Switch _winapi_getlasterror()
			Case 1300
				$iresult = 1
			Case Else
				$iresult = 0
		EndSwitch
		$icount = DllStructGetData($ttp2, 1)
		If $icount Then
			Local $tdata = DllStructCreate("wchar[128]")
			Dim $aprivileges[$icount][2]
			For $i = 0 To $icount - 1
				$aret = DllCall("advapi32.dll", "bool", "LookupPrivilegeNameW", "ptr", 0, "ptr", DllStructGetPtr($ttp2, 2) + 12 * $i, "struct*", $tdata, "dword*", 128)
				If @error OR NOT $aret[0] Then Return SetError(@error + 300, @extended, 0)
				$aprivileges[$i][1] = DllStructGetData($ttp2, 2, 3 * $i + 3)
				$aprivileges[$i][0] = DllStructGetData($tdata, 1)
			Next
			$aadjust = $aprivileges
		EndIf
		Return SetExtended($iresult, 1)
	EndFunc

	Func _winapi_assignprocesstojobobject($hjob, $hprocess)
		Local $aret = DllCall("kernel32.dll", "bool", "AssignProcessToJobObject", "handle", $hjob, "handle", $hprocess)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_createjobobject($sname = "", $tsecurity = 0)
		Local $stypeofname = "wstr"
		If NOT StringStripWS($sname, $str_stripleading + $str_striptrailing) Then
			$stypeofname = "ptr"
			$sname = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "handle", "CreateJobObjectW", "struct*", $tsecurity, $stypeofname, $sname)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createmutex($smutex, $binitial = True, $tsecurity = 0)
		Local $aret = DllCall("kernel32.dll", "handle", "CreateMutexW", "struct*", $tsecurity, "bool", $binitial, "wstr", $smutex)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createprocesswithtoken($sapp, $scmd, $iflags, $tstartupinfo, $tprocessinfo, $htoken, $ilogon = 0, $penvironment = 0, $sdir = "")
		Local $stypeofapp = "wstr", $stypeofcmd = "wstr", $stypeofdir = "wstr"
		If NOT StringStripWS($sapp, $str_stripleading + $str_striptrailing) Then
			$stypeofapp = "ptr"
			$sapp = 0
		EndIf
		If NOT StringStripWS($scmd, $str_stripleading + $str_striptrailing) Then
			$stypeofcmd = "ptr"
			$scmd = 0
		EndIf
		If NOT StringStripWS($sdir, $str_stripleading + $str_striptrailing) Then
			$stypeofdir = "ptr"
			$sdir = 0
		EndIf
		Local $aret = DllCall("advapi32.dll", "bool", "CreateProcessWithTokenW", "handle", $htoken, "dword", $ilogon, $stypeofapp, $sapp, $stypeofcmd, $scmd, "dword", $iflags, "struct*", $penvironment, $stypeofdir, $sdir, "struct*", $tstartupinfo, "struct*", $tprocessinfo)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createsemaphore($ssemaphore, $iinitial, $imaximum, $tsecurity = 0)
		Local $aret = DllCall("kernel32.dll", "handle", "CreateSemaphoreW", "struct*", $tsecurity, "long", $iinitial, "long", $imaximum, "wstr", $ssemaphore)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_duplicatetokenex($htoken, $iaccess, $ilevel, $itype = 1, $tsecurity = 0)
		Local $aret = DllCall("advapi32.dll", "bool", "DuplicateTokenEx", "handle", $htoken, "dword", $iaccess, "struct*", $tsecurity, "int", $ilevel, "int", $itype, "handle*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[6]
	EndFunc

	Func _winapi_emptyworkingset($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1280, 4352), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, 0)
		Local $aret = DllCall(@SystemDir & "\psapi.dll", "bool", "EmptyWorkingSet", "handle", $hprocess[0])
		If __checkerrorclosehandle($aret, $hprocess[0]) Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_enumchildprocess($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hsnapshot = DllCall("kernel32.dll", "handle", "CreateToolhelp32Snapshot", "dword", 2, "dword", 0)
		If @error OR ($hsnapshot[0] = Ptr(-1)) Then Return SetError(@error + 10, @extended, 0)
		Local $tprocessentry32 = DllStructCreate($tagprocessentry32)
		Local $aresult[101][2] = [[0]]
		$hsnapshot = $hsnapshot[0]
		DllStructSetData($tprocessentry32, "Size", DllStructGetSize($tprocessentry32))
		Local $aret = DllCall("kernel32.dll", "bool", "Process32FirstW", "handle", $hsnapshot, "struct*", $tprocessentry32)
		Local $ierror = @error
		While (NOT @error) AND ($aret[0])
			If DllStructGetData($tprocessentry32, "ParentProcessID") = $ipid Then
				__inc($aresult)
				$aresult[$aresult[0][0]][0] = DllStructGetData($tprocessentry32, "ProcessID")
				$aresult[$aresult[0][0]][1] = DllStructGetData($tprocessentry32, "ExeFile")
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "Process32NextW", "handle", $hsnapshot, "struct*", $tprocessentry32)
			$ierror = @error
		WEnd
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hsnapshot)
		If NOT $aresult[0][0] Then Return SetError($ierror + 20, 0, 0)
		__inc($aresult, -1)
		Return $aresult
	EndFunc

	Func _winapi_enumdevicedrivers()
		Local $aret = DllCall(@SystemDir & "\psapi.dll", "bool", "EnumDeviceDrivers", "ptr", 0, "dword", 0, "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $isize
		If @AutoItX64 Then
			$isize = $aret[3] / 8
		Else
			$isize = $aret[3] / 4
		EndIf
		Local $tdata = DllStructCreate("ptr[" & $isize & "]")
		$aret = DllCall(@SystemDir & "\psapi.dll", "bool", "EnumDeviceDrivers", "struct*", $tdata, "dword", DllStructGetSize($tdata), "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 20, @extended, 0)
		Local $aresult[$isize + 1] = [$isize]
		For $i = 1 To $isize
			$aresult[$i] = DllStructGetData($tdata, 1, $i)
		Next
		Return $aresult
	EndFunc

	Func _winapi_enumprocesshandles($ipid = 0, $itype = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $aresult[101][4] = [[0]]
		Local $tshi = DllStructCreate("ulong;byte[4194304]")
		Local $aret = DllCall("ntdll.dll", "long", "ZwQuerySystemInformation", "uint", 16, "struct*", $tshi, "ulong", DllStructGetSize($tshi), "ulong*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $pdata = DllStructGetPtr($tshi, 2)
		Local $thandle
		For $i = 1 To DllStructGetData($tshi, 1)
			$thandle = DllStructCreate("align 4;ulong;byte;byte;ushort;ptr;ulong", $pdata + __iif(@AutoItX64, 4 + ($i - 1) * 24, ($i - 1) * 16))
			If (DllStructGetData($thandle, 1) = $ipid) AND ((NOT $itype) OR ($itype = DllStructGetData($thandle, 2))) Then
				__inc($aresult)
				$aresult[$aresult[0][0]][0] = Ptr(DllStructGetData($thandle, 4))
				$aresult[$aresult[0][0]][1] = DllStructGetData($thandle, 2)
				$aresult[$aresult[0][0]][2] = DllStructGetData($thandle, 3)
				$aresult[$aresult[0][0]][3] = DllStructGetData($thandle, 6)
			EndIf
		Next
		If NOT $aresult[0][0] Then Return SetError(11, 0, 0)
		__inc($aresult, -1)
		Return $aresult
	EndFunc

	Func _winapi_enumprocessmodules($ipid = 0, $iflag = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1040, 4112), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, 0)
		Local $icount, $aret, $ierror = 0
		Do
			If $__winver >= 1536 Then
				$aret = DllCall(@SystemDir & "\psapi.dll", "bool", "EnumProcessModulesEx", "handle", $hprocess[0], "ptr", 0, "dword", 0, "dword*", 0, "dword", $iflag)
			Else
				$aret = DllCall(@SystemDir & "\psapi.dll", "bool", "EnumProcessModules", "handle", $hprocess[0], "ptr", 0, "dword", 0, "dword*", 0)
			EndIf
			If @error OR NOT $aret[0] Then
				$ierror = @error + 10
				ExitLoop
			EndIf
			If @AutoItX64 Then
				$icount = $aret[4] / 8
			Else
				$icount = $aret[4] / 4
			EndIf
			Local $tptr = DllStructCreate("ptr[" & $icount & "]")
			If @error Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			If $__winver >= 1536 Then
				$aret = DllCall(@SystemDir & "\psapi.dll", "bool", "EnumProcessModulesEx", "handle", $hprocess[0], "struct*", $tptr, "dword", DllStructGetSize($tptr), "dword*", 0, "dword", $iflag)
			Else
				$aret = DllCall(@SystemDir & "\psapi.dll", "bool", "EnumProcessModules", "handle", $hprocess[0], "struct*", $tptr, "dword", DllStructGetSize($tptr), "dword*", 0)
			EndIf
			If @error OR NOT $aret[0] Then
				$ierror = @error + 40
				ExitLoop
			EndIf
			Local $aresult[$icount + 1][2] = [[$icount]]
			For $i = 1 To $icount
				$aresult[$i][0] = DllStructGetData($tptr, 1, $i)
				$aresult[$i][1] = _winapi_getmodulefilenameex($hprocess[0], $aresult[$i][0])
			Next
		Until 1
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hprocess[0])
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $aresult
	EndFunc

	Func _winapi_enumprocessthreads($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hsnapshot = DllCall("kernel32.dll", "handle", "CreateToolhelp32Snapshot", "dword", 4, "dword", 0)
		If @error OR NOT $hsnapshot[0] Then Return SetError(@error + 10, @extended, 0)
		Local Const $tagthreadentry32 = "dword Size;dword Usage;dword ThreadID;dword OwnerProcessID;long BasePri;long DeltaPri;dword Flags"
		Local $tthreadentry32 = DllStructCreate($tagthreadentry32)
		Local $aresult[101] = [0]
		$hsnapshot = $hsnapshot[0]
		DllStructSetData($tthreadentry32, "Size", DllStructGetSize($tthreadentry32))
		Local $aret = DllCall("kernel32.dll", "bool", "Thread32First", "handle", $hsnapshot, "struct*", $tthreadentry32)
		While NOT @error AND $aret[0]
			If DllStructGetData($tthreadentry32, "OwnerProcessID") = $ipid Then
				__inc($aresult)
				$aresult[$aresult[0]] = DllStructGetData($tthreadentry32, "ThreadID")
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "Thread32Next", "handle", $hsnapshot, "struct*", $tthreadentry32)
		WEnd
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hsnapshot)
		If NOT $aresult[0] Then Return SetError(1, 0, 0)
		__inc($aresult, -1)
		Return $aresult
	EndFunc

	Func _winapi_enumprocesswindows($ipid = 0, $bvisible = True)
		Local $athreads = _winapi_enumprocessthreads($ipid)
		If @error Then Return SetError(@error, @extended, 0)
		Local $henumproc = DllCallbackRegister("__EnumWindowsProc", "bool", "hwnd;lparam")
		Dim $__g_venum[101][2] = [[0]]
		For $i = 1 To $athreads[0]
			DllCall("user32.dll", "bool", "EnumThreadWindows", "dword", $athreads[$i], "ptr", DllCallbackGetPtr($henumproc), "lparam", $bvisible)
			If @error Then
				ExitLoop
			EndIf
		Next
		DllCallbackFree($henumproc)
		If NOT $__g_venum[0][0] Then Return SetError(11, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_getcurrentprocessexplicitappusermodelid()
		Local $aret = DllCall("shell32.dll", "long", "GetCurrentProcessExplicitAppUserModelID", "ptr*", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Local $sid = _winapi_getstring($aret[1])
		_winapi_cotaskmemfree($aret[1])
		Return $sid
	EndFunc

	Func _winapi_getdevicedriverbasename($pdriver)
		Local $aret = DllCall(@SystemDir & "\psapi.dll", "dword", "GetDeviceDriverBaseNameW", "ptr", $pdriver, "wstr", "", "dword", 4096)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_getdevicedriverfilename($pdriver)
		Local $aret = DllCall(@SystemDir & "\psapi.dll", "dword", "GetDeviceDriverFileNameW", "ptr", $pdriver, "wstr", "", "dword", 4096)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_getexitcodeprocess($hprocess)
		Local $aret = DllCall("kernel32.dll", "bool", "GetExitCodeProcess", "handle", $hprocess, "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[2]
	EndFunc

	Func _winapi_getmodulefilenameex($hprocess, $hmodule = 0)
		Local $aret = DllCall(@SystemDir & "\psapi.dll", "dword", "GetModuleFileNameExW", "handle", $hprocess, "handle", $hmodule, "wstr", "", "int", 4096)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[3]
	EndFunc

	Func _winapi_getmoduleinformation($hprocess, $hmodule = 0)
		Local $tmoduleinfo = DllStructCreate($tagmoduleinfo)
		Local $aret = DllCall(@SystemDir & "\psapi.dll", "bool", "GetModuleInformation", "handle", $hprocess, "handle", $hmodule, "struct*", $tmoduleinfo, "dword", DllStructGetSize($tmoduleinfo))
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tmoduleinfo
	EndFunc

	Func _winapi_getparentprocess($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hsnapshot = DllCall("kernel32.dll", "handle", "CreateToolhelp32Snapshot", "dword", 2, "dword", 0)
		If @error OR NOT $hsnapshot[0] Then Return SetError(@error + 10, @extended, 0)
		Local $tprocessentry32 = DllStructCreate($tagprocessentry32)
		Local $iresult = 0
		$hsnapshot = $hsnapshot[0]
		DllStructSetData($tprocessentry32, "Size", DllStructGetSize($tprocessentry32))
		Local $aret = DllCall("kernel32.dll", "bool", "Process32FirstW", "handle", $hsnapshot, "struct*", $tprocessentry32)
		Local $ierror = @error
		While (NOT @error) AND ($aret[0])
			If DllStructGetData($tprocessentry32, "ProcessID") = $ipid Then
				$iresult = DllStructGetData($tprocessentry32, "ParentProcessID")
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "Process32NextW", "handle", $hsnapshot, "struct*", $tprocessentry32)
			$ierror = @error
		WEnd
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hsnapshot)
		If NOT $iresult Then Return SetError($ierror, 0, 0)
		Return $iresult
	EndFunc

	Func _winapi_getpriorityclass($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1024, 4096), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, 0)
		Local $ierror = 0
		Local $aret = DllCall("kernel32.dll", "dword", "GetPriorityClass", "handle", $hprocess[0])
		If @error Then $ierror = @error
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hprocess[0])
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getprocesscommandline($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1040, 4112), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, "")
		$hprocess = $hprocess[0]
		Local $tpbi = DllStructCreate("ulong_ptr ExitStatus;ptr PebBaseAddress;ulong_ptr AffinityMask;ulong_ptr BasePriority;ulong_ptr UniqueProcessId;ulong_ptr InheritedFromUniqueProcessId")
		Local $tpeb = DllStructCreate("byte InheritedAddressSpace;byte ReadImageFileExecOptions;byte BeingDebugged;byte Spare;ptr Mutant;ptr ImageBaseAddress;ptr LoaderData;ptr ProcessParameters;ptr SubSystemData;ptr ProcessHeap;ptr FastPebLock;ptr FastPebLockRoutine;ptr FastPebUnlockRoutine;ulong EnvironmentUpdateCount;ptr KernelCallbackTable;ptr EventLogSection;ptr EventLog;ptr FreeList;ulong TlsExpansionCounter;ptr TlsBitmap;ulong TlsBitmapBits[2];ptr ReadOnlySharedMemoryBase;ptr ReadOnlySharedMemoryHeap;ptr ReadOnlyStaticServerData;ptr AnsiCodePageData;ptr OemCodePageData;ptr UnicodeCaseTableData;ulong NumberOfProcessors;ulong NtGlobalFlag;byte Spare2[4];int64 CriticalSectionTimeout;ulong HeapSegmentReserve;ulong HeapSegmentCommit;ulong HeapDeCommitTotalFreeThreshold;ulong HeapDeCommitFreeBlockThreshold;ulong NumberOfHeaps;ulong MaximumNumberOfHeaps;ptr ProcessHeaps;ptr GdiSharedHandleTable;ptr ProcessStarterHelper;ptr GdiDCAttributeList;ptr LoaderLock;ulong OSMajorVersion;ulong OSMinorVersion;ulong OSBuildNumber;ulong OSPlatformId;ulong ImageSubSystem;ulong ImageSubSystemMajorVersion;ulong ImageSubSystemMinorVersion;ulong GdiHandleBuffer[34];ulong PostProcessInitRoutine;ulong TlsExpansionBitmap;byte TlsExpansionBitmapBits[128];ulong SessionId")
		Local $tupp = DllStructCreate("ulong AllocationSize;ulong ActualSize;ulong Flags;ulong Unknown1;ushort LengthUnknown2;ushort MaxLengthUnknown2;ptr Unknown2;ptr InputHandle;ptr OutputHandle;ptr ErrorHandle;ushort LengthCurrentDirectory;ushort MaxLengthCurrentDirectory;ptr CurrentDirectory;ptr CurrentDirectoryHandle;ushort LengthSearchPaths;ushort MaxLengthSearchPaths;ptr SearchPaths;ushort LengthApplicationName;ushort MaxLengthApplicationName;ptr ApplicationName;ushort LengthCommandLine;ushort MaxLengthCommandLine;ptr CommandLine;ptr EnvironmentBlock;ulong Unknown[9];ushort LengthUnknown3;ushort MaxLengthUnknown3;ptr Unknown3;ushort LengthUnknown4;ushort MaxLengthUnknown4;ptr Unknown4;ushort LengthUnknown5;ushort MaxLengthUnknown5;ptr Unknown5")
		Local $tcmd
		Local $aret, $ierror = 0
		Do
			$aret = DllCall("ntdll.dll", "long", "NtQueryInformationProcess", "handle", $hprocess, "ulong", 0, "struct*", $tpbi, "ulong", DllStructGetSize($tpbi), "ulong*", 0)
			If @error OR $aret[0] Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "ReadProcessMemory", "handle", $hprocess, "ptr", DllStructGetData($tpbi, "PebBaseAddress"), "struct*", $tpeb, "ulong_ptr", DllStructGetSize($tpeb), "ulong_ptr*", 0)
			If @error OR NOT $aret[0] OR (NOT $aret[5]) Then
				$ierror = @error + 40
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "ReadProcessMemory", "handle", $hprocess, "ptr", DllStructGetData($tpeb, "ProcessParameters"), "struct*", $tupp, "ulong_ptr", DllStructGetSize($tupp), "ulong_ptr*", 0)
			If @error OR NOT $aret[0] OR (NOT $aret[5]) Then
				$ierror = @error + 50
				ExitLoop
			EndIf
			$tcmd = DllStructCreate("byte[" & DllStructGetData($tupp, "MaxLengthCommandLine") & "]")
			If @error Then
				$ierror = @error + 60
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "ReadProcessMemory", "handle", $hprocess, "ptr", DllStructGetData($tupp, "CommandLine"), "struct*", $tcmd, "ulong_ptr", DllStructGetSize($tcmd), "ulong_ptr*", 0)
			If @error OR NOT $aret[0] OR (NOT $aret[5]) Then
				$ierror = @error + 70
				ExitLoop
			EndIf
		Until 1
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hprocess)
		If $ierror Then Return SetError($ierror, 0, "")
		Return StringStripWS(_winapi_pathgetargs(_winapi_getstring(DllStructGetPtr($tcmd, 1))), $str_stripleading + $str_striptrailing)
	EndFunc

	Func _winapi_getprocessfilename($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1040, 4112), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, "")
		Local $spath = _winapi_getmodulefilenameex($hprocess[0])
		Local $ierror = @error
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hprocess[0])
		If $ierror Then Return SetError(@error, 0, "")
		Return $spath
	EndFunc

	Func _winapi_getprocesshandlecount($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1024, 4096), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "bool", "GetProcessHandleCount", "handle", $hprocess[0], "dword*", 0)
		If __checkerrorclosehandle($aret, $hprocess[0]) Then Return SetError(@error, @extended, 0)
		Return $aret[2]
	EndFunc

	Func _winapi_getprocessid($hprocess)
		Local $aret = DllCall("kernel32.dll", "dword", "GetProcessId", "handle", $hprocess)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getprocessiocounters($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1024, 4096), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, 0)
		Local $tio_counters = DllStructCreate("uint64[6]")
		Local $aret = DllCall("kernel32.dll", "bool", "GetProcessIoCounters", "handle", $hprocess[0], "struct*", $tio_counters)
		If __checkerrorclosehandle($aret, $hprocess[0]) Then Return SetError(@error, @extended, 0)
		Local $aresult[6]
		For $i = 0 To 5
			$aresult[$i] = DllStructGetData($tio_counters, 1, $i + 1)
		Next
		Return $aresult
	EndFunc

	Func _winapi_getprocessmemoryinfo($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1040, 4112), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, 0)
		Local $tpmc_ex = DllStructCreate("dword;dword;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr")
		Local $aret = DllCall(@SystemDir & "\psapi.dll", "bool", "GetProcessMemoryInfo", "handle", $hprocess[0], "struct*", $tpmc_ex, "int", DllStructGetSize($tpmc_ex))
		If __checkerrorclosehandle($aret, $hprocess[0]) Then Return SetError(@error, @extended, 0)
		Local $aresult[10]
		For $i = 0 To 9
			$aresult[$i] = DllStructGetData($tpmc_ex, $i + 2)
		Next
		Return $aresult
	EndFunc

	Func _winapi_getprocessname($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hsnapshot = DllCall("kernel32.dll", "handle", "CreateToolhelp32Snapshot", "dword", 2, "dword", 0)
		If @error OR NOT $hsnapshot[0] Then Return SetError(@error + 20, @extended, "")
		$hsnapshot = $hsnapshot[0]
		Local $tprocessentry32 = DllStructCreate($tagprocessentry32)
		DllStructSetData($tprocessentry32, "Size", DllStructGetSize($tprocessentry32))
		Local $aret = DllCall("kernel32.dll", "bool", "Process32FirstW", "handle", $hsnapshot, "struct*", $tprocessentry32)
		Local $ierror = @error
		While (NOT @error) AND ($aret[0])
			If DllStructGetData($tprocessentry32, "ProcessID") = $ipid Then
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "Process32NextW", "handle", $hsnapshot, "struct*", $tprocessentry32)
			$ierror = @error
		WEnd
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hsnapshot)
		If $ierror Then Return SetError($ierror, 0, "")
		If NOT $aret[0] Then SetError(10, 0, "")
		Return DllStructGetData($tprocessentry32, "ExeFile")
	EndFunc

	Func _winapi_getprocesstimes($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1024, 4096), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, 0)
		Local $tfiletime = DllStructCreate($tagfiletime)
		Local $aret = DllCall("kernel32.dll", "bool", "GetProcessTimes", "handle", $hprocess[0], "struct*", $tfiletime, "uint64*", 0, "uint64*", 0, "uint64*", 0)
		If __checkerrorclosehandle($aret, $hprocess[0]) Then Return SetError(@error, @extended, 0)
		Local $aresult[3]
		$aresult[0] = $tfiletime
		$aresult[1] = $aret[4]
		$aresult[2] = $aret[5]
		Return $aresult
	EndFunc

	Func _winapi_getprocessuser($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $tsid, $htoken, $aret
		Local $ierror = 0
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1024, 4096), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, 0)
		Do
			$htoken = _winapi_openprocesstoken(8, $hprocess[0])
			If NOT $htoken Then
				$ierror = @error + 10
				ExitLoop
			EndIf
			$tsid = DllStructCreate("ptr;byte[1024]")
			$aret = DllCall("advapi32.dll", "bool", "GetTokenInformation", "handle", $htoken, "uint", 1, "struct*", $tsid, "dword", DllStructGetSize($tsid), "dword*", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			$aret = DllCall("advapi32.dll", "bool", "LookupAccountSidW", "ptr", 0, "ptr", DllStructGetData($tsid, 1), "wstr", "", "dword*", 2048, "wstr", "", "dword*", 2048, "uint*", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 40
				ExitLoop
			EndIf
		Until 1
		If $htoken Then
			DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $htoken)
		EndIf
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hprocess[0])
		If $ierror Then Return SetError($ierror, 0, 0)
		Local $aresult[2]
		$aresult[0] = $aret[3]
		$aresult[1] = $aret[5]
		Return $aresult
	EndFunc

	Func _winapi_getprocessworkingdirectory($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $aret, $ierror = 0
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1040, 4112), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, "")
		$hprocess = $hprocess[0]
		Local $tpbi = DllStructCreate("ulong_ptr ExitStatus;ptr PebBaseAddress;ulong_ptr AffinityMask;ulong_ptr BasePriority;ulong_ptr UniqueProcessId;ulong_ptr InheritedFromUniqueProcessId")
		Local $tpeb = DllStructCreate("byte InheritedAddressSpace;byte ReadImageFileExecOptions;byte BeingDebugged;byte Spare;ptr Mutant;ptr ImageBaseAddress;ptr LoaderData;ptr ProcessParameters;ptr SubSystemData;ptr ProcessHeap;ptr FastPebLock;ptr FastPebLockRoutine;ptr FastPebUnlockRoutine;ulong EnvironmentUpdateCount;ptr KernelCallbackTable;ptr EventLogSection;ptr EventLog;ptr FreeList;ulong TlsExpansionCounter;ptr TlsBitmap;ulong TlsBitmapBits[2];ptr ReadOnlySharedMemoryBase;ptr ReadOnlySharedMemoryHeap;ptr ReadOnlyStaticServerData;ptr AnsiCodePageData;ptr OemCodePageData;ptr UnicodeCaseTableData;ulong NumberOfProcessors;ulong NtGlobalFlag;byte Spare2[4];int64 CriticalSectionTimeout;ulong HeapSegmentReserve;ulong HeapSegmentCommit;ulong HeapDeCommitTotalFreeThreshold;ulong HeapDeCommitFreeBlockThreshold;ulong NumberOfHeaps;ulong MaximumNumberOfHeaps;ptr ProcessHeaps;ptr GdiSharedHandleTable;ptr ProcessStarterHelper;ptr GdiDCAttributeList;ptr LoaderLock;ulong OSMajorVersion;ulong OSMinorVersion;ulong OSBuildNumber;ulong OSPlatformId;ulong ImageSubSystem;ulong ImageSubSystemMajorVersion;ulong ImageSubSystemMinorVersion;ulong GdiHandleBuffer[34];ulong PostProcessInitRoutine;ulong TlsExpansionBitmap;byte TlsExpansionBitmapBits[128];ulong SessionId")
		Local $tupp = DllStructCreate("ulong AllocationSize;ulong ActualSize;ulong Flags;ulong Unknown1;ushort LengthUnknown2;ushort MaxLengthUnknown2;ptr Unknown2;ptr InputHandle;ptr OutputHandle;ptr ErrorHandle;ushort LengthCurrentDirectory;ushort MaxLengthCurrentDirectory;ptr CurrentDirectory;ptr CurrentDirectoryHandle;ushort LengthSearchPaths;ushort MaxLengthSearchPaths;ptr SearchPaths;ushort LengthApplicationName;ushort MaxLengthApplicationName;ptr ApplicationName;ushort LengthCommandLine;ushort MaxLengthCommandLine;ptr CommandLine;ptr EnvironmentBlock;ulong Unknown[9];ushort LengthUnknown3;ushort MaxLengthUnknown3;ptr Unknown3;ushort LengthUnknown4;ushort MaxLengthUnknown4;ptr Unknown4;ushort LengthUnknown5;ushort MaxLengthUnknown5;ptr Unknown5")
		Local $tdir
		Do
			$aret = DllCall("ntdll.dll", "long", "NtQueryInformationProcess", "handle", $hprocess, "ulong", 0, "struct*", $tpbi, "ulong", DllStructGetSize($tpbi), "ulong*", 0)
			If @error OR ($aret[0]) Then
				$ierror = @error + 10
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "ReadProcessMemory", "handle", $hprocess, "ptr", DllStructGetData($tpbi, "PebBaseAddress"), "struct*", $tpeb, "ulong_ptr", DllStructGetSize($tpeb), "ulong_ptr*", 0)
			If @error OR (NOT $aret[0]) OR (NOT $aret[5]) Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "ReadProcessMemory", "handle", $hprocess, "ptr", DllStructGetData($tpeb, "ProcessParameters"), "struct*", $tupp, "ulong_ptr", DllStructGetSize($tupp), "ulong_ptr*", 0)
			If @error OR (NOT $aret[0]) OR (NOT $aret[5]) Then
				$ierror = @error + 40
				ExitLoop
			EndIf
			$tdir = DllStructCreate("byte[" & DllStructGetData($tupp, "MaxLengthCurrentDirectory") & "]")
			If @error Then
				$ierror = @error + 50
				ExitLoop
			EndIf
			$aret = DllCall("kernel32.dll", "bool", "ReadProcessMemory", "handle", $hprocess, "ptr", DllStructGetData($tupp, "CurrentDirectory"), "struct*", $tdir, "ulong_ptr", DllStructGetSize($tdir), "ulong_ptr*", 0)
			If @error OR (NOT $aret[0]) OR (NOT $aret[5]) Then
				$ierror = @error + 60
				ExitLoop
			EndIf
			$ierror = 0
		Until 1
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hprocess)
		If $ierror Then Return SetError($ierror, 0, "")
		Return _winapi_pathremovebackslash(_winapi_getstring(DllStructGetPtr($tdir)))
	EndFunc

	Func _winapi_getthreaddesktop($ithreadid)
		Local $aret = DllCall("user32.dll", "handle", "GetThreadDesktop", "dword", $ithreadid)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthreaderrormode()
		Local $aret = DllCall("kernel32.dll", "dword", "GetThreadErrorMode")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getwindowfilename($hwnd)
		Local $ipid = 0
		Local $aresult = DllCall("user32.dll", "bool", "IsWindow", "hwnd", $hwnd)
		If $aresult[0] Then
			$aresult = DllCall("user32.dll", "dword", "GetWindowThreadProcessId", "hwnd", $hwnd, "dword*", 0)
			$ipid = $aresult[2]
		EndIf
		If NOT $ipid Then Return SetError(1, 0, "")
		Local $sresult = _winapi_getprocessfilename($ipid)
		If @error Then Return SetError(@error, @extended, "")
		Return $sresult
	EndFunc

	Func _winapi_iselevated()
		Local $ielev, $aret, $ierror = 0
		Local $htoken = _winapi_openprocesstoken(8)
		If NOT $htoken Then Return SetError(@error + 10, @extended, False)
		Do
			$aret = DllCall("advapi32.dll", "bool", "GetTokenInformation", "handle", $htoken, "uint", 20, "uint*", 0, "dword", 4, "dword*", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 10
				ExitLoop
			EndIf
			$ielev = $aret[3]
			$aret = DllCall("advapi32.dll", "bool", "GetTokenInformation", "handle", $htoken, "uint", 18, "uint*", 0, "dword", 4, "dword*", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 20
				ExitLoop
			EndIf
		Until 1
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $htoken)
		If $ierror Then Return SetError($ierror, 0, False)
		Return SetExtended($aret[0] - 1, $ielev)
	EndFunc

	Func _winapi_isprocessinjob($hprocess, $hjob = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "IsProcessInJob", "handle", $hprocess, "handle", $hjob, "bool*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, False)
		Return $aret[3]
	EndFunc

	Func _winapi_openjobobject($sname, $iaccess = $job_object_all_access, $binherit = False)
		Local $aret = DllCall("kernel32.dll", "handle", "OpenJobObjectW", "dword", $iaccess, "bool", $binherit, "wstr", $sname)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_openmutex($smutex, $iaccess = $mutex_all_access, $binherit = False)
		Local $aret = DllCall("kernel32.dll", "handle", "OpenMutexW", "dword", $iaccess, "bool", $binherit, "wstr", $smutex)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_openprocesstoken($iaccess, $hprocess = 0)
		If NOT $hprocess Then
			$hprocess = DllCall("kernel32.dll", "handle", "GetCurrentProcess")
			$hprocess = $hprocess[0]
		EndIf
		Local $aret = DllCall("advapi32.dll", "bool", "OpenProcessToken", "handle", $hprocess, "dword", $iaccess, "handle*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[3]
	EndFunc

	Func _winapi_opensemaphore($ssemaphore, $iaccess = 2031619, $binherit = False)
		Local $aret = DllCall("kernel32.dll", "handle", "OpenSemaphoreW", "dword", $iaccess, "bool", $binherit, "wstr", $ssemaphore)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_queryinformationjobobject($hjob, $ijobobjectinfoclass, ByRef $tjobobjectinfo)
		Local $aret = DllCall("kernel32.dll", "bool", "QueryInformationJobObject", "handle", $hjob, "int", $ijobobjectinfoclass, "struct*", $tjobobjectinfo, "dword", DllStructGetSize($tjobobjectinfo), "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[5]
	EndFunc

	Func _winapi_releasemutex($hmutex)
		Local $aret = DllCall("kernel32.dll", "bool", "ReleaseMutex", "handle", $hmutex)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_releasesemaphore($hsemaphore, $iincrease = 1)
		Local $aret = DllCall("kernel32.dll", "bool", "ReleaseSemaphore", "handle", $hsemaphore, "long", $iincrease, "long*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $aret[3]
	EndFunc

	Func _winapi_resetevent($hevent)
		Local $aret = DllCall("kernel32.dll", "bool", "ResetEvent", "handle", $hevent)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setinformationjobobject($hjob, $ijobobjectinfoclass, $tjobobjectinfo)
		Local $aret = DllCall("kernel32.dll", "bool", "SetInformationJobObject", "handle", $hjob, "int", $ijobobjectinfoclass, "struct*", $tjobobjectinfo, "dword", DllStructGetSize($tjobobjectinfo))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setpriorityclass($ipriority, $ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1536, 4608), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 10, @extended, 0)
		Local $ierror = 0
		Local $aret = DllCall("kernel32.dll", "bool", "SetPriorityClass", "handle", $hprocess[0], "dword", $ipriority)
		If @error Then $ierror = @error
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hprocess[0])
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setthreaddesktop($hdesktop)
		Local $aret = DllCall("user32.dll", "bool", "SetThreadDesktop", "handle", $hdesktop)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setthreaderrormode($imode)
		Local $aret = DllCall("kernel32.dll", "bool", "SetThreadErrorMode", "dword", $imode, "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $aret[2]
	EndFunc

	Func _winapi_setthreadexecutionstate($iflags)
		Local $aret = DllCall("kernel32.dll", "dword", "SetThreadExecutionState", "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_terminatejobobject($hjob, $iexitcode = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "TerminateJobObject", "handle", $hjob, "uint", $iexitcode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_terminateprocess($hprocess, $iexitcode = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "TerminateProcess", "handle", $hprocess, "uint", $iexitcode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_userhandlegrantaccess($hobject, $hjob, $bgrant)
		Local $aret = DllCall("kernel32.dll", "bool", "UserHandleGrantAccess", "handle", $hobject, "handle", $hjob, "bool", $bgrant)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

#EndRegion Public Functions
Global Const $dllver_platform_windows = 1
Global Const $dllver_platform_nt = 2
Global Const $shcne_allevents = 2147483647
Global Const $shcne_assocchanged = 134217728
Global Const $shcne_attributes = 2048
Global Const $shcne_create = 2
Global Const $shcne_delete = 4
Global Const $shcne_driveadd = 256
Global Const $shcne_driveaddgui = 65536
Global Const $shcne_driveremoved = 128
Global Const $shcne_extended_event = 67108864
Global Const $shcne_freespace = 262144
Global Const $shcne_mediainserted = 32
Global Const $shcne_mediaremoved = 64
Global Const $shcne_mkdir = 8
Global Const $shcne_netshare = 512
Global Const $shcne_netunshare = 1024
Global Const $shcne_renamefolder = 131072
Global Const $shcne_renameitem = 1
Global Const $shcne_rmdir = 16
Global Const $shcne_serverdisconnect = 16384
Global Const $shcne_updatedir = 4096
Global Const $shcne_updateimage = 32768
Global Const $shcne_updateitem = 8192
Global Const $shcne_diskevents = 145439
Global Const $shcne_globalevents = 201687520
Global Const $shcne_interrupt = -2147483648
Global Const $shcnf_dword = 3
Global Const $shcnf_idlist = 0
Global Const $shcnf_path = 1
Global Const $shcnf_printer = 2
Global Const $shcnf_flush = 4096
Global Const $shcnf_flushnowait = 8192
Global Const $shcnf_notifyrecursive = 65536
Global Const $shcnrf_interruptlevel = 1
Global Const $shcnrf_shelllevel = 2
Global Const $shcnrf_recursiveinterrupt = 4096
Global Const $shcnrf_newdelivery = 32768
Global Const $sherb_noconfirmation = 1
Global Const $sherb_noprogressui = 2
Global Const $sherb_nosound = 4
Global Const $sherb_no_ui = BitOR($sherb_noconfirmation, $sherb_noprogressui, $sherb_nosound)
Global Const $see_mask_default = 0
Global Const $see_mask_classname = 1
Global Const $see_mask_classkey = 3
Global Const $see_mask_idlist = 4
Global Const $see_mask_invokeidlist = 12
Global Const $see_mask_icon = 16
Global Const $see_mask_hotkey = 32
Global Const $see_mask_nocloseprocess = 64
Global Const $see_mask_connectnetdrv = 128
Global Const $see_mask_noasync = 256
Global Const $see_mask_flag_ddewait = $see_mask_noasync
Global Const $see_mask_doenvsubst = 512
Global Const $see_mask_flag_no_ui = 1024
Global Const $see_mask_unicode = 16384
Global Const $see_mask_no_console = 32768
Global Const $see_mask_asyncok = 1048576
Global Const $see_mask_noqueryclassstore = 16777216
Global Const $see_mask_hmonitor = 2097152
Global Const $see_mask_nozonechecks = 8388608
Global Const $see_mask_waitforinputidle = 33554432
Global Const $see_mask_flag_log_usage = 67108864
Global Const $se_err_accessdenied = 5
Global Const $se_err_associncomplete = 27
Global Const $se_err_ddebusy = 30
Global Const $se_err_ddefail = 29
Global Const $se_err_ddetimeout = 28
Global Const $se_err_dllnotfound = 32
Global Const $se_err_fnf = 2
Global Const $se_err_noassoc = 31
Global Const $se_err_oom = 8
Global Const $se_err_pnf = 3
Global Const $se_err_share = 26
Global Const $fo_copy = 2
Global Const $fo_delete = 3
Global Const $fo_move = 1
Global Const $fo_rename = 4
Global Const $fof_allowundo = 64
Global Const $fof_confirmmouse = 2
Global Const $fof_filesonly = 128
Global Const $fof_multidestfiles = 1
Global Const $fof_noconfirmation = 16
Global Const $fof_noconfirmmkdir = 512
Global Const $fof_no_connected_elements = 8192
Global Const $fof_nocopysecurityattribs = 2048
Global Const $fof_noerrorui = 1024
Global Const $fof_norecursereparse = 32768
Global Const $fof_norecursion = 4096
Global Const $fof_renameoncollision = 8
Global Const $fof_silent = 4
Global Const $fof_simpleprogress = 256
Global Const $fof_wantmappinghandle = 32
Global Const $fof_wantnukewarning = 16384
Global Const $fof_no_ui = BitOR($fof_noconfirmation, $fof_noconfirmmkdir, $fof_noerrorui, $fof_silent)
Global Const $shgfi_addoverlays = 32
Global Const $shgfi_attr_specified = 131072
Global Const $shgfi_attributes = 2048
Global Const $shgfi_displayname = 512
Global Const $shgfi_exetype = 8192
Global Const $shgfi_icon = 256
Global Const $shgfi_iconlocation = 4096
Global Const $shgfi_largeicon = 0
Global Const $shgfi_linkoverlay = 32768
Global Const $shgfi_openicon = 2
Global Const $shgfi_overlayindex = 64
Global Const $shgfi_pidl = 8
Global Const $shgfi_selected = 65536
Global Const $shgfi_shelliconsize = 4
Global Const $shgfi_smallicon = 1
Global Const $shgfi_sysiconindex = 16384
Global Const $shgfi_typename = 1024
Global Const $shgfi_usefileattributes = 16
Global Const $sfgao_cancopy = 1
Global Const $sfgao_canmove = 2
Global Const $sfgao_canlink = 4
Global Const $sfgao_storage = 8
Global Const $sfgao_canrename = 16
Global Const $sfgao_candelete = 32
Global Const $sfgao_haspropsheet = 64
Global Const $sfgao_droptarget = 256
Global Const $sfgao_capabilitymask = BitOR($sfgao_cancopy, $sfgao_canmove, $sfgao_canlink, $sfgao_canrename, $sfgao_candelete, $sfgao_haspropsheet, $sfgao_droptarget)
Global Const $sfgao_system = 4096
Global Const $sfgao_encrypted = 8192
Global Const $sfgao_isslow = 16384
Global Const $sfgao_ghosted = 32768
Global Const $sfgao_link = 65536
Global Const $sfgao_share = 131072
Global Const $sfgao_readonly = 262144
Global Const $sfgao_hidden = 524288
Global Const $sfgao_displayattrmask = BitOR($sfgao_isslow, $sfgao_ghosted, $sfgao_link, $sfgao_share, $sfgao_readonly, $sfgao_hidden)
Global Const $sfgao_nonenumerated = 1048576
Global Const $sfgao_newcontent = 2097152
Global Const $sfgao_stream = 4194304
Global Const $sfgao_storageancestor = 8388608
Global Const $sfgao_validate = 16777216
Global Const $sfgao_removable = 33554432
Global Const $sfgao_compressed = 67108864
Global Const $sfgao_browsable = 134217728
Global Const $sfgao_filesysancestor = 268435456
Global Const $sfgao_folder = 536870912
Global Const $sfgao_filesystem = 1073741824
Global Const $sfgao_storagecapmask = BitOR($sfgao_storage, $sfgao_link, $sfgao_readonly, $sfgao_stream, $sfgao_storageancestor, $sfgao_filesysancestor, $sfgao_folder, $sfgao_filesystem)
Global Const $sfgao_hassubfolder = -2147483648
Global Const $sfgao_contentsmask = $sfgao_hassubfolder
Global Const $sfgao_pkeysfgaomask = BitOR($sfgao_isslow, $sfgao_readonly, $sfgao_hassubfolder, $sfgao_validate)
Global Const $ido_shgioi_default = 268435452
Global Const $ido_shgioi_link = 268435454
Global Const $ido_shgioi_share = 268435455
Global Const $ido_shgioi_slowfile = 268435453
Global Const $fcsm_viewid = 1
Global Const $fcsm_webviewtemplate = 2
Global Const $fcsm_infotip = 4
Global Const $fcsm_clsid = 8
Global Const $fcsm_iconfile = 16
Global Const $fcsm_logo = 32
Global Const $fcsm_flags = 64
Global Const $fcs_read = 1
Global Const $fcs_forcewrite = 2
Global Const $fcs_write = BitOR($fcs_read, $fcs_forcewrite)
Global Const $ssf_autocheckselect = 8388608
Global Const $ssf_desktophtml = 512
Global Const $ssf_dontprettypath = 2048
Global Const $ssf_doubleclickinwebview = 128
Global Const $ssf_hideicons = 16384
Global Const $ssf_iconsonly = 16777216
Global Const $ssf_mapnetdrvbutton = 4096
Global Const $ssf_noconfirmrecycle = 32768
Global Const $ssf_nonetcrawling = 1048576
Global Const $ssf_sepprocess = 524288
Global Const $ssf_showallobjects = 1
Global Const $ssf_showcompcolor = 8
Global Const $ssf_showextensions = 2
Global Const $ssf_showinfotip = 8192
Global Const $ssf_showsuperhidden = 262144
Global Const $ssf_showsysfiles = 32
Global Const $ssf_showtypeoverlay = 33554432
Global Const $ssf_startpanelon = 2097152
Global Const $ssf_win95classic = 1024
Global Const $ssf_webview = 131072
Global Const $csidl_admintools = 48
Global Const $csidl_altstartup = 29
Global Const $csidl_appdata = 26
Global Const $csidl_bitbucket = 10
Global Const $csidl_cdburn_area = 59
Global Const $csidl_common_admintools = 47
Global Const $csidl_common_altstartup = 30
Global Const $csidl_common_appdata = 35
Global Const $csidl_common_desktopdirectory = 25
Global Const $csidl_common_documents = 46
Global Const $csidl_common_favorites = 31
Global Const $csidl_common_music = 53
Global Const $csidl_common_pictures = 54
Global Const $csidl_common_programs = 23
Global Const $csidl_common_startmenu = 22
Global Const $csidl_common_startup = 24
Global Const $csidl_common_templates = 45
Global Const $csidl_common_video = 55
Global Const $csidl_computersnearme = 61
Global Const $csidl_connections = 49
Global Const $csidl_controls = 3
Global Const $csidl_cookies = 33
Global Const $csidl_desktop = 0
Global Const $csidl_desktopdirectory = 16
Global Const $csidl_drives = 17
Global Const $csidl_favorites = 6
Global Const $csidl_fonts = 20
Global Const $csidl_internet_cache = 32
Global Const $csidl_history = 34
Global Const $csidl_local_appdata = 28
Global Const $csidl_mymusic = 13
Global Const $csidl_mypictures = 39
Global Const $csidl_myvideo = 14
Global Const $csidl_nethood = 19
Global Const $csidl_personal = 5
Global Const $csidl_printers = 4
Global Const $csidl_printhood = 27
Global Const $csidl_profile = 40
Global Const $csidl_program_files = 38
Global Const $csidl_program_files_common = 43
Global Const $csidl_program_files_commonx86 = 44
Global Const $csidl_program_filesx86 = 42
Global Const $csidl_programs = 2
Global Const $csidl_recent = 8
Global Const $csidl_sendto = 9
Global Const $csidl_startmenu = 11
Global Const $csidl_startup = 7
Global Const $csidl_system = 37
Global Const $csidl_systemx86 = 41
Global Const $csidl_templates = 21
Global Const $csidl_windows = 36
Global Const $siid_docnoassoc = 0
Global Const $siid_docassoc = 1
Global Const $siid_application = 2
Global Const $siid_folder = 3
Global Const $siid_folderopen = 4
Global Const $siid_drive525 = 5
Global Const $siid_drive35 = 6
Global Const $siid_driveremove = 7
Global Const $siid_drivefixed = 8
Global Const $siid_drivenet = 9
Global Const $siid_drivenetdisabled = 10
Global Const $siid_drivecd = 11
Global Const $siid_driveram = 12
Global Const $siid_world = 13
Global Const $siid_server = 15
Global Const $siid_printer = 16
Global Const $siid_mynetwork = 17
Global Const $siid_find = 22
Global Const $siid_help = 23
Global Const $siid_share = 28
Global Const $siid_link = 29
Global Const $siid_slowfile = 30
Global Const $siid_recycler = 31
Global Const $siid_recyclerfull = 32
Global Const $siid_mediacdaudio = 40
Global Const $siid_lock = 47
Global Const $siid_autolist = 49
Global Const $siid_printernet = 50
Global Const $siid_servershare = 51
Global Const $siid_printerfax = 52
Global Const $siid_printerfaxnet = 53
Global Const $siid_printerfile = 54
Global Const $siid_stack = 55
Global Const $siid_mediasvcd = 56
Global Const $siid_stuffedfolder = 57
Global Const $siid_driveunknown = 58
Global Const $siid_drivedvd = 59
Global Const $siid_mediadvd = 60
Global Const $siid_mediadvdram = 61
Global Const $siid_mediadvdrw = 62
Global Const $siid_mediadvdr = 63
Global Const $siid_mediadvdrom = 64
Global Const $siid_mediacdaudioplus = 65
Global Const $siid_mediacdrw = 66
Global Const $siid_mediacdr = 67
Global Const $siid_mediacdburn = 68
Global Const $siid_mediablankcd = 69
Global Const $siid_mediacdrom = 70
Global Const $siid_audiofiles = 71
Global Const $siid_imagefiles = 72
Global Const $siid_videofiles = 73
Global Const $siid_mixedfiles = 74
Global Const $siid_folderback = 75
Global Const $siid_folderfront = 76
Global Const $siid_shield = 77
Global Const $siid_warning = 78
Global Const $siid_info = 79
Global Const $siid_error = 80
Global Const $siid_key = 81
Global Const $siid_software = 82
Global Const $siid_rename = 83
Global Const $siid_delete = 84
Global Const $siid_mediaaudiodvd = 85
Global Const $siid_mediamoviedvd = 86
Global Const $siid_mediaenhancedcd = 87
Global Const $siid_mediaenhanceddvd = 88
Global Const $siid_mediahddvd = 89
Global Const $siid_mediabluray = 90
Global Const $siid_mediavcd = 91
Global Const $siid_mediadvdplusr = 92
Global Const $siid_mediadvdplusrw = 93
Global Const $siid_desktoppc = 94
Global Const $siid_mobilepc = 95
Global Const $siid_users = 96
Global Const $siid_mediasmartmedia = 97
Global Const $siid_mediacompactflash = 98
Global Const $siid_devicecellphone = 99
Global Const $siid_devicecamera = 100
Global Const $siid_devicevideocamera = 101
Global Const $siid_deviceaudioplayer = 102
Global Const $siid_networkconnect = 103
Global Const $siid_internet = 104
Global Const $siid_zipfile = 105
Global Const $siid_settings = 106
Global Const $siid_drivehddvd = 132
Global Const $siid_drivebd = 133
Global Const $siid_mediahddvdrom = 134
Global Const $siid_mediahddvdr = 135
Global Const $siid_mediahddvdram = 136
Global Const $siid_mediabdrom = 137
Global Const $siid_mediabdr = 138
Global Const $siid_mediabdre = 139
Global Const $siid_clustereddrive = 140
Global Const $siid_max_icons = 174
Global Const $shgsi_iconlocation = 0
Global Const $shgsi_icon = $shgfi_icon
Global Const $shgsi_sysiconindex = $shgfi_sysiconindex
Global Const $shgsi_linkoverlay = $shgfi_linkoverlay
Global Const $shgsi_selected = $shgfi_selected
Global Const $shgsi_largeicon = $shgfi_largeicon
Global Const $shgsi_smallicon = $shgfi_smallicon
Global Const $shgsi_shelliconsize = $shgfi_shelliconsize
Global Const $nim_add = 0
Global Const $nim_modify = 1
Global Const $nim_delete = 2
Global Const $nim_setfocus = 3
Global Const $nim_setversion = 4
Global Const $nif_message = 1
Global Const $nif_icon = 2
Global Const $nif_tip = 4
Global Const $nif_state = 8
Global Const $nif_info = 16
Global Const $nif_guid = 32
Global Const $nif_realtime = 64
Global Const $nif_showtip = 128
Global Const $nis_hidden = 1
Global Const $nis_sharedicon = 2
Global Const $niif_none = 0
Global Const $niif_info = 1
Global Const $niif_warning = 2
Global Const $niif_error = 3
Global Const $niif_user = 4
Global Const $niif_nosound = 16
Global Const $niif_large_icon = 16
Global Const $niif_respect_quiet_time = 128
Global Const $niif_icon_mask = 15
Global Const $shop_printername = 1
Global Const $shop_filepath = 2
Global Const $shop_volumeguid = 4
Global Const $ofasi_edit = 1
Global Const $ofasi_opendesktop = 2
Global Const $quns_not_present = 1
Global Const $quns_busy = 2
Global Const $quns_running_d3d_full_screen = 3
Global Const $quns_presentation_mode = 4
Global Const $quns_accepts_notifications = 5
Global Const $quns_quiet_time = 6
Global Const $rest_norun = 1
Global Const $rest_noclose = 2
Global Const $rest_nosaveset = 3
Global Const $rest_nofilemenu = 4
Global Const $rest_nosetfolders = 5
Global Const $rest_nosettaskbar = 6
Global Const $rest_nodesktop = 7
Global Const $rest_nofind = 8
Global Const $rest_nodrives = 9
Global Const $rest_nodriveautorun = 10
Global Const $rest_nodrivetypeautorun = 11
Global Const $rest_nonethood = 12
Global Const $rest_startbanner = 13
Global Const $rest_restrictrun = 14
Global Const $rest_noprintertabs = 15
Global Const $rest_noprinterdelete = 16
Global Const $rest_noprinteradd = 17
Global Const $rest_nostartmenusubfolders = 18
Global Const $rest_mydocsonnet = 19
Global Const $rest_noexittodos = 20
Global Const $rest_enforceshellextsecurity = 21
Global Const $rest_linkresolveignorelinkinfo = 22
Global Const $rest_nocommongroups = 23
Global Const $rest_separatedesktopprocess = 24
Global Const $rest_noweb = 25
Global Const $rest_notraycontextmenu = 26
Global Const $rest_noviewcontextmenu = 27
Global Const $rest_nonetconnectdisconnect = 28
Global Const $rest_startmenulogoff = 29
Global Const $rest_nosettingsassist = 30
Global Const $rest_nointerneticon = 31
Global Const $rest_norecentdocshistory = 32
Global Const $rest_norecentdocsmenu = 33
Global Const $rest_noactivedesktop = 34
Global Const $rest_noactivedesktopchanges = 35
Global Const $rest_nofavoritesmenu = 36
Global Const $rest_clearrecentdocsonexit = 37
Global Const $rest_classicshell = 38
Global Const $rest_nocustomizewebview = 39
Global Const $rest_nohtmlwallpaper = 40
Global Const $rest_nochangingwallpaper = 41
Global Const $rest_nodeskcomp = 42
Global Const $rest_noadddeskcomp = 43
Global Const $rest_nodeldeskcomp = 44
Global Const $rest_noclosedeskcomp = 45
Global Const $rest_noclose_dragdropband = 46
Global Const $rest_nomovingband = 47
Global Const $rest_noeditdeskcomp = 48
Global Const $rest_noresolvesearch = 49
Global Const $rest_noresolvetrack = 50
Global Const $rest_forcecopyaclwithfile = 51
Global Const $rest_nologo3channelnotify = 52
Global Const $rest_noforgetsoftwareupdate = 53
Global Const $rest_nosetactivedesktop = 54
Global Const $rest_noupdatewindows = 55
Global Const $rest_nochangestarmenu = 56
Global Const $rest_nofolderoptions = 57
Global Const $rest_hasfindcomputers = 58
Global Const $rest_intellimenus = 59
Global Const $rest_rundlgmemcheckbox = 60
Global Const $rest_arp_showpostsetup = 61
Global Const $rest_nocsc = 62
Global Const $rest_nocontrolpanel = 63
Global Const $rest_enumworkgroup = 64
Global Const $rest_arp_noarp = 65
Global Const $rest_arp_noremovepage = 66
Global Const $rest_arp_noaddpage = 67
Global Const $rest_arp_nowinsetuppage = 68
Global Const $rest_greymsiads = 69
Global Const $rest_nochangemappeddrivelabel = 70
Global Const $rest_nochangemappeddrivecomment = 71
Global Const $rest_maxrecentdocs = 72
Global Const $rest_nonetworkconnections = 73
Global Const $rest_forcestartmenulogoff = 74
Global Const $rest_nowebview = 75
Global Const $rest_nocustomizethisfolder = 76
Global Const $rest_noencryption = 77
Global Const $rest_dontshowsuperhidden = 78
Global Const $rest_noshellsearchbutton = 79
Global Const $rest_nohardwaretab = 80
Global Const $rest_norunasinstallprompt = 81
Global Const $rest_promptrunasinstallnetpath = 82
Global Const $rest_nomanagemycomputerverb = 83
Global Const $rest_norecentdocsnethood = 84
Global Const $rest_disallowrun = 85
Global Const $rest_nowelcomescreen = 86
Global Const $rest_restrictcpl = 87
Global Const $rest_disallowcpl = 88
Global Const $rest_nosmballoontip = 89
Global Const $rest_nosmhelp = 90
Global Const $rest_nowinkeys = 91
Global Const $rest_noencryptonmove = 92
Global Const $rest_nolocalmachinerun = 93
Global Const $rest_nocurrentuserrun = 94
Global Const $rest_nolocalmachinerunonce = 95
Global Const $rest_nocurrentuserrunonce = 96
Global Const $rest_forceactivedesktopon = 97
Global Const $rest_nocomputersnearme = 98
Global Const $rest_noviewondrive = 99
Global Const $rest_nonetcrawl = 100
Global Const $rest_noshareddocuments = 101
Global Const $rest_nosmmydocs = 102
Global Const $rest_nosmmypics = 103
Global Const $rest_allowbitbuckdrives = 104
Global Const $rest_nonlegacyshellmode = 105
Global Const $rest_nocontrolpanelbarricade = 106
Global Const $rest_nostartpage = 107
Global Const $rest_noautotraynotify = 108
Global Const $rest_notaskgrouping = 109
Global Const $rest_nocdburning = 110
Global Const $rest_mycompnoprop = 111
Global Const $rest_mydocsnoprop = 112
Global Const $rest_nostartpanel = 113
Global Const $rest_nodisplayappearancepage = 114
Global Const $rest_nothemestab = 115
Global Const $rest_novisualstylechoice = 116
Global Const $rest_nosizechoice = 117
Global Const $rest_nocolorchoice = 118
Global Const $rest_setvisualstyle = 119
Global Const $rest_startrunnohomepath = 120
Global Const $rest_nousernameinstartpanel = 121
Global Const $rest_nomycomputericon = 122
Global Const $rest_nosmnetworkplaces = 123
Global Const $rest_nosmpinnedlist = 124
Global Const $rest_nosmmymusic = 125
Global Const $rest_nosmejectpc = 126
Global Const $rest_nosmmoreprograms = 127
Global Const $rest_nosmmfuprograms = 128
Global Const $rest_notrayitemsdisplay = 129
Global Const $rest_notoolbarsontaskbar = 130
Global Const $rest_nosmconfigureprograms = 131
Global Const $rest_hideclock = 132
Global Const $rest_nolowdiskspacechecks = 133
Global Const $rest_noentirenetwork = 134
Global Const $rest_nodesktopcleanup = 135
Global Const $rest_bitbucknukeondelete = 136
Global Const $rest_bitbuckconfirmdelete = 137
Global Const $rest_bitbucknoprop = 138
Global Const $rest_nodispbackground = 139
Global Const $rest_nodispscreensavepg = 140
Global Const $rest_nodispsettingspg = 141
Global Const $rest_nodispscreensavepreview = 142
Global Const $rest_nodisplaycpl = 143
Global Const $rest_hiderunasverb = 144
Global Const $rest_nothumbnailcache = 145
Global Const $rest_nostrcmplogical = 146
Global Const $rest_nopublishwizard = 147
Global Const $rest_noonlineprintswizard = 148
Global Const $rest_nowebservices = 149
Global Const $rest_allowunhashedwebview = 150
Global Const $rest_allowlegacywebview = 151
Global Const $rest_revertwebviewsecurity = 152
Global Const $rest_inheritconsolehandles = 153
Global Const $rest_sortmaxitemcount = 154
Global Const $rest_noremoterecursiveevents = 155
Global Const $rest_noremotechangenotify = 156
Global Const $rest_nosimplenetidlist = 157
Global Const $rest_noenumentirenetwork = 158
Global Const $rest_nodetailsthumbnailonnetwork = 159
Global Const $rest_nointernetopenwith = 160
Global Const $rest_allowlegacylmzbehavior = 161
Global Const $rest_dontretrybadnetname = 162
Global Const $rest_allowfileclsidjunctions = 163
Global Const $rest_noupnpinstall = 164
Global Const $rest_arp_dontgrouppatches = 165
Global Const $rest_arp_nochooseprogramspage = 166
Global Const $rest_nodisconnect = 167
Global Const $rest_nosecurity = 168
Global Const $rest_nofileassociate = 169
Global Const $rest_allowcommenttoggle = 170
Global Const $rest_usedesktopinicache = 171
Global Const $gil_dontcache = 16
Global Const $gil_notfilename = 8
Global Const $gil_perclass = 4
Global Const $gil_perinstance = 2
Global Const $gil_simulatedoc = 1
Global Const $gil_shield = 512
Global Const $gil_forcenoshield = 1024
Global Const $folderid_addnewprograms = "{DE61D971-5EBC-4F02-A3A9-6C82895E5C04}"
Global Const $folderid_admintools = "{724EF170-A42D-4FEF-9F26-B60E846FBA4F}"
Global Const $folderid_appupdates = "{A305CE99-F527-492B-8B1A-7E76FA98D6E4}"
Global Const $folderid_cdburning = "{9E52AB10-F80D-49DF-ACB8-4330F5687855}"
Global Const $folderid_changeremoveprograms = "{DF7266AC-9274-4867-8D55-3BD661DE872D}"
Global Const $folderid_commonadmintools = "{D0384E7D-BAC3-4797-8F14-CBA229B392B5}"
Global Const $folderid_commonoemlinks = "{C1BAE2D0-10DF-4334-BEDD-7AA20B227A9D}"
Global Const $folderid_commonprograms = "{0139D44E-6AFE-49F2-8690-3DAFCAE6FFB8}"
Global Const $folderid_commonstartmenu = "{A4115719-D62E-491D-AA7C-E74B8BE3B067}"
Global Const $folderid_commonstartup = "{82A5EA35-D9CD-47C5-9629-E15D2F714E6E}"
Global Const $folderid_commontemplates = "{B94237E7-57AC-4347-9151-B08C6C32D1F7}"
Global Const $folderid_computerfolder = "{0AC0837C-BBF8-452A-850D-79D08E667CA7}"
Global Const $folderid_conflictfolder = "{4BFEFB45-347D-4006-A5BE-AC0CB0567192}"
Global Const $folderid_connectionsfolder = "{6F0CD92B-2E97-45D1-88FF-B0D186B8DEDD}"
Global Const $folderid_contacts = "{56784854-C6CB-462B-8169-88E350ACB882}"
Global Const $folderid_controlpanelfolder = "{82A74AEB-AEB4-465C-A014-D097EE346D63}"
Global Const $folderid_cookies = "{2B0F765D-C0E9-4171-908E-08A611B84FF6}"
Global Const $folderid_desktop = "{B4BFCC3A-DB2C-424C-B029-7FE99A87C641}"
Global Const $folderid_devicemetadatastore = "{5CE4A5E9-E4EB-479D-B89F-130C02886155}"
Global Const $folderid_documentslibrary = "{7B0DB17D-9CD2-4A93-9733-46CC89022E7C}"
Global Const $folderid_downloads = "{374DE290-123F-4565-9164-39C4925E467B}"
Global Const $folderid_favorites = "{1777F761-68AD-4D8A-87BD-30B759FA33DD}"
Global Const $folderid_fonts = "{FD228CB7-AE11-4AE3-864C-16F3910AB8FE}"
Global Const $folderid_games = "{CAC52C1A-B53D-4EDC-92D7-6B2E8AC19434}"
Global Const $folderid_gametasks = "{054FAE61-4DD8-4787-80B6-090220C4B700}"
Global Const $folderid_history = "{D9DC8A3B-B784-432E-A781-5A1130A75963}"
Global Const $folderid_homegroup = "{52528A6B-B9E3-4ADD-B60D-588C2DBA842D}"
Global Const $folderid_implicitappshortcuts = "{BCB5256F-79F6-4CEE-B725-DC34E402FD46}"
Global Const $folderid_internetcache = "{352481E8-33BE-4251-BA85-6007CAEDCF9D}"
Global Const $folderid_internetfolder = "{4D9F7874-4E0C-4904-967B-40B0D20C3E4B}"
Global Const $folderid_libraries = "{1B3EA5DC-B587-4786-B4EF-BD1DC332AEAE}"
Global Const $folderid_links = "{BFB9D5E0-C6A9-404C-B2B2-AE6DB6AF4968}"
Global Const $folderid_localappdata = "{F1B32785-6FBA-4FCF-9D55-7B8E7F157091}"
Global Const $folderid_localappdatalow = "{A520A1A4-1780-4FF6-BD18-167343C5AF16}"
Global Const $folderid_localizedresourcesdir = "{2A00375E-224C-49DE-B8D1-440DF7EF3DDC}"
Global Const $folderid_music = "{4BD8D571-6D19-48D3-BE97-422220080E43}"
Global Const $folderid_musiclibrary = "{2112AB0A-C86A-4FFE-A368-0DE96E47012E}"
Global Const $folderid_nethood = "{C5ABBF53-E17F-4121-8900-86626FC2C973}"
Global Const $folderid_networkfolder = "{D20BEEC4-5CA8-4905-AE3B-BF251EA09B53}"
Global Const $folderid_originalimages = "{2C36C0AA-5812-4B87-BFD0-4CD0DFB19B39}"
Global Const $folderid_photoalbums = "{69D2CF90-FC33-4FB7-9A0C-EBB0F0FCB43C}"
Global Const $folderid_pictureslibrary = "{A990AE9F-A03B-4E80-94BC-9912D7504104}"
Global Const $folderid_pictures = "{33E28130-4E1E-4676-835A-98395C3BC3BB}"
Global Const $folderid_playlists = "{DE92C1C7-837F-4F69-A3BB-86E631204A23}"
Global Const $folderid_printersfolder = "{76FC4E2D-D6AD-4519-A663-37BD56068185}"
Global Const $folderid_printhood = "{9274BD8D-CFD1-41C3-B35E-B13F55A758F4}"
Global Const $folderid_profile = "{5E6C858F-0E22-4760-9AFE-EA3317B67173}"
Global Const $folderid_programdata = "{62AB5D82-FDC1-4DC3-A9DD-070D1D495D97}"
Global Const $folderid_programfiles = "{905E63B6-C1BF-494E-B29C-65B732D3D21A}"
Global Const $folderid_programfilesx64 = "{6D809377-6AF0-444B-8957-A3773F02200E}"
Global Const $folderid_programfilesx86 = "{7C5A40EF-A0FB-4BFC-874A-C0F2E0B9FA8E}"
Global Const $folderid_programfilescommon = "{F7F1ED05-9F6D-47A2-AAAE-29D317C6F066}"
Global Const $folderid_programfilescommonx64 = "{6365D5A7-0F0D-45E5-87F6-0DA56B6A4F7D}"
Global Const $folderid_programfilescommonx86 = "{DE974D24-D9C6-4D3E-BF91-F4455120B917}"
Global Const $folderid_programs = "{A77F5D77-2E2B-44C3-A6A2-ABA601054A51}"
Global Const $folderid_public = "{DFDF76A2-C82A-4D63-906A-5644AC457385}"
Global Const $folderid_publicdesktop = "{C4AA340D-F20F-4863-AFEF-F87EF2E6BA25}"
Global Const $folderid_publicdocuments = "{ED4824AF-DCE4-45A8-81E2-FC7965083634}"
Global Const $folderid_publicdownloads = "{3D644C9B-1FB8-4F30-9B45-F670235F79C0}"
Global Const $folderid_publicgametasks = "{DEBF2536-E1A8-4C59-B6A2-414586476AEA}"
Global Const $folderid_publiclibraries = "{48DAF80B-E6CF-4F4E-B800-0E69D84EE384}"
Global Const $folderid_publicmusic = "{3214FAB5-9757-4298-BB61-92A9DEAA44FF}"
Global Const $folderid_publicpictures = "{B6EBFB86-6907-413C-9AF7-4FC2ABF07CC5}"
Global Const $folderid_publicringtones = "{E555AB60-153B-4D17-9F04-A5FE99FC15EC}"
Global Const $folderid_publicvideos = "{2400183A-6185-49FB-A2D8-4A392A602BA3}"
Global Const $folderid_quicklaunch = "{52A4F021-7B75-48A9-9F6B-4B87A210BC8F}"
Global Const $folderid_recent = "{AE50C081-EBD2-438A-8655-8A092E34987A}"
Global Const $folderid_recordedtvlibrary = "{1A6FDBA2-F42D-4358-A798-B74D745926C5}"
Global Const $folderid_recyclebinfolder = "{B7534046-3ECB-4C18-BE4E-64CD4CB7D6AC}"
Global Const $folderid_resourcedir = "{8AD10C31-2ADB-4296-A8F7-E4701232C972}"
Global Const $folderid_ringtones = "{C870044B-F49E-4126-A9C3-B52A1FF411E8}"
Global Const $folderid_roamingappdata = "{3EB685DB-65F9-4CF6-A03A-E3EF65729F3D}"
Global Const $folderid_samplemusic = "{B250C668-F57D-4EE1-A63C-290EE7D1AA1F}"
Global Const $folderid_samplepictures = "{C4900540-2379-4C75-844B-64E6FAF8716B}"
Global Const $folderid_sampleplaylists = "{15CA69B3-30EE-49C1-ACE1-6B5EC372AFB5}"
Global Const $folderid_samplevideos = "{859EAD94-2E85-48AD-A71A-0969CB56A6CD}"
Global Const $folderid_savedgames = "{4C5C32FF-BB9D-43B0-B5B4-2D72E54EAAA4}"
Global Const $folderid_savedsearches = "{7D1D3A04-DEBB-4115-95CF-2F29DA2920DA}"
Global Const $folderid_search_csc = "{EE32E446-31CA-4ABA-814F-A5EBD2FD6D5E}"
Global Const $folderid_search_mapi = "{98EC0E18-2098-4D44-8644-66979315A281}"
Global Const $folderid_searchhome = "{190337D1-B8CA-4121-A639-6D472D16972A}"
Global Const $folderid_sendto = "{8983036C-27C0-404B-8F08-102D10DCFD74}"
Global Const $folderid_sidebardefaultparts = "{7B396E54-9EC5-4300-BE0A-2482EBAE1A26}"
Global Const $folderid_sidebarparts = "{A75D362E-50FC-4FB7-AC2C-A8BEAA314493}"
Global Const $folderid_startmenu = "{625B53C3-AB48-4EC1-BA1F-A1EF4146FC19}"
Global Const $folderid_startup = "{B97D20BB-F46A-4C97-BA10-5E3608430854}"
Global Const $folderid_syncmanagerfolder = "{43668BF8-C14E-49B2-97C9-747784D784B7}"
Global Const $folderid_syncresultsfolder = "{289A9A43-BE44-4057-A41B-587A76D7E7F9}"
Global Const $folderid_syncsetupfolder = "{0F214138-B1D3-4A90-BBA9-27CBC0C5389A}"
Global Const $folderid_system = "{1AC14E77-02E7-4E5D-B744-2EB1AE5198B7}"
Global Const $folderid_systemx86 = "{D65231B0-B2F1-4857-A4CE-A8E7C6EA7D27}"
Global Const $folderid_templates = "{A63293E8-664E-48DB-A079-DF759E0509F7}"
Global Const $folderid_userpinned = "{9E3995AB-1F9C-4F13-B827-48B24B6C7174}"
Global Const $folderid_userprofiles = "{0762D272-C50A-4BB0-A382-697DCD729B80}"
Global Const $folderid_userprogramfiles = "{5CD7AEE2-2219-4A67-B85D-6C9CE15660CB}"
Global Const $folderid_userprogramfilescommon = "{BCBD3057-CA5C-4622-B42D-BC56DB0AE516}"
Global Const $folderid_usersfiles = "{F3CE0F7C-4901-4ACC-8648-D5D44B04EF8F}"
Global Const $folderid_userslibraries = "{A302545D-DEFF-464B-ABE8-61C8648D939B}"
Global Const $folderid_videos = "{18989B1D-99B5-455B-841C-AB7C74E4DDFC}"
Global Const $folderid_videoslibrary = "{491E922F-5643-4AF4-A7EB-4E7A138D8174}"
Global Const $folderid_windows = "{F38BF404-1D43-42F2-9305-67DE0B28FC23}"
Global Const $kf_flag_alias_only = -2147483648
Global Const $kf_flag_create = 32768
Global Const $kf_flag_dont_verify = 16384
Global Const $kf_flag_dont_unexpand = 8192
Global Const $kf_flag_no_alias = 4096
Global Const $kf_flag_init = 2048
Global Const $kf_flag_default_path = 1024
Global Const $kf_flag_no_appcontainer_redirection = 65536
Global Const $kf_flag_not_parent_relative = 512
Global Const $kf_flag_simple_idlist = 256
#Region Global Variables and Constants
	Global Const $tagnotifyicondata = "struct;dword Size;hwnd hWnd;uint ID;uint Flags;uint CallbackMessage;ptr hIcon;wchar Tip[128];dword State;dword StateMask;wchar Info[256];uint Version;wchar InfoTitle[64];dword InfoFlags;endstruct"
	Global Const $tagnotifyicondata_v3 = $tagnotifyicondata & ";" & $tagguid
	Global Const $tagnotifyicondata_v4 = $tagnotifyicondata_v3 & ";ptr hBalloonIcon;"
	Global Const $tagshellexecuteinfo = "dword Size;ulong Mask;hwnd hWnd;ptr Verb;ptr File;ptr Parameters;ptr Directory;int Show;ulong_ptr hInstApp;ptr IDList;ptr Class;ulong_ptr hKeyClass;dword HotKey;ptr hMonitor;ptr hProcess"
	Global Const $tagshfileinfo = "ptr hIcon;int iIcon;dword Attributes;wchar DisplayName[260];wchar TypeName[80]"
	Global Const $tagshfileopstruct = "hwnd hWnd;uint Func;ptr From;ptr To;dword Flags;int fAnyOperationsAborted;ptr hNameMappings;ptr ProgressTitle"
	Global Const $tagshfoldercustomsettings = "dword Size;dword Mask;ptr GUID;ptr WebViewTemplate;dword SizeWVT;ptr WebViewTemplateVersion;ptr InfoTip;dword SizeIT;ptr CLSID;dword Flags;ptr IconFile;dword SizeIF;int IconIndex;ptr Logo;dword SizeL"
	Global Const $tagshstockiconinfo = "dword Size;ptr hIcon;int SysImageIndex;int iIcon;wchar Path[260]"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_defsubclassproc($hwnd, $imsg, $wparam, $lparam)
		Local $aret = DllCall("comctl32.dll", "lresult", "DefSubclassProc", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_dllgetversion($sfilepath)
		Local $tversion = DllStructCreate("dword[5]")
		DllStructSetData($tversion, 1, DllStructGetSize($tversion), 1)
		Local $aret = DllCall($sfilepath, "uint", "DllGetVersion", "struct*", $tversion)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $aresult[4]
		For $i = 0 To 3
			$aresult[$i] = DllStructGetData($tversion, 1, $i + 2)
		Next
		Return $aresult
	EndFunc

	Func _winapi_getallusersprofiledirectory()
		Local $aret = DllCall("userenv.dll", "bool", "GetAllUsersProfileDirectoryW", "wstr", "", "dword*", 4096)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_getdefaultuserprofiledirectory()
		Local $aret = DllCall("userenv.dll", "bool", "GetDefaultUserProfileDirectoryW", "wstr", "", "dword*", 4096)
		If @error Then Return SetError(@error, @extended, "")
		Return $aret[1]
	EndFunc

	Func _winapi_getwindowsubclass($hwnd, $psubclassproc, $idsubclass)
		Local $aret = DllCall("comctl32.dll", "bool", "GetWindowSubclass", "hwnd", $hwnd, "ptr", $psubclassproc, "uint_ptr", $idsubclass, "dword_ptr*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $aret[4]
	EndFunc

	Func _winapi_removewindowsubclass($hwnd, $psubclassproc, $idsubclass)
		Local $aret = DllCall("comctl32.dll", "bool", "RemoveWindowSubclass", "hwnd", $hwnd, "ptr", $psubclassproc, "uint_ptr", $idsubclass)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setcurrentprocessexplicitappusermodelid($sappid)
		Local $aret = DllCall("shell32.dll", "long", "SetCurrentProcessExplicitAppUserModelID", "wstr", $sappid)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_setwindowsubclass($hwnd, $psubclassproc, $idsubclass, $pdata = 0)
		Local $aret = DllCall("comctl32.dll", "bool", "SetWindowSubclass", "hwnd", $hwnd, "ptr", $psubclassproc, "uint_ptr", $idsubclass, "dword_ptr", $pdata)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_shelladdtorecentdocs($sfilepath)
		Local $stypeoffile = "wstr"
		If StringStripWS($sfilepath, $str_stripleading + $str_striptrailing) Then
			$sfilepath = _winapi_pathsearchandqualify($sfilepath, 1)
			If NOT $sfilepath Then
				Return SetError(1, 0, 0)
			EndIf
		Else
			$stypeoffile = "ptr"
			$sfilepath = 0
		EndIf
		DllCall("shell32.dll", "none", "SHAddToRecentDocs", "uint", 3, $stypeoffile, $sfilepath)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_shellchangenotify($ievent, $iflags, $iitem1 = 0, $iitem2 = 0)
		Local $stypeofitem1 = "dword_ptr", $stypeofitem2 = "dword_ptr"
		If IsString($iitem1) Then
			$stypeofitem1 = "wstr"
		EndIf
		If IsString($iitem2) Then
			$stypeofitem2 = "wstr"
		EndIf
		DllCall("shell32.dll", "none", "SHChangeNotify", "long", $ievent, "uint", $iflags, $stypeofitem1, $iitem1, $stypeofitem2, $iitem2)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_shellchangenotifyderegister($iid)
		Local $aret = DllCall("shell32.dll", "bool", "SHChangeNotifyDeregister", "ulong", $iid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_shellchangenotifyregister($hwnd, $imsg, $ievents, $isources, $apaths, $brecursive = False)
		Local $ipath = $apaths, $tagstruct = ""
		If IsArray($apaths) Then
			If UBound($apaths, $ubound_columns) Then Return SetError(1, 0, 0)
		Else
			Dim $apaths[1] = [$ipath]
		EndIf
		For $i = 0 To UBound($apaths) - 1
			If NOT _winapi_pathisdirectory($apaths[$i]) Then Return SetError(2, 0, 0)
		Next
		For $i = 0 To UBound($apaths) - 1
			$tagstruct &= "ptr;int;"
		Next
		Local $tentry = DllStructCreate($tagstruct)
		For $i = 0 To UBound($apaths) - 1
			$apaths[$i] = _winapi_shellilcreatefrompath(_winapi_pathsearchandqualify($apaths[$i]))
			DllStructSetData($tentry, 2 * $i + 1, $apaths[$i])
			DllStructSetData($tentry, 2 * $i + 2, $brecursive)
		Next
		Local $ierror = 0
		Local $aret = DllCall("shell32.dll", "ulong", "SHChangeNotifyRegister", "hwnd", $hwnd, "int", $isources, "long", $ievents, "uint", $imsg, "int", UBound($apaths), "struct*", $tentry)
		If @error OR NOT $aret[0] Then $ierror = @error + 10
		For $i = 0 To UBound($apaths) - 1
			_winapi_cotaskmemfree($apaths[$i])
		Next
		Return SetError($ierror, 0, $aret[0])
	EndFunc

	Func _winapi_shellcreatedirectory($sfilepath, $hparent = 0, $tsecurity = 0)
		Local $aret = DllCall("shell32.dll", "int", "SHCreateDirectoryExW", "hwnd", $hparent, "wstr", $sfilepath, "struct*", $tsecurity)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_shellemptyrecyclebin($sroot = "", $iflags = 0, $hparent = 0)
		Local $aret = DllCall("shell32.dll", "long", "SHEmptyRecycleBinW", "hwnd", $hparent, "wstr", $sroot, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_shellexecute($sfilepath, $sargs = "", $sdir = "", $sverb = "", $ishow = 1, $hparent = 0)
		Local $stypeofargs = "wstr", $stypeofdir = "wstr", $stypeofverb = "wstr"
		If NOT StringStripWS($sargs, $str_stripleading + $str_striptrailing) Then
			$stypeofargs = "ptr"
			$sargs = 0
		EndIf
		If NOT StringStripWS($sdir, $str_stripleading + $str_striptrailing) Then
			$stypeofdir = "ptr"
			$sdir = 0
		EndIf
		If NOT StringStripWS($sverb, $str_stripleading + $str_striptrailing) Then
			$stypeofverb = "ptr"
			$sverb = 0
		EndIf
		Local $aret = DllCall("shell32.dll", "ULONG_PTR", "ShellExecuteW", "hwnd", $hparent, $stypeofverb, $sverb, "wstr", $sfilepath, $stypeofargs, $sargs, $stypeofdir, $sdir, "int", $ishow)
		If @error Then Return SetError(@error, @extended, False)
		If $aret[0] <= 32 Then Return SetError(10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_shellexecuteex(ByRef $tshexinfo)
		Local $aret = DllCall("shell32.dll", "bool", "ShellExecuteExW", "struct*", $tshexinfo)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_shellextractassociatedicon($sfilepath, $bsmall = False)
		Local $iflags = 256
		If NOT _winapi_pathisdirectory($sfilepath) Then
			$iflags = BitOR($iflags, 16)
		EndIf
		If $bsmall Then
			$iflags = BitOR($iflags, 1)
		EndIf
		Local $tshfileinfo = DllStructCreate($tagshfileinfo)
		If NOT _winapi_shellgetfileinfo($sfilepath, $iflags, 0, $tshfileinfo) Then Return SetError(@error + 10, @extended, 0)
		Return DllStructGetData($tshfileinfo, "hIcon")
	EndFunc

	Func _winapi_shellextracticon($sicon, $iindex, $iwidth, $iheight)
		Local $aret = DllCall("shell32.dll", "int", "SHExtractIconsW", "wstr", $sicon, "int", $iindex, "int", $iwidth, "int", $iheight, "ptr*", 0, "ptr*", 0, "int", 1, "int", 0)
		If @error OR NOT $aret[0] OR NOT $aret[5] Then Return SetError(@error, @extended, 0)
		Return $aret[5]
	EndFunc

	Func _winapi_shellfileoperation($sfrom, $sto, $ifunc, $iflags, $stitle = "", $hparent = 0)
		Local $idata
		If NOT IsArray($sfrom) Then
			$idata = $sfrom
			Dim $sfrom[1] = [$idata]
		EndIf
		Local $tfrom = _winapi_arraytostruct($sfrom)
		If @error Then Return SetError(@error + 20, @extended, 0)
		If NOT IsArray($sto) Then
			$idata = $sto
			Dim $sto[1] = [$idata]
		EndIf
		Local $tto = _winapi_arraytostruct($sto)
		If @error Then Return SetError(@error + 30, @extended, 0)
		Local $tshfileopstruct = DllStructCreate($tagshfileopstruct)
		DllStructSetData($tshfileopstruct, "hWnd", $hparent)
		DllStructSetData($tshfileopstruct, "Func", $ifunc)
		DllStructSetData($tshfileopstruct, "From", DllStructGetPtr($tfrom))
		DllStructSetData($tshfileopstruct, "To", DllStructGetPtr($tto))
		DllStructSetData($tshfileopstruct, "Flags", $iflags)
		DllStructSetData($tshfileopstruct, "ProgressTitle", $stitle)
		Local $aret = DllCall("shell32.dll", "int", "SHFileOperationW", "struct*", $tshfileopstruct)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tshfileopstruct
	EndFunc

	Func _winapi_shellflushsfcache()
		DllCall("shell32.dll", "none", "SHFlushSFCache")
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_shellgetfileinfo($sfilepath, $iflags, $iattributes, ByRef $tshfileinfo)
		Local $aret = DllCall("shell32.dll", "dword_ptr", "SHGetFileInfoW", "wstr", $sfilepath, "dword", $iattributes, "struct*", $tshfileinfo, "uint", DllStructGetSize($tshfileinfo), "uint", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_shellgeticonoverlayindex($sicon, $iindex)
		Local $stypeoficon = "wstr"
		If NOT StringStripWS($sicon, $str_stripleading + $str_striptrailing) Then
			$stypeoficon = "ptr"
			$sicon = 0
		EndIf
		Local $aret = DllCall("shell32.dll", "int", "SHGetIconOverlayIndexW", $stypeoficon, $sicon, "int", $iindex)
		If @error OR ($aret[0] = -1) Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_shellgetknownfolderidlist($sguid, $iflags = 0, $htoken = 0)
		Local $tguid = DllStructCreate($tagguid)
		Local $aret = DllCall("ole32.dll", "uint", "CLSIDFromString", "wstr", $sguid, "struct*", $tguid)
		If @error OR $aret[0] Then Return SetError(@error + 20, @extended, 0)
		$aret = DllCall("shell32.dll", "uint", "SHGetKnownFolderIDList", "struct*", $tguid, "dword", $iflags, "handle", $htoken, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[4]
	EndFunc

	Func _winapi_shellgetknownfolderpath($sguid, $iflags = 0, $htoken = 0)
		Local $tguid = DllStructCreate($tagguid)
		Local $aret = DllCall("ole32.dll", "long", "CLSIDFromString", "wstr", $sguid, "struct*", $tguid)
		If @error OR $aret[0] Then Return SetError(@error + 20, @extended, "")
		$aret = DllCall("shell32.dll", "long", "SHGetKnownFolderPath", "struct*", $tguid, "dword", $iflags, "handle", $htoken, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Local $spath = _winapi_getstring($aret[4])
		_winapi_cotaskmemfree($aret[4])
		Return $spath
	EndFunc

	Func _winapi_shellgetlocalizedname($sfilepath)
		Local $aret = DllCall("shell32.dll", "long", "SHGetLocalizedName", "wstr", $sfilepath, "wstr", "", "uint*", 0, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $aresult[2]
		Local $aret1 = DllCall("kernel32.dll", "dword", "ExpandEnvironmentStringsW", "wstr", $aret[2], "wstr", "", "dword", 4096)
		$aresult[0] = $aret1[2]
		$aresult[1] = $aret[4]
		Return $aresult
	EndFunc

	Func _winapi_shellgetpathfromidlist($ppidl)
		Local $aret = DllCall("shell32.dll", "bool", "SHGetPathFromIDListW", "struct*", $ppidl, "wstr", "")
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_shellgetsetfoldercustomsettings($sfilepath, $iflag, ByRef $tshfcs)
		Local $sproc = "SHGetSetFolderCustomSettings"
		If $__winver < 1536 Then $sproc &= "W"
		Local $aret = DllCall("shell32.dll", "long", $sproc, "struct*", $tshfcs, "wstr", $sfilepath, "dword", $iflag)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_shellgetsettings($iflags)
		Local $tshellstate = DllStructCreate("uint[8]")
		DllCall("shell32.dll", "none", "SHGetSetSettings", "struct*", $tshellstate, "dword", $iflags, "bool", 0)
		If @error Then Return SetError(@error, @extended, 0)
		Local $ival1 = DllStructGetData($tshellstate, 1, 1)
		Local $ival2 = DllStructGetData($tshellstate, 1, 8)
		Local $iresult = 0
		Local $aopt[20][2] = [[1, 1], [2, 2], [4, 32768], [8, 32], [16, 8], [32, 128], [64, 512], [128, 1024], [256, 2048], [1024, 4096], [2048, 8192], [4096, 16384], [8192, 131072], [32768, 262144], [65536, 1048576], [1, 524288], [2, 2097152], [8, 8388608], [16, 16777216], [32, 33554432]]
		For $i = 0 To 14
			If BitAND($ival1, $aopt[$i][0]) Then
				$iresult += $aopt[$i][1]
			EndIf
		Next
		For $i = 15 To 19
			If BitAND($ival2, $aopt[$i][0]) Then
				$iresult += $aopt[$i][1]
			EndIf
		Next
		Return $iresult
	EndFunc

	Func _winapi_shellgetspecialfolderlocation($icsidl)
		Local $aret = DllCall("shell32.dll", "long", "SHGetSpecialFolderLocation", "hwnd", 0, "int", $icsidl, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[3]
	EndFunc

	Func _winapi_shellgetspecialfolderpath($icsidl, $bcreate = False)
		Local $aret = DllCall("shell32.dll", "bool", "SHGetSpecialFolderPathW", "hwnd", 0, "wstr", "", "int", $icsidl, "bool", $bcreate)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_shellgetstockiconinfo($isiid, $iflags)
		Local $tshstockiconinfo = DllStructCreate($tagshstockiconinfo)
		DllStructSetData($tshstockiconinfo, "Size", DllStructGetSize($tshstockiconinfo))
		Local $aret = DllCall("shell32.dll", "long", "SHGetStockIconInfo", "int", $isiid, "uint", $iflags, "struct*", $tshstockiconinfo)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tshstockiconinfo
	EndFunc

	Func _winapi_shellilcreatefrompath($sfilepath)
		Local $aret = DllCall("shell32.dll", "long", "SHILCreateFromPath", "wstr", $sfilepath, "ptr*", 0, "dword*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[2]
	EndFunc

	Func _winapi_shellnotifyicon($imessage, ByRef $tnotifyicondata)
		Local $aret = DllCall("shell32.dll", "bool", "Shell_NotifyIconW", "dword", $imessage, "struct*", $tnotifyicondata)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_shellnotifyicongetrect($hwnd, $iid, $tguid = 0)
		Local $tnii = DllStructCreate("dword;hwnd;uint;" & $tagguid)
		DllStructSetData($tnii, 1, DllStructGetSize($tnii))
		DllStructSetData($tnii, 2, $hwnd)
		DllStructSetData($tnii, 3, $iid)
		If IsDllStruct($tguid) Then
			If NOT _winapi_movememory(DllStructGetPtr($tnii, 4), $tguid, 16) Then Return SetError(@error + 10, @extended, 0)
		EndIf
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("shell32.dll", "long", "Shell_NotifyIconGetRect", "struct*", $tnii, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $trect
	EndFunc

	Func _winapi_shellobjectproperties($sfilepath, $itype = 2, $sproperty = "", $hparent = 0)
		Local $stypeofproperty = "wstr"
		If NOT StringStripWS($sproperty, $str_stripleading + $str_striptrailing) Then
			$stypeofproperty = "ptr"
			$sproperty = 0
		EndIf
		Local $aret = DllCall("shell32.dll", "bool", "SHObjectProperties", "hwnd", $hparent, "dword", $itype, "wstr", $sfilepath, $stypeofproperty, $sproperty)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_shellopenfolderandselectitems($sfilepath, $anames = 0, $istart = 0, $iend = -1, $iflags = 0)
		Local $ppidl, $aret, $tptr = 0, $icount = 0, $iobj = 0, $ierror = 0
		$sfilepath = _winapi_pathremovebackslash(_winapi_pathsearchandqualify($sfilepath))
		If IsArray($anames) Then
			If $sfilepath AND NOT _winapi_pathisdirectory($sfilepath) Then Return SetError(@error + 20, @extended, 0)
		EndIf
		$ppidl = _winapi_shellilcreatefrompath($sfilepath)
		If @error Then Return SetError(@error + 30, @extended, 0)
		If NOT __checkerrorarraybounds($anames, $istart, $iend) Then
			$tptr = DllStructCreate("ptr[" & ($iend - $istart + 1) & "]")
			For $i = $istart To $iend
				$icount += 1
				If $anames[$i] Then
					DllStructSetData($tptr, 1, _winapi_shellilcreatefrompath($sfilepath & "\" & $anames[$i]), $icount)
				Else
					DllStructSetData($tptr, 1, 0, $icount)
				EndIf
			Next
		EndIf
		If _winapi_coinitialize() Then $iobj = 1
		$aret = DllCall("shell32.dll", "long", "SHOpenFolderAndSelectItems", "ptr", $ppidl, "uint", $icount, "struct*", $tptr, "dword", $iflags)
		If @error Then
			$ierror = @error + 10
		Else
			If $aret[0] Then $ierror = 10
		EndIf
		If $iobj Then _winapi_couninitialize()
		_winapi_cotaskmemfree($ppidl)
		For $i = 1 To $icount
			$ppidl = DllStructGetData($tptr, $i)
			If $ppidl Then
				_winapi_cotaskmemfree($ppidl)
			EndIf
		Next
		If $ierror = 10 Then Return SetError(10, $aret[0], 0)
		If $ierror Then Return SetError($ierror, 0, 0)
		Return 1
	EndFunc

	Func _winapi_shellqueryrecyclebin($sroot = "")
		Local $tshqrbi = DllStructCreate("align 4;dword_ptr;int64;int64")
		DllStructSetData($tshqrbi, 1, DllStructGetSize($tshqrbi))
		Local $aret = DllCall("shell32.dll", "long", "SHQueryRecycleBinW", "wstr", $sroot, "struct*", $tshqrbi)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $aresult[2]
		$aresult[0] = DllStructGetData($tshqrbi, 2)
		$aresult[1] = DllStructGetData($tshqrbi, 3)
		Return $aresult
	EndFunc

	Func _winapi_shellqueryusernotificationstate()
		Local $aret = DllCall("shell32.dll", "long", "SHQueryUserNotificationState", "uint*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[1]
	EndFunc

	Func _winapi_shellremovelocalizedname($sfilepath)
		Local $aret = DllCall("shell32.dll", "long", "SHRemoveLocalizedName", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_shellrestricted($irestriction)
		Local $aret = DllCall("shell32.dll", "dword", "SHRestricted", "uint", $irestriction)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_shellsetknownfolderpath($sguid, $sfilepath, $iflags = 0, $htoken = 0)
		Local $tguid = DllStructCreate($tagguid)
		Local $aret = DllCall("ole32.dll", "long", "CLSIDFromString", "wstr", $sguid, "struct*", $tguid)
		If @error OR $aret[0] Then Return SetError(@error + 20, @extended, 0)
		$aret = DllCall("shell32.dll", "long", "SHSetKnownFolderPath", "struct*", $tguid, "dword", $iflags, "handle", $htoken, "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_shellsetlocalizedname($sfilepath, $smodule, $iresid)
		Local $aret = DllCall("shell32.dll", "long", "SHSetLocalizedName", "wstr", $sfilepath, "wstr", $smodule, "int", $iresid)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_shellsetsettings($iflags, $bset)
		Local $ival1 = 0, $ival2 = 0
		Local $aopt[20][2] = [[1, 1], [2, 2], [4, 32768], [8, 32], [16, 8], [32, 128], [64, 512], [128, 1024], [256, 2048], [1024, 4096], [2048, 8192], [4096, 16384], [8192, 131072], [32768, 262144], [65536, 1048576], [1, 524288], [2, 2097152], [8, 8388608], [16, 16777216], [32, 33554432]]
		If $bset Then
			For $i = 0 To 14
				If BitAND($iflags, $aopt[$i][1]) Then
					$ival1 += $aopt[$i][0]
				EndIf
			Next
			For $i = 15 To 19
				If BitAND($iflags, $aopt[$i][1]) Then
					$ival2 += $aopt[$i][0]
				EndIf
			Next
		EndIf
		Local $tshellstate = DllStructCreate("uint[8]")
		DllStructSetData($tshellstate, 1, $ival1, 1)
		DllStructSetData($tshellstate, 1, $ival2, 8)
		DllCall("shell32.dll", "none", "SHGetSetSettings", "struct*", $tshellstate, "dword", $iflags, "bool", 1)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_shellupdateimage($sicon, $iindex, $iimage, $iflags = 0)
		DllCall("shell32.dll", "none", "SHUpdateImageW", "wstr", $sicon, "int", $iindex, "uint", $iflags, "int", $iimage)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

#EndRegion Public Functions
Global Const $bpbf_compatiblebitmap = 0
Global Const $bpbf_dib = 1
Global Const $bpbf_topdowndib = 2
Global Const $bpbf_topdownmonodib = 3
Global Const $bppf_erase = 1
Global Const $bppf_noclip = 2
Global Const $bppf_nonclient = 4
Global Const $dtt_textcolor = 1
Global Const $dtt_bordercolor = 2
Global Const $dtt_shadowcolor = 4
Global Const $dtt_shadowtype = 8
Global Const $dtt_shadowoffset = 16
Global Const $dtt_bordersize = 32
Global Const $dtt_fontprop = 64
Global Const $dtt_colorprop = 128
Global Const $dtt_stateid = 256
Global Const $dtt_calcrect = 512
Global Const $dtt_applyoverlay = 1024
Global Const $dtt_glowsize = 2048
Global Const $dtt_callback = 4096
Global Const $dtt_composited = 8192
Global Const $dtt_validbits = BitOR($dtt_textcolor, $dtt_bordercolor, $dtt_shadowcolor, $dtt_shadowtype, $dtt_shadowoffset, $dtt_bordersize, $dtt_fontprop, $dtt_colorprop, $dtt_stateid, $dtt_calcrect, $dtt_applyoverlay, $dtt_glowsize, $dtt_composited)
Global Const $tst_none = 0
Global Const $tst_single = 1
Global Const $tst_continuous = 2
Global Const $stap_allow_nonclient = 1
Global Const $stap_allow_controls = 2
Global Const $stap_allow_webcontent = 4
Global Const $gbf_direct = 1
Global Const $gbf_copy = 2
Global Const $gbf_validbits = BitOR($gbf_direct, $gbf_copy)
Global Const $sz_thdocprop_author = "Author"
Global Const $sz_thdocprop_canonicalname = "ThemeName"
Global Const $sz_thdocprop_displayname = "DisplayName"
Global Const $sz_thdocprop_tooltip = "ToolTip"
Global Const $ts_min = 0
Global Const $ts_true = 1
Global Const $ts_draw = 2
Global Const $po_class = 2
Global Const $po_global = 3
Global Const $po_notfound = 4
Global Const $po_part = 1
Global Const $po_state = 0
Global Const $tmt_bool = 203
Global Const $tmt_color = 204
Global Const $tmt_dibdata = 2
Global Const $tmt_diskstream = 213
Global Const $tmt_enum = 200
Global Const $tmt_filename = 206
Global Const $tmt_font = 210
Global Const $tmt_glyphdibdata = 8
Global Const $tmt_hbitmap = 212
Global Const $tmt_int = 202
Global Const $tmt_intlist = 211
Global Const $tmt_margins = 205
Global Const $tmt_position = 208
Global Const $tmt_rect = 209
Global Const $tmt_size = 207
Global Const $tmt_string = 201
Global Const $tmt_alwaysshowsizingbar = 2208
Global Const $tmt_autosize = 2202
Global Const $tmt_bgfill = 2205
Global Const $tmt_borderonly = 2203
Global Const $tmt_composited = 2204
Global Const $tmt_compositedopaque = 2219
Global Const $tmt_drawborders = 2214
Global Const $tmt_flatmenus = 1001
Global Const $tmt_glyphonly = 2207
Global Const $tmt_glyphtransparent = 2206
Global Const $tmt_integralsizing = 2211
Global Const $tmt_localizedmirrorimage = 2220
Global Const $tmt_mirrorimage = 2209
Global Const $tmt_noetchedeffect = 2215
Global Const $tmt_sourcegrow = 2212
Global Const $tmt_sourceshrink = 2213
Global Const $tmt_textapplyoverlay = 2216
Global Const $tmt_textglow = 2217
Global Const $tmt_textitalic = 2218
Global Const $tmt_transparent = 2201
Global Const $tmt_uniformsizing = 2210
Global Const $tmt_userpicture = 5001
Global Const $tmt_accentcolorhint = 3823
Global Const $tmt_activeborder = 1611
Global Const $tmt_activecaption = 1603
Global Const $tmt_appworkspace = 1613
Global Const $tmt_background = 1602
Global Const $tmt_blendcolor = 5003
Global Const $tmt_bodytextcolor = 3827
Global Const $tmt_bordercolor = 3801
Global Const $tmt_bordercolorhint = 3822
Global Const $tmt_btnface = 1616
Global Const $tmt_btnhighlight = 1621
Global Const $tmt_btnshadow = 1617
Global Const $tmt_btntext = 1619
Global Const $tmt_buttonalternateface = 1626
Global Const $tmt_captiontext = 1610
Global Const $tmt_dkshadow3d = 1622
Global Const $tmt_edgedkshadowcolor = 3807
Global Const $tmt_edgefillcolor = 3808
Global Const $tmt_edgehighlightcolor = 3805
Global Const $tmt_edgelightcolor = 3804
Global Const $tmt_edgeshadowcolor = 3806
Global Const $tmt_fillcolor = 3802
Global Const $tmt_fillcolorhint = 3821
Global Const $tmt_fromcolor1 = 2001
Global Const $tmt_fromcolor2 = 2002
Global Const $tmt_fromcolor3 = 2003
Global Const $tmt_fromcolor4 = 2004
Global Const $tmt_fromcolor5 = 2005
Global Const $tmt_glowcolor = 3816
Global Const $tmt_glyphtextcolor = 3819
Global Const $tmt_glyphtransparentcolor = 3820
Global Const $tmt_gradientactivecaption = 1628
Global Const $tmt_gradientcolor1 = 3810
Global Const $tmt_gradientcolor2 = 3811
Global Const $tmt_gradientcolor3 = 3812
Global Const $tmt_gradientcolor4 = 3813
Global Const $tmt_gradientcolor5 = 3814
Global Const $tmt_gradientinactivecaption = 1629
Global Const $tmt_graytext = 1618
Global Const $tmt_heading1textcolor = 3825
Global Const $tmt_heading2textcolor = 3826
Global Const $tmt_highlight = 1614
Global Const $tmt_highlighttext = 1615
Global Const $tmt_hottracking = 1627
Global Const $tmt_inactiveborder = 1612
Global Const $tmt_inactivecaption = 1604
Global Const $tmt_inactivecaptiontext = 1620
Global Const $tmt_infobk = 1625
Global Const $tmt_infotext = 1624
Global Const $tmt_light3d = 1623
Global Const $tmt_menu = 1605
Global Const $tmt_menubar = 1631
Global Const $tmt_menuhilight = 1630
Global Const $tmt_menutext = 1608
Global Const $tmt_scrollbar = 1601
Global Const $tmt_shadowcolor = 3815
Global Const $tmt_textbordercolor = 3817
Global Const $tmt_textcolor = 3803
Global Const $tmt_textcolorhint = 3824
Global Const $tmt_textshadowcolor = 3818
Global Const $tmt_transparentcolor = 3809
Global Const $tmt_window = 1606
Global Const $tmt_windowframe = 1607
Global Const $tmt_windowtext = 1609
Global Const $tmt_atlasimage = 8000
Global Const $tmt_bgtype = 4001
Global Const $tmt_bordertype = 4002
Global Const $tmt_contentalignment = 4006
Global Const $tmt_filltype = 4003
Global Const $tmt_glyphtype = 4012
Global Const $tmt_glyphfontsizingtype = 4014
Global Const $tmt_halign = 4005
Global Const $tmt_iconeffect = 4009
Global Const $tmt_imagelayout = 4011
Global Const $tmt_imageselecttype = 4013
Global Const $tmt_offsettype = 4008
Global Const $tmt_sizingtype = 4004
Global Const $tmt_textshadowtype = 4010
Global Const $tmt_truesizescalingtype = 4015
Global Const $tmt_valign = 4007
Global Const $tmt_glyphimagefile = 3008
Global Const $tmt_imagefile = 3001
Global Const $tmt_imagefile1 = 3002
Global Const $tmt_imagefile2 = 3003
Global Const $tmt_imagefile3 = 3004
Global Const $tmt_imagefile4 = 3005
Global Const $tmt_imagefile5 = 3006
Global Const $tmt_scaledbackground = 7001
Global Const $tmt_bodyfont = 809
Global Const $tmt_captionfont = 801
Global Const $tmt_glyphfont = 2601
Global Const $tmt_heading1font = 807
Global Const $tmt_heading2font = 808
Global Const $tmt_icontitlefont = 806
Global Const $tmt_menufont = 803
Global Const $tmt_msgboxfont = 805
Global Const $tmt_smallcaptionfont = 802
Global Const $tmt_statusfont = 804
Global Const $tmt_alphalevel = 2402
Global Const $tmt_alphathreshold = 2415
Global Const $tmt_animationdelay = 2428
Global Const $tmt_animationduration = 5006
Global Const $tmt_bordersize = 2403
Global Const $tmt_charset = 403
Global Const $tmt_colorizationcolor = 2431
Global Const $tmt_colorizationopacity = 2432
Global Const $tmt_framespersecond = 2426
Global Const $tmt_fromhue1 = 1801
Global Const $tmt_fromhue2 = 1802
Global Const $tmt_fromhue3 = 1803
Global Const $tmt_fromhue4 = 1804
Global Const $tmt_fromhue5 = 1805
Global Const $tmt_glowintensity = 2429
Global Const $tmt_glyphindex = 2418
Global Const $tmt_gradientratio1 = 2406
Global Const $tmt_gradientratio2 = 2407
Global Const $tmt_gradientratio3 = 2408
Global Const $tmt_gradientratio4 = 2409
Global Const $tmt_gradientratio5 = 2410
Global Const $tmt_height = 2417
Global Const $tmt_imagecount = 2401
Global Const $tmt_mincolordepth = 1301
Global Const $tmt_mindpi1 = 2420
Global Const $tmt_mindpi2 = 2421
Global Const $tmt_mindpi3 = 2422
Global Const $tmt_mindpi4 = 2423
Global Const $tmt_mindpi5 = 2424
Global Const $tmt_opacity = 2430
Global Const $tmt_pixelsperframe = 2427
Global Const $tmt_progresschunksize = 2411
Global Const $tmt_progressspacesize = 2412
Global Const $tmt_roundcornerheight = 2405
Global Const $tmt_roundcornerwidth = 2404
Global Const $tmt_saturation = 2413
Global Const $tmt_textbordersize = 2414
Global Const $tmt_textglowsize = 2425
Global Const $tmt_tocolor1 = 2006
Global Const $tmt_tocolor2 = 2007
Global Const $tmt_tocolor3 = 2008
Global Const $tmt_tocolor4 = 2009
Global Const $tmt_tocolor5 = 2010
Global Const $tmt_tohue1 = 1806
Global Const $tmt_tohue2 = 1807
Global Const $tmt_tohue3 = 1808
Global Const $tmt_tohue4 = 1809
Global Const $tmt_tohue5 = 1810
Global Const $tmt_truesizestretchmark = 2419
Global Const $tmt_width = 2416
Global Const $tmt_transitiondurations = 6000
Global Const $tmt_captionmargins = 3603
Global Const $tmt_contentmargins = 3602
Global Const $tmt_sizingmargins = 3601
Global Const $tmt_minsize = 3403
Global Const $tmt_minsize1 = 3404
Global Const $tmt_minsize2 = 3405
Global Const $tmt_minsize3 = 3406
Global Const $tmt_minsize4 = 3407
Global Const $tmt_minsize5 = 3408
Global Const $tmt_normalsize = 3409
Global Const $tmt_offset = 3401
Global Const $tmt_textshadowoffset = 3402
Global Const $tmt_animationbuttonrect = 5005
Global Const $tmt_atlasrect = 8002
Global Const $tmt_customsplitrect = 5004
Global Const $tmt_defaultpanesize = 5002
Global Const $tmt_captionbarheight = 1205
Global Const $tmt_captionbarwidth = 1204
Global Const $tmt_menubarheight = 1209
Global Const $tmt_menubarwidth = 1208
Global Const $tmt_paddedborderwidth = 1210
Global Const $tmt_scrollbarheight = 1203
Global Const $tmt_scrollbarwidth = 1202
Global Const $tmt_sizingborderwidth = 1201
Global Const $tmt_smcaptionbarheight = 1207
Global Const $tmt_smcaptionbarwidth = 1206
Global Const $tmt_alias = 1404
Global Const $tmt_atlasinputimage = 8001
Global Const $tmt_author = 604
Global Const $tmt_classicvalue = 3202
Global Const $tmt_colorschemes = 401
Global Const $tmt_company = 603
Global Const $tmt_copyright = 605
Global Const $tmt_cssname = 1401
Global Const $tmt_description = 608
Global Const $tmt_displayname = 601
Global Const $tmt_lastupdated = 1403
Global Const $tmt_sizes = 402
Global Const $tmt_text = 3201
Global Const $tmt_tooltip = 602
Global Const $tmt_url = 606
Global Const $tmt_version = 607
Global Const $tmt_xmlname = 1402
Global Const $tmt_name = 600
#Region Global Variables and Constants
	Global Const $tagdttopts = "dword Size;dword Flags;dword clrText;dword clrBorder;dword clrShadow;int TextShadowType;" & $tagpoint & ";int BorderSize;int FontPropId;int ColorPropId;int StateId;int ApplyOverlay;int GlowSize;ptr DrawTextCallback;lparam lParam"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_beginbufferedpaint($hdc, $ttarget, ByRef $hnewdc, $iformat = 0, $iflags = 0, $texclude = 0, $ialpha = -1)
		Local Const $tagbp_paintparams = "dword cbSize;dword dwFlags;ptr prcExclude;ptr pBlendFunction"
		Local $tpp = DllStructCreate($tagbp_paintparams)
		$hnewdc = 0
		Local $tbf = 0
		If $ialpha <> -1 Then
			$tbf = DllStructCreate($tagblendfunction)
			DllStructSetData($tbf, 1, 0)
			DllStructSetData($tbf, 2, 0)
			DllStructSetData($tbf, 3, $ialpha)
			DllStructSetData($tbf, 4, 1)
		EndIf
		DllStructSetData($tpp, 1, DllStructGetSize($tpp))
		DllStructSetData($tpp, 2, $iflags)
		DllStructSetData($tpp, 3, DllStructGetPtr($texclude))
		DllStructSetData($tpp, 4, DllStructGetPtr($tbf))
		Local $aret = DllCall("uxtheme.dll", "handle", "BeginBufferedPaint", "handle", $hdc, "struct*", $ttarget, "dword", $iformat, "struct*", $tpp, "handle*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		$hnewdc = $aret[5]
		Return $aret[0]
	EndFunc

	Func _winapi_bufferedpaintclear($hbp, $trect = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "BufferedPaintClear", "handle", $hbp, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_bufferedpaintinit()
		Local $aret = DllCall("uxtheme.dll", "long", "BufferedPaintInit")
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_bufferedpaintsetalpha($hbp, $ialpha = 255, $trect = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "BufferedPaintSetAlpha", "handle", $hbp, "struct*", $trect, "byte", $ialpha)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_bufferedpaintuninit()
		Local $aret = DllCall("uxtheme.dll", "long", "BufferedPaintUnInit")
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_closethemedata($htheme)
		Local $aret = DllCall("uxtheme.dll", "long", "CloseThemeData", "handle", $htheme)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemebackground($htheme, $ipartid, $istateid, $hdc, $trect, $tclip = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeBackground", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "struct*", $tclip)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemeedge($htheme, $ipartid, $istateid, $hdc, $trect, $iedge, $iflags, $tarea = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeEdge", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "uint", $iedge, "uint", $iflags, "struct*", $tarea)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemeicon($htheme, $ipartid, $istateid, $hdc, $trect, $hil, $iindex)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeIcon", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "handle", $hil, "int", $iindex)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemeparentbackground($hwnd, $hdc, $trect = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeParentBackground", "hwnd", $hwnd, "handle", $hdc, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemetext($htheme, $ipartid, $istateid, $hdc, $stext, $trect, $iflags)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeText", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "wstr", $stext, "int", -1, "dword", $iflags, "dword", 0, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemetextex($htheme, $ipartid, $istateid, $hdc, $stext, $trect, $iflags, $tdttopts)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeTextEx", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "wstr", $stext, "int", -1, "dword", $iflags, "struct*", $trect, "struct*", $tdttopts)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_endbufferedpaint($hbp, $bupdate = True)
		Local $aret = DllCall("uxtheme.dll", "long", "EndBufferedPaint", "handle", $hbp, "bool", $bupdate)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_getbufferedpaintbits($hbp)
		Local $aret = DllCall("uxtheme.dll", "long", "GetBufferedPaintBits", "handle", $hbp, "ptr*", 0, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return SetExtended($aret[3], $aret[2])
	EndFunc

	Func _winapi_getbufferedpaintdc($hbp)
		Local $aret = DllCall("uxtheme.dll", "handle", "GetBufferedPaintDC", "handle", $hbp)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getbufferedpainttargetdc($hbp)
		Local $aret = DllCall("uxtheme.dll", "handle", "GetBufferedPaintTargetDC", "handle", $hbp)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getbufferedpainttargetrect($hbp)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetBufferedPaintTargetRect", "handle", $hbp, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $trect
	EndFunc

	Func _winapi_getcurrentthemename()
		Local $aret = DllCall("uxtheme.dll", "long", "GetCurrentThemeName", "wstr", "", "int", 4096, "wstr", "", "int", 2048, "wstr", "", "int", 2048)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $aresult[3]
		For $i = 0 To 2
			$aresult[$i] = $aret[$i * 2 + 1]
		Next
		Return $aresult
	EndFunc

	Func _winapi_getthemeappproperties()
		Local $aret = DllCall("uxtheme.dll", "dword", "GetThemeAppProperties")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthemebackgroundcontentrect($htheme, $ipartid, $istateid, $hdc, $trect)
		Local $tarea = DllStructCreate($tagrect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeBackgroundContentRect", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "struct*", $tarea)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tarea
	EndFunc

	Func _winapi_getthemebackgroundextent($htheme, $ipartid, $istateid, $hdc, $trect)
		Local $tarea = DllStructCreate($tagrect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeBackgroundExtent", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "struct*", $tarea)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tarea
	EndFunc

	Func _winapi_getthemebackgroundregion($htheme, $ipartid, $istateid, $hdc, $trect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeBackgroundRegion", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[6]
	EndFunc

	Func _winapi_getthemebitmap($htheme, $ipartid, $istateid, $ipropid, $iflag = 1)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeBitmap", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "ulong", $iflag, "handle*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aret[0] Then Return SetError(10, $aret[0], -1)
		Return $aret[6]
	EndFunc

	Func _winapi_getthemebool($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeBool", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "bool*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[5]
	EndFunc

	Func _winapi_getthemecolor($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeColor", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "dword*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aret[0] Then Return SetError(10, $aret[0], -1)
		Return __rgb($aret[5])
	EndFunc

	Func _winapi_getthemedocumentationproperty($sfilepath, $sproperty)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeDocumentationProperty", "wstr", $sfilepath, "wstr", $sproperty, "wstr", "", "int", 4096)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[3]
	EndFunc

	Func _winapi_getthemeenumvalue($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeEnumValue", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[5]
	EndFunc

	Func _winapi_getthemefilename($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "uint", "GetThemeFilename", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "wstr", "", "int", 4096)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[5]
	EndFunc

	Func _winapi_getthemefont($htheme, $ipartid, $istateid, $ipropid, $hdc = 0)
		Local $tlogfont = DllStructCreate($taglogfont)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeFont", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "int", $ipropid, "struct*", $tlogfont)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tlogfont
	EndFunc

	Func _winapi_getthemeint($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeInt", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[5]
	EndFunc

	Func _winapi_getthememargins($htheme, $ipartid, $istateid, $ipropid, $hdc, $trect)
		Local $tmargins = DllStructCreate($tagmargins)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeMargins", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "int", $ipropid, "struct*", $trect, "struct*", $tmargins)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tmargins
	EndFunc

	Func _winapi_getthememetric($htheme, $ipartid, $istateid, $ipropid, $hdc = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeMetric", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "int", $ipropid, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[6]
	EndFunc

	Func _winapi_getthemepartsize($htheme, $ipartid, $istateid, $hdc, $trect, $itype)
		Local $tsize = DllStructCreate($tagsize)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemePartSize", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "int", $itype, "struct*", $tsize)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tsize
	EndFunc

	Func _winapi_getthemeposition($htheme, $ipartid, $istateid, $ipropid)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemePosition", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "struct*", $tpoint)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tpoint
	EndFunc

	Func _winapi_getthemepropertyorigin($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemePropertyOrigin", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "uint*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[5]
	EndFunc

	Func _winapi_getthemerect($htheme, $ipartid, $istateid, $ipropid)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeRect", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $trect
	EndFunc

	Func _winapi_getthemestring($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeString", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "wstr", "", "int", 4096)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[5]
	EndFunc

	Func _winapi_getthemesysbool($htheme, $iboolid)
		Local $aret = DllCall("uxtheme.dll", "bool", "GetThemeSysBool", "handle", $htheme, "int", $iboolid)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthemesyscolor($htheme, $icolorid)
		Local $aret = DllCall("uxtheme.dll", "dword", "GetThemeSysColor", "handle", $htheme, "int", $icolorid)
		If @error Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_getthemesyscolorbrush($htheme, $icolorid)
		Local $aret = DllCall("uxtheme.dll", "handle", "GetThemeSysColorBrush", "handle", $htheme, "int", $icolorid)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthemesysfont($htheme, $ifontid)
		Local $tlogfont = DllStructCreate($taglogfont)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeSysFont", "handle", $htheme, "int", $ifontid, "struct*", $tlogfont)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tlogfont
	EndFunc

	Func _winapi_getthemesysint($htheme, $iintid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeSysInt", "handle", $htheme, "int", $iintid, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[3]
	EndFunc

	Func _winapi_getthemesyssize($htheme, $isizeid)
		Local $aret = DllCall("uxtheme.dll", "int", "GetThemeSysSize", "handle", $htheme, "int", $isizeid)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthemesysstring($htheme, $istringid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeSysString", "handle", $htheme, "int", $istringid, "wstr", "", "int", 4096)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[3]
	EndFunc

	Func _winapi_getthemetextextent($htheme, $ipartid, $istateid, $hdc, $stext, $trect, $iflags)
		Local $tarea = DllStructCreate($tagrect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeTextExtent", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "wstr", $stext, "int", -1, "dword", $iflags, "struct*", $trect, "struct*", $tarea)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tarea
	EndFunc

	Func _winapi_getthemetextmetrics($htheme, $ipartid, $istateid, $hdc = 0)
		Local $ttextmetric = DllStructCreate($tagtextmetric)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeTextMetrics", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $ttextmetric)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $ttextmetric
	EndFunc

	Func _winapi_getthemetransitionduration($htheme, $ipartid, $istateidfrom, $istateidto, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeTransitionDuration", "handle", $htheme, "int", $ipartid, "int", $istateidfrom, "int", $istateidto, "int", $ipropid, "dword*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[6]
	EndFunc

	Func _winapi_getwindowtheme($hwnd)
		Local $aret = DllCall("uxtheme.dll", "handle", "GetWindowTheme", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_isthemeactive()
		Local $aret = DllCall("uxtheme.dll", "bool", "IsThemeActive")
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isthemebackgroundpartiallytransparent($htheme, $ipartid, $istateid)
		Local $aret = DllCall("uxtheme.dll", "bool", "IsThemeBackgroundPartiallyTransparent", "handle", $htheme, "int", $ipartid, "int", $istateid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isthemepartdefined($htheme, $ipartid)
		Local $aret = DllCall("uxtheme.dll", "int", "IsThemePartDefined", "handle", $htheme, "int", $ipartid, "int", 0)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_openthemedata($hwnd, $sclass)
		Local $aret = DllCall("uxtheme.dll", "handle", "OpenThemeData", "hwnd", $hwnd, "wstr", $sclass)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setthemeappproperties($iflags)
		DllCall("uxtheme.dll", "none", "SetThemeAppProperties", "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_setwindowtheme($hwnd, $sname = 0, $slist = 0)
		Local $stypeofname = "wstr", $stypeoflist = "wstr"
		If NOT IsString($sname) Then
			$stypeofname = "ptr"
			$sname = 0
		EndIf
		If NOT IsString($slist) Then
			$stypeoflist = "ptr"
			$slist = 0
		EndIf
		Local $aret = DllCall("uxtheme.dll", "long", "SetWindowTheme", "hwnd", $hwnd, $stypeofname, $sname, $stypeoflist, $slist)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

#EndRegion Public Functions
#Region Global Variables and Constants
	Global $__g_hfrdlg = 0, $__g_hfrdll = 0
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_displaystruct($tstruct, $sstruct = "", $stitle = "", $iitem = 0, $isubitem = 0, $iflags = 0, $btop = True, $hparent = 0)
		If NOT StringStripWS($stitle, $str_stripleading + $str_striptrailing) Then
			$stitle = "Structure: ListView Display"
		EndIf
		$sstruct = StringRegExpReplace(StringStripWS($sstruct, $str_stripleading + $str_striptrailing + $str_stripspaces), ";+\Z", "")
		Local $pdata
		If IsDllStruct($tstruct) Then
			$pdata = DllStructGetPtr($tstruct)
			If NOT $sstruct Then
				$sstruct = "byte[" & DllStructGetSize($tstruct) & "]"
				$iflags = BitOR($iflags, 64)
			EndIf
		Else
			$pdata = $tstruct
			If NOT $sstruct Then Return SetError(10, 0, 0)
		EndIf
		Local $tdata = DllStructCreate($sstruct, $pdata)
		Local $idata = DllStructGetSize($tdata)
		If (NOT BitAND($iflags, 512)) AND (_winapi_isbadreadptr($pdata, $idata)) Then
			If NOT BitAND($iflags, 256) Then
				MsgBox($mb_systemmodal, $stitle, "The memory range allocated to a given structure could not be read." & @CRLF & @CRLF & Ptr($pdata) & " - " & Ptr($pdata + $idata - 1) & @CRLF & @CRLF & "Press OK to exit.")
				Exit -1073741819
			EndIf
			Return SetError(15, 0, 0)
		EndIf
		Local $sopt1 = Opt("GUIDataSeparatorChar", "|")
		Local $iopt2 = Opt("GUIOnEventMode", 0)
		Local $iopt3 = Opt("GUICloseOnESC", 1)
		If $hparent Then
			GUISetState(@SW_DISABLE, $hparent)
		EndIf
		Local $istyle = 1
		If $btop Then
			$istyle = BitOR($istyle, 8)
		EndIf
		$__g_hfrdlg = GUICreate($stitle, 570, 620, -1, -1, -2134441984, $istyle, $hparent)
		Local $idlv = GUICtrlCreateListView("#|Member|Offset|Type|Size|Value", 0, 0, 570, 620, 32781, __iif($__winver < 1536, 65585, 65584))
		Local $hlv = GUICtrlGetHandle($idlv)
		If $__winver >= 1536 Then
			_winapi_setwindowtheme($hlv, "Explorer")
		EndIf
		GUICtrlSetResizing(-1, 102)
		GUICtrlSetFont(-1, 8.5, 400, 0, "Tahoma")
		GUICtrlSetState(-1, 256)
		Local $aval[101] = [0]
		If NOT BitAND($iflags, 1) Then
			__inc($aval)
			$aval[$aval[0]] = ""
			GUICtrlCreateListViewItem("-|-|" & $pdata & "|<struct>|0|-", $idlv)
			GUICtrlSetColor(-1, 10263708)
		EndIf
		Local $adata = StringSplit($sstruct, ";")
		Local $aitem, $vitem, $sitem, $imode, $iindex, $icount = 0, $iprev = 0
		Local $asel[2] = [0, 0]
		Local $atype[28][2] = [["BYTE", 1], ["BOOLEAN", 1], ["CHAR", 1], ["WCHAR", 2], ["short", 2], ["USHORT", 2], ["WORD", 2], ["int", 4], ["long", 4], ["BOOL", 4], ["UINT", 4], ["ULONG", 4], ["DWORD", 4], ["INT64", 8], ["UINT64", 8], ["ptr", __iif(@AutoItX64, 8, 4)], ["HWND", __iif(@AutoItX64, 8, 4)], ["HANDLE", __iif(@AutoItX64, 8, 4)], ["float", 4], ["double", 8], ["INT_PTR", __iif(@AutoItX64, 8, 4)], ["LONG_PTR", __iif(@AutoItX64, 8, 4)], ["LRESULT", __iif(@AutoItX64, 8, 4)], ["LPARAM", __iif(@AutoItX64, 8, 4)], ["UINT_PTR", __iif(@AutoItX64, 8, 4)], ["ULONG_PTR", __iif(@AutoItX64, 8, 4)], ["DWORD_PTR", __iif(@AutoItX64, 8, 4)], ["WPARAM", __iif(@AutoItX64, 8, 4)]]
		For $i = 1 To $adata[0]
			$aitem = StringSplit(StringStripWS($adata[$i], $str_stripleading + $str_striptrailing), " ")
			Switch $aitem[1]
				Case "ALIGN", "STRUCT", "ENDSTRUCT"
					ContinueLoop
				Case Else
			EndSwitch
			$icount += 1
			$imode = 1
			$sitem = $icount & "|"
			If $aitem[0] > 1 Then
				$vitem = StringRegExpReplace($aitem[2], "\[.*\Z", "")
				$sitem &= $vitem & "|"
				If (NOT BitAND($iflags, 16)) AND (NOT StringCompare(StringRegExpReplace($vitem, "[0-9]+\Z", ""), "RESERVED")) Then
					$imode = 0
				EndIf
				If NOT IsString($iitem) Then
					$vitem = $icount
				EndIf
				$iindex = 2
			Else
				If NOT BitAND($iflags, 4) Then
					$sitem &= "<unnamed>|"
				Else
					$sitem &= "|"
				EndIf
				If NOT IsString($iitem) Then
					$vitem = $icount
				Else
					$vitem = 0
				EndIf
				$iindex = 1
			EndIf
			If (NOT $asel[0]) AND ($vitem) AND ($iitem) AND ($vitem = $iitem) Then
				$asel[0] = $icount
			EndIf
			Local $ioffset = Number(DllStructGetPtr($tdata, $icount) - $pdata)
			$iindex = StringRegExp($aitem[$iindex], "\[(\d+)\]", $str_regexparrayglobalmatch)
			Local $isize
			Do
				ReDim $aitem[3]
				$vitem = StringRegExpReplace($aitem[1], "\[.*\Z", "")
				For $j = 0 To UBound($atype) - 1
					If NOT StringCompare($atype[$j][0], $vitem) Then
						$aitem[1] = $atype[$j][0]
						$aitem[2] = $atype[$j][1]
						$isize = $aitem[2]
						ExitLoop 2
					EndIf
				Next
				$aitem[1] = "?"
				$aitem[2] = "?"
				$isize = 0
			Until 1
			$sitem &= $ioffset & "|"
			If (IsArray($iindex)) AND ($iindex[0] > "1") Then
				If $isize Then
					$aitem[2] = $aitem[2] * $iindex[0]
				EndIf
				Do
					Switch $aitem[1]
						Case "BYTE", "BOOLEAN"
							If NOT BitAND($iflags, 64) Then
								ContinueCase
							EndIf
						Case "CHAR", "WCHAR"
							$sitem &= $aitem[1] & "[" & $iindex[0] & "]|" & $aitem[2] & "|"
							$iindex = 0
							ExitLoop
						Case Else
					EndSwitch
					If ($isize) AND ($imode) Then
						$sitem &= $aitem[1] & "[" & $iindex[0] & "]|" & $aitem[2] & " (" & $isize & ")" & "|"
					Else
						$sitem &= $aitem[1] & "[" & $iindex[0] & "]|" & $aitem[2] & "|"
					EndIf
					If $imode Then
						$iindex = $iindex[0]
					Else
						$iindex = 0
					EndIf
				Until 1
			Else
				$sitem &= $aitem[1] & "|" & $aitem[2] & "|"
				$iindex = 0
			EndIf
			If (NOT BitAND($iflags, 2)) AND ($iprev) AND ($ioffset > $iprev) Then
				__inc($aval)
				$aval[$aval[0]] = ""
				GUICtrlCreateListViewItem("-|-|-|<alignment>|" & ($ioffset - $iprev) & "|-", $idlv)
				GUICtrlSetColor(-1, 16711680)
			EndIf
			If $isize Then
				$iprev = $ioffset + $aitem[2]
			Else
				$iprev = 0
			EndIf
			Local $idlvitem, $idinit
			If $iindex Then
				Local $spattern = "[%0" & StringLen($iindex) & "d] "
				For $j = 1 To $iindex
					__inc($aval)
					$aval[$aval[0]] = DllStructGetData($tdata, $icount, $j)
					If BitAND($iflags, 128) Then
						$aval[$aval[0]] = __hex($aval[$aval[0]], $aitem[1])
					EndIf
					$idlvitem = GUICtrlCreateListViewItem($sitem & StringFormat($spattern, $j) & $aval[$aval[0]], $idlv)
					If ($asel[0] = $icount) AND (NOT $asel[1]) Then
						If ($isubitem < 1) OR ($isubitem > $iindex) OR ($isubitem = $j) Then
							$asel[1] = $idlvitem
						EndIf
					EndIf
					If (NOT $idinit) AND ($icount = 1) Then
						$idinit = $idlvitem
					EndIf
					If NOT BitAND($iflags, 8) Then
						GUICtrlSetBkColor(-1, 16119285)
					EndIf
					If $isize Then
						$sitem = "-|-|" & ($ioffset + $j * $isize) & "|-|-|"
					Else
						GUICtrlSetColor(-1, 16746496)
						$sitem = "-|-|-|-|-|"
					EndIf
				Next
			Else
				__inc($aval)
				If $imode Then
					$aval[$aval[0]] = DllStructGetData($tdata, $icount)
					If BitAND($iflags, 128) Then
						$aval[$aval[0]] = __hex($aval[$aval[0]], $aitem[1])
					EndIf
					$idlvitem = GUICtrlCreateListViewItem($sitem & $aval[$aval[0]], $idlv)
				Else
					$aval[$aval[0]] = ""
					$idlvitem = GUICtrlCreateListViewItem($sitem & "-", $idlv)
				EndIf
				If ($asel[0] = $icount) AND (NOT $asel[1]) Then
					$asel[1] = $idlvitem
				EndIf
				If (NOT $idinit) AND ($icount = 1) Then
					$idinit = $idlvitem
				EndIf
				If NOT $isize Then
					GUICtrlSetColor(-1, 16746496)
				EndIf
			EndIf
			If (NOT BitAND($iflags, 2)) AND (NOT $isize) Then
				__inc($aval)
				$aval[$aval[0]] = ""
				GUICtrlCreateListViewItem("-|-|-|<alignment>|?|-", $idlv)
				GUICtrlSetColor(-1, 16746496)
			EndIf
		Next
		If (NOT BitAND($iflags, 2)) AND ($iprev) AND ($idata > $iprev) Then
			__inc($aval)
			$aval[$aval[0]] = ""
			GUICtrlCreateListViewItem("-|-|-|<alignment>|" & ($idata - $iprev) & "|-", $idlv)
			GUICtrlSetColor(-1, 16711680)
		EndIf
		If NOT BitAND($iflags, 1) Then
			__inc($aval)
			$aval[$aval[0]] = ""
			GUICtrlCreateListViewItem("-|-|" & ($pdata + $idata + 0) & "|<endstruct>|" & $idata & "|-", $idlv)
			GUICtrlSetColor(-1, 10263708)
		EndIf
		If $asel[1] Then
			GUICtrlSetState($asel[1], 256)
		Else
			GUICtrlSetState($idinit, 256)
		EndIf
		Local $iddummy = GUICtrlCreateDummy()
		Local $awidth[6] = [30, 130, 76, 100, 50, 167]
		For $i = 0 To UBound($awidth) - 1
			GUICtrlSendMsg($idlv, 4126, $i, $awidth[$i])
		Next
		Local $tparam = DllStructCreate("ptr;uint")
		DllStructSetData($tparam, 1, $hlv)
		If NOT BitAND($iflags, 32) Then
			DllStructSetData($tparam, 2, $iddummy)
		Else
			DllStructSetData($tparam, 2, 0)
		EndIf
		$__g_hfrdll = DllCallbackRegister("__DlgSubclassProc", "lresult", "hwnd;uint;wparam;lparam;uint;ptr")
		Local $pdll = DllCallbackGetPtr($__g_hfrdll)
		If _winapi_setwindowsubclass($__g_hfrdlg, $pdll, 1000, DllStructGetPtr($tparam)) Then
			OnAutoItExitRegister("__Quit")
		Else
			DllCallbackFree($__g_hfrdll)
			$__g_hfrdll = 0
		EndIf
		GUISetState()
		While 1
			Switch GUIGetMsg()
				Case 0
					ContinueLoop
				Case -3
					ExitLoop
				Case $iddummy
					$iindex = GUICtrlRead($iddummy)
					If ($iindex >= 0) AND ($iindex < $aval[0]) Then
						ClipPut($aval[$iindex + 1])
					EndIf
			EndSwitch
		WEnd
		If $__g_hfrdll Then
			OnAutoItExitUnRegister("__Quit")
		EndIf
		__quit()
		If $hparent Then
			GUISetState(@SW_ENABLE, $hparent)
		EndIf
		GUIDelete($__g_hfrdlg)
		Opt("GUIDataSeparatorChar", $sopt1)
		Opt("GUIOnEventMode", $iopt2)
		Opt("GUICloseOnESC", $iopt3)
		Return 1
	EndFunc

	Func _winapi_enumdllproc($sfilepath, $smask = "", $iflags = 0)
		If NOT __dll("dbghelp.dll") Then Return SetError(103, 0, 0)
		Local $vver = __ver("dbghelp.dll")
		If $vver < 1281 Then Return SetError(2, 0, 0)
		$__g_venum = 0
		Local $ipe, $aret, $ierror = 0, $hlibrary = 0, $vwow64 = Default
		If _winapi_iswow64process() Then
			$aret = DllCall("kernel32.dll", "bool", "Wow64DisableWow64FsRedirection", "ptr*", 0)
			If NOT @error AND $aret[0] Then $vwow64 = $aret[1]
		EndIf
		Do
			$aret = DllCall("kernel32.dll", "dword", "SearchPathW", "ptr", 0, "wstr", $sfilepath, "ptr", 0, "dword", 4096, "wstr", "", "ptr", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 10
				ExitLoop
			EndIf
			$__g_vext = $aret[5]
			$ipe = _winapi_getpetype($__g_vext)
			Switch $ipe
				Case 332
				Case 512, 34404
				Case Else
					$ierror = @error + 20
					ExitLoop
			EndSwitch
			$hlibrary = _winapi_loadlibraryex($__g_vext, 3)
			If NOT $hlibrary Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			If $vver >= 1536 Then
				__enumdllprocw($hlibrary, $smask, $iflags)
			Else
				__enumdllproca($hlibrary, $smask, $iflags)
			EndIf
			If @error Then
				$ierror = @error + 40
				ExitLoop
			EndIf
		Until 1
		If $hlibrary Then
			_winapi_freelibrary($hlibrary)
		EndIf
		If NOT ($vwow64 = Default) Then
			DllCall("kernel32.dll", "bool", "Wow64RevertWow64FsRedirection", "ptr*", $vwow64)
		EndIf
		Return SetError($ierror, $ipe, $__g_venum)
	EndFunc

	Func _winapi_getapplicationrestartsettings($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1040, 4112), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "uint", "GetApplicationRestartSettings", "handle", $hprocess[0], "wstr", "", "dword*", 4096, "dword*", 0)
		Local $ierror, $iextended = @extended
		If @error Then
			$ierror = @error
		ElseIf $aret[0] Then
			$ierror = 10
			$iextended = $aret[0]
		EndIf
		_winapi_closehandle($hprocess[0])
		If $ierror Then Return SetError($ierror, $iextended, 0)
		Local $aresult[2]
		$aresult[0] = $aret[2]
		$aresult[1] = $aret[4]
		Return $aresult
	EndFunc

	Func _winapi_geterrormessage($icode, $ilanguage = 0)
		Local $aret = DllCall("kernel32.dll", "dword", "FormatMessageW", "dword", 4096, "ptr", 0, "dword", $icode, "dword", $ilanguage, "wstr", "", "dword", 4096, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return StringRegExpReplace($aret[5], "[" & @LF & "," & @CR & "]*\Z", "")
	EndFunc

	Func _winapi_geterrormode()
		Local $aret = DllCall("kernel32.dll", "uint", "GetErrorMode")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_isinternetconnected()
		If NOT __dll("connect.dll") Then Return SetError(103, 0, 0)
		Local $aret = DllCall("connect.dll", "long", "IsInternetConnected")
		If @error Then Return SetError(@error, @extended, 0)
		If NOT ($aret[0] = 0 OR $aret[0] = 1) Then
			Return SetError(10, $aret[0], False)
		EndIf
		Return NOT $aret[0]
	EndFunc

	Func _winapi_isnetworkalive()
		If NOT __dll("sensapi.dll") Then Return SetError(103, 0, 0)
		Local $aret = DllCall("sensapi.dll", "bool", "IsNetworkAlive", "int*", 0)
		Local $ilasterror = _winapi_getlasterror()
		If $ilasterror Then Return SetError(1, $ilasterror, 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, $ilasterror, 0)
		Return $aret[1]
	EndFunc

	Func _winapi_ntstatustodoserror($istatus)
		Local $aret = DllCall("ntdll.dll", "ulong", "RtlNtStatusToDosError", "long", $istatus)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_registerapplicationrestart($iflags = 0, $scmd = "")
		Local $aret = DllCall("kernel32.dll", "long", "RegisterApplicationRestart", "wstr", $scmd, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_seterrormode($imode)
		Local $aret = DllCall("kernel32.dll", "uint", "SetErrorMode", "uint", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_showlasterror($stext = "", $babort = False, $ilanguage = 0, Const $_icurrenterror = @error, Const $_icurrentextended = @extended)
		Local $serror
		Local $ilasterror = _winapi_getlasterror()
		While 1
			$serror = _winapi_geterrormessage($ilasterror, $ilanguage)
			If @error AND $ilanguage Then
				$ilanguage = 0
			Else
				ExitLoop
			EndIf
		WEnd
		If StringStripWS($stext, $str_stripleading + $str_striptrailing) Then
			$stext &= @CRLF & @CRLF
		Else
			$stext = ""
		EndIf
		_winapi_msgbox(BitOR(262144, BitShift(16, -2 * (NOT $ilasterror))), $ilasterror, $stext & $serror)
		If $ilasterror Then
			_winapi_setlasterror($ilasterror)
			If $babort Then
				Exit $ilasterror
			EndIf
		EndIf
		Return SetError($_icurrenterror, $_icurrentextended, 1)
	EndFunc

	Func _winapi_uniquehardwareid($iflags = 0)
		Local $oservice = ObjGet("winmgmts:\\.\root\cimv2")
		If NOT IsObj($oservice) Then Return SetError(1, 0, "")
		Local $oitems = $oservice.execquery("SELECT * FROM Win32_ComputerSystemProduct")
		If NOT IsObj($oitems) Then Return SetError(2, 0, "")
		Local $shw = "", $iextended = 0
		For $oproperty In $oitems
			$shw &= $oproperty.identifyingnumber
			$shw &= $oproperty.name
			$shw &= $oproperty.skunumber
			$shw &= $oproperty.uuid
			$shw &= $oproperty.vendor
			$shw &= $oproperty.version
		Next
		$shw = StringStripWS($shw, $str_stripall)
		If NOT $shw Then Return SetError(3, 0, "")
		Local $stext
		If BitAND($iflags, 1) Then
			$oitems = $oservice.execquery("SELECT * FROM Win32_BIOS")
			If NOT IsObj($oitems) Then Return SetError(3, 0, "")
			$stext = ""
			For $oproperty In $oitems
				$stext &= $oproperty.identificationcode
				$stext &= $oproperty.manufacturer
				$stext &= $oproperty.name
				$stext &= $oproperty.serialnumber
				$stext &= $oproperty.smbiosmajorversion
				$stext &= $oproperty.smbiosminorversion
			Next
			$stext = StringStripWS($stext, $str_stripall)
			If $stext Then
				$iextended += 1
				$shw &= $stext
			EndIf
		EndIf
		If BitAND($iflags, 2) Then
			$oitems = $oservice.execquery("SELECT * FROM Win32_Processor")
			If NOT IsObj($oitems) Then Return SetError(4, 0, "")
			$stext = ""
			For $oproperty In $oitems
				$stext &= $oproperty.architecture
				$stext &= $oproperty.family
				$stext &= $oproperty.level
				$stext &= $oproperty.manufacturer
				$stext &= $oproperty.name
				$stext &= $oproperty.processorid
				$stext &= $oproperty.revision
				$stext &= $oproperty.version
			Next
			$stext = StringStripWS($stext, $str_stripall)
			If $stext Then
				$iextended += 2
				$shw &= $stext
			EndIf
		EndIf
		If BitAND($iflags, 4) Then
			$oitems = $oservice.execquery("SELECT * FROM Win32_PhysicalMedia")
			If NOT IsObj($oitems) Then Return SetError(5, 0, "")
			$stext = ""
			For $oproperty In $oitems
				Switch _winapi_getdrivebustype($oproperty.tag)
					Case 3, 11
						$stext &= $oproperty.serialnumber
					Case Else
				EndSwitch
			Next
			$stext = StringStripWS($stext, $str_stripall)
			If $stext Then
				$iextended += 4
				$shw &= $stext
			EndIf
		EndIf
		Local $shash = __md5($shw)
		If NOT $shash Then Return SetError(6, 0, "")
		Return SetExtended($iextended, "{" & StringMid($shash, 1, 8) & "-" & StringMid($shash, 9, 4) & "-" & StringMid($shash, 13, 4) & "-" & StringMid($shash, 17, 4) & "-" & StringMid($shash, 21, 12) & "}")
	EndFunc

	Func _winapi_unregisterapplicationrestart()
		Local $aret = DllCall("kernel32.dll", "long", "UnregisterApplicationRestart")
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

#EndRegion Public Functions
#Region Internal Functions

	Func __dlgsubclassproc($shwnd, $imsg, $wparam, $lparam, $idlv, $pdata)
		#forceref $idLV
		Switch $imsg
			Case 78
				Local $tnmia = DllStructCreate("hwnd;uint_ptr;" & __iif(@AutoItX64, "int;int", "int") & ";int Item;int;uint;uint;uint;long;long;lparam;uint", $lparam)
				Local $hlistview = DllStructGetData($tnmia, 1)
				Local $nmsg = DllStructGetData($tnmia, 3)
				Local $tparam = DllStructCreate("ptr;uint", $pdata)
				Local $idummy = DllStructGetData($tparam, 2)
				Local $hlv = DllStructGetData($tparam, 1)
				Switch $hlistview
					Case $hlv
						Switch $nmsg
							Case -109
								Return 0
							Case -114
								If $idummy Then
									GUICtrlSendToDummy($idummy, DllStructGetData($tnmia, "Item"))
								EndIf
								Return 0
						EndSwitch
				EndSwitch
		EndSwitch
		Return _winapi_defsubclassproc($shwnd, $imsg, $wparam, $lparam)
	EndFunc

	Func __enumdllproca($hlibrary, $smask, $iflags)
		Local $hprocess, $paddress = 0, $iinit = 0, $vopts = Default, $ierror = 0
		Local $stypeofmask = "str"
		$__g_venum = 0
		Do
			Local $aret = DllCall("dbghelp.dll", "dword", "SymGetOptions")
			If @error Then
				$ierror = @error + 10
				ExitLoop
			EndIf
			$vopts = $aret[0]
			$aret = DllCall("dbghelp.dll", "dword", "SymSetOptions", "dword", BitOR(BitAND($iflags, 3), 516))
			If @error OR NOT $aret[0] Then
				$ierror = @error + 20
				ExitLoop
			EndIf
			$hprocess = _winapi_getcurrentprocess()
			$aret = DllCall("dbghelp.dll", "int", "SymInitialize", "handle", $hprocess, "ptr", 0, "int", 1)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			$iinit = 1
			$aret = DllCall("dbghelp.dll", "uint64", "SymLoadModule64", "handle", $hprocess, "ptr", 0, "str", $__g_vext, "ptr", 0, "uint64", $hlibrary, "dword", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 40
				ExitLoop
			EndIf
			$paddress = $aret[0]
			Dim $__g_venum[501][2] = [[0]]
			Local $henumproc = DllCallbackRegister("__EnumSymbolsProcA", "int", "ptr;ulong;lparam")
			Local $penumproc = DllCallbackGetPtr($henumproc)
			If NOT StringStripWS($smask, $str_stripleading + $str_striptrailing) Then
				$stypeofmask = "ptr"
				$smask = 0
			EndIf
			$aret = DllCall("dbghelp.dll", "int", "SymEnumSymbols", "handle", $hprocess, "uint64", $paddress, $stypeofmask, $smask, "ptr", $penumproc, "lparam", 0)
			If @error OR NOT $aret[0] OR (NOT $__g_venum[0][0]) Then
				$ierror = @error + 50
				$__g_venum = 0
			EndIf
			DllCallbackFree($henumproc)
			If IsArray($__g_venum) Then
				__inc($__g_venum, -1)
			EndIf
		Until 1
		If $paddress Then
			DllCall("dbghelp.dll", "int", "SymUnloadModule64", "handle", $hprocess, "uint64", $paddress)
		EndIf
		If $iinit Then
			DllCall("dbghelp.dll", "int", "SymCleanup", "handle", $hprocess)
		EndIf
		If NOT ($vopts = Default) Then
			DllCall("dbghelp.dll", "dword", "SymSetOptions", "dword", $vopts)
		EndIf
		If $ierror Then Return SetError($ierror, 0, 0)
		Return 1
	EndFunc

	Func __enumdllprocw($hlibrary, $smask, $iflags)
		Local $hprocess, $paddress = 0, $iinit = 0, $vopts = Default, $ierror = 0
		Local $stypeofmask = "wstr"
		$__g_venum = 0
		Do
			Local $aret = DllCall("dbghelp.dll", "dword", "SymGetOptions")
			If @error Then
				$ierror = @error + 10
				ExitLoop
			EndIf
			$vopts = $aret[0]
			$aret = DllCall("dbghelp.dll", "dword", "SymSetOptions", "dword", BitOR(BitAND($iflags, 3), 516))
			If @error OR NOT $aret[0] Then
				$ierror = @error + 20
				ExitLoop
			EndIf
			$hprocess = _winapi_getcurrentprocess()
			$aret = DllCall("dbghelp.dll", "int", "SymInitializeW", "handle", $hprocess, "ptr", 0, "int", 1)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			$iinit = 1
			$aret = DllCall("dbghelp.dll", "uint64", "SymLoadModuleExW", "handle", $hprocess, "ptr", 0, "wstr", $__g_vext, "ptr", 0, "uint64", $hlibrary, "dword", 0, "ptr", 0, "dword", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 40
				ExitLoop
			EndIf
			$paddress = $aret[0]
			Dim $__g_venum[501][2] = [[0]]
			Local $henumproc = DllCallbackRegister("__EnumSymbolsProcW", "int", "ptr;ulong;lparam")
			Local $penumproc = DllCallbackGetPtr($henumproc)
			If NOT StringStripWS($smask, $str_stripleading + $str_striptrailing) Then
				$stypeofmask = "ptr"
				$smask = 0
			EndIf
			$aret = DllCall("dbghelp.dll", "int", "SymEnumSymbolsW", "handle", $hprocess, "uint64", $paddress, $stypeofmask, $smask, "ptr", $penumproc, "lparam", 0)
			If @error OR NOT $aret[0] OR NOT $__g_venum[0][0] Then
				$ierror = @error + 50
				$__g_venum = 0
			EndIf
			DllCallbackFree($henumproc)
			If IsArray($__g_venum) Then
				__inc($__g_venum, -1)
			EndIf
		Until 1
		If $paddress Then
			DllCall("dbghelp.dll", "int", "SymUnloadModule64", "handle", $hprocess, "uint64", $paddress)
		EndIf
		If $iinit Then
			DllCall("dbghelp.dll", "int", "SymCleanup", "handle", $hprocess)
		EndIf
		If NOT ($vopts = Default) Then
			DllCall("dbghelp.dll", "dword", "SymSetOptions", "dword", $vopts)
		EndIf
		If $ierror Then Return SetError($ierror, 0, 0)
		Return 1
	EndFunc

	Func __enumsymbolsproca($psyminfo, $isymsize, $lparam)
		#forceref $iSymSize, $lParam
		Local $tagsymbol_info = "uint SizeOfStruct;uint TypeIndex;uint64 Reserved[2];uint Index;uint Size;uint64 ModBase;uint Flags;uint64 Value;uint64 Address;uint Register;uint Scope;uint Tag;uint NameLen;uint MaxNameLen;wchar Name[1]"
		Local $tsyminfo = DllStructCreate($tagsymbol_info, $psyminfo)
		Local $ilength = DllStructGetData($tsyminfo, "NameLen")
		If $ilength AND BitAND(DllStructGetData($tsyminfo, "Flags"), 1536) Then
			__inc($__g_venum, 500)
			$__g_venum[$__g_venum[0][0]][0] = DllStructGetData($tsyminfo, "Address") - DllStructGetData($tsyminfo, "ModBase")
			$__g_venum[$__g_venum[0][0]][1] = DllStructGetData(DllStructCreate("char[" & ($ilength + 1) & "]", DllStructGetPtr($tsyminfo, "Name")), 1)
		EndIf
		Return 1
	EndFunc

	Func __enumsymbolsprocw($psyminfo, $isymsize, $lparam)
		#forceref $iSymSize, $lParam
		Local $tagsymbol_info = "uint SizeOfStruct;uint TypeIndex;uint64 Reserved[2];uint Index;uint Size;uint64 ModBase;uint Flags;uint64 Value;uint64 Address;uint Register;uint Scope;uint Tag;uint NameLen;uint MaxNameLen;wchar Name[1]"
		Local $tsyminfo = DllStructCreate($tagsymbol_info, $psyminfo)
		Local $ilength = DllStructGetData($tsyminfo, "NameLen")
		If $ilength AND BitAND(DllStructGetData($tsyminfo, "Flags"), 1536) Then
			__inc($__g_venum, 500)
			$__g_venum[$__g_venum[0][0]][0] = DllStructGetData($tsyminfo, "Address") - DllStructGetData($tsyminfo, "ModBase")
			$__g_venum[$__g_venum[0][0]][1] = DllStructGetData(DllStructCreate("wchar[" & ($ilength + 1) & "]", DllStructGetPtr($tsyminfo, "Name")), 1)
		EndIf
		Return 1
	EndFunc

	Func __hex($ivalue, $stype)
		Local $ilength
		Switch $stype
			Case "BYTE", "BOOLEAN"
				$ilength = 2
			Case "WORD", "USHORT", "short"
				$ilength = 4
			Case "BOOL", "UINT", "ULONG", "DWORD", "int", "long"
				$ilength = 8
			Case "INT64", "UINT64"
				$ilength = 16
			Case "INT_PTR", "UINT_PTR", "LONG_PTR", "ULONG_PTR", "DWORD_PTR", "WPARAM", "LPARAM", "LRESULT"
				$ilength = __iif(@AutoItX64, 16, 8)
			Case Else
				$ilength = 0
		EndSwitch
		If $ilength Then
			Return "0x" & Hex($ivalue, $ilength)
		Else
			Return $ivalue
		EndIf
	EndFunc

	Func __md5($sdata)
		Local $hhash, $ierror = 0
		Local $hprov = DllCall("advapi32.dll", "int", "CryptAcquireContextW", "ptr*", 0, "ptr", 0, "ptr", 0, "dword", 3, "dword", -268435456)
		If @error OR NOT $hprov[0] Then Return SetError(@error + 10, @extended, "")
		Do
			$hhash = DllCall("advapi32.dll", "int", "CryptCreateHash", "handle", $hprov[1], "uint", 32771, "ptr", 0, "dword", 0, "ptr*", 0)
			If @error OR NOT $hhash[0] Then
				$ierror = @error + 20
				$hhash = 0
				ExitLoop
			EndIf
			$hhash = $hhash[5]
			Local $tdata = DllStructCreate("byte[" & BinaryLen($sdata) & "]")
			DllStructSetData($tdata, 1, $sdata)
			Local $aret = DllCall("advapi32.dll", "int", "CryptHashData", "handle", $hhash, "struct*", $tdata, "dword", DllStructGetSize($tdata), "dword", 1)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			$tdata = DllStructCreate("byte[16]")
			$aret = DllCall("advapi32.dll", "int", "CryptGetHashParam", "handle", $hhash, "dword", 2, "struct*", $tdata, "dword*", 16, "dword", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 40
				ExitLoop
			EndIf
		Until 1
		If $hhash Then
			DllCall("advapi32.dll", "int", "CryptDestroyHash", "handle", $hhash)
		EndIf
		If $ierror Then Return SetError($ierror, 0, "")
		Return StringTrimLeft(DllStructGetData($tdata, 1), 2)
	EndFunc

	Func __quit()
		Local $pdll = DllCallbackGetPtr($__g_hfrdll)
		If $pdll Then
			_winapi_removewindowsubclass($__g_hfrdlg, $pdll, 1000)
			DllCallbackFree($__g_hfrdll)
		EndIf
		$__g_hfrdll = 0
	EndFunc

	Func __ver($spath)
		Local $hlibrary = _winapi_getmodulehandle($spath)
		If NOT $hlibrary Then Return SetError(@error + 10, @extended, 0)
		$spath = _winapi_getmodulefilenameex(_winapi_getcurrentprocess(), $hlibrary)
		If NOT $spath Then Return SetError(@error + 20, @extended, 0)
		Local $vver = FileGetVersion($spath)
		If @error Then Return SetError(1, 0, 0)
		$vver = StringSplit($vver, ".", $str_nocount)
		If UBound($vver) < 2 Then Return SetError(2, 0, 0)
		Return BitOR(BitShift(Number($vver[0]), -8), Number($vver[1]))
	EndFunc

#EndRegion Internal Functions
Global Const $__dlg_wm_user = 1024
Global Const $bif_browsefilejunctions = 65536
Global Const $bif_browseforcomputer = 4096
Global Const $bif_browseforprinter = 8192
Global Const $bif_browseincludefiles = 16384
Global Const $bif_browseincludeurls = 128
Global Const $bif_dontgobelowdomain = 2
Global Const $bif_editbox = 16
Global Const $bif_newdialogstyle = 64
Global Const $bif_nonewfolderbutton = 512
Global Const $bif_notranslatetargets = 1024
Global Const $bif_returnfsancestors = 8
Global Const $bif_returnonlyfsdirs = 1
Global Const $bif_shareable = 32768
Global Const $bif_statustext = 4
Global Const $bif_usenewui = BitOR($bif_editbox, $bif_newdialogstyle)
Global Const $bif_uahint = 256
Global Const $bif_validate = 32
Global Const $bffm_initialized = 1
Global Const $bffm_iunknown = 5
Global Const $bffm_selchanged = 2
Global Const $bffm_validatefailed = 4
Global Const $bffm_setstatustexta = $__dlg_wm_user + 100
Global Const $bffm_enableok = $__dlg_wm_user + 101
Global Const $bffm_setselectiona = $__dlg_wm_user + 102
Global Const $bffm_setselectionw = $__dlg_wm_user + 103
Global Const $bffm_setstatustextw = $__dlg_wm_user + 104
Global Const $bffm_setoktext = $__dlg_wm_user + 105
Global Const $bffm_setexpanded = $__dlg_wm_user + 106
Global Const $cderr_dialogfailure = 65535
Global Const $cderr_findresfailure = 6
Global Const $cderr_initialization = 2
Global Const $cderr_loadresfailure = 7
Global Const $cderr_loadstrfailure = 5
Global Const $cderr_lockresfailure = 8
Global Const $cderr_memallocfailure = 9
Global Const $cderr_memlockfailure = 10
Global Const $cderr_nohinstance = 4
Global Const $cderr_nohook = 11
Global Const $cderr_notemplate = 3
Global Const $cderr_registermsgfail = 12
Global Const $cderr_structsize = 1
Global Const $pderr_createicfailure = 4106
Global Const $pderr_defaultdifferent = 4108
Global Const $pderr_dndmmismatch = 4105
Global Const $pderr_getdevmodefail = 4101
Global Const $pderr_initfailure = 4102
Global Const $pderr_loaddrvfailure = 4100
Global Const $pderr_nodefaultprn = 4104
Global Const $pderr_nodevices = 4103
Global Const $pderr_parsefailure = 4098
Global Const $pderr_printernotfound = 4107
Global Const $pderr_retdeffailure = 4099
Global Const $pderr_setupfailure = 4097
Global Const $cferr_maxlessthanmin = 8194
Global Const $cferr_nofonts = 8193
Global Const $fnerr_buffertoosmall = 12291
Global Const $fnerr_invalidfilename = 12290
Global Const $fnerr_subclassfailure = 12289
Global Const $frerr_bufferlengthzero = 16385
Global Const $fr_dialogterm = 64
Global Const $fr_down = 1
Global Const $fr_enablehook = 256
Global Const $fr_enabletemplate = 512
Global Const $fr_enabletemplatehandle = 8192
Global Const $fr_findnext = 8
Global Const $fr_hideupdown = 16384
Global Const $fr_hidematchcase = 32768
Global Const $fr_hidewholeword = 65536
Global Const $fr_matchcase = 4
Global Const $fr_nomatchcase = 2048
Global Const $fr_noupdown = 1024
Global Const $fr_nowholeword = 4096
Global Const $fr_replace = 16
Global Const $fr_replaceall = 32
Global Const $fr_showhelp = 128
Global Const $fr_wholeword = 2
Global Const $shfmt_id_default = 65535
Global Const $shfmt_opt_full = 0
Global Const $shfmt_opt_quickformat = 1
Global Const $shfmt_opt_sysonly = 2
Global Const $shfmt_error = -1
Global Const $shfmt_cancel = -2
Global Const $shfmt_noformat = -3
Global Const $cdm_first = $__dlg_wm_user + 100
Global Const $cdm_getspec = $cdm_first
Global Const $cdm_getfilepath = $cdm_first + 1
Global Const $cdm_getfolderpath = $cdm_first + 2
Global Const $cdm_getfolderidlist = $cdm_first + 3
Global Const $cdm_setcontroltext = $cdm_first + 4
Global Const $cdm_hidecontrol = $cdm_first + 5
Global Const $cdm_setdefext = $cdm_first + 6
Global Const $cdm_last = $__dlg_wm_user + 200
Global Const $cdn_first = -601
Global Const $cdn_initdone = $cdn_first
Global Const $cdn_selchange = $cdn_first - 1
Global Const $cdn_folderchange = $cdn_first - 2
Global Const $cdn_shareviolation = $cdn_first - 3
Global Const $cdn_help = $cdn_first - 4
Global Const $cdn_fileok = $cdn_first - 5
Global Const $cdn_typechange = $cdn_first - 6
Global Const $cdn_includeitem = $cdn_first - 7
Global Const $cdn_last = -699
Global Const $psd_defaultminmargins = 0
Global Const $psd_disablemargins = 16
Global Const $psd_disableorientation = 256
Global Const $psd_disablepagepainting = 524288
Global Const $psd_disablepaper = 512
Global Const $psd_disableprinter = 32
Global Const $psd_enablepagepainthook = 262144
Global Const $psd_enablepagesetuphook = 8192
Global Const $psd_enablepagesetuptemplate = 32768
Global Const $psd_enablepagesetuptemplatehandle = 131072
Global Const $psd_inhundredthsofmillimeters = 8
Global Const $psd_inthousandthsofinches = 4
Global Const $psd_margins = 2
Global Const $psd_minmargins = 1
Global Const $psd_nonetworkbutton = 2097152
Global Const $psd_nowarning = 128
Global Const $psd_returndefault = 1024
Global Const $psd_showhelp = 2048
Global Const $wm_psd_pagesetupdlg = $__dlg_wm_user
Global Const $wm_psd_fullpagerect = $__dlg_wm_user + 1
Global Const $wm_psd_minmarginrect = $__dlg_wm_user + 2
Global Const $wm_psd_marginrect = $__dlg_wm_user + 3
Global Const $wm_psd_greektextrect = $__dlg_wm_user + 4
Global Const $wm_psd_envstamprect = $__dlg_wm_user + 5
Global Const $wm_psd_yafullpagerect = $__dlg_wm_user + 6
Global Const $pd_allpages = 0
Global Const $pd_collate = 16
Global Const $pd_currentpage = 4194304
Global Const $pd_disableprinttofile = 524288
Global Const $pd_enableprinthook = 4096
Global Const $pd_enableprinttemplate = 16384
Global Const $pd_enableprinttemplatehandle = 65536
Global Const $pd_enablesetuphook = 8192
Global Const $pd_enablesetuptemplate = 32768
Global Const $pd_enablesetuptemplatehandle = 131072
Global Const $pd_exclusionflags = 16777216
Global Const $pd_hideprinttofile = 1048576
Global Const $pd_nocurrentpage = 8388608
Global Const $pd_nonetworkbutton = 2097152
Global Const $pd_nopagenums = 8
Global Const $pd_noselection = 4
Global Const $pd_nowarning = 128
Global Const $pd_pagenums = 2
Global Const $pd_printsetup = 64
Global Const $pd_printtofile = 32
Global Const $pd_returndc = 256
Global Const $pd_returndefault = 1024
Global Const $pd_returnic = 512
Global Const $pd_selection = 1
Global Const $pd_showhelp = 2048
Global Const $pd_usedevmodecopies = 262144
Global Const $pd_usedevmodecopiesandcollate = $pd_usedevmodecopies
Global Const $pd_uselargetemplate = 268435456
Global Const $pd_result_apply = 2
Global Const $pd_result_cancel = 0
Global Const $pd_result_print = 1
Global Const $ewx_logoff = 0
Global Const $ewx_poweroff = 8
Global Const $ewx_reboot = 2
Global Const $ewx_shutdown = 1
Global Const $ewx_force = 4
Global Const $ewx_forceifhung = 16
Global Const $oaif_allow_registration = 1
Global Const $oaif_register_ext = 2
Global Const $oaif_exec = 4
Global Const $oaif_force_registration = 8
Global Const $oaif_hide_registration = 32
Global Const $oaif_url_protocol = 64
Global Const $credui_flags_always_show_ui = 128
Global Const $credui_flags_complete_username = 2048
Global Const $credui_flags_do_not_persist = 2
Global Const $credui_flags_exclude_certificates = 8
Global Const $credui_flags_expect_confirmation = 131072
Global Const $credui_flags_generic_credentials = 262144
Global Const $credui_flags_incorrect_password = 1
Global Const $credui_flags_keep_username = 1048576
Global Const $credui_flags_password_only_ok = 512
Global Const $credui_flags_persist = 4096
Global Const $credui_flags_request_administrator = 4
Global Const $credui_flags_require_certificate = 16
Global Const $credui_flags_require_smartcard = 256
Global Const $credui_flags_server_credential = 16384
Global Const $credui_flags_show_save_check_box = 64
Global Const $credui_flags_username_target_credentials = 524288
Global Const $credui_flags_validate_username = 1024
Global Const $creduiwin_authpackage_only = 16
Global Const $creduiwin_checkbox = 2
Global Const $creduiwin_enumerate_admins = 256
Global Const $creduiwin_enumerate_current_user = 512
Global Const $creduiwin_generic = 1
Global Const $creduiwin_in_cred_only = 32
Global Const $creduiwin_secure_prompt = 4096
Global Const $creduiwin_pack_32_wow = 268435456
Global Const $creduiwin_preprompting = 8192
#Region Global Variables and Constants
	Global $__g_pfrbuffer = 0, $__g_ifrbuffersize = 16385
	Global Const $tagfindreplace = "dword Size;hwnd hOwner;ptr hInstance;dword Flags;ptr FindWhat;ptr ReplaceWith;ushort FindWhatLen;ushort ReplaceWithLen;lparam lParam;ptr Hook;ptr TemplateName"
	Global Const $tagmsgboxparams = "uint Size;hwnd hOwner;ptr hInstance;int_ptr Text;int_ptr Caption;dword Style;int_ptr Icon;dword_ptr ContextHelpId;ptr MsgBoxCallback;dword LanguageId"
	Global Const $tagpagesetupdlg = "dword Size;hwnd hOwner;ptr hDevMode;ptr hDevNames;dword Flags;long PaperWidth;long PaperHeight;long MarginMinLeft;long MarginMinTop;long MarginMinRight;long MarginMinBottom;long MarginLeft;long MarginTop;long MarginRight;long MarginBottom;ptr hInstance;lparam lParam;ptr PageSetupHook;ptr PagePaintHook;ptr PageSetupTemplateName;ptr hPageSetupTemplate"
	Global Const $tagprintdlg = __iif(@AutoItX64, "", "align 2;") & "dword Size;hwnd hOwner;handle hDevMode;handle hDevNames;handle hDC;dword Flags;word FromPage;word ToPage;word MinPage;word MaxPage;word Copies;handle hInstance;lparam lParam;ptr PrintHook;ptr SetupHook;ptr PrintTemplateName;ptr SetupTemplateName;handle hPrintTemplate;handle hSetupTemplate"
	Global Const $tagprintdlgex = "dword Size;hwnd hOwner;handle hDevMode;handle hDevNames;handle hDC;dword Flags;dword Flags2;dword ExclusionFlags;dword NumPageRanges;dword MaxPageRanges;ptr PageRanges;dword MinPage;dword MaxPage;dword Copies;handle hInstance;ptr PrintTemplateName;lparam lParam;dword NumPropertyPages;ptr hPropertyPages;dword StartPage;dword ResultAction"
	Global Const $tagprintpagerange = "dword FromPage;dword ToPage"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_browseforfolderdlg($sroot = "", $stext = "", $iflags = 0, $pbrowseproc = 0, $lparam = 0, $hparent = 0)
		Local Const $tagbrowseinfo = "hwnd hwndOwner;ptr pidlRoot;ptr pszDisplayName; ptr lpszTitle;uint ulFlags;ptr lpfn;lparam lParam;int iImage"
		Local $tbrowseinfo = DllStructCreate($tagbrowseinfo & ";wchar[" & (StringLen($stext) + 1) & "];wchar[260]")
		Local $ppidl = 0, $sresult = ""
		If StringStripWS($sroot, $str_stripleading + $str_striptrailing) Then
			Local $spath = _winapi_pathsearchandqualify($sroot, 1)
			If @error Then
				$spath = $sroot
			EndIf
			$ppidl = _winapi_shellilcreatefrompath($spath)
			If @error Then
			EndIf
		EndIf
		DllStructSetData($tbrowseinfo, 1, $hparent)
		DllStructSetData($tbrowseinfo, 2, $ppidl)
		DllStructSetData($tbrowseinfo, 3, DllStructGetPtr($tbrowseinfo, 10))
		DllStructSetData($tbrowseinfo, 4, DllStructGetPtr($tbrowseinfo, 9))
		DllStructSetData($tbrowseinfo, 5, $iflags)
		DllStructSetData($tbrowseinfo, 6, $pbrowseproc)
		DllStructSetData($tbrowseinfo, 7, $lparam)
		DllStructSetData($tbrowseinfo, 8, 0)
		DllStructSetData($tbrowseinfo, 9, $stext)
		Local $aret = DllCall("shell32.dll", "ptr", "SHBrowseForFolderW", "struct*", $tbrowseinfo)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		$sresult = _winapi_shellgetpathfromidlist($aret[0])
		_winapi_cotaskmemfree($aret[0])
		If $ppidl Then
			_winapi_cotaskmemfree($ppidl)
		EndIf
		If NOT $sresult Then Return SetError(10, 0, "")
		Return $sresult
	EndFunc

	Func _winapi_commdlgextendederrorex()
		Local $aret = DllCall("comdlg32.dll", "dword", "CommDlgExtendedError")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_confirmcredentials($starget, $bconfirm)
		If NOT __dll("credui.dll") Then Return SetError(103, 0, 0)
		Local $aret = DllCall("credui.dll", "dword", "CredUIConfirmCredentialsW", "wstr", $starget, "bool", $bconfirm)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_findtextdlg($howner, $sfindwhat = "", $iflags = 0, $pfindproc = 0, $lparam = 0)
		$__g_pfrbuffer = __heaprealloc($__g_pfrbuffer, 2 * $__g_ifrbuffersize)
		If @error Then Return SetError(@error + 20, @extended, 0)
		DllStructSetData(DllStructCreate("wchar[" & $__g_ifrbuffersize & "]", $__g_pfrbuffer), 1, StringLeft($sfindwhat, $__g_ifrbuffersize - 1))
		Local $tfr = DllStructCreate($tagfindreplace)
		DllStructSetData($tfr, "Size", DllStructGetSize($tfr))
		DllStructSetData($tfr, "hOwner", $howner)
		DllStructSetData($tfr, "hInstance", 0)
		DllStructSetData($tfr, "Flags", $iflags)
		DllStructSetData($tfr, "FindWhat", $__g_pfrbuffer)
		DllStructSetData($tfr, "ReplaceWith", 0)
		DllStructSetData($tfr, "FindWhatLen", $__g_ifrbuffersize * 2)
		DllStructSetData($tfr, "ReplaceWithLen", 0)
		DllStructSetData($tfr, "lParam", $lparam)
		DllStructSetData($tfr, "Hook", $pfindproc)
		DllStructSetData($tfr, "TemplateName", 0)
		Local $aret = DllCall("comdlg32.dll", "hwnd", "FindTextW", "struct*", $tfr)
		If @error OR NOT $aret[0] Then
			Local $ierror = @error + 30
			__heapfree($__g_pfrbuffer)
			If IsArray($aret) Then
				Return SetError(10, _winapi_commdlgextendederrorex(), 0)
			Else
				Return SetError($ierror, @extended, 0)
			EndIf
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_flushfrbuffer()
		If NOT __heapfree($__g_pfrbuffer, 1) Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_formatdrivedlg($sdrive, $ioption = 0, $hparent = 0)
		If NOT IsString($sdrive) Then Return SetError(10, 0, 0)
		$sdrive = StringLeft(StringUpper(StringStripWS($sdrive, $str_stripleading)), 1)
		If NOT $sdrive Then Return SetError(11, 0, 0)
		$sdrive = Asc($sdrive) - 65
		If ($sdrive < 0) OR ($sdrive > 25) Then Return SetError(12, 0, 0)
		Local $aret = DllCall("shell32.dll", "dword", "SHFormatDrive", "hwnd", $hparent, "uint", $sdrive, "uint", 65535, "uint", $ioption)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] < 0 Then Return SetError($aret[0], 0, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getconnecteddlg($idlg, $iflags = 0, $hparent = 0)
		If NOT __dll("connect.dll") Then Return SetError(103, 0, 0)
		Switch $idlg
			Case 0
				$idlg = "GetNetworkConnected"
			Case 1
				$idlg = "GetInternetConnected"
			Case 2
				$idlg = "GetVPNConnected"
			Case Else
				Return SetError(1, 0, 0)
		EndSwitch
		Local $sstr = ""
		If BitAND($iflags, 1) Then
			$sstr &= "-SkipInternetDetection "
		EndIf
		If BitAND($iflags, 2) Then
			$sstr &= "-SkipExistingConnections "
		EndIf
		If BitAND($iflags, 4) Then
			$sstr &= "-HideFinishPage "
		EndIf
		Local $aret = DllCall("connect.dll", "long", $idlg, "hwnd", $hparent, "dword", 0, "dword", 0, "dword", 0, "handle", 0, "wstr", StringStripWS($sstr, $str_striptrailing))
		If @error Then Return SetError(@error, @extended, 0)
		If NOT ($aret[0] = 0 OR $aret[0] = 1) Then Return SetError(10, $aret[0], 0)
		Return Number(NOT $aret[0])
	EndFunc

	Func _winapi_getfrbuffer()
		Return $__g_ifrbuffersize - 1
	EndFunc

	Func _winapi_messageboxcheck($itype, $stitle, $stext, $sregval, $idefault = -1, $hparent = 0)
		Local $aret = DllCall("shlwapi.dll", "int", "SHMessageBoxCheckW", "hwnd", $hparent, "wstr", $stext, "wstr", $stitle, "uint", $itype, "int", $idefault, "wstr", $sregval)
		If @error Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_messageboxindirect($tmsgboxparams)
		Local $aret = DllCall("user32.dll", "int", "MessageBoxIndirectW", "struct*", $tmsgboxparams)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_openfiledlg($stitle = "", $sinitdir = "", $sfilters = "", $idefaultfilter = 0, $sdefaultfilepath = "", $sdefaultext = "", $iflags = 0, $iflagsex = 0, $pofnproc = 0, $pdata = 0, $hparent = 0)
		Local $sresult = __ofndlg(0, $stitle, $sinitdir, $sfilters, $idefaultfilter, $sdefaultfilepath, $sdefaultext, $iflags, $iflagsex, $pofnproc, $pdata, $hparent)
		If @error Then Return SetError(@error, @extended, "")
		Return $sresult
	EndFunc

	Func _winapi_pagesetupdlg(ByRef $tpagesetupdlg)
		Local $aret = DllCall("comdlg32.dll", "int", "PageSetupDlgW", "struct*", $tpagesetupdlg)
		If @error Then Return SetError(@error, @extended, 0)
		If NOT $aret[0] Then Return SetError(10, _winapi_commdlgextendederrorex(), 0)
		Return $aret[0]
	EndFunc

	Func _winapi_pickicondlg($sicon = "", $iindex = 0, $hparent = 0)
		Local $aret = DllCall("shell32.dll", "int", "PickIconDlg", "hwnd", $hparent, "wstr", $sicon, "int", 4096, "int*", $iindex)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[2]
		Local $ares = DllCall("kernel32.dll", "dword", "ExpandEnvironmentStringsW", "wstr", $aret[2], "wstr", "", "dword", 4096)
		$aresult[0] = $ares[2]
		$aresult[1] = $aret[4]
		Return $aresult
	EndFunc

	Func _winapi_printdlg(ByRef $tprintdlg)
		Local $aret = DllCall("comdlg32.dll", "long", "PrintDlgW", "struct*", $tprintdlg)
		If @error Then Return SetError(@error, @extended, 0)
		If NOT $aret[0] Then Return SetError(10, _winapi_commdlgextendederrorex(), 0)
		Return $aret[0]
	EndFunc

	Func _winapi_printdlgex(ByRef $tprintdlgex)
		Local $tpdex = DllStructCreate($tagprintdlgex, DllStructGetPtr($tprintdlgex))
		Local $aret = DllCall("comdlg32.dll", "long", "PrintDlgExW", "struct*", $tpdex)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return SetExtended(DllStructGetData($tpdex, "ResultAction"), 1)
	EndFunc

	Func _winapi_replacetextdlg($howner, $sfindwhat = "", $sreplacewith = "", $iflags = 0, $preplaceproc = 0, $lparam = 0)
		$__g_pfrbuffer = __heaprealloc($__g_pfrbuffer, 4 * $__g_ifrbuffersize)
		If @error Then Return SetError(@error + 100, @extended, 0)
		Local $tbuff = DllStructCreate("wchar[" & $__g_ifrbuffersize & "];wchar[" & $__g_ifrbuffersize & "]", $__g_pfrbuffer)
		DllStructSetData($tbuff, 1, StringLeft($sfindwhat, $__g_ifrbuffersize - 1))
		DllStructSetData($tbuff, 2, StringLeft($sreplacewith, $__g_ifrbuffersize - 1))
		Local $tfr = DllStructCreate($tagfindreplace)
		DllStructSetData($tfr, "Size", DllStructGetSize($tfr))
		DllStructSetData($tfr, "hOwner", $howner)
		DllStructSetData($tfr, "hInstance", 0)
		DllStructSetData($tfr, "Flags", $iflags)
		DllStructSetData($tfr, "FindWhat", DllStructGetPtr($tbuff, 1))
		DllStructSetData($tfr, "ReplaceWith", DllStructGetPtr($tbuff, 2))
		DllStructSetData($tfr, "FindWhatLen", $__g_ifrbuffersize * 2)
		DllStructSetData($tfr, "ReplaceWithLen", $__g_ifrbuffersize * 2)
		DllStructSetData($tfr, "lParam", $lparam)
		DllStructSetData($tfr, "Hook", $preplaceproc)
		DllStructSetData($tfr, "TemplateName", 0)
		Local $aret = DllCall("comdlg32.dll", "hwnd", "ReplaceTextW", "struct*", $tfr)
		If @error OR NOT $aret[0] Then
			Local $ierror = @error
			__heapfree($__g_pfrbuffer)
			If IsArray($aret) Then
				Return SetError(10, _winapi_commdlgextendederrorex(), 0)
			Else
				Return SetError($ierror, 0, 0)
			EndIf
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_restartdlg($stext = "", $iflags = 2, $hparent = 0)
		Local $aret = DllCall("shell32.dll", "int", "RestartDialog", "hwnd", $hparent, "wstr", $stext, "int", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_savefiledlg($stitle = "", $sinitdir = "", $sfilters = "", $idefaultfilter = 0, $sdefaultfilepath = "", $sdefaultext = "", $iflags = 0, $iflagsex = 0, $pofnproc = 0, $pdata = 0, $hparent = 0)
		Local $sresult = __ofndlg(1, $stitle, $sinitdir, $sfilters, $idefaultfilter, $sdefaultfilepath, $sdefaultext, $iflags, $iflagsex, $pofnproc, $pdata, $hparent)
		If @error Then Return SetError(@error, @extended, "")
		Return $sresult
	EndFunc

	Func _winapi_setfrbuffer($ichars)
		$ichars = Number($ichars)
		If $ichars < 80 Then
			$ichars = 80
		EndIf
		$__g_ifrbuffersize = $ichars + 1
		Return 1
	EndFunc

	Func _winapi_shellaboutdlg($stitle, $sname, $stext, $hicon = 0, $hparent = 0)
		Local $aret = DllCall("shell32.dll", "int", "ShellAboutW", "hwnd", $hparent, "wstr", $stitle & "#" & $sname, "wstr", $stext, "handle", $hicon)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_shellopenwithdlg($sfilepath, $iflags = 0, $hparent = 0)
		Local $topenasinfo = DllStructCreate("ptr;ptr;dword;wchar[" & (StringLen($sfilepath) + 1) & "]")
		DllStructSetData($topenasinfo, 1, DllStructGetPtr($topenasinfo, 4))
		DllStructSetData($topenasinfo, 2, 0)
		DllStructSetData($topenasinfo, 3, $iflags)
		DllStructSetData($topenasinfo, 4, $sfilepath)
		Local $aret = DllCall("shell32.dll", "long", "SHOpenWithDialog", "hwnd", $hparent, "struct*", $topenasinfo)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_shellstartnetconnectiondlg($sremote = "", $iflags = 0, $hparent = 0)
		Local $stypeofremote = "wstr"
		If NOT StringStripWS($sremote, $str_stripleading + $str_striptrailing) Then
			$stypeofremote = "ptr"
			$sremote = 0
		EndIf
		DllCall("shell32.dll", "long", "SHStartNetConnectionDialogW", "hwnd", $hparent, $stypeofremote, $sremote, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_shelluserauthenticationdlg($scaption, $smessage, $suser, $spassword, $starget, $iflags = 0, $ierror = 0, $bsave = False, $hbitmap = 0, $hparent = 0)
		If NOT __dll("credui.dll") Then Return SetError(103, 0, 0)
		Local $tinfo = DllStructCreate("dword;hwnd;ptr;ptr;ptr;wchar[" & (StringLen($smessage) + 1) & "];wchar[" & (StringLen($scaption) + 1) & "]")
		DllStructSetData($tinfo, 1, DllStructGetPtr($tinfo, 6) - DllStructGetPtr($tinfo))
		DllStructSetData($tinfo, 2, $hparent)
		DllStructSetData($tinfo, 3, DllStructGetPtr($tinfo, 6))
		DllStructSetData($tinfo, 4, DllStructGetPtr($tinfo, 7))
		DllStructSetData($tinfo, 5, $hbitmap)
		DllStructSetData($tinfo, 6, $smessage)
		DllStructSetData($tinfo, 7, $scaption)
		Local $aret = DllCall("credui.dll", "dword", "CredUIPromptForCredentialsW", "struct*", $tinfo, "wstr", $starget, "ptr", 0, "dword", $ierror, "wstr", $suser, "ulong", 4096, "wstr", $spassword, "ulong", 4096, "bool*", $bsave, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $aresult[3]
		$aresult[0] = $aret[5]
		$aresult[1] = $aret[7]
		$aresult[2] = $aret[9]
		Return $aresult
	EndFunc

	Func _winapi_shelluserauthenticationdlgex($scaption, $smessage, $suser, $spassword, $iflags = 0, $iautherror = 0, $bsave = False, $ipackage = 0, $hparent = 0)
		If NOT __dll("credui.dll") Then Return SetError(103, 0, 0)
		Local $tblob = 0, $aret
		If StringLen($suser) Then
			$aret = DllCall("credui.dll", "bool", "CredPackAuthenticationBufferW", "dword", 1, "wstr", $suser, "wstr", $spassword, "ptr", 0, "dword*", 0)
			If @error OR NOT $aret[5] Then Return SetError(@error + 10, @extended, 0)
			$tblob = DllStructCreate("byte[" & $aret[5] & "]")
			$aret = DllCall("credui.dll", "bool", "CredPackAuthenticationBufferW", "dword", 1, "wstr", $suser, "wstr", $spassword, "struct*", $tblob, "dword*", $aret[5])
			If @error OR NOT $aret[0] Then Return SetError(@error + 20, @extended, 0)
		EndIf
		Local $tinfo = DllStructCreate("dword;hwnd;ptr;ptr;ptr;wchar[" & (StringLen($smessage) + 1) & "];wchar[" & (StringLen($scaption) + 1) & "]")
		DllStructSetData($tinfo, 1, DllStructGetPtr($tinfo, 6) - DllStructGetPtr($tinfo))
		DllStructSetData($tinfo, 2, $hparent)
		DllStructSetData($tinfo, 3, DllStructGetPtr($tinfo, 6))
		DllStructSetData($tinfo, 4, DllStructGetPtr($tinfo, 7))
		DllStructSetData($tinfo, 5, 0)
		DllStructSetData($tinfo, 6, $smessage)
		DllStructSetData($tinfo, 7, $scaption)
		$aret = DllCall("credui.dll", "dword", "CredUIPromptForWindowsCredentialsW", "struct*", $tinfo, "dword", $iautherror, "ulong*", $ipackage, "struct*", $tblob, "ulong", DllStructGetSize($tblob), "ptr*", 0, "ulong*", 0, "bool*", $bsave, "dword", $iflags)
		If @error Then Return SetError(@error + 30, @extended, 0)
		If $aret[0] Then Return SetError(30, $aret[0], 0)
		Local $aresult[4], $ierror = 0
		$aresult[2] = $aret[8]
		$aresult[3] = $aret[3]
		Local $pblob = $aret[6]
		Local $isize = $aret[7]
		$aret = DllCall("credui.dll", "bool", "CredUnPackAuthenticationBufferW", "dword", 1, "ptr", $pblob, "dword", $isize, "wstr", "", "dword*", 4096, "wstr", "", "dword*", 4096, "wstr", "", "dword*", 4096)
		If NOT @error AND $aret[0] Then
			$aresult[0] = $aret[4]
			$aresult[1] = $aret[8]
		Else
			$ierror = @error + 40
		EndIf
		If NOT _winapi_zeromemory($pblob, $isize) Then
		EndIf
		_winapi_cotaskmemfree($pblob)
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $aresult
	EndFunc

#EndRegion Public Functions
#Region Internal Functions

	Func __ofndlg($idlg, $stitle, $sinitdir, $sfilters, $ideffilter, $sdeffile, $sdefext, $iflags, $iflagsex, $pofnproc, $pdata, $hparent)
		Local $tbuffer = DllStructCreate("wchar[32768]")
		Local $tfilters = 0, $tdefext = 0, $tinitdir = 0, $ttitle = 0
		Local $tofn = DllStructCreate($tagopenfilename)
		DllStructSetData($tofn, 1, DllStructGetSize($tofn))
		DllStructSetData($tofn, 2, $hparent)
		DllStructSetData($tofn, 3, 0)
		Local $adata = StringSplit($sfilters, "|")
		Local $afilters[$adata[0] * 2]
		Local $icount = 0
		For $i = 1 To $adata[0]
			$afilters[$icount + 0] = StringStripWS($adata[$i], $str_stripleading + $str_striptrailing)
			$afilters[$icount + 1] = StringStripWS(StringRegExpReplace($adata[$i], ".*\((.*)\)", "\1"), $str_stripall)
			If $afilters[$icount + 1] Then
				$icount += 2
			EndIf
		Next
		If $icount Then
			$tfilters = _winapi_arraytostruct($afilters, 0, $icount - 1)
			If @error Then
			EndIf
		EndIf
		DllStructSetData($tofn, 4, DllStructGetPtr($tfilters))
		DllStructSetData($tofn, 5, 0)
		DllStructSetData($tofn, 6, 0)
		DllStructSetData($tofn, 7, $ideffilter)
		$sdeffile = StringStripWS($sdeffile, $str_stripleading + $str_striptrailing)
		If $sdeffile Then
			DllStructSetData($tbuffer, 1, $sdeffile)
		EndIf
		DllStructSetData($tofn, 8, DllStructGetPtr($tbuffer))
		DllStructSetData($tofn, 9, 32768)
		DllStructSetData($tofn, 10, 0)
		DllStructSetData($tofn, 11, 0)
		$sinitdir = StringStripWS($sinitdir, $str_stripleading + $str_striptrailing)
		If $sinitdir Then
			$tinitdir = DllStructCreate("wchar[" & (StringLen($sinitdir) + 1) & "]")
		EndIf
		DllStructSetData($tinitdir, 1, $sinitdir)
		DllStructSetData($tofn, 12, DllStructGetPtr($tinitdir))
		$stitle = StringStripWS($stitle, $str_stripleading + $str_striptrailing)
		If $stitle Then
			$ttitle = DllStructCreate("wchar[" & (StringLen($stitle) + 1) & "]")
		EndIf
		DllStructSetData($ttitle, 1, $stitle)
		DllStructSetData($tofn, 13, DllStructGetPtr($ttitle))
		DllStructSetData($tofn, 14, $iflags)
		DllStructSetData($tofn, 15, 0)
		DllStructSetData($tofn, 16, 0)
		$sdefext = StringStripWS($sdefext, $str_stripleading + $str_striptrailing)
		If $sdefext Then
			$tdefext = DllStructCreate("wchar[" & (StringLen($tdefext) + 1) & "]")
		EndIf
		DllStructSetData($tdefext, 1, StringReplace($sdefext, ".", ""))
		DllStructSetData($tofn, 17, DllStructGetPtr($tdefext))
		DllStructSetData($tofn, 18, $pdata)
		DllStructSetData($tofn, 19, $pofnproc)
		DllStructSetData($tofn, 20, 0)
		DllStructSetData($tofn, 21, 0)
		DllStructSetData($tofn, 22, 0)
		DllStructSetData($tofn, 23, $iflagsex)
		Local $aret
		Switch $idlg
			Case 0
				$aret = DllCall("comdlg32.dll", "int", "GetOpenFileNameW", "struct*", $tofn)
			Case 1
				$aret = DllCall("comdlg32.dll", "int", "GetSaveFileNameW", "struct*", $tofn)
			Case Else
		EndSwitch
		If @error Then Return SetError(@error, @extended, "")
		If NOT $aret[0] Then Return SetError(10, _winapi_commdlgextendederrorex(), "")
		If BitAND($iflags, 512) Then
			If BitAND($iflags, 524288) Then
				$adata = _winapi_structtoarray($tbuffer)
				If @error Then
					Return SetError(11, 0, "")
				EndIf
			Else
				$adata = StringSplit(DllStructGetData($tbuffer, 1), " ")
			EndIf
			Switch $adata[0]
				Case 0
					Return SetError(12, 0, "")
				Case 1
				Case Else
					Local $spath = $adata[1]
					For $i = 2 To $adata[0]
						$adata[$i - 1] = _winapi_pathappend($spath, $adata[$i])
					Next
					ReDim $adata[$adata[0]]
					$adata[0] -= 1
			EndSwitch
		Else
			$adata = DllStructGetData($tbuffer, 1)
		EndIf
		$__g_vext = $tofn
		Return $adata
	EndFunc

#EndRegion Internal Functions
Global Const $fr_private = 16
Global Const $fr_not_enum = 32
Global Const $compression_bitmap_png = 0
Global Const $compression_bitmap_jpeg = 1
Global Const $bs_dibpattern = 5
Global Const $bs_dibpattern8x8 = 8
Global Const $bs_dibpatternpt = 6
Global Const $bs_hatched = 2
Global Const $bs_hollow = 1
Global Const $bs_null = 1
Global Const $bs_pattern = 3
Global Const $bs_pattern8x8 = 7
Global Const $bs_solid = 0
Global Const $hs_bdiagonal = 3
Global Const $hs_cross = 4
Global Const $hs_diagcross = 5
Global Const $hs_fdiagonal = 2
Global Const $hs_horizontal = 0
Global Const $hs_vertical = 1
Global Const $dib_pal_colors = 1
Global Const $dib_rgb_colors = 0
Global Const $ca_negative = 1
Global Const $ca_log_filter = 2
Global Const $illuminant_device_default = 0
Global Const $illuminant_a = 1
Global Const $illuminant_b = 2
Global Const $illuminant_c = 3
Global Const $illuminant_d50 = 4
Global Const $illuminant_d55 = 5
Global Const $illuminant_d65 = 6
Global Const $illuminant_d75 = 7
Global Const $illuminant_f2 = 8
Global Const $illuminant_tungsten = $illuminant_a
Global Const $illuminant_daylight = $illuminant_c
Global Const $illuminant_fluorescent = $illuminant_f2
Global Const $illuminant_ntsc = $illuminant_c
Global Const $bi_rgb = 0
Global Const $bi_rle8 = 1
Global Const $bi_rle4 = 2
Global Const $bi_bitfields = 3
Global Const $bi_jpeg = 4
Global Const $bi_png = 5
Global Const $alternate = 1
Global Const $winding = 2
Global Const $dwmwa_ncrendering_enabled = 1
Global Const $dwmwa_ncrendering_policy = 2
Global Const $dwmwa_transitions_forcedisabled = 3
Global Const $dwmwa_allow_ncpaint = 4
Global Const $dwmwa_caption_button_bounds = 5
Global Const $dwmwa_nonclient_rtl_layout = 6
Global Const $dwmwa_force_iconic_representation = 7
Global Const $dwmwa_flip3d_policy = 8
Global Const $dwmwa_extended_frame_bounds = 9
Global Const $dwmwa_has_iconic_bitmap = 10
Global Const $dwmwa_disallow_peek = 11
Global Const $dwmwa_excluded_from_peek = 12
Global Const $dwmncrp_usewindowstyle = 0
Global Const $dwmncrp_disabled = 1
Global Const $dwmncrp_enabled = 2
Global Const $dwmflip3d_default = 0
Global Const $dwmflip3d_excludebelow = 1
Global Const $dwmflip3d_excludeabove = 2
Global Const $dm_bitsperpel = 262144
Global Const $dm_collate = 32768
Global Const $dm_color = 2048
Global Const $dm_copies = 256
Global Const $dm_defaultsource = 512
Global Const $dm_displayfixedoutput = 536870912
Global Const $dm_displayflags = 2097152
Global Const $dm_displayfrequency = 4194304
Global Const $dm_displayorientation = 128
Global Const $dm_dithertype = 67108864
Global Const $dm_duplex = 4096
Global Const $dm_formname = 65536
Global Const $dm_icmintent = 16777216
Global Const $dm_icmmethod = 8388608
Global Const $dm_logpixels = 131072
Global Const $dm_mediatype = 33554432
Global Const $dm_nup = 64
Global Const $dm_orientation = 1
Global Const $dm_panningheight = 268435456
Global Const $dm_panningwidth = 134217728
Global Const $dm_paperlength = 4
Global Const $dm_papersize = 2
Global Const $dm_paperwidth = 8
Global Const $dm_pelsheight = 1048576
Global Const $dm_pelswidth = 524288
Global Const $dm_position = 32
Global Const $dm_printquality = 1024
Global Const $dm_scale = 16
Global Const $dm_ttoption = 16384
Global Const $dm_yresolution = 8192
Global Const $dmpaper_letter = 1
Global Const $dmpaper_lettersmall = 2
Global Const $dmpaper_tabloid = 3
Global Const $dmpaper_ledger = 4
Global Const $dmpaper_legal = 5
Global Const $dmpaper_statement = 6
Global Const $dmpaper_executive = 7
Global Const $dmpaper_a3 = 8
Global Const $dmpaper_a4 = 9
Global Const $dmpaper_a4small = 10
Global Const $dmpaper_a5 = 11
Global Const $dmpaper_b4 = 12
Global Const $dmpaper_b5 = 13
Global Const $dmpaper_folio = 14
Global Const $dmpaper_quarto = 15
Global Const $dmpaper_10x14 = 16
Global Const $dmpaper_11x17 = 17
Global Const $dmpaper_note = 18
Global Const $dmpaper_env_9 = 19
Global Const $dmpaper_env_10 = 20
Global Const $dmpaper_env_11 = 21
Global Const $dmpaper_env_12 = 22
Global Const $dmpaper_env_14 = 23
Global Const $dmpaper_csheet = 24
Global Const $dmpaper_dsheet = 25
Global Const $dmpaper_esheet = 26
Global Const $dmpaper_env_dl = 27
Global Const $dmpaper_env_c5 = 28
Global Const $dmpaper_env_c3 = 29
Global Const $dmpaper_env_c4 = 30
Global Const $dmpaper_env_c6 = 31
Global Const $dmpaper_env_c65 = 32
Global Const $dmpaper_env_b4 = 33
Global Const $dmpaper_env_b5 = 34
Global Const $dmpaper_env_b6 = 35
Global Const $dmpaper_env_italy = 36
Global Const $dmpaper_env_monarch = 37
Global Const $dmpaper_env_personal = 38
Global Const $dmpaper_fanfold_us = 39
Global Const $dmpaper_fanfold_std_german = 40
Global Const $dmpaper_fanfold_lgl_german = 41
Global Const $dmpaper_iso_b4 = 42
Global Const $dmpaper_japanese_postcard = 43
Global Const $dmpaper_9x11 = 44
Global Const $dmpaper_10x11 = 45
Global Const $dmpaper_15x11 = 46
Global Const $dmpaper_env_invite = 47
Global Const $dmpaper_reserved_48 = 48
Global Const $dmpaper_reserved_49 = 49
Global Const $dmpaper_letter_extra = 50
Global Const $dmpaper_legal_extra = 51
Global Const $dmpaper_tabloid_extra = 52
Global Const $dmpaper_a4_extra = 53
Global Const $dmpaper_letter_transverse = 54
Global Const $dmpaper_a4_transverse = 55
Global Const $dmpaper_letter_extra_transverse = 56
Global Const $dmpaper_a_plus = 57
Global Const $dmpaper_b_plus = 58
Global Const $dmpaper_letter_plus = 59
Global Const $dmpaper_a4_plus = 60
Global Const $dmpaper_a5_transverse = 61
Global Const $dmpaper_b5_transverse = 62
Global Const $dmpaper_a3_extra = 63
Global Const $dmpaper_a5_extra = 64
Global Const $dmpaper_b5_extra = 65
Global Const $dmpaper_a2 = 66
Global Const $dmpaper_a3_transverse = 67
Global Const $dmpaper_a3_extra_transverse = 68
Global Const $dmpaper_dbl_japanese_postcard = 69
Global Const $dmpaper_a6 = 70
Global Const $dmpaper_jenv_kaku2 = 71
Global Const $dmpaper_jenv_kaku3 = 72
Global Const $dmpaper_jenv_chou3 = 73
Global Const $dmpaper_jenv_chou4 = 74
Global Const $dmpaper_letter_rotated = 75
Global Const $dmpaper_a3_rotated = 76
Global Const $dmpaper_a4_rotated = 77
Global Const $dmpaper_a5_rotated = 78
Global Const $dmpaper_b4_jis_rotated = 79
Global Const $dmpaper_b5_jis_rotated = 80
Global Const $dmpaper_japanese_postcard_rotated = 81
Global Const $dmpaper_dbl_japanese_postcard_rotated = 82
Global Const $dmpaper_a6_rotated = 83
Global Const $dmpaper_jenv_kaku2_rotated = 84
Global Const $dmpaper_jenv_kaku3_rotated = 85
Global Const $dmpaper_jenv_chou3_rotated = 86
Global Const $dmpaper_jenv_chou4_rotated = 87
Global Const $dmpaper_b6_jis = 88
Global Const $dmpaper_b6_jis_rotated = 89
Global Const $dmpaper_12x11 = 90
Global Const $dmpaper_jenv_you4 = 91
Global Const $dmpaper_jenv_you4_rotated = 92
Global Const $dmpaper_p16k = 93
Global Const $dmpaper_p32k = 94
Global Const $dmpaper_p32kbig = 95
Global Const $dmpaper_penv_1 = 96
Global Const $dmpaper_penv_2 = 97
Global Const $dmpaper_penv_3 = 98
Global Const $dmpaper_penv_4 = 99
Global Const $dmpaper_penv_5 = 100
Global Const $dmpaper_penv_6 = 101
Global Const $dmpaper_penv_7 = 102
Global Const $dmpaper_penv_8 = 103
Global Const $dmpaper_penv_9 = 104
Global Const $dmpaper_penv_10 = 105
Global Const $dmpaper_p16k_rotated = 106
Global Const $dmpaper_p32k_rotated = 107
Global Const $dmpaper_p32kbig_rotated = 108
Global Const $dmpaper_penv_1_rotated = 109
Global Const $dmpaper_penv_2_rotated = 110
Global Const $dmpaper_penv_3_rotated = 111
Global Const $dmpaper_penv_4_rotated = 112
Global Const $dmpaper_penv_5_rotated = 113
Global Const $dmpaper_penv_6_rotated = 114
Global Const $dmpaper_penv_7_rotated = 115
Global Const $dmpaper_penv_8_rotated = 116
Global Const $dmpaper_penv_9_rotated = 117
Global Const $dmpaper_penv_10_rotated = 118
Global Const $dmpaper_user = 256
Global Const $dmbin_upper = 1
Global Const $dmbin_lower = 2
Global Const $dmbin_middle = 3
Global Const $dmbin_manual = 4
Global Const $dmbin_envelope = 5
Global Const $dmbin_envmanual = 6
Global Const $dmbin_auto = 7
Global Const $dmbin_tractor = 8
Global Const $dmbin_smallfmt = 9
Global Const $dmbin_largefmt = 10
Global Const $dmbin_largecapacity = 11
Global Const $dmbin_cassette = 14
Global Const $dmbin_formsource = 15
Global Const $dmbin_user = 256
Global Const $dmres_draft = -1
Global Const $dmres_low = -2
Global Const $dmres_medium = -3
Global Const $dmres_high = -4
Global Const $dmdo_default = 0
Global Const $dmdo_90 = 1
Global Const $dmdo_180 = 2
Global Const $dmdo_270 = 3
Global Const $dmdfo_default = 0
Global Const $dmdfo_stretch = 1
Global Const $dmdfo_center = 2
Global Const $dmcolor_monochrome = 1
Global Const $dmcolor_color = 2
Global Const $dmdup_simplex = 1
Global Const $dmdup_vertical = 2
Global Const $dmdup_horizontal = 3
Global Const $dmtt_bitmap = 1
Global Const $dmtt_download = 2
Global Const $dmtt_subdev = 3
Global Const $dmtt_download_outline = 4
Global Const $dmcollate_false = 0
Global Const $dmcollate_true = 1
Global Const $dm_grayscale = 1
Global Const $dm_interlaced = 2
Global Const $dmnup_system = 1
Global Const $dmnup_oneup = 2
Global Const $dmicmmethod_none = 1
Global Const $dmicmmethod_system = 2
Global Const $dmicmmethod_driver = 3
Global Const $dmicmmethod_device = 4
Global Const $dmicmmethod_user = 256
Global Const $dmicm_saturate = 1
Global Const $dmicm_contrast = 2
Global Const $dmicm_colorimetric = 3
Global Const $dmicm_abs_colorimetric = 4
Global Const $dmicm_user = 256
Global Const $dmmedia_standard = 1
Global Const $dmmedia_transparency = 2
Global Const $dmmedia_glossy = 3
Global Const $dmmedia_user = 256
Global Const $dmdither_none = 1
Global Const $dmdither_coarse = 2
Global Const $dmdither_fine = 3
Global Const $dmdither_lineart = 4
Global Const $dmdither_errordiffusion = 5
Global Const $dmdither_reserved6 = 6
Global Const $dmdither_reserved7 = 7
Global Const $dmdither_reserved8 = 8
Global Const $dmdither_reserved9 = 9
Global Const $dmdither_grayscale = 10
Global Const $dmdither_user = 256
Global Const $enum_current_settings = -1
Global Const $enum_registry_settings = -2
Global Const $device_fonttype = 2
Global Const $raster_fonttype = 1
Global Const $truetype_fonttype = 4
Global Const $ntm_bold = 32
Global Const $ntm_dsig = 2097152
Global Const $ntm_italic = 1
Global Const $ntm_multiplemaster = 524288
Global Const $ntm_nonnegative_ac = 65536
Global Const $ntm_ps_opentype = 131072
Global Const $ntm_regular = 64
Global Const $ntm_tt_opentype = 262144
Global Const $ntm_type1 = 1048576
Global Const $floodfillborder = 0
Global Const $floodfillsurface = 1
Global Const $ad_counterclockwise = 1
Global Const $ad_clockwise = 2
Global Const $dcb_accumulate = 2
Global Const $dcb_disable = 8
Global Const $dcb_enable = 4
Global Const $dcb_reset = 1
Global Const $dcb_set = BitOR($dcb_reset, $dcb_accumulate)
Global Const $obj_bitmap = 7
Global Const $obj_brush = 2
Global Const $obj_colorspace = 14
Global Const $obj_dc = 3
Global Const $obj_enhmetadc = 12
Global Const $obj_enhmetafile = 13
Global Const $obj_extpen = 11
Global Const $obj_font = 6
Global Const $obj_memdc = 10
Global Const $obj_metadc = 4
Global Const $obj_metafile = 9
Global Const $obj_pal = 5
Global Const $obj_pen = 1
Global Const $obj_region = 8
Global Const $dcx_window = 1
Global Const $dcx_cache = 2
Global Const $dcx_parentclip = 32
Global Const $dcx_clipsiblings = 16
Global Const $dcx_clipchildren = 8
Global Const $dcx_noresetattrs = 4
Global Const $dcx_lockwindowupdate = 1024
Global Const $dcx_excludergn = 64
Global Const $dcx_intersectrgn = 128
Global Const $dcx_intersectupdate = 512
Global Const $dcx_validate = 2097152
Global Const $ggo_bezier = 3
Global Const $ggo_bitmap = 1
Global Const $ggo_glyph_index = 128
Global Const $ggo_gray2_bitmap = 4
Global Const $ggo_gray4_bitmap = 5
Global Const $ggo_gray8_bitmap = 6
Global Const $ggo_metrics = 0
Global Const $ggo_native = 2
Global Const $ggo_unhinted = 256
Global Const $gm_compatible = 1
Global Const $gm_advanced = 2
Global Const $mm_anisotropic = 8
Global Const $mm_hienglish = 5
Global Const $mm_himetric = 3
Global Const $mm_isotropic = 7
Global Const $mm_loenglish = 4
Global Const $mm_lometric = 2
Global Const $mm_text = 1
Global Const $mm_twips = 6
Global Const $r2_black = 1
Global Const $r2_copypen = 13
Global Const $r2_last = 16
Global Const $r2_masknotpen = 3
Global Const $r2_maskpen = 9
Global Const $r2_maskpennot = 5
Global Const $r2_mergenotpen = 12
Global Const $r2_mergepen = 15
Global Const $r2_mergepennot = 14
Global Const $r2_nop = 11
Global Const $r2_not = 6
Global Const $r2_notcopypen = 4
Global Const $r2_notmaskpen = 8
Global Const $r2_notmergepen = 2
Global Const $r2_notxorpen = 10
Global Const $r2_white = 16
Global Const $r2_xorpen = 7
Global Const $blackonwhite = 1
Global Const $coloroncolor = 3
Global Const $halftone = 4
Global Const $whiteonblack = 2
Global Const $stretch_andscans = $blackonwhite
Global Const $stretch_deletescans = $coloroncolor
Global Const $stretch_halftone = $halftone
Global Const $stretch_orscans = $whiteonblack
Global Const $ta_baseline = 24
Global Const $ta_bottom = 8
Global Const $ta_top = 0
Global Const $ta_center = 6
Global Const $ta_left = 0
Global Const $ta_right = 2
Global Const $ta_noupdatecp = 0
Global Const $ta_rtlreading = 256
Global Const $ta_updatecp = 1
Global Const $vta_baseline = $ta_baseline
Global Const $vta_bottom = $ta_right
Global Const $vta_top = $ta_left
Global Const $vta_center = $ta_center
Global Const $vta_left = $ta_bottom
Global Const $vta_right = $ta_top
Global Const $udf_bgr = 1
Global Const $udf_rgb = 0
Global Const $mwt_identity = 1
Global Const $mwt_leftmultiply = 2
Global Const $mwt_rightmultiply = 3
Global Const $mwt_set = 4
Global Const $monitor_defaulttonearest = 2
Global Const $monitor_defaulttonull = 0
Global Const $monitor_defaulttoprimary = 1
Global Const $pt_bezierto = 4
Global Const $pt_lineto = 2
Global Const $pt_moveto = 6
Global Const $pt_closefigure = 1
#Region Global Variables and Constants
	Global Const $tagbitmap = "struct;long bmType;long bmWidth;long bmHeight;long bmWidthBytes;ushort bmPlanes;ushort bmBitsPixel;ptr bmBits;endstruct"
	Global Const $tagbitmapv4header = "struct;dword bV4Size;long bV4Width;long bV4Height;ushort bV4Planes;ushort bV4BitCount;dword bV4Compression;dword bV4SizeImage;long bV4XPelsPerMeter;long bV4YPelsPerMeter;dword bV4ClrUsed;dword bV4ClrImportant;dword bV4RedMask;dword bV4GreenMask;dword bV4BlueMask;dword bV4AlphaMask;dword bV4CSType;int bV4Endpoints[9];dword bV4GammaRed;dword bV4GammaGreen;dword bV4GammaBlue;endstruct"
	Global Const $tagbitmapv5header = "struct;dword bV5Size;long bV5Width;long bV5Height;ushort bV5Planes;ushort bV5BitCount;dword bV5Compression;dword bV5SizeImage;long bV5XPelsPerMeter;long bV5YPelsPerMeter;dword bV5ClrUsed;dword bV5ClrImportant;dword bV5RedMask;dword bV5GreenMask;dword bV5BlueMask;dword bV5AlphaMask;dword bV5CSType;int bV5Endpoints[9];dword bV5GammaRed;dword bV5GammaGreen;dword bV5GammaBlue;dword bV5Intent;dword bV5ProfileData;dword bV5ProfileSize;dword bV5Reserved;endstruct"
	Global Const $tagcoloradjustment = "ushort Size;ushort Flags;ushort IlluminantIndex;ushort RedGamma;ushort GreenGamma;ushort BlueGamma;ushort ReferenceBlack;ushort ReferenceWhite;short Contrast;short Brightness;short Colorfulness;short RedGreenTint"
	Global Const $tagdevmode_display = "wchar DeviceName[32];ushort SpecVersion;ushort DriverVersion;ushort Size;ushort DriverExtra;dword Fields;" & $tagpoint & ";dword DisplayOrientation;dword DisplayFixedOutput;short Unused1[5];wchar Unused2[32];ushort LogPixels;dword BitsPerPel;dword PelsWidth;dword PelsHeight;dword DisplayFlags;dword DisplayFrequency"
	Global Const $tagdibsection = $tagbitmap & ";" & $tagbitmapinfoheader & ";dword dsBitfields[3];ptr dshSection;dword dsOffset"
	Global Const $tagdwm_colorization_parameters = "dword Color;dword AfterGlow;uint ColorBalance;uint AfterGlowBalance;uint BlurBalance;uint GlassReflectionIntensity; uint OpaqueBlend"
	Global Const $tagenhmetaheader = "struct;dword Type;dword Size;long rcBounds[4];long rcFrame[4];dword Signature;dword Version;dword Bytes;dword Records;ushort Handles;ushort Reserved;dword Description;dword OffDescription;dword PalEntries;long Device[2];long Millimeters[2];dword PixelFormat;dword OffPixelFormat;dword OpenGL;long Micrometers[2];endstruct"
	Global Const $tagextlogpen = "dword PenStyle;dword Width;uint BrushStyle;dword Color;ulong_ptr Hatch;dword NumEntries"
	Global Const $tagfontsignature = "dword fsUsb[4];dword fsCsb[2]"
	Global Const $tagglyphmetrics = "uint BlackBoxX;uint BlackBoxY;" & $tagpoint & ";short CellIncX;short CellIncY"
	Global Const $taglogbrush = "uint Style;dword Color;ulong_ptr Hatch"
	Global Const $taglogpen = "uint Style;dword Width;dword Color"
	Global Const $tagmat2 = "short eM11[2];short eM12[2];short eM21[2];short eM22[2]"
	Global Const $tagnewtextmetric = $tagtextmetric & ";dword ntmFlags;uint ntmSizeEM;uint ntmCellHeight;uint ntmAvgWidth"
	Global Const $tagnewtextmetricex = $tagnewtextmetric & ";" & $tagfontsignature
	Global Const $tagpanose = "struct;byte bFamilyType;byte bSerifStyle;byte bWeight;byte bProportion;byte bContrast;byte bStrokeVariation;byte bArmStyle;byte bLetterform;byte bMidline;byte bXHeight;endstruct"
	Global Const $tagoutlinetextmetric = "struct;uint otmSize;" & $tagtextmetric & ";byte otmFiller;" & $tagpanose & ";byte bugFiller[3];uint otmSelection;uint otmType;int otmCharSlopeRise;int otmCharSlopeRun;int otmItalicAngle;uint otmEMSquare;int otmAscent;int otmDescent;uint otmLineGap;uint otmCapEmHeight;uint otmXHeight;long otmFontBox[4];int otmMacAscent;int otmMacDescent;uint otmMacLineGap;uint otmMinimumPPEM;long otmSubscriptSize[2];long otmSubscriptOffset[2];long otmSuperscriptSize[2];long otmSuperscriptOffse[2];uint otmStrikeoutSize;int otmStrikeoutPosition;int otmUnderscoreSize;int otmUnderscorePosition;uint_ptr otmFamilyName;uint_ptr otmFaceName;uint_ptr otmStyleName;uint_ptr otmFullName;endstruct"
	Global Const $tagpaintstruct = "hwnd hDC;int fErase;dword rPaint[4];int fRestore;int fIncUpdate;byte rgbReserved[32]"
	Global Const $tagrgndataheader = "struct;dword Size;dword Type;dword Count;dword RgnSize;" & $tagrect & ";endstruct"
	Global Const $tagxform = "float eM11;float eM12;float eM21;float eM22;float eDx;float eDy"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_abortpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "AbortPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_addfontmemresourceex($pdata, $isize)
		Local $aret = DllCall("gdi32.dll", "handle", "AddFontMemResourceEx", "ptr", $pdata, "dword", $isize, "ptr", 0, "dword*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		Return SetExtended($aret[4], $aret[0])
	EndFunc

	Func _winapi_addfontresourceex($sfont, $iflag = 0, $bnotify = False)
		Local $aret = DllCall("gdi32.dll", "int", "AddFontResourceExW", "wstr", $sfont, "dword", $iflag, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		If $bnotify Then
			Local Const $wm_fontchange = 29
			Local Const $hwnd_broadcast = 65535
			DllCall("user32.dll", "lresult", "SendMessage", "hwnd", $hwnd_broadcast, "uint", $wm_fontchange, "wparam", 0, "lparam", 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_addiconoverlay($hicon, $hoverlay)
		Local $aret, $hresult = 0, $ierror = 0
		Local $ahdev[2] = [0, 0]
		Local $tsize = _winapi_geticondimension($hicon)
		Local $hil = DllCall("comctl32.dll", "handle", "ImageList_Create", "int", DllStructGetData($tsize, 1), "int", DllStructGetData($tsize, 2), "uint", 33, "int", 2, "int", 2)
		If @error OR NOT $hil[0] Then Return SetError(@error + 10, @extended, 0)
		Do
			$ahdev[0] = _winapi_create32bithicon($hicon)
			If @error Then
				$ierror = @error + 100
				ExitLoop
			EndIf
			$aret = DllCall("comctl32.dll", "int", "ImageList_ReplaceIcon", "handle", $hil[0], "int", -1, "handle", $ahdev[0])
			If @error OR ($aret[0] = -1) Then
				$ierror = @error + 200
				ExitLoop
			EndIf
			$ahdev[1] = _winapi_create32bithicon($hoverlay)
			If @error Then
				$ierror = @error + 300
				ExitLoop
			EndIf
			$aret = DllCall("comctl32.dll", "int", "ImageList_ReplaceIcon", "handle", $hil[0], "int", -1, "handle", $ahdev[1])
			If @error OR ($aret[0] = -1) Then
				$ierror = @error + 400
				ExitLoop
			EndIf
			$aret = DllCall("comctl32.dll", "bool", "ImageList_SetOverlayImage", "handle", $hil[0], "int", 1, "int", 1)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 500
				ExitLoop
			EndIf
			$aret = DllCall("comctl32.dll", "handle", "ImageList_GetIcon", "handle", $hil[0], "int", 0, "uint", 256)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 600
				ExitLoop
			EndIf
			$hresult = $aret[0]
		Until 1
		DllCall("comctl32.dll", "bool", "ImageList_Destroy", "handle", $hil[0])
		For $i = 0 To 1
			If $ahdev[$i] Then
				_winapi_destroyicon($ahdev[$i])
			EndIf
		Next
		If NOT $hresult Then Return SetError($ierror, 0, 0)
		Return $hresult
	EndFunc

	Func _winapi_adjustbitmap($hbitmap, $iwidth, $iheight, $imode = 3, $tadjustment = 0)
		Local $tobj = DllStructCreate($tagbitmap)
		Local $aret = DllCall("gdi32.dll", "int", "GetObject", "handle", $hbitmap, "int", DllStructGetSize($tobj), "struct*", $tobj)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		If $iwidth = -1 Then
			$iwidth = DllStructGetData($tobj, "bmWidth")
		EndIf
		If $iheight = -1 Then
			$iheight = DllStructGetData($tobj, "bmHeight")
		EndIf
		$aret = DllCall("user32.dll", "handle", "GetDC", "hwnd", 0)
		Local $hdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $hdc)
		Local $hdestdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleBitmap", "handle", $hdc, "int", $iwidth, "int", $iheight)
		Local $hbmp = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hbmp)
		Local $hdestsv = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $hdc)
		Local $hsrcdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hsrcdc, "handle", $hbitmap)
		Local $hsrcsv = $aret[0]
		If _winapi_setstretchbltmode($hdestdc, $imode) Then
			Switch $imode
				Case 4
					If IsDllStruct($tadjustment) Then
						If NOT _winapi_setcoloradjustment($hdestdc, $tadjustment) Then
						EndIf
					EndIf
				Case Else
			EndSwitch
		EndIf
		$aret = _winapi_stretchblt($hdestdc, 0, 0, $iwidth, $iheight, $hsrcdc, 0, 0, DllStructGetData($tobj, "bmWidth"), DllStructGetData($tobj, "bmHeight"), 13369376)
		DllCall("user32.dll", "int", "ReleaseDC", "hwnd", 0, "handle", $hdc)
		DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hdestsv)
		DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hsrcdc, "handle", $hsrcsv)
		DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hdestdc)
		DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hsrcdc)
		If NOT $aret Then Return SetError(10, 0, 0)
		Return $hbmp
	EndFunc

	Func _winapi_alphablend($hdestdc, $ixdest, $iydest, $iwidthdest, $iheightdest, $hsrcdc, $ixsrc, $iysrc, $iwidthsrc, $iheightsrc, $ialpha, $balpha = False)
		Local $iblend = BitOR(BitShift(NOT ($balpha = False), -24), BitShift(BitAND($ialpha, 255), -16))
		Local $aret = DllCall("gdi32.dll", "bool", "GdiAlphaBlend", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidthdest, "int", $iheightdest, "handle", $hsrcdc, "int", $ixsrc, "int", $iysrc, "int", $iwidthsrc, "int", $iheightsrc, "dword", $iblend)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_anglearc($hdc, $ix, $iy, $iradius, $nstartangle, $nsweepangle)
		Local $aret = DllCall("gdi32.dll", "bool", "AngleArc", "handle", $hdc, "int", $ix, "int", $iy, "dword", $iradius, "float", $nstartangle, "float", $nsweepangle)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_arc($hdc, $trect, $ixstartarc, $iystartarc, $ixendarc, $iyendarc)
		Local $aret = DllCall("gdi32.dll", "bool", "Arc", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4), "int", $ixstartarc, "int", $iystartarc, "int", $ixendarc, "int", $iyendarc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_arcto($hdc, $trect, $ixradial1, $iyradial1, $ixradial2, $iyradial2)
		Local $aret = DllCall("gdi32.dll", "bool", "ArcTo", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4), "int", $ixradial1, "int", $iyradial1, "int", $ixradial2, "int", $iyradial2)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_beginpaint($hwnd, ByRef $tpaintstruct)
		$tpaintstruct = DllStructCreate($tagpaintstruct)
		Local $aret = DllCall("user32.dll", "handle", "BeginPaint", "hwnd", $hwnd, "struct*", $tpaintstruct)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_beginpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "BeginPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_closeenhmetafile($hdc)
		Local $aret = DllCall("gdi32.dll", "handle", "CloseEnhMetaFile", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_closefigure($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "CloseFigure", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_coloradjustluma($irgb, $ipercent, $bscale = True)
		If $irgb = -1 Then Return SetError(10, 0, -1)
		If $bscale Then
			$ipercent = Floor($ipercent * 10)
		EndIf
		Local $aret = DllCall("shlwapi.dll", "dword", "ColorAdjustLuma", "dword", __rgb($irgb), "int", $ipercent, "bool", $bscale)
		If @error Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_colorhlstorgb($ihue, $iluminance, $isaturation)
		If NOT $isaturation Then $ihue = 160
		Local $aret = DllCall("shlwapi.dll", "dword", "ColorHLSToRGB", "word", $ihue, "word", $iluminance, "word", $isaturation)
		If @error Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_colorrgbtohls($irgb, ByRef $ihue, ByRef $iluminance, ByRef $isaturation)
		Local $aret = DllCall("shlwapi.dll", "none", "ColorRGBToHLS", "dword", __rgb($irgb), "word*", 0, "word*", 0, "word*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		$ihue = $aret[2]
		$iluminance = $aret[3]
		$isaturation = $aret[4]
		Return 1
	EndFunc

	Func _winapi_combinetransform($txform1, $txform2)
		Local $txform = DllStructCreate($tagxform)
		Local $aret = DllCall("gdi32.dll", "bool", "CombineTransform", "struct*", $txform, "struct*", $txform1, "struct*", $txform2)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $txform
	EndFunc

	Func _winapi_compressbitmapbits($hbitmap, ByRef $pbuffer, $icompression = 0, $iquality = 100)
		If NOT __dll("gdiplus.dll") Then Return SetError(103, 0, 0)
		Local $asize[2], $icount, $iformat, $ilength, $smime, $aret, $hdc, $hsv, $hmem, $tbits, $tdata, $pdata, $ierror = 1
		Local $hsource = 0, $himage = 0, $htoken = 0, $pstream = 0, $tparam = 0
		Local $tdib = DllStructCreate($tagdibsection)
		Do
			Switch $icompression
				Case 0
					$smime = "image/png"
				Case 1
					$smime = "image/jpeg"
				Case Else
					$ierror = 10
					ExitLoop
			EndSwitch
			While $hbitmap
				If NOT _winapi_getobject($hbitmap, DllStructGetSize($tdib), $tdib) Then
					$ierror = 11
					ExitLoop 2
				EndIf
				If (DllStructGetData($tdib, "bmBitsPixel") = 32) AND (NOT DllStructGetData($tdib, "biCompression")) Then
					$ierror = 12
					ExitLoop
				EndIf
				If $hsource Then
					$ierror = 13
					ExitLoop 2
				EndIf
				$hsource = _winapi_createdib(DllStructGetData($tdib, "bmWidth"), DllStructGetData($tdib, "bmHeight"))
				If NOT $hsource Then
					$ierror = @error + 100
					ExitLoop 2
				EndIf
				$hdc = _winapi_createcompatibledc(0)
				$hsv = _winapi_selectobject($hdc, $hsource)
				If _winapi_drawbitmap($hdc, 0, 0, $hbitmap) Then
					$hbitmap = $hsource
				Else
					$ierror = @error + 200
					$hbitmap = 0
				EndIf
				_winapi_selectobject($hdc, $hsv)
				_winapi_deletedc($hdc)
			WEnd
			If NOT $hbitmap Then
				ExitLoop
			EndIf
			For $i = 0 To 1
				$asize[$i] = DllStructGetData($tdib, $i + 2)
			Next
			$tbits = DllStructCreate("byte[" & ($asize[0] * $asize[1] * 4) & "]")
			If NOT _winapi_getbitmapbits($hbitmap, DllStructGetSize($tbits), $tbits) Then
				$ierror = @error + 300
				ExitLoop
			EndIf
			$tdata = DllStructCreate($taggdipstartupinput)
			DllStructSetData($tdata, "Version", 1)
			$aret = DllCall("gdiplus.dll", "int", "GdiplusStartup", "ulong_ptr*", 0, "struct*", $tdata, "ptr", 0)
			If @error OR $aret[0] Then
				$ierror = @error + 400
				ExitLoop
			EndIf
			If _winapi_isalphabitmap($hbitmap) Then
				$iformat = 2498570
			Else
				$iformat = 139273
			EndIf
			$htoken = $aret[1]
			$aret = DllCall("gdiplus.dll", "int", "GdipCreateBitmapFromScan0", "int", $asize[0], "int", $asize[1], "uint", $asize[0] * 4, "int", $iformat, "struct*", $tbits, "ptr*", 0)
			If @error OR $aret[0] Then
				$ierror = @error + 500
				ExitLoop
			EndIf
			$himage = $aret[6]
			$aret = DllCall("gdiplus.dll", "int", "GdipGetImageEncodersSize", "uint*", 0, "uint*", 0)
			If @error OR $aret[0] Then
				$ierror = @error + 600
				ExitLoop
			EndIf
			$icount = $aret[1]
			$tdata = DllStructCreate("byte[" & $aret[2] & "]")
			If @error Then
				$ierror = @error + 700
				ExitLoop
			EndIf
			$pdata = DllStructGetPtr($tdata)
			$aret = DllCall("gdiplus.dll", "int", "GdipGetImageEncoders", "uint", $icount, "uint", $aret[2], "struct*", $tdata)
			If @error OR $aret[0] Then
				$ierror = @error + 800
				ExitLoop
			EndIf
			Local $tcodec, $pencoder = 0
			For $i = 1 To $icount
				$tcodec = DllStructCreate($taggdipimagecodecinfo, $pdata)
				If NOT StringInStr(_winapi_widechartomultibyte(DllStructGetData($tcodec, "MimeType")), $smime) Then
					$pdata += DllStructGetSize($taggdipimagecodecinfo)
				Else
					$pencoder = $pdata
					$ierror = 0
					ExitLoop
				EndIf
			Next
			If NOT $pencoder Then
				$ierror = 15
				ExitLoop
			EndIf
			Switch $icompression
				Case 0
				Case 1
					Local Const $tagencoderparameter = "byte[16] GUID;ulong NumberOfValues;dword Type;ptr pValue"
					$tparam = DllStructCreate("dword Count;" & $tagencoderparameter & ";ulong Quality")
					DllStructSetData($tparam, "Count", 1)
					DllStructSetData($tparam, "NumberOfValues", 1)
					DllStructSetData($tparam, "Type", 4)
					DllStructSetData($tparam, "pValue", DllStructGetPtr($tparam, "Quality"))
					DllStructSetData($tparam, "Quality", $iquality)
					$aret = DllCall("ole32.dll", "long", "CLSIDFromString", "wstr", "{1D5BE4B5-FA4A-452D-9CDD-5DB35105E7EB}", "ptr", DllStructGetPtr($tparam, 2))
					If @error OR $aret[0] Then
						$tparam = 0
					EndIf
			EndSwitch
			$pstream = _winapi_createstreamonhglobal()
			$aret = DllCall("gdiplus.dll", "int", "GdipSaveImageToStream", "handle", $himage, "ptr", $pstream, "ptr", $pencoder, "struct*", $tparam)
			If @error OR $aret[0] Then
				$ierror = @error + 900
				ExitLoop
			EndIf
			$hmem = _winapi_gethglobalfromstream($pstream)
			$aret = DllCall("kernel32.dll", "ulong_ptr", "GlobalSize", "handle", $hmem)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 1000
				ExitLoop
			EndIf
			$ilength = $aret[0]
			$aret = DllCall("kernel32.dll", "ptr", "GlobalLock", "handle", $hmem)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 1100
				ExitLoop
			EndIf
			$pbuffer = __heaprealloc($pbuffer, $ilength, 1)
			If NOT @error Then
				_winapi_movememory($pbuffer, $aret[0], $ilength)
			Else
				$ierror = @error + 1300
			EndIf
		Until 1
		If $pstream Then
			_winapi_releasestream($pstream)
		EndIf
		If $himage Then
			DllCall("gdiplus.dll", "int", "GdipDisposeImage", "handle", $himage)
		EndIf
		If $htoken Then
			DllCall("gdiplus.dll", "none", "GdiplusShutdown", "ulong_ptr", $htoken)
		EndIf
		If $hsource Then
			_winapi_deleteobject($hsource)
		EndIf
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $ilength
	EndFunc

	Func _winapi_copybitmap($hbitmap)
		$hbitmap = _winapi_copyimage($hbitmap, 0, 0, 0, 8192)
		Return SetError(@error, @extended, $hbitmap)
	EndFunc

	Func _winapi_copyenhmetafile($hemf, $sfilepath = "")
		Local $stypeoffile = "wstr"
		If NOT StringStripWS($sfilepath, $str_stripleading + $str_striptrailing) Then
			$stypeoffile = "ptr"
			$sfilepath = 0
		EndIf
		Local $aret = DllCall("gdi32.dll", "handle", "CopyEnhMetaFileW", "handle", $hemf, $stypeoffile, $sfilepath)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_copyimage($himage, $itype = 0, $ixdesiredpixels = 0, $iydesiredpixels = 0, $iflags = 0)
		Local $aret = DllCall("user32.dll", "handle", "CopyImage", "handle", $himage, "uint", $itype, "int", $ixdesiredpixels, "int", $iydesiredpixels, "uint", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_copyrect($trect)
		Local $tdata = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "CopyRect", "struct*", $tdata, "struct*", $trect)
		If @error OR NOT $aret[0] Then SetError(@error + 10, @extended, 0)
		Return $tdata
	EndFunc

	Func _winapi_create32bithbitmap($hicon, $bdib = False, $bdelete = False)
		Local $hbitmap = 0
		Local $adib[2] = [0, 0]
		Local $htemp = _winapi_create32bithicon($hicon)
		If @error Then Return SetError(@error, @extended, 0)
		Local $ierror = 0
		Do
			Local $ticoninfo = DllStructCreate($tagiconinfo)
			Local $aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $htemp, "struct*", $ticoninfo)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 10
				ExitLoop
			EndIf
			For $i = 0 To 1
				$adib[$i] = DllStructGetData($ticoninfo, $i + 4)
			Next
			Local $tbitmap = DllStructCreate($tagbitmap)
			If NOT _winapi_getobject($adib[0], DllStructGetSize($tbitmap), $tbitmap) Then
				$ierror = @error + 20
				ExitLoop
			EndIf
			If $bdib Then
				$hbitmap = _winapi_createdib(DllStructGetData($tbitmap, "bmWidth"), DllStructGetData($tbitmap, "bmHeight"))
				Local $hdc = _winapi_createcompatibledc(0)
				Local $hsv = _winapi_selectobject($hdc, $hbitmap)
				_winapi_drawiconex($hdc, 0, 0, $htemp)
				_winapi_selectobject($hdc, $hsv)
				_winapi_deletedc($hdc)
			Else
				$hbitmap = $adib[1]
				$adib[1] = 0
			EndIf
		Until 1
		For $i = 0 To 1
			If $adib[$i] Then
				_winapi_deleteobject($adib[$i])
			EndIf
		Next
		_winapi_destroyicon($htemp)
		If $ierror Then Return SetError($ierror, 0, 0)
		If NOT $hbitmap Then Return SetError(12, 0, 0)
		If $bdelete Then
			_winapi_destroyicon($hicon)
		EndIf
		Return $hbitmap
	EndFunc

	Func _winapi_create32bithicon($hicon, $bdelete = False)
		Local $ahbitmap[2], $hresult = 0
		Local $adib[2][2] = [[0, 0], [0, 0]]
		Local $ticoninfo = DllStructCreate($tagiconinfo)
		Local $aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $hicon, "struct*", $ticoninfo)
		If @error Then Return SetError(@error, @extended, 0)
		If NOT $aret[0] Then Return SetError(10, 0, 0)
		For $i = 0 To 1
			$ahbitmap[$i] = DllStructGetData($ticoninfo, $i + 4)
		Next
		If _winapi_isalphabitmap($ahbitmap[1]) Then
			$adib[0][0] = _winapi_createandbitmap($ahbitmap[1])
			If NOT @error Then
				$hresult = _winapi_createiconindirect($ahbitmap[1], $adib[0][0])
			EndIf
		Else
			Local $tsize = _winapi_getbitmapdimension($ahbitmap[1])
			Local $asize[2]
			For $i = 0 To 1
				$asize[$i] = DllStructGetData($tsize, $i + 1)
			Next
			Local $hsrcdc = _winapi_createcompatibledc(0)
			Local $hdstdc = _winapi_createcompatibledc(0)
			Local $hsrcsv, $hdstsv
			For $i = 0 To 1
				$adib[$i][0] = _winapi_createdib($asize[0], $asize[1])
				$adib[$i][1] = $__g_vext
				$hsrcsv = _winapi_selectobject($hsrcdc, $ahbitmap[$i])
				$hdstsv = _winapi_selectobject($hdstdc, $adib[$i][0])
				_winapi_bitblt($hdstdc, 0, 0, $asize[0], $asize[1], $hsrcdc, 0, 0, 12583114)
				_winapi_selectobject($hsrcdc, $hsrcsv)
				_winapi_selectobject($hdstdc, $hdstsv)
			Next
			_winapi_deletedc($hsrcdc)
			_winapi_deletedc($hdstdc)
			$aret = DllCall("user32.dll", "lresult", "CallWindowProc", "ptr", __xorproc(), "ptr", 0, "uint", $asize[0] * $asize[1] * 4, "wparam", $adib[0][1], "lparam", $adib[1][1])
			If NOT @error AND $aret[0] Then
				$hresult = _winapi_createiconindirect($adib[1][0], $ahbitmap[0])
			EndIf
		EndIf
		For $i = 0 To 1
			_winapi_deleteobject($ahbitmap[$i])
			If $adib[$i][0] Then
				_winapi_deleteobject($adib[$i][0])
			EndIf
		Next
		If NOT $hresult Then Return SetError(11, 0, 0)
		If $bdelete Then
			_winapi_destroyicon($hicon)
		EndIf
		Return $hresult
	EndFunc

	Func _winapi_createandbitmap($hbitmap)
		Local $ierror = 0, $hdib = 0
		$hbitmap = _winapi_copybitmap($hbitmap)
		If NOT $hbitmap Then Return SetError(@error + 20, @extended, 0)
		Do
			Local $atdib[2]
			$atdib[0] = DllStructCreate($tagdibsection)
			If (NOT _winapi_getobject($hbitmap, DllStructGetSize($atdib[0]), $atdib[0])) OR (DllStructGetData($atdib[0], "bmBitsPixel") <> 32) OR (DllStructGetData($atdib[0], "biCompression")) Then
				$ierror = 10
				ExitLoop
			EndIf
			$atdib[1] = DllStructCreate($tagbitmap)
			$hdib = _winapi_createdib(DllStructGetData($atdib[0], "bmWidth"), DllStructGetData($atdib[0], "bmHeight"), 1)
			If NOT _winapi_getobject($hdib, DllStructGetSize($atdib[1]), $atdib[1]) Then
				$ierror = 11
				ExitLoop
			EndIf
			Local $aret = DllCall("user32.dll", "lresult", "CallWindowProc", "ptr", __andproc(), "ptr", 0, "uint", 0, "wparam", DllStructGetPtr($atdib[0]), "lparam", DllStructGetPtr($atdib[1]))
			If @error Then
				$ierror = @error
				ExitLoop
			EndIf
			If NOT $aret[0] Then
				$ierror = 12
				ExitLoop
			EndIf
			$ierror = 0
		Until 1
		_winapi_deleteobject($hbitmap)
		If $ierror Then
			If $hdib Then
				_winapi_deleteobject($hdib)
			EndIf
			$hdib = 0
		EndIf
		Return SetError($ierror, 0, $hdib)
	EndFunc

	Func _winapi_createbitmapindirect(ByRef $tbitmap)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateBitmapIndirect", "struct*", $tbitmap)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createbrushindirect($istyle, $irgb, $ihatch = 0)
		Local $tlogbrush = DllStructCreate($taglogbrush)
		DllStructSetData($tlogbrush, 1, $istyle)
		DllStructSetData($tlogbrush, 2, __rgb($irgb))
		DllStructSetData($tlogbrush, 3, $ihatch)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateBrushIndirect", "struct*", $tlogbrush)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createcoloradjustment($iflags = 0, $iilluminant = 0, $igammar = 10000, $igammag = 10000, $igammab = 10000, $iblack = 0, $iwhite = 10000, $icontrast = 0, $ibrightness = 0, $icolorfulness = 0, $itint = 0)
		Local $tca = DllStructCreate($tagcoloradjustment)
		DllStructSetData($tca, 1, DllStructGetSize($tca))
		DllStructSetData($tca, 2, $iflags)
		DllStructSetData($tca, 3, $iilluminant)
		DllStructSetData($tca, 4, $igammar)
		DllStructSetData($tca, 5, $igammag)
		DllStructSetData($tca, 6, $igammab)
		DllStructSetData($tca, 7, $iblack)
		DllStructSetData($tca, 8, $iwhite)
		DllStructSetData($tca, 9, $icontrast)
		DllStructSetData($tca, 10, $ibrightness)
		DllStructSetData($tca, 11, $icolorfulness)
		DllStructSetData($tca, 12, $itint)
		Return $tca
	EndFunc

	Func _winapi_createcompatiblebitmapex($hdc, $iwidth, $iheight, $irgb)
		Local $hbrush = _winapi_createbrushindirect(0, $irgb)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $hdc)
		Local $hdestdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleBitmap", "handle", $hdc, "int", $iwidth, "int", $iheight)
		Local $hbmp = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hbmp)
		Local $hdestsv = $aret[0]
		Local $trect = _winapi_createrectex(0, 0, $iwidth, $iheight)
		Local $ierror = 0
		$aret = DllCall("user32.dll", "int", "FillRect", "handle", $hdestdc, "struct*", $trect, "handle", $hbrush)
		If @error OR NOT $aret[0] Then
			$ierror = @error + 10
			_winapi_deleteobject($hbmp)
		EndIf
		_winapi_deleteobject($hbrush)
		DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hdestsv)
		DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hdestdc)
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $hbmp
	EndFunc

	Func _winapi_createdib($iwidth, $iheight, $ibitsperpel = 32, $tcolortable = 0, $icolorcount = 0)
		Local $argbq[2], $icolors, $tagrgbq
		Switch $ibitsperpel
			Case 1
				$icolors = 2
			Case 4
				$icolors = 16
			Case 8
				$icolors = 256
			Case Else
				$icolors = 0
		EndSwitch
		If $icolors Then
			If NOT IsDllStruct($tcolortable) Then
				Switch $ibitsperpel
					Case 1
						$argbq[0] = 0
						$argbq[1] = 16777215
						$tcolortable = _winapi_createdibcolortable($argbq)
					Case Else
				EndSwitch
			Else
				If $icolors > $icolorcount Then
					$icolors = $icolorcount
				EndIf
				If (NOT $icolors) OR ((4 * $icolors) > DllStructGetSize($tcolortable)) Then
					Return SetError(20, 0, 0)
				EndIf
			EndIf
			$tagrgbq = ";dword aRGBQuad[" & $icolors & "]"
		Else
			$tagrgbq = ""
		EndIf
		Local $tbitmapinfo = DllStructCreate($tagbitmapinfoheader & $tagrgbq)
		DllStructSetData($tbitmapinfo, "biSize", 40)
		DllStructSetData($tbitmapinfo, "biWidth", $iwidth)
		DllStructSetData($tbitmapinfo, "biHeight", $iheight)
		DllStructSetData($tbitmapinfo, "biPlanes", 1)
		DllStructSetData($tbitmapinfo, "biBitCount", $ibitsperpel)
		DllStructSetData($tbitmapinfo, "biCompression", 0)
		DllStructSetData($tbitmapinfo, "biSizeImage", 0)
		DllStructSetData($tbitmapinfo, "biXPelsPerMeter", 0)
		DllStructSetData($tbitmapinfo, "biYPelsPerMeter", 0)
		DllStructSetData($tbitmapinfo, "biClrUsed", $icolors)
		DllStructSetData($tbitmapinfo, "biClrImportant", 0)
		If $icolors Then
			If IsDllStruct($tcolortable) Then
				_winapi_movememory(DllStructGetPtr($tbitmapinfo, "aRGBQuad"), $tcolortable, 4 * $icolors)
			Else
				_winapi_zeromemory(DllStructGetPtr($tbitmapinfo, "aRGBQuad"), 4 * $icolors)
			EndIf
		EndIf
		Local $hbitmap = _winapi_createdibsection(0, $tbitmapinfo, 0, $__g_vext)
		If NOT $hbitmap Then Return SetError(@error, @extended, 0)
		Return $hbitmap
	EndFunc

	Func _winapi_createdibcolortable(Const ByRef $acolortable, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($acolortable, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
		Local $tcolortable = DllStructCreate("dword[" & ($iend - $istart + 1) & "]")
		Local $icount = 1
		For $i = $istart To $iend
			DllStructSetData($tcolortable, 1, _winapi_switchcolor(__rgb($acolortable[$i])), $icount)
			$icount += 1
		Next
		Return $tcolortable
	EndFunc

	Func _winapi_createdibitmap($hdc, ByRef $tbitmapinfo, $iusage, $pbits = 0)
		Local $iinit = 0
		If $pbits Then
			$iinit = 4
		EndIf
		Local $aret = DllCall("gdi32.dll", "handle", "CreateDIBitmap", "handle", $hdc, "struct*", $tbitmapinfo, "dword", $iinit, "struct*", $pbits, "struct*", $tbitmapinfo, "uint", $iusage)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createdibsection($hdc, $tbitmapinfo, $iusage, ByRef $pbits, $hsection = 0, $ioffset = 0)
		$pbits = 0
		Local $aret = DllCall("gdi32.dll", "handle", "CreateDIBSection", "handle", $hdc, "struct*", $tbitmapinfo, "uint", $iusage, "ptr*", 0, "handle", $hsection, "dword", $ioffset)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		$pbits = $aret[4]
		Return $aret[0]
	EndFunc

	Func _winapi_createellipticrgn($trect)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateEllipticRgnIndirect", "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_createemptyicon($iwidth, $iheight, $ibitsperpel = 32)
		Local $hxor = _winapi_createdib($iwidth, $iheight, $ibitsperpel)
		Local $hand = _winapi_createdib($iwidth, $iheight, 1)
		Local $hdc = _winapi_createcompatibledc(0)
		Local $hsv = _winapi_selectobject($hdc, $hand)
		Local $hbrush = _winapi_createsolidbrush(16777215)
		Local $trect = _winapi_createrect(0, 0, $iwidth, $iheight)
		_winapi_fillrect($hdc, $trect, $hbrush)
		_winapi_deleteobject($hbrush)
		_winapi_selectobject($hdc, $hsv)
		_winapi_deletedc($hdc)
		Local $hicon = _winapi_createiconindirect($hxor, $hand)
		Local $ierror = @error
		If $hxor Then
			_winapi_deleteobject($hxor)
		EndIf
		If $hand Then
			_winapi_deleteobject($hand)
		EndIf
		If NOT $hicon Then Return SetError($ierror + 10, 0, 0)
		Return $hicon
	EndFunc

	Func _winapi_createenhmetafile($hdc = 0, $trect = 0, $bpixels = False, $sfilepath = "", $sdescription = "")
		Local $stypeoffile = "wstr"
		If NOT StringStripWS($sfilepath, $str_stripleading + $str_striptrailing) Then
			$stypeoffile = "ptr"
			$sfilepath = 0
		EndIf
		Local $tdata = 0, $adata = StringSplit($sdescription, "|", $str_nocount)
		If UBound($adata) < 2 Then
			ReDim $adata[2]
			$adata[1] = ""
		EndIf
		For $i = 0 To 1
			$adata[$i] = StringStripWS($adata[$i], $str_stripleading + $str_striptrailing)
		Next
		If ($adata[0]) OR ($adata[1]) Then
			$tdata = _winapi_arraytostruct($adata)
		EndIf
		Local $ixp, $iyp, $ixm, $iym, $href = 0
		If $bpixels AND (IsDllStruct($trect)) Then
			If NOT $hdc Then
				$href = _winapi_getdc(0)
			EndIf
			$ixp = _winapi_getdevicecaps($href, 8)
			$iyp = _winapi_getdevicecaps($href, 10)
			$ixm = _winapi_getdevicecaps($href, 4)
			$iym = _winapi_getdevicecaps($href, 6)
			If $href Then
				_winapi_releasedc(0, $href)
			EndIf
			For $i = 1 To 3 Step 2
				DllStructSetData($trect, $i, Round(DllStructGetData($trect, $i) * $ixm / $ixp * 100))
			Next
			For $i = 2 To 4 Step 2
				DllStructSetData($trect, $i, Round(DllStructGetData($trect, $i) * $iym / $iyp * 100))
			Next
		EndIf
		Local $aret = DllCall("gdi32.dll", "handle", "CreateEnhMetaFileW", "handle", $hdc, $stypeoffile, $sfilepath, "struct*", $trect, "struct*", $tdata)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createfontex($iheight, $iwidth = 0, $iescapement = 0, $iorientation = 0, $iweight = 400, $bitalic = False, $bunderline = False, $bstrikeout = False, $icharset = 1, $ioutprecision = 0, $iclipprecision = 0, $iquality = 0, $ipitchandfamily = 0, $sfacename = "", $istyle = 0)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateFontW", "int", $iheight, "int", $iwidth, "int", $iescapement, "int", $iorientation, "int", $iweight, "dword", $bitalic, "dword", $bunderline, "dword", $bstrikeout, "dword", $icharset, "dword", $ioutprecision, "dword", $iclipprecision, "dword", $iquality, "dword", $ipitchandfamily, "wstr", _winapi_getfontname($sfacename, $istyle, $icharset))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createiconindirect($hbitmap, $hmask, $ixhotspot = 0, $iyhotspot = 0, $bicon = True)
		Local $ticoninfo = DllStructCreate($tagiconinfo)
		DllStructSetData($ticoninfo, 1, $bicon)
		DllStructSetData($ticoninfo, 2, $ixhotspot)
		DllStructSetData($ticoninfo, 3, $iyhotspot)
		DllStructSetData($ticoninfo, 4, $hmask)
		DllStructSetData($ticoninfo, 5, $hbitmap)
		Local $aret = DllCall("user32.dll", "handle", "CreateIconIndirect", "struct*", $ticoninfo)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createnullrgn()
		Local $aret = DllCall("gdi32.dll", "handle", "CreateRectRgn", "int", 0, "int", 0, "int", 0, "int", 0)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createpolygonrgn(Const ByRef $apoint, $istart = 0, $iend = -1, $imode = 1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2, 2) Then Return SetError(@error + 10, @extended, 0)
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "int[2];"
		Next
		Local $tdata = DllStructCreate($tagstruct)
		Local $icount = 1
		For $i = $istart To $iend
			For $j = 0 To 1
				DllStructSetData($tdata, $icount, $apoint[$i][$j], $j + 1)
			Next
			$icount += 1
		Next
		Local $aret = DllCall("gdi32.dll", "handle", "CreatePolygonRgn", "struct*", $tdata, "int", $icount - 1, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createrectrgnindirect($trect)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateRectRgnIndirect", "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createtransform($nm11 = 1, $nm12 = 0, $nm21 = 0, $nm22 = 1, $ndx = 0, $ndy = 0)
		Local $txform = DllStructCreate($tagxform)
		DllStructSetData($txform, 1, $nm11)
		DllStructSetData($txform, 2, $nm12)
		DllStructSetData($txform, 3, $nm21)
		DllStructSetData($txform, 4, $nm22)
		DllStructSetData($txform, 5, $ndx)
		DllStructSetData($txform, 6, $ndy)
		Return $txform
	EndFunc

	Func _winapi_deleteenhmetafile($hemf)
		Local $aret = DllCall("gdi32.dll", "bool", "DeleteEnhMetaFile", "handle", $hemf)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_dptolp($hdc, ByRef $tpoint, $icount = 1)
		Local $aret = DllCall("gdi32.dll", "bool", "DPtoLP", "handle", $hdc, "struct*", $tpoint, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_drawanimatedrects($hwnd, $trectfrom, $trectto)
		Local $aret = DllCall("user32.dll", "bool", "DrawAnimatedRects", "hwnd", $hwnd, "int", 3, "struct*", $trectfrom, "struct*", $trectto)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_drawbitmap($hdc, $ix, $iy, $hbitmap, $irop = 13369376)
		Local $tobj = DllStructCreate($tagbitmap)
		Local $aret = DllCall("gdi32.dll", "int", "GetObject", "handle", $hbitmap, "int", DllStructGetSize($tobj), "struct*", $tobj)
		If @error OR NOT $aret[0] Then Return SetError(@error + 20, @extended, 0)
		$aret = DllCall("user32.dll", "handle", "GetDC", "hwnd", 0)
		Local $_hdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $_hdc)
		Local $hsrcdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hsrcdc, "handle", $hbitmap)
		Local $hsrcsv = $aret[0]
		Local $ierror = 0
		$aret = DllCall("gdi32.dll", "int", "BitBlt", "hwnd", $hdc, "int", $ix, "int", $iy, "int", DllStructGetData($tobj, "bmWidth"), "int", DllStructGetData($tobj, "bmHeight"), "hwnd", $hsrcdc, "int", 0, "int", 0, "int", $irop)
		If @error OR NOT $aret[0] Then
			$ierror = @error + 1
		EndIf
		DllCall("user32.dll", "int", "ReleaseDC", "hwnd", 0, "handle", $_hdc)
		DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hsrcdc, "handle", $hsrcsv)
		DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hsrcdc)
		If $ierror Then Return SetError(10, 0, 0)
		Return 1
	EndFunc

	Func _winapi_drawfocusrect($hdc, $trect)
		Local $aret = DllCall("user32.dll", "bool", "DrawFocusRect", "handle", $hdc, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_drawshadowtext($hdc, $stext, $irgbtext, $irgbshadow, $ixoffset = 0, $iyoffset = 0, $trect = 0, $iflags = 0)
		Local $aret
		If NOT IsDllStruct($trect) Then
			$trect = DllStructCreate($tagrect)
			$aret = DllCall("user32.dll", "bool", "GetClientRect", "hwnd", _winapi_windowfromdc($hdc), "struct*", $trect)
			If @error Then Return SetError(@error + 10, @extended, 0)
			If NOT $aret[0] Then Return SetError(10, 0, 0)
		EndIf
		$aret = DllCall("comctl32.dll", "int", "DrawShadowText", "handle", $hdc, "wstr", $stext, "uint", -1, "struct*", $trect, "dword", $iflags, "int", __rgb($irgbtext), "int", __rgb($irgbshadow), "int", $ixoffset, "int", $iyoffset)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_dwmdefwindowproc($hwnd, $imsg, $wparam, $lparam)
		Local $aret = DllCall("dwmapi.dll", "bool", "DwmDefWindowProc", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam, "lresult*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $aret[5]
	EndFunc

	Func _winapi_dwmenableblurbehindwindow($hwnd, $benable = True, $btransition = False, $hrgn = 0)
		Local $tblurbehind = DllStructCreate("dword;bool;handle;bool")
		Local $iflags = 0
		If $hrgn Then
			$iflags += 2
			DllStructSetData($tblurbehind, 3, $hrgn)
		EndIf
		DllStructSetData($tblurbehind, 1, BitOR($iflags, 5))
		DllStructSetData($tblurbehind, 2, $benable)
		DllStructSetData($tblurbehind, 4, $btransition)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmEnableBlurBehindWindow", "hwnd", $hwnd, "struct*", $tblurbehind)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmenablecomposition($benable)
		If $benable Then $benable = 1
		Local $aret = DllCall("dwmapi.dll", "long", "DwmEnableComposition", "uint", $benable)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmextendframeintoclientarea($hwnd, $tmargins = 0)
		If NOT IsDllStruct($tmargins) Then
			$tmargins = _winapi_createmargins(-1, -1, -1, -1)
		EndIf
		Local $aret = DllCall("dwmapi.dll", "long", "DwmExtendFrameIntoClientArea", "hwnd", $hwnd, "struct*", $tmargins)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmgetcolorizationcolor()
		Local $aret = DllCall("dwmapi.dll", "long", "DwmGetColorizationColor", "dword*", 0, "bool*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return SetExtended($aret[2], $aret[1])
	EndFunc

	Func _winapi_dwmgetcolorizationparameters()
		Local $tdwmcp = DllStructCreate($tagdwm_colorization_parameters)
		Local $aret = DllCall("dwmapi.dll", "uint", 127, "struct*", $tdwmcp)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tdwmcp
	EndFunc

	Func _winapi_dwmgetwindowattribute($hwnd, $iattribute)
		Local $tagstruct
		Switch $iattribute
			Case 5, 9
				$tagstruct = $tagrect
			Case 1
				$tagstruct = "uint"
			Case Else
				Return SetError(11, 0, 0)
		EndSwitch
		Local $tdata = DllStructCreate($tagstruct)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmGetWindowAttribute", "hwnd", $hwnd, "dword", $iattribute, "struct*", $tdata, "dword", DllStructGetSize($tdata))
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Switch $iattribute
			Case 1
				Return DllStructGetData($tdata, 1)
			Case Else
				Return $tdata
		EndSwitch
	EndFunc

	Func _winapi_dwminvalidateiconicbitmaps($hwnd)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmInvalidateIconicBitmaps", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmiscompositionenabled()
		Local $aret = DllCall("dwmapi.dll", "long", "DwmIsCompositionEnabled", "bool*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[1]
	EndFunc

	Func _winapi_dwmquerythumbnailsourcesize($hthumbnail)
		Local $tsize = DllStructCreate($tagsize)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmQueryThumbnailSourceSize", "handle", $hthumbnail, "struct*", $tsize)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tsize
	EndFunc

	Func _winapi_dwmregisterthumbnail($hdestination, $hsource)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmRegisterThumbnail", "hwnd", $hdestination, "hwnd", $hsource, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[3]
	EndFunc

	Func _winapi_dwmsetcolorizationparameters($tdwmcp)
		Local $aret = DllCall("dwmapi.dll", "uint", 131, "struct*", $tdwmcp, "uint", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmseticoniclivepreviewbitmap($hwnd, $hbitmap, $bframe = False, $tclient = 0)
		Local $iflags
		If $bframe Then
			$iflags = 1
		Else
			$iflags = 0
		EndIf
		Local $aret = DllCall("dwmapi.dll", "uint", "DwmSetIconicLivePreviewBitmap", "hwnd", $hwnd, "handle", $hbitmap, "struct*", $tclient, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmseticonicthumbnail($hwnd, $hbitmap, $bframe = False)
		Local $iflags
		If $bframe Then
			$iflags = 1
		Else
			$iflags = 0
		EndIf
		Local $aret = DllCall("dwmapi.dll", "long", "DwmSetIconicThumbnail", "hwnd", $hwnd, "handle", $hbitmap, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmsetwindowattribute($hwnd, $iattribute, $idata)
		Switch $iattribute
			Case 2, 3, 4, 6, 7, 8, 10, 11, 12
			Case Else
				Return SetError(1, 0, 0)
		EndSwitch
		Local $aret = DllCall("dwmapi.dll", "long", "DwmSetWindowAttribute", "hwnd", $hwnd, "dword", $iattribute, "dword*", $idata, "dword", 4)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmunregisterthumbnail($hthumbnail)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmUnregisterThumbnail", "handle", $hthumbnail)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmupdatethumbnailproperties($hthumbnail, $bvisible = True, $bclientareaonly = False, $iopacity = 255, $trectdest = 0, $trectsrc = 0)
		Local Const $tagdwm_thumbnail_properties = "struct;dword dwFlags;int rcDestination[4];int rcSource[4];byte opacity;bool opacity;bool fSourceClientAreaOnly;endstruct"
		Local $tthumbnailproperties = DllStructCreate($tagdwm_thumbnail_properties)
		Local $tsize, $iflags = 0
		If NOT IsDllStruct($trectdest) Then
			$tsize = _winapi_dwmquerythumbnailsourcesize($hthumbnail)
			If @error Then
				Return SetError(@error + 10, @extended, 0)
			EndIf
			$trectdest = _winapi_createrectex(0, 0, DllStructGetData($tsize, 1), DllStructGetData($tsize, 2))
		EndIf
		For $i = 1 To 4
			DllStructSetData($tthumbnailproperties, 2, DllStructGetData($trectdest, $i), $i)
		Next
		If IsDllStruct($trectsrc) Then
			$iflags += 2
			For $i = 1 To 4
				DllStructSetData($tthumbnailproperties, 3, DllStructGetData($trectsrc, $i), $i)
			Next
		EndIf
		DllStructSetData($tthumbnailproperties, 1, BitOR($iflags, 29))
		DllStructSetData($tthumbnailproperties, 4, $iopacity)
		DllStructSetData($tthumbnailproperties, 5, $bvisible)
		DllStructSetData($tthumbnailproperties, 6, $bclientareaonly)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmUpdateThumbnailProperties", "handle", $hthumbnail, "struct*", $tthumbnailproperties)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_ellipse($hdc, $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "Ellipse", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_endpaint($hwnd, ByRef $tpaintstruct)
		Local $aret = DllCall("user32.dll", "bool", "EndPaint", "hwnd", $hwnd, "struct*", $tpaintstruct)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_endpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "EndPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_enumdisplaymonitors($hdc = 0, $trect = 0)
		Local $henumproc = DllCallbackRegister("__EnumDisplayMonitorsProc", "bool", "handle;handle;ptr;lparam")
		Dim $__g_venum[101][2] = [[0]]
		Local $aret = DllCall("user32.dll", "bool", "EnumDisplayMonitors", "handle", $hdc, "struct*", $trect, "ptr", DllCallbackGetPtr($henumproc), "lparam", 0)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0][0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumdisplaysettings($sdevice, $imode)
		Local $stypeofdevice = "wstr"
		If NOT StringStripWS($sdevice, $str_stripleading + $str_striptrailing) Then
			$stypeofdevice = "ptr"
			$sdevice = 0
		EndIf
		Local $tdevmode = DllStructCreate($tagdevmode_display)
		DllStructSetData($tdevmode, "Size", DllStructGetSize($tdevmode))
		DllStructSetData($tdevmode, "DriverExtra", 0)
		Local $aret = DllCall("user32.dll", "bool", "EnumDisplaySettingsW", $stypeofdevice, $sdevice, "dword", $imode, "struct*", $tdevmode)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[5]
		$aresult[0] = DllStructGetData($tdevmode, "PelsWidth")
		$aresult[1] = DllStructGetData($tdevmode, "PelsHeight")
		$aresult[2] = DllStructGetData($tdevmode, "BitsPerPel")
		$aresult[3] = DllStructGetData($tdevmode, "DisplayFrequency")
		$aresult[4] = DllStructGetData($tdevmode, "DisplayFlags")
		Return $aresult
	EndFunc

	Func _winapi_enumfontfamilies($hdc = 0, $sfacename = "", $icharset = 1, $ifonttype = 7, $spattern = "", $bexclude = False)
		Local $tlogfont = DllStructCreate($taglogfont)
		Local $tpattern = DllStructCreate("uint;uint;ptr;wchar[" & (StringLen($spattern) + 1) & "]")
		DllStructSetData($tpattern, 1, $ifonttype)
		If NOT $spattern Then
			DllStructSetData($tpattern, 2, 0)
			DllStructSetData($tpattern, 3, 0)
		Else
			DllStructSetData($tpattern, 2, $bexclude)
			DllStructSetData($tpattern, 3, DllStructGetPtr($tpattern, 4))
			DllStructSetData($tpattern, 4, $spattern)
		EndIf
		DllStructSetData($tlogfont, 9, $icharset)
		DllStructSetData($tlogfont, 13, 0)
		DllStructSetData($tlogfont, 14, StringLeft($sfacename, 31))
		Local $hcdc
		If NOT $hdc Then
			$hcdc = _winapi_createcompatibledc(0)
		Else
			$hcdc = $hdc
		EndIf
		Dim $__g_venum[101][8] = [[0]]
		Local $henumproc = DllCallbackRegister("__EnumFontFamiliesProc", "int", "ptr;ptr;dword;PTR")
		Local $aret = DllCall("gdi32.dll", "int", "EnumFontFamiliesExW", "handle", $hcdc, "struct*", $tlogfont, "ptr", DllCallbackGetPtr($henumproc), "struct*", $tpattern, "dword", 0)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0][0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If NOT $hdc Then
			_winapi_deletedc($hcdc)
		EndIf
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_equalrect($trect1, $trect2)
		Local $aret = DllCall("user32.dll", "bool", "EqualRect", "struct*", $trect1, "struct*", $trect2)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_equalrgn($hrgn1, $hrgn2)
		Local $aret = DllCall("gdi32.dll", "bool", "EqualRgn", "handle", $hrgn1, "handle", $hrgn2)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_excludecliprect($hdc, $trect)
		Local $aret = DllCall("gdi32.dll", "int", "ExcludeClipRect", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_extcreatepen($ipenstyle, $iwidth, $ibrushstyle, $irgb, $ihatch = 0, $auserstyle = 0, $istart = 0, $iend = -1)
		Local $icount = 0, $tstyle = 0
		If BitAND($ipenstyle, 255) = 7 Then
			If __checkerrorarraybounds($auserstyle, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			$tstyle = DllStructCreate("dword[" & ($iend - $istart + 1) & "]")
			For $i = $istart To $iend
				DllStructSetData($tstyle, 1, $auserstyle[$i], $icount + 1)
				$icount += 1
			Next
		EndIf
		Local $tlogbrush = DllStructCreate($taglogbrush)
		DllStructSetData($tlogbrush, 1, $ibrushstyle)
		DllStructSetData($tlogbrush, 2, __rgb($irgb))
		DllStructSetData($tlogbrush, 3, $ihatch)
		Local $aret = DllCall("gdi32.dll", "handle", "ExtCreatePen", "dword", $ipenstyle, "dword", $iwidth, "struct*", $tlogbrush, "dword", $icount, "struct*", $tstyle)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_extcreateregion($trgndata, $txform = 0)
		Local $aret = DllCall("gdi32.dll", "handle", "ExtCreateRegion", "struct*", $txform, "dword", DllStructGetSize($trgndata), "struct*", $trgndata)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_extfloodfill($hdc, $ix, $iy, $irgb, $itype = 0)
		Local $aret = DllCall("gdi32.dll", "bool", "ExtFloodFill", "handle", $hdc, "int", $ix, "int", $iy, "dword", __rgb($irgb), "uint", $itype)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_extselectcliprgn($hdc, $hrgn, $imode = 5)
		Local $aret = DllCall("gdi32.dll", "int", "ExtSelectClipRgn", "handle", $hdc, "handle", $hrgn, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_fillpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "FillPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_fillrgn($hdc, $hrgn, $hbrush)
		Local $aret = DllCall("gdi32.dll", "bool", "FillRgn", "handle", $hdc, "handle", $hrgn, "handle", $hbrush)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_flattenpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "FlattenPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_framergn($hdc, $hrgn, $hbrush, $iwidth, $iheight)
		Local $aret = DllCall("gdi32.dll", "bool", "FrameRgn", "handle", $hdc, "handle", $hrgn, "handle", $hbrush, "int", $iwidth, "int", $iheight)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_gdicomment($hdc, $pbuffer, $isize)
		Local $aret = DllCall("gdi32.dll", "bool", "GdiComment", "handle", $hdc, "uint", $isize, "struct*", $pbuffer)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_getarcdirection($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetArcDirection", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		If ($aret[0] < 1) OR ($aret[0] > 2) Then Return SetError(10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getbitmapbits($hbitmap, $isize, $pbits)
		Local $aret = DllCall("gdi32.dll", "long", "GetBitmapBits", "handle", $hbitmap, "long", $isize, "struct*", $pbits)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getbitmapdimensionex($hbitmap)
		Local $tsize = DllStructCreate($tagsize)
		Local $aret = DllCall("gdi32.dll", "bool", "GetBitmapDimensionEx", "handle", $hbitmap, "struct*", $tsize)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tsize
	EndFunc

	Func _winapi_getbkcolor($hdc)
		Local $aret = DllCall("gdi32.dll", "dword", "GetBkColor", "handle", $hdc)
		If @error OR ($aret[0] = -1) Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_getboundsrect($hdc, $iflags = 0)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("gdi32.dll", "uint", "GetBoundsRect", "handle", $hdc, "struct*", $trect, "uint", $iflags)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return SetExtended($aret[0], $trect)
	EndFunc

	Func _winapi_getbrushorg($hdc)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "GetBrushOrgEx", "handle", $hdc, "struct*", $tpoint)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tpoint
	EndFunc

	Func _winapi_getbvalue($irgb)
		Return BitShift(BitAND(__rgb($irgb), 16711680), 16)
	EndFunc

	Func _winapi_getclipbox($hdc, ByRef $trect)
		$trect = DllStructCreate($tagrect)
		Local $aret = DllCall("gdi32.dll", "int", "GetClipBox", "handle", $hdc, "struct*", $trect)
		If @error OR NOT $aret[0] Then
			$trect = 0
			Return SetError(@error, @extended, 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_getcliprgn($hdc)
		Local $hrgn = _winapi_createrectrgn(0, 0, 0, 0)
		Local $ierror = 0
		Local $aret = DllCall("gdi32.dll", "int", "GetClipRgn", "handle", $hdc, "handle", $hrgn)
		If @error OR ($aret[0] = -1) Then $ierror = @error + 10
		If $ierror OR NOT $aret[0] Then
			_winapi_deleteobject($hrgn)
			$hrgn = 0
		EndIf
		Return SetError($ierror, 0, $hrgn)
	EndFunc

	Func _winapi_getcoloradjustment($hdc)
		Local $tadjustment = DllStructCreate($tagcoloradjustment)
		Local $aret = DllCall("gdi32.dll", "bool", "GetColorAdjustment", "handle", $hdc, "struct*", $tadjustment)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tadjustment
	EndFunc

	Func _winapi_getcurrentobject($hdc, $itype)
		Local $aret = DllCall("gdi32.dll", "handle", "GetCurrentObject", "handle", $hdc, "uint", $itype)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getcurrentposition($hdc)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "int", "GetCurrentPositionEx", "handle", $hdc, "struct*", $tpoint)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tpoint
	EndFunc

	Func _winapi_getdcex($hwnd, $hrgn, $iflags)
		Local $aret = DllCall("user32.dll", "handle", "GetDCEx", "hwnd", $hwnd, "handle", $hrgn, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getdevicegammaramp($hdc, ByRef $aramp)
		$aramp = 0
		Local $tdata = DllStructCreate("word[256];word[256];word[256]")
		Local $aret = DllCall("gdi32.dll", "bool", "GetDeviceGammaRamp", "handle", $hdc, "struct*", $tdata)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Dim $aramp[256][3]
		For $i = 0 To 2
			For $j = 0 To 255
				$aramp[$j][$i] = DllStructGetData($tdata, $i + 1, $j + 1)
			Next
		Next
		Return 1
	EndFunc

	Func _winapi_getdibcolortable($hbitmap)
		Local $hdc = _winapi_createcompatibledc(0)
		Local $hsv = _winapi_selectobject($hdc, $hbitmap)
		Local $tpeak = DllStructCreate("dword[256]")
		Local $ierror = 0
		Local $aret = DllCall("gdi32.dll", "uint", "GetDIBColorTable", "handle", $hdc, "uint", 0, "uint", 256, "struct*", $tpeak)
		If @error OR NOT $aret[0] Then $ierror = @error + 10
		_winapi_selectobject($hdc, $hsv)
		_winapi_deletedc($hdc)
		If $ierror Then Return SetError($ierror, 0, 0)
		Local $tdata = DllStructCreate("dword[" & $aret[0] & "]")
		If @error Then Return SetError(@error + 20, @extended, 0)
		_winapi_movememory($tdata, $aret[4], 4 * $aret[0])
		Return SetExtended($aret[0], $tdata)
	EndFunc

	Func _winapi_getenhmetafile($sfilepath)
		Local $aret = DllCall("gdi32.dll", "handle", "GetEnhMetaFileW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getenhmetafilebits($hemf, ByRef $pbuffer)
		Local $aret = DllCall("gdi32.dll", "uint", "GetEnhMetaFileBits", "handle", $hemf, "uint", 0, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 50, @extended, 0)
		$pbuffer = __heaprealloc($pbuffer, $aret[0], 1)
		If @error Then Return SetError(@error, @extended, 0)
		$aret = DllCall("gdi32.dll", "uint", "GetEnhMetaFileBits", "handle", $hemf, "uint", $aret[0], "ptr", $pbuffer)
		If NOT $aret[0] Then Return SetError(60, 0, 0)
		Return $aret[2]
	EndFunc

	Func _winapi_getenhmetafiledescription($hemf)
		Local $tdata = DllStructCreate("wchar[4096]")
		Local $aret = DllCall("gdi32.dll", "uint", "GetEnhMetaFileDescriptionW", "handle", $hemf, "uint", 4096, "struct*", $tdata)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error + 20, $aret[0], 0)
		If NOT $aret[0] Then Return 0
		Local $adata = _winapi_structtoarray($tdata)
		If @error Then Return SetError(@error, @extended, 0)
		Local $aresult[2]
		For $i = 0 To 1
			If $adata[0] > $i Then
				$aresult[$i] = $adata[$i + 1]
			Else
				$aresult[$i] = ""
			EndIf
		Next
		Return $aresult
	EndFunc

	Func _winapi_getenhmetafiledimension($hemf)
		Local $tenhmetaheader = _winapi_getenhmetafileheader($hemf)
		If @error Then Return SetError(@error, @extended, 0)
		Local $tsize = DllStructCreate($tagsize)
		DllStructSetData($tsize, 1, Round((DllStructGetData($tenhmetaheader, "rcFrame", 3) - DllStructGetData($tenhmetaheader, "rcFrame", 1)) * DllStructGetData($tenhmetaheader, "Device", 1) / DllStructGetData($tenhmetaheader, "Millimeters", 1) / 100))
		DllStructSetData($tsize, 2, Round((DllStructGetData($tenhmetaheader, "rcFrame", 4) - DllStructGetData($tenhmetaheader, "rcFrame", 2)) * DllStructGetData($tenhmetaheader, "Device", 2) / DllStructGetData($tenhmetaheader, "Millimeters", 2) / 100))
		Return $tsize
	EndFunc

	Func _winapi_getenhmetafileheader($hemf)
		Local $tenhmetaheader = DllStructCreate($tagenhmetaheader)
		Local $aret = DllCall("gdi32.dll", "uint", "GetEnhMetaFileHeader", "handle", $hemf, "uint", DllStructGetSize($tenhmetaheader), "struct*", $tenhmetaheader)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return SetExtended($aret[0], $tenhmetaheader)
	EndFunc

	Func _winapi_getfontname($sfacename, $istyle = 0, $icharset = 1)
		If NOT $sfacename Then Return SetError(1, 0, "")
		Local $iflags = 0
		If BitAND($istyle, 1) Then
			$iflags += 32
		EndIf
		If BitAND($istyle, 2) Then
			$iflags += 1
		EndIf
		If NOT $iflags Then
			$iflags = 64
		EndIf
		Local $tlogfont = DllStructCreate($taglogfont)
		DllStructSetData($tlogfont, 9, $icharset)
		DllStructSetData($tlogfont, 13, 0)
		DllStructSetData($tlogfont, 14, StringLeft($sfacename, 31))
		Local $tfn = DllStructCreate("dword;wchar[64]")
		DllStructSetData($tfn, 1, $iflags)
		DllStructSetData($tfn, 2, "")
		Local $hdc = _winapi_createcompatibledc(0)
		Local $henumproc = DllCallbackRegister("__EnumFontStylesProc", "int", "ptr;ptr;dword;lparam")
		Local $sret = ""
		Local $aret = DllCall("gdi32.dll", "int", "EnumFontFamiliesExW", "handle", $hdc, "struct*", $tlogfont, "ptr", DllCallbackGetPtr($henumproc), "struct*", $tfn, "dword", 0)
		If NOT @error AND NOT $aret[0] Then $sret = DllStructGetData($tfn, 2)
		DllCallbackFree($henumproc)
		_winapi_deletedc($hdc)
		If NOT $sret Then Return SetError(2, 0, "")
		Return $sret
	EndFunc

	Func _winapi_getfontresourceinfo($sfont, $bforce = False, $iflag = Default)
		If $iflag = Default Then
			If $bforce Then
				If NOT _winapi_addfontresourceex($sfont, $fr_not_enum) Then Return SetError(@error + 20, @extended, "")
			EndIf
			Local $ierror = 0
			Local $aret = DllCall("gdi32.dll", "bool", "GetFontResourceInfoW", "wstr", $sfont, "dword*", 4096, "wstr", "", "dword", 1)
			If @error OR NOT $aret[0] Then $ierror = @error + 10
			If $bforce Then
				_winapi_removefontresourceex($sfont, $fr_not_enum)
			EndIf
			If $ierror Then Return SetError($ierror, 0, "")
			Return $aret[3]
		Else
			If NOT FileExists($sfont) Then
				$sfont = RegRead("HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders", "Fonts") & "\" & $sfont
				If NOT FileExists($sfont) Then Return SetError(31, 0, "")
			EndIf
			Local Const $hfile = _winapi_createfile($sfont, 2, 2, 2)
			If NOT $hfile Then Return SetError(32, _winapi_getlasterror(), "")
			Local Const $ifile = FileGetSize($sfont)
			Local Const $tbuffer = DllStructCreate("byte[" & $ifile + 1 & "]")
			Local Const $pfile = DllStructGetPtr($tbuffer)
			Local $iread
			_winapi_readfile($hfile, $pfile, $ifile, $iread)
			_winapi_closehandle($hfile)
			Local $sttfname = _winapi_getfontmemoryresourceinfo($pfile, $iflag)
			If @error Then
				If @error = 1 AND $iflag = 4 Then
					$sttfname = _winapi_getfontresourceinfo($sfont, True)
					Return SetError(@error, @extended, $sttfname)
				EndIf
				Return SetError(33, @error, "")
			EndIf
			Return $sttfname
		EndIf
	EndFunc

	Func _winapi_getfontmemoryresourceinfo($pmemory, $iflag = 1)
		Local Const $tagtt_offset_table = "USHORT uMajorVersion;USHORT uMinorVersion;USHORT uNumOfTables;USHORT uSearchRange;USHORT uEntrySelector;USHORT uRangeShift"
		Local Const $tagtt_table_directory = "char szTag[4];ULONG uCheckSum;ULONG uOffset;ULONG uLength"
		Local Const $tagtt_name_table_header = "USHORT uFSelector;USHORT uNRCount;USHORT uStorageOffset"
		Local Const $tagtt_name_record = "USHORT uPlatformID;USHORT uEncodingID;USHORT uLanguageID;USHORT uNameID;USHORT uStringLength;USHORT uStringOffset"
		Local $tttoffsettable = DllStructCreate($tagtt_offset_table, $pmemory)
		Local $inumoftables = _winapi_swapword(DllStructGetData($tttoffsettable, "uNumOfTables"))
		If NOT (_winapi_swapword(DllStructGetData($tttoffsettable, "uMajorVersion")) = 1 AND _winapi_swapword(DllStructGetData($tttoffsettable, "uMinorVersion")) = 0) Then Return SetError(1, 0, "")
		Local $itbldirsize = DllStructGetSize(DllStructCreate($tagtt_table_directory))
		Local $bfound = False, $ioffset, $ttbldir
		For $i = 0 To $inumoftables - 1
			$ttbldir = DllStructCreate($tagtt_table_directory, $pmemory + DllStructGetSize($tttoffsettable) + $i * $itbldirsize)
			If StringLeft(DllStructGetData($ttbldir, "szTag"), 4) = "name" Then
				$bfound = True
				$ioffset = _winapi_swapdword(DllStructGetData($ttbldir, "uOffset"))
				ExitLoop
			EndIf
		Next
		If NOT $bfound Then Return SetError(2, 0, "")
		Local $tntheader = DllStructCreate($tagtt_name_table_header, $pmemory + $ioffset)
		Local $intheadersize = DllStructGetSize($tntheader)
		Local $inrcount = _winapi_swapword(DllStructGetData($tntheader, "uNRCount"))
		Local $istorageoffset = _winapi_swapword(DllStructGetData($tntheader, "uStorageOffset"))
		Local $ittrecordsize = DllStructGetSize(DllStructCreate($tagtt_name_record))
		Local $tresult, $sresult, $istringlength, $istringoffset, $iencodingid, $tttrecord
		For $i = 0 To $inrcount - 1
			$tttrecord = DllStructCreate($tagtt_name_record, $pmemory + $ioffset + $intheadersize + $i * $ittrecordsize)
			If _winapi_swapword($tttrecord.unameid) = $iflag Then
				$istringlength = _winapi_swapword(DllStructGetData($tttrecord, "uStringLength"))
				$istringoffset = _winapi_swapword(DllStructGetData($tttrecord, "uStringOffset"))
				$iencodingid = _winapi_swapword(DllStructGetData($tttrecord, "uEncodingID"))
				Local $swchar = "char"
				If $iencodingid = 1 Then
					$swchar = "word"
					$istringlength = $istringlength / 2
				EndIf
				$tresult = DllStructCreate($swchar & " szTTFName[" & $istringlength & "]", $pmemory + $ioffset + $istringoffset + $istorageoffset)
				If $iencodingid = 1 Then
					$sresult = ""
					For $j = 1 To $istringlength
						$sresult &= ChrW(_winapi_swapword(DllStructGetData($tresult, 1, $j)))
					Next
				Else
					$sresult = $tresult.szttfname
				EndIf
				If StringLen($sresult) > 0 Then ExitLoop
			EndIf
		Next
		Return $sresult
	EndFunc

	Func _winapi_getglyphoutline($hdc, $schar, $iformat, ByRef $pbuffer, $tmat2 = 0)
		Local $tgm = DllStructCreate($tagglyphmetrics)
		Local $aret, $ilength = 0
		If NOT IsDllStruct($tmat2) Then
			$tmat2 = DllStructCreate("short[8]")
			DllStructSetData($tmat2, 1, 1, 2)
			DllStructSetData($tmat2, 1, 1, 8)
		EndIf
		If $iformat Then
			$aret = DllCall("gdi32.dll", "dword", "GetGlyphOutlineW", "handle", $hdc, "uint", AscW($schar), "uint", $iformat, "struct*", $tgm, "dword", 0, "ptr", 0, "struct*", $tmat2)
			If @error OR ($aret[0] = 4294967295) Then Return SetError(@error + 10, @extended, 0)
			$ilength = $aret[0]
			$pbuffer = __heaprealloc($pbuffer, $ilength, 1)
			If @error Then Return SetError(@error + 20, @extended, 0)
		EndIf
		$aret = DllCall("gdi32.dll", "dword", "GetGlyphOutlineW", "handle", $hdc, "uint", AscW($schar), "uint", $iformat, "struct*", $tgm, "dword", $ilength, "ptr", $pbuffer, "struct*", $tmat2)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] = 4294967295 Then Return SetError(10, -1, 0)
		Return SetExtended($ilength, $tgm)
	EndFunc

	Func _winapi_getgraphicsmode($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetGraphicsMode", "handle", $hdc)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getgvalue($irgb)
		Return BitShift(BitAND(__rgb($irgb), 65280), 8)
	EndFunc

	Func _winapi_geticondimension($hicon)
		Local $ticoninfo = DllStructCreate($tagiconinfo)
		Local $aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $hicon, "struct*", $ticoninfo)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $tsize = _winapi_getbitmapdimension(DllStructGetData($ticoninfo, 5))
		For $i = 4 To 5
			_winapi_deleteobject(DllStructGetData($ticoninfo, $i))
		Next
		If NOT IsDllStruct($tsize) Then Return SetError(20, 0, 0)
		Return $tsize
	EndFunc

	Func _winapi_getmapmode($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetMapMode", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getobjecttype($hobject)
		Local $aret = DllCall("gdi32.dll", "dword", "GetObjectType", "handle", $hobject)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getoutlinetextmetrics($hdc)
		Local $aret = DllCall("gdi32.dll", "uint", "GetOutlineTextMetricsW", "handle", $hdc, "uint", 0, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $tdata = DllStructCreate("byte[" & $aret[0] & "]")
		Local $toltm = DllStructCreate($tagoutlinetextmetric, DllStructGetPtr($tdata))
		$aret = DllCall("gdi32.dll", "uint", "GetOutlineTextMetricsW", "handle", $hdc, "uint", $aret[0], "struct*", $tdata)
		If NOT $aret[0] Then Return SetError(20, 0, 0)
		Return $toltm
	EndFunc

	Func _winapi_getpixel($hdc, $ix, $iy)
		Local $aret = DllCall("gdi32.dll", "dword", "GetPixel", "handle", $hdc, "int", $ix, "int", $iy)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_getpolyfillmode($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetPolyFillMode", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getposfromrect($trect)
		Local $aresult[4]
		For $i = 0 To 3
			$aresult[$i] = DllStructGetData($trect, $i + 1)
			If @error Then Return SetError(@error, @extended, 0)
		Next
		For $i = 2 To 3
			$aresult[$i] -= $aresult[$i - 2]
		Next
		Return $aresult
	EndFunc

	Func _winapi_getregiondata($hrgn, ByRef $trgndata)
		Local $aret = DllCall("gdi32.dll", "dword", "GetRegionData", "handle", $hrgn, "dword", 0, "ptr", 0)
		If @error OR NOT $aret[0] Then
			$trgndata = 0
			Return SetError(@error, @extended, False)
		EndIf
		$trgndata = DllStructCreate($tagrgndataheader)
		Local $irectsize = $aret[0] - DllStructGetSize($trgndata)
		If $irectsize > 0 Then $trgndata = DllStructCreate($tagrgndataheader & ";byte[" & $irectsize & "]")
		$aret = DllCall("gdi32.dll", "dword", "GetRegionData", "handle", $hrgn, "dword", $aret[0], "struct*", $trgndata)
		If NOT $aret[0] Then $trgndata = 0
		Return $aret[0]
	EndFunc

	Func _winapi_getrgnbox($hrgn, ByRef $trect)
		$trect = DllStructCreate($tagrect)
		Local $aret = DllCall("gdi32.dll", "int", "GetRgnBox", "handle", $hrgn, "struct*", $trect)
		If @error OR NOT $aret[0] Then
			$trect = 0
			Return SetError(@error, @extended, 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_getrop2($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetROP2", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getrvalue($irgb)
		Return BitAND(__rgb($irgb), 255)
	EndFunc

	Func _winapi_getstretchbltmode($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetStretchBltMode", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_gettabbedtextextent($hdc, $stext, $atab = 0, $istart = 0, $iend = -1)
		Local $itab, $icount
		If NOT IsArray($atab) Then
			If $atab Then
				$itab = $atab
				Dim $atab[1] = [$itab]
				$istart = 0
				$iend = 0
				$icount = 1
			Else
				$icount = 0
			EndIf
		Else
			$icount = 1
		EndIf
		Local $ttab = 0
		If $icount Then
			If __checkerrorarraybounds($atab, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			$icount = $iend - $istart + 1
			$ttab = DllStructCreate("uint[" & $icount & "]")
			$itab = 1
			For $i = $istart To $iend
				DllStructSetData($ttab, 1, $atab[$i], $itab)
				$itab += 1
			Next
		EndIf
		Local $aret = DllCall("user32.dll", "dword", "GetTabbedTextExtentW", "handle", $hdc, "wstr", $stext, "int", StringLen($stext), "int", $icount, "struct*", $ttab)
		If @error OR NOT $aret[0] Then Return SetError(@error + 20, @extended, 0)
		Return _winapi_createsize(_winapi_loword($aret[0]), _winapi_hiword($aret[0]))
	EndFunc

	Func _winapi_gettextalign($hdc)
		Local $aret = DllCall("gdi32.dll", "uint", "GetTextAlign", "handle", $hdc)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_gettextcharacterextra($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetTextCharacterExtra", "handle", $hdc)
		If @error OR ($aret[0] = 134217728) Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_gettextcolor($hdc)
		Local $aret = DllCall("gdi32.dll", "dword", "GetTextColor", "handle", $hdc)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_gettextface($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetTextFaceW", "handle", $hdc, "int", 2048, "wstr", "")
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[3]
	EndFunc

	Func _winapi_getudfcolormode()
		Return Number($__g_irgbmode)
	EndFunc

	Func _winapi_getupdaterect($hwnd, $berase = True)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "GetUpdateRect", "hwnd", $hwnd, "struct*", $trect, "bool", $berase)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $trect
	EndFunc

	Func _winapi_getupdatergn($hwnd, $hrgn, $berase = True)
		Local $aret = DllCall("user32.dll", "int", "GetUpdateRgn", "hwnd", $hwnd, "handle", $hrgn, "bool", $berase)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getwindowext($hdc)
		Local $tsize = DllStructCreate($tagsize)
		Local $aret = DllCall("gdi32.dll", "bool", "GetWindowExtEx", "handle", $hdc, "struct*", $tsize)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tsize
	EndFunc

	Func _winapi_getwindoworg($hdc)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "GetWindowOrgEx", "handle", $hdc, "struct*", $tpoint)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tpoint
	EndFunc

	Func _winapi_getwindowrgnbox($hwnd, ByRef $trect)
		$trect = DllStructCreate($tagrect)
		Local $aret = DllCall("gdi32.dll", "int", "GetWindowRgnBox", "hwnd", $hwnd, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getworldtransform($hdc)
		Local $txform = DllStructCreate($tagxform)
		Local $aret = DllCall("gdi32.dll", "bool", "GetWorldTransform", "handle", $hdc, "struct*", $txform)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $txform
	EndFunc

	Func _winapi_gradientfill($hdc, Const ByRef $avertex, $istart = 0, $iend = -1, $brotate = False)
		If __checkerrorarraybounds($avertex, $istart, $iend, 2) Then Return SetError(@error + 10, @extended, 0)
		If UBound($avertex, $ubound_columns) < 3 Then Return SetError(13, 0, 0)
		Local $ipoint = $iend - $istart + 1
		If $ipoint > 3 Then
			$iend = $istart + 2
			$ipoint = 3
		EndIf
		Local $imode
		Switch $ipoint
			Case 2
				$imode = Number(NOT $brotate)
			Case 3
				$imode = 2
			Case Else
				Return SetError(15, 0, 0)
		EndSwitch
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "ushort[8];"
		Next
		Local $tvertex = DllStructCreate($tagstruct)
		Local $icount = 1
		Local $tgradient = DllStructCreate("ulong[" & $ipoint & "]")
		For $i = $istart To $iend
			DllStructSetData($tgradient, 1, $icount - 1, $icount)
			DllStructSetData($tvertex, $icount, _winapi_loword($avertex[$i][0]), 1)
			DllStructSetData($tvertex, $icount, _winapi_hiword($avertex[$i][0]), 2)
			DllStructSetData($tvertex, $icount, _winapi_loword($avertex[$i][1]), 3)
			DllStructSetData($tvertex, $icount, _winapi_hiword($avertex[$i][1]), 4)
			DllStructSetData($tvertex, $icount, BitShift(_winapi_getrvalue($avertex[$i][2]), -8), 5)
			DllStructSetData($tvertex, $icount, BitShift(_winapi_getgvalue($avertex[$i][2]), -8), 6)
			DllStructSetData($tvertex, $icount, BitShift(_winapi_getbvalue($avertex[$i][2]), -8), 7)
			DllStructSetData($tvertex, $icount, 0, 8)
			$icount += 1
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "GdiGradientFill", "handle", $hdc, "struct*", $tvertex, "ulong", $ipoint, "struct*", $tgradient, "ulong", 1, "ulong", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_inflaterect(ByRef $trect, $idx, $idy)
		Local $aret = DllCall("user32.dll", "bool", "InflateRect", "struct*", $trect, "int", $idx, "int", $idy)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_intersectcliprect($hdc, $trect)
		Local $aret = DllCall("gdi32.dll", "int", "IntersectClipRect", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_intersectrect($trect1, $trect2)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "IntersectRect", "struct*", $trect, "struct*", $trect1, "struct*", $trect2)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $trect
	EndFunc

	Func _winapi_invalidatergn($hwnd, $hrgn = 0, $berase = True)
		Local $aret = DllCall("user32.dll", "bool", "InvalidateRgn", "hwnd", $hwnd, "handle", $hrgn, "bool", $berase)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_invertandbitmap($hbitmap, $bdelete = False)
		Local $tbitmap = DllStructCreate($tagbitmap)
		If NOT _winapi_getobject($hbitmap, DllStructGetSize($tbitmap), $tbitmap) OR (DllStructGetData($tbitmap, "bmBitsPixel") <> 1) Then
			Return SetError(@error + 10, @extended, 0)
		EndIf
		Local $hresult = _winapi_createdib(DllStructGetData($tbitmap, "bmWidth"), DllStructGetData($tbitmap, "bmHeight"), 1)
		If NOT $hresult Then Return SetError(@error, @extended, 0)
		Local $hsrcdc = _winapi_createcompatibledc(0)
		Local $hsrcsv = _winapi_selectobject($hsrcdc, $hbitmap)
		Local $hdstdc = _winapi_createcompatibledc(0)
		Local $hdstsv = _winapi_selectobject($hdstdc, $hresult)
		_winapi_bitblt($hdstdc, 0, 0, DllStructGetData($tbitmap, "bmWidth"), DllStructGetData($tbitmap, "bmHeight"), $hsrcdc, 0, 0, 3342344)
		_winapi_selectobject($hsrcdc, $hsrcsv)
		_winapi_deletedc($hsrcdc)
		_winapi_selectobject($hdstdc, $hdstsv)
		_winapi_deletedc($hdstdc)
		If $bdelete Then
			_winapi_deleteobject($hbitmap)
		EndIf
		Return $hresult
	EndFunc

	Func _winapi_invertcolor($icolor)
		If $icolor = -1 Then Return 0
		Return 16777215 - BitAND($icolor, 16777215)
	EndFunc

	Func _winapi_invertrect($hdc, ByRef $trect)
		Local $aret = DllCall("user32.dll", "bool", "InvertRect", "handle", $hdc, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_invertrgn($hdc, $hrgn)
		Local $aret = DllCall("gdi32.dll", "bool", "InvertRgn", "handle", $hdc, "handle", $hrgn)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isalphabitmap($hbitmap)
		$hbitmap = _winapi_copybitmap($hbitmap)
		If NOT $hbitmap Then Return SetError(@error + 20, @extended, 0)
		Local $aret, $ierror = 0
		Do
			Local $tdib = DllStructCreate($tagdibsection)
			If (NOT _winapi_getobject($hbitmap, DllStructGetSize($tdib), $tdib)) OR (DllStructGetData($tdib, "bmBitsPixel") <> 32) OR (DllStructGetData($tdib, "biCompression")) Then
				$ierror = 1
				ExitLoop
			EndIf
			$aret = DllCall("user32.dll", "int", "CallWindowProc", "ptr", __alphaproc(), "ptr", 0, "uint", 0, "struct*", $tdib, "ptr", 0)
			If @error OR ($aret[0] = -1) Then
				$ierror = @error + 10
				ExitLoop
			EndIf
		Until 1
		_winapi_deleteobject($hbitmap)
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_isrectempty(ByRef $trect)
		Local $aret = DllCall("user32.dll", "bool", "IsRectEmpty", "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_linedda($ix1, $iy1, $ix2, $iy2, $plineproc, $pdata = 0)
		Local $aret = DllCall("gdi32.dll", "bool", "LineDDA", "int", $ix1, "int", $iy1, "int", $ix2, "int", $iy2, "ptr", $plineproc, "lparam", $pdata)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_lockwindowupdate($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "LockWindowUpdate", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_lptodp($hdc, ByRef $tpoint, $icount = 1)
		Local $aret = DllCall("gdi32.dll", "bool", "LPtoDP", "handle", $hdc, "struct*", $tpoint, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_maskblt($hdestdc, $ixdest, $iydest, $iwidth, $iheight, $hsrcdc, $ixsrc, $iysrc, $hmask, $ixmask, $iymask, $irop)
		Local $aret = DllCall("gdi32.dll", "bool", "MaskBlt", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidth, "int", $iheight, "hwnd", $hsrcdc, "int", $ixsrc, "int", $iysrc, "handle", $hmask, "int", $ixmask, "int", $iymask, "dword", $irop)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_modifyworldtransform($hdc, ByRef $txform, $imode)
		Local $aret = DllCall("gdi32.dll", "bool", "ModifyWorldTransform", "handle", $hdc, "struct*", $txform, "dword", $imode)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_monitorfrompoint(ByRef $tpoint, $iflag = 1)
		If DllStructGetSize($tpoint) <> 8 Then Return SetError(@error + 10, @extended, 0)
		Local $aret = DllCall("user32.dll", "handle", "MonitorFromPoint", "struct", $tpoint, "dword", $iflag)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_monitorfromrect(ByRef $trect, $iflag = 1)
		Local $aret = DllCall("user32.dll", "ptr", "MonitorFromRect", "struct*", $trect, "dword", $iflag)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_monitorfromwindow($hwnd, $iflag = 1)
		Local $aret = DllCall("user32.dll", "handle", "MonitorFromWindow", "hwnd", $hwnd, "dword", $iflag)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_movetoex($hdc, $ix, $iy)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "MoveToEx", "handle", $hdc, "int", $ix, "int", $iy, "struct*", $tpoint)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tpoint
	EndFunc

	Func _winapi_offsetcliprgn($hdc, $ixoffset, $iyoffset)
		Local $aret = DllCall("gdi32.dll", "int", "OffsetClipRgn", "handle", $hdc, "int", $ixoffset, "int", $iyoffset)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_offsetpoints(ByRef $apoint, $ixoffset, $iyoffset, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2) Then Return SetError(@error + 10, @extended, 0)
		If UBound($apoint, $ubound_columns) < 2 Then Return SetError(13, 0, 0)
		For $i = $istart To $iend
			$apoint[$i][0] += $ixoffset
			$apoint[$i][1] += $iyoffset
		Next
		Return 1
	EndFunc

	Func _winapi_offsetrect(ByRef $trect, $idx, $idy)
		Local $aret = DllCall("user32.dll", "bool", "OffsetRect", "struct*", $trect, "int", $idx, "int", $idy)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_offsetrgn($hrgn, $ixoffset, $iyoffset)
		Local $aret = DllCall("gdi32.dll", "int", "OffsetRgn", "handle", $hrgn, "int", $ixoffset, "int", $iyoffset)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_offsetwindoworg($hdc, $ixoffset, $iyoffset)
		$__g_vext = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "OffsetWindowOrgEx", "handle", $hdc, "int", $ixoffset, "int", $iyoffset, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_paintdesktop($hdc)
		Local $aret = DllCall("user32.dll", "bool", "PaintDesktop", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_paintrgn($hdc, $hrgn)
		Local $aret = DllCall("gdi32.dll", "bool", "PaintRgn", "handle", $hdc, "handle", $hrgn)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_patblt($hdc, $ix, $iy, $iwidth, $iheight, $irop)
		Local $aret = DllCall("gdi32.dll", "bool", "PatBlt", "handle", $hdc, "int", $ix, "int", $iy, "int", $iwidth, "int", $iheight, "dword", $irop)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathtoregion($hdc)
		Local $aret = DllCall("gdi32.dll", "handle", "PathToRegion", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_playenhmetafile($hdc, $hemf, ByRef $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "PlayEnhMetaFile", "handle", $hdc, "handle", $hemf, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_plgblt($hdestdc, Const ByRef $apoint, $hsrcdc, $ixsrc, $iysrc, $iwidth, $iheight, $hmask = 0, $ixmask = 0, $iymask = 0)
		If (UBound($apoint) < 3) OR (UBound($apoint, $ubound_columns) < 2) Then Return SetError(12, 0, False)
		Local $tpoints = DllStructCreate("long[2];long[2];long[2]")
		For $i = 0 To 2
			For $j = 0 To 1
				DllStructSetData($tpoints, $i + 1, $apoint[$i][$j], $j + 1)
			Next
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "PlgBlt", "handle", $hdestdc, "struct*", $tpoints, "handle", $hsrcdc, "int", $ixsrc, "int", $iysrc, "int", $iwidth, "int", $iheight, "handle", $hmask, "int", $ixmask, "int", $iymask)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_polybezier($hdc, Const ByRef $apoint, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2, 2) Then Return SetError(@error + 10, @extended, False)
		Local $ipoint = 1 + 3 * Floor(($iend - $istart) / 3)
		If $ipoint < 1 Then Return SetError(15, 0, False)
		$iend = $istart + $ipoint - 1
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "long[2];"
		Next
		Local $tpoint = DllStructCreate($tagstruct)
		Local $icount = 0
		For $i = $istart To $iend
			$icount += 1
			For $j = 0 To 1
				DllStructSetData($tpoint, $icount, $apoint[$i][$j], $j + 1)
			Next
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "PolyBezier", "handle", $hdc, "struct*", $tpoint, "dword", $ipoint)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_polybezierto($hdc, Const ByRef $apoint, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2, 2) Then Return SetError(@error + 10, @extended, False)
		Local $ipoint = 3 * Floor(($iend - $istart + 1) / 3)
		If $ipoint < 3 Then Return SetError(15, 0, False)
		$iend = $istart + $ipoint - 1
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "long[2];"
		Next
		Local $tpoint = DllStructCreate($tagstruct)
		Local $icount = 0
		For $i = $istart To $iend
			$icount += 1
			For $j = 0 To 1
				DllStructSetData($tpoint, $icount, $apoint[$i][$j], $j + 1)
			Next
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "PolyBezierTo", "handle", $hdc, "struct*", $tpoint, "dword", $ipoint)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_polydraw($hdc, Const ByRef $apoint, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2) Then Return SetError(@error + 10, @extended, 0)
		If UBound($apoint, $ubound_columns) < 3 Then Return SetError(13, 0, False)
		Local $ipoint = $iend - $istart + 1
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "long[2];"
		Next
		Local $tpoint = DllStructCreate($tagstruct)
		Local $ttypes = DllStructCreate("byte[" & $ipoint & "]")
		Local $icount = 0
		For $i = $istart To $iend
			$icount += 1
			For $j = 0 To 1
				DllStructSetData($tpoint, $icount, $apoint[$i][$j], $j + 1)
			Next
			DllStructSetData($ttypes, 1, $apoint[$i][2], $icount)
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "PolyDraw", "handle", $hdc, "struct*", $tpoint, "struct*", $ttypes, "dword", $ipoint)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_polygon($hdc, Const ByRef $apoint, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2, 2) Then Return SetError(@error + 10, @extended, False)
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "int[2];"
		Next
		Local $tdata = DllStructCreate($tagstruct)
		Local $icount = 1
		For $i = $istart To $iend
			For $j = 0 To 1
				DllStructSetData($tdata, $icount, $apoint[$i][$j], $j + 1)
			Next
			$icount += 1
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "Polygon", "handle", $hdc, "struct*", $tdata, "int", $icount - 1)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_printwindow($hwnd, $hdc, $bclient = False)
		Local $aret = DllCall("user32.dll", "bool", "PrintWindow", "hwnd", $hwnd, "handle", $hdc, "uint", $bclient)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_ptinrectex($ix, $iy, $ileft, $itop, $iright, $ibottom)
		Local $trect = _winapi_createrect($ileft, $itop, $iright, $ibottom)
		Local $tpoint = _winapi_createpoint($ix, $iy)
		Local $aret = DllCall("user32.dll", "bool", "PtInRect", "struct*", $trect, "struct", $tpoint)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_ptinregion($hrgn, $ix, $iy)
		Local $aret = DllCall("gdi32.dll", "bool", "PtInRegion", "handle", $hrgn, "int", $ix, "int", $iy)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_ptvisible($hdc, $ix, $iy)
		Local $aret = DllCall("gdi32.dll", "bool", "PtVisible", "handle", $hdc, "int", $ix, "int", $iy)
		If @error Then Return SetError(@error + 10, @extended, 0)
		If $aret[0] = -1 Then Return SetError(10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_radialgradientfill($hdc, $ix, $iy, $iradius, $irgb1, $irgb2, $fanglestart = 0, $fangleend = 360, $fstep = 5)
		If Abs($fanglestart) > 360 Then
			$fanglestart = Mod($fanglestart, 360)
		EndIf
		If Abs($fangleend) > 360 Then
			$fangleend = Mod($fangleend, 360)
		EndIf
		If ($fanglestart < 0) OR ($fangleend < 0) Then
			$fanglestart += 360
			$fangleend += 360
		EndIf
		If $fanglestart > $fangleend Then
			Local $fval = $fanglestart
			$fanglestart = $fangleend
			$fangleend = $fval
		EndIf
		If $fstep < 1 Then
			$fstep = 1
		EndIf
		Local $fki = ATan(1) / 45
		Local $ixp = Round($ix + $iradius * Cos($fki * $fanglestart))
		Local $iyp = Round($iy + $iradius * Sin($fki * $fanglestart))
		Local $ixn, $iyn, $fan = $fanglestart
		Local $avertex[3][3]
		While $fan < $fangleend
			$fan += $fstep
			If $fan > $fangleend Then
				$fan = $fangleend
			EndIf
			$ixn = Round($ix + $iradius * Cos($fki * $fan))
			$iyn = Round($iy + $iradius * Sin($fki * $fan))
			$avertex[0][0] = $ix
			$avertex[0][1] = $iy
			$avertex[0][2] = $irgb1
			$avertex[1][0] = $ixp
			$avertex[1][1] = $iyp
			$avertex[1][2] = $irgb2
			$avertex[2][0] = $ixn
			$avertex[2][1] = $iyn
			$avertex[2][2] = $irgb2
			If NOT _winapi_gradientfill($hdc, $avertex, 0, 2) Then
				Return SetError(@error, @extended, 0)
			EndIf
			$ixp = $ixn
			$iyp = $iyn
		WEnd
		Return 1
	EndFunc

	Func _winapi_rectangle($hdc, $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "Rectangle", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_rectinregion($hrgn, $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "RectInRegion", "handle", $hrgn, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_rectvisible($hdc, $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "RectVisible", "handle", $hdc, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		Switch $aret[0]
			Case 0, 1, 2
			Case Else
				Return SetError(10, $aret[0], 0)
		EndSwitch
		Return $aret[0]
	EndFunc

	Func _winapi_removefontmemresourceex($hfont)
		Local $aret = DllCall("gdi32.dll", "bool", "RemoveFontMemResourceEx", "handle", $hfont)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_removefontresourceex($sfont, $iflag = 0, $bnotify = False)
		Local $aret = DllCall("gdi32.dll", "bool", "RemoveFontResourceExW", "wstr", $sfont, "dword", $iflag, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, False)
		If $bnotify Then
			Local Const $wm_fontchange = 29
			Local Const $hwnd_broadcast = 65535
			DllCall("user32.dll", "none", "SendMessage", "hwnd", $hwnd_broadcast, "uint", $wm_fontchange, "wparam", 0, "lparam", 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_restoredc($hdc, $iid)
		Local $aret = DllCall("gdi32.dll", "bool", "RestoreDC", "handle", $hdc, "int", $iid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_rgb($ired, $igreen, $iblue)
		Return __rgb(BitOR(BitShift($iblue, -16), BitShift($igreen, -8), $ired))
	EndFunc

	Func _winapi_rotatepoints(ByRef $apoint, $ixc, $iyc, $fangle, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2) Then Return SetError(@error + 10, @extended, 0)
		If UBound($apoint, $ubound_columns) < 2 Then Return SetError(13, 0, 0)
		Local $fcos = Cos(ATan(1) / 45 * $fangle)
		Local $fsin = Sin(ATan(1) / 45 * $fangle)
		Local $ixn, $iyn
		For $i = $istart To $iend
			$ixn = $apoint[$i][0] - $ixc
			$iyn = $apoint[$i][1] - $iyc
			$apoint[$i][0] = $ixc + Round($ixn * $fcos - $iyn * $fsin)
			$apoint[$i][1] = $iyc + Round($ixn * $fsin + $iyn * $fcos)
		Next
		Return 1
	EndFunc

	Func _winapi_roundrect($hdc, $trect, $iwidth, $iheight)
		Local $aret = DllCall("gdi32.dll", "bool", "RoundRect", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4), "int", $iwidth, "int", $iheight)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_savedc($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "SaveDC", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_savehbitmaptofile($sfilepath, $hbitmap, $ixpelspermeter = Default, $iypelspermeter = Default)
		Local $tbmp = DllStructCreate("align 1;ushort bfType;dword bfSize;ushort bfReserved1;ushort bfReserved2;dword bfOffset")
		Local $tdib = DllStructCreate($tagdibsection)
		Local $hdc, $hsv, $hsource = 0
		While $hbitmap
			If (NOT _winapi_getobject($hbitmap, DllStructGetSize($tdib), $tdib)) OR (DllStructGetData($tdib, "biCompression")) Then
				$hbitmap = 0
			Else
				Switch DllStructGetData($tdib, "bmBitsPixel")
					Case 32
						If NOT _winapi_isalphabitmap($hbitmap) Then
							If NOT $hsource Then
								$hsource = _winapi_createdib(DllStructGetData($tdib, "bmWidth"), DllStructGetData($tdib, "bmHeight"), 24)
								If NOT $hsource Then
									$hbitmap = 0
								EndIf
								$hdc = _winapi_createcompatibledc(0)
								$hsv = _winapi_selectobject($hdc, $hsource)
								If _winapi_drawbitmap($hdc, 0, 0, $hbitmap) Then
									$hbitmap = $hsource
								Else
									$hbitmap = 0
								EndIf
								_winapi_selectobject($hdc, $hsv)
								_winapi_deletedc($hdc)
							Else
								$hbitmap = 0
							EndIf
							ContinueLoop
						EndIf
					Case Else
				EndSwitch
				If (NOT DllStructGetData($tdib, "bmBits")) OR (NOT DllStructGetData($tdib, "biSizeImage")) Then
					If NOT $hsource Then
						$hbitmap = _winapi_copybitmap($hbitmap)
						$hsource = $hbitmap
					Else
						$hbitmap = 0
					EndIf
				Else
					ExitLoop
				EndIf
			EndIf
		WEnd
		Local $hfile = 0, $ierror = 0, $iresult = 0
		Do
			If NOT $hbitmap Then
				$ierror = 1
				ExitLoop
			EndIf
			Local $adata[4][2]
			$adata[0][0] = DllStructGetPtr($tbmp)
			$adata[0][1] = DllStructGetSize($tbmp)
			$adata[1][0] = DllStructGetPtr($tdib, "biSize")
			$adata[1][1] = 40
			$adata[2][1] = DllStructGetData($tdib, "biClrUsed") * 4
			Local $ttable = 0
			If $adata[2][1] Then
				$ttable = _winapi_getdibcolortable($hbitmap)
				If @error OR (@extended <> $adata[2][1] / 4) Then
					$ierror = @error + 10
					ExitLoop
				EndIf
			EndIf
			$adata[2][0] = DllStructGetPtr($ttable)
			$adata[3][0] = DllStructGetData($tdib, "bmBits")
			$adata[3][1] = DllStructGetData($tdib, "biSizeImage")
			DllStructSetData($tbmp, "bfType", 19778)
			DllStructSetData($tbmp, "bfSize", $adata[0][1] + $adata[1][1] + $adata[2][1] + $adata[3][1])
			DllStructSetData($tbmp, "bfReserved1", 0)
			DllStructSetData($tbmp, "bfReserved2", 0)
			DllStructSetData($tbmp, "bfOffset", $adata[0][1] + $adata[1][1] + $adata[2][1])
			$hdc = _winapi_getdc(0)
			If $ixpelspermeter = Default Then
				If NOT DllStructGetData($tdib, "biXPelsPerMeter") Then
					DllStructSetData($tdib, "biXPelsPerMeter", _winapi_getdevicecaps($hdc, 8) / _winapi_getdevicecaps($hdc, 4) * 1000)
				EndIf
			Else
				DllStructSetData($tdib, "biXPelsPerMeter", $ixpelspermeter)
			EndIf
			If $iypelspermeter = Default Then
				If NOT DllStructGetData($tdib, "biYPelsPerMeter") Then
					DllStructSetData($tdib, "biYPelsPerMeter", _winapi_getdevicecaps($hdc, 10) / _winapi_getdevicecaps($hdc, 6) * 1000)
				EndIf
			Else
				DllStructSetData($tdib, "biYPelsPerMeter", $iypelspermeter)
			EndIf
			_winapi_releasedc(0, $hdc)
			$hfile = _winapi_createfile($sfilepath, 1, 4)
			If @error Then
				$ierror = @error + 20
				ExitLoop
			EndIf
			Local $ibytes
			For $i = 0 To 3
				If $adata[$i][1] Then
					If NOT _winapi_writefile($hfile, $adata[$i][0], $adata[$i][1], $ibytes) Then
						$ierror = @error + 30
						ExitLoop 2
					EndIf
				EndIf
			Next
			$iresult = 1
		Until 1
		If $hsource Then
			_winapi_deleteobject($hsource)
		EndIf
		_winapi_closehandle($hfile)
		If NOT $iresult Then
			FileDelete($sfilepath)
		EndIf
		Return SetError($ierror, 0, $iresult)
	EndFunc

	Func _winapi_savehicontofile($sfilepath, Const ByRef $vicon, $bcompress = 0, $istart = 0, $iend = -1)
		Local $aicon, $atemp, $icount = 1
		If NOT IsArray($vicon) Then
			Dim $aicon[1] = [$vicon]
			Dim $atemp[1] = [0]
		Else
			If __checkerrorarraybounds($vicon, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			$icount = $iend - $istart + 1
			If $icount Then
				Dim $aicon[$icount]
				Dim $atemp[$icount]
				For $i = 0 To $icount - 1
					$aicon[$i] = $vicon[$istart + $i]
					$atemp[$i] = 0
				Next
			EndIf
		EndIf
		Local $hfile = _winapi_createfile($sfilepath, 1, 4)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $tico = DllStructCreate("align 1;ushort Reserved;ushort Type;ushort Count;byte Data[" & (16 * $icount) & "]")
		Local $ilength = DllStructGetSize($tico)
		Local $tbi = DllStructCreate($tagbitmapinfoheader)
		Local $tii = DllStructCreate($tagiconinfo)
		Local $tdib = DllStructCreate($tagdibsection)
		Local $idib = DllStructGetSize($tdib)
		Local $pdib = DllStructGetPtr($tdib)
		Local $ioffset = $ilength
		DllStructSetData($tbi, "biSize", 40)
		DllStructSetData($tbi, "biPlanes", 1)
		DllStructSetData($tbi, "biXPelsPerMeter", 0)
		DllStructSetData($tbi, "biYPelsPerMeter", 0)
		DllStructSetData($tbi, "biClrUsed", 0)
		DllStructSetData($tbi, "biClrImportant", 0)
		DllStructSetData($tico, "Reserved", 0)
		DllStructSetData($tico, "Type", 1)
		DllStructSetData($tico, "Count", $icount)
		Local $iresult = 0, $ierror = 0
		Do
			Local $ibytes
			If NOT _winapi_writefile($hfile, $tico, $ilength, $ibytes) Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			Local $ainfo[8], $aret, $pdata = 0, $iindex = 0
			While $icount > $iindex
				$aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $aicon[$iindex], "struct*", $tii)
				If @error OR NOT $aret[0] Then
					$ierror = @error + 40
					ExitLoop 2
				EndIf
				For $i = 4 To 5
					$ainfo[$i] = _winapi_copyimage(DllStructGetData($tii, $i), 0, 0, 0, 8200)
					If _winapi_getobject($ainfo[$i], $idib, $pdib) Then
						$ainfo[$i - 4] = DllStructGetData($tdib, "biSizeImage")
						$ainfo[$i - 2] = DllStructGetData($tdib, "bmBits")
					Else
						$ierror = @error + 50
					EndIf
				Next
				$ainfo[6] = 40
				$ainfo[7] = DllStructGetData($tdib, "bmBitsPixel")
				Switch $ainfo[7]
					Case 16, 24
					Case 32
						If NOT _winapi_isalphabitmap($ainfo[5]) Then
							If NOT $atemp[$iindex] Then
								$aicon[$iindex] = _winapi_create32bithicon($aicon[$iindex])
								$atemp[$iindex] = $aicon[$iindex]
								If NOT @error Then
									ContinueLoop
								Else
									ContinueCase
								EndIf
							EndIf
						Else
							If ($ainfo[1] >= 256 * 256 * 4) AND ($bcompress) Then
								$ibytes = _winapi_compressbitmapbits($ainfo[5], $pdata)
								If NOT @error Then
									$ainfo[0] = 0
									$ainfo[1] = $ibytes
									$ainfo[2] = 0
									$ainfo[3] = $pdata
									$ainfo[6] = 0
								EndIf
							EndIf
						EndIf
					Case Else
						$ierror = 60
				EndSwitch
				If $ierror Then
				Else
					Local $asize[2]
					Local $tdata = DllStructCreate("byte Width;byte Height;byte ColorCount;byte Reserved;ushort Planes;ushort BitCount;long Size;long Offset", DllStructGetPtr($tico) + 6 + 16 * $iindex)
					DllStructSetData($tdata, "ColorCount", 0)
					DllStructSetData($tdata, "Reserved", 0)
					DllStructSetData($tdata, "Planes", 1)
					DllStructSetData($tdata, "BitCount", $ainfo[7])
					DllStructSetData($tdata, "Size", $ainfo[0] + $ainfo[1] + $ainfo[6])
					DllStructSetData($tdata, "Offset", $ioffset)
					For $i = 0 To 1
						$asize[$i] = DllStructGetData($tdib, $i + 2)
						If $asize[$i] < 256 Then
							DllStructSetData($tdata, $i + 1, $asize[$i])
						Else
							DllStructSetData($tdata, $i + 1, 0)
						EndIf
					Next
					DllStructSetData($tbi, "biWidth", $asize[0])
					DllStructSetData($tbi, "biHeight", 2 * $asize[1])
					DllStructSetData($tbi, "biBitCount", $ainfo[7])
					DllStructSetData($tbi, "biCompression", 0)
					DllStructSetData($tbi, "biSizeImage", $ainfo[0] + $ainfo[1])
					$ioffset += $ainfo[0] + $ainfo[1] + $ainfo[6]
					Do
						If $ainfo[6] Then
							If NOT _winapi_writefile($hfile, $tbi, $ainfo[6], $ibytes) Then
								$ierror = @error + 70
								ExitLoop
							EndIf
							For $i = 1 To 0 Step -1
								If NOT _winapi_writefile($hfile, $ainfo[$i + 2], $ainfo[$i], $ibytes) Then
									$ierror = @error + 80
									ExitLoop 2
								EndIf
							Next
						Else
							If NOT _winapi_writefile($hfile, $ainfo[3], $ainfo[1], $ibytes) Then
								$ierror = @error + 90
								ExitLoop
							EndIf
						EndIf
					Until 1
				EndIf
				For $i = 4 To 5
					_winapi_deleteobject($ainfo[$i])
				Next
				If $ierror Then
					ExitLoop 2
				EndIf
				$iindex += 1
			WEnd
			$aret = DllCall("kernel32.dll", "bool", "SetFilePointerEx", "handle", $hfile, "int64", 0, "int64*", 0, "dword", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 100
				ExitLoop
			EndIf
			If NOT _winapi_writefile($hfile, $tico, $ilength, $ibytes) Then
				$ierror = @error + 110
				ExitLoop
			EndIf
			$iresult = 1
		Until 1
		For $i = 0 To $icount - 1
			If $atemp[$i] Then
				_winapi_destroyicon($atemp[$i])
			EndIf
		Next
		If $pdata Then
			__heapfree($pdata)
		EndIf
		_winapi_closehandle($hfile)
		If NOT $iresult Then
			FileDelete($sfilepath)
		EndIf
		Return SetError($ierror, 0, $iresult)
	EndFunc

	Func _winapi_scalewindowext($hdc, $ixnum, $ixdenom, $iynum, $iydenom)
		$__g_vext = DllStructCreate($tagsize)
		Local $aret = DllCall("gdi32.dll", "bool", "ScaleWindowExtEx", "handle", $hdc, "int", $ixnum, "int", $ixdenom, "int", $iynum, "int", $iydenom, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_selectclippath($hdc, $imode = 5)
		Local $aret = DllCall("gdi32.dll", "bool", "SelectClipPath", "handle", $hdc, "int", $imode)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_selectcliprgn($hdc, $hrgn)
		Local $aret = DllCall("gdi32.dll", "int", "SelectClipRgn", "handle", $hdc, "handle", $hrgn)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setarcdirection($hdc, $idirection)
		Local $aret = DllCall("gdi32.dll", "int", "SetArcDirection", "handle", $hdc, "int", $idirection)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setbitmapbits($hbitmap, $isize, $pbits)
		Local $aret = DllCall("gdi32.dll", "long", "SetBitmapBits", "handle", $hbitmap, "dword", $isize, "struct*", $pbits)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setbitmapdimensionex($hbitmap, $iwidth, $iheight)
		$__g_vext = DllStructCreate($tagsize)
		Local $aret = DllCall("gdi32.dll", "bool", "SetBitmapDimensionEx", "handle", $hbitmap, "int", $iwidth, "int", $iheight, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setboundsrect($hdc, $iflags, $trect = 0)
		Local $aret = DllCall("gdi32.dll", "uint", "SetBoundsRect", "handle", $hdc, "struct*", $trect, "uint", $iflags)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setbrushorg($hdc, $ix, $iy)
		$__g_vext = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "SetBrushOrgEx", "handle", $hdc, "int", $ix, "int", $iy, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setcoloradjustment($hdc, $tadjustment)
		Local $aret = DllCall("gdi32.dll", "bool", "SetColorAdjustment", "handle", $hdc, "struct*", $tadjustment)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setdcbrushcolor($hdc, $irgb)
		Local $aret = DllCall("gdi32.dll", "dword", "SetDCBrushColor", "handle", $hdc, "dword", __rgb($irgb))
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_setdcpencolor($hdc, $irgb)
		Local $aret = DllCall("gdi32.dll", "dword", "SetDCPenColor", "handle", $hdc, "dword", __rgb($irgb))
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_setdevicegammaramp($hdc, Const ByRef $aramp)
		If (UBound($aramp, $ubound_dimensions) <> 2) OR (UBound($aramp, $ubound_rows) <> 256) OR (UBound($aramp, $ubound_columns) <> 3) Then
			Return SetError(12, 0, 0)
		EndIf
		Local $tdata = DllStructCreate("ushort[256];ushort[256];ushort[256]")
		For $i = 0 To 2
			For $j = 0 To 255
				DllStructSetData($tdata, $i + 1, $aramp[$j][$i], $j + 1)
			Next
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "SetDeviceGammaRamp", "handle", $hdc, "struct*", $tdata)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setdibcolortable($hbitmap, $tcolortable, $icolorcount)
		If $icolorcount > DllStructGetSize($tcolortable) / 4 Then Return SetError(1, 0, 0)
		Local $hdc = _winapi_createcompatibledc(0)
		Local $hsv = _winapi_selectobject($hdc, $hbitmap)
		Local $ierror = 0
		Local $aret = DllCall("gdi32.dll", "uint", "SetDIBColorTable", "handle", $hdc, "uint", 0, "uint", $icolorcount, "struct*", $tcolortable)
		If @error Then $ierror = @error
		_winapi_selectobject($hdc, $hsv)
		_winapi_deletedc($hdc)
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setdibitstodevice($hdc, $ixdest, $iydest, $iwidth, $iheight, $ixsrc, $iysrc, $istartscan, $iscanlines, $tbitmapinfo, $iusage, $pbits)
		Local $aret = DllCall("gdi32.dll", "int", "SetDIBitsToDevice", "handle", $hdc, "int", $ixdest, "int", $iydest, "dword", $iwidth, "dword", $iheight, "int", $ixsrc, "int", $iysrc, "uint", $istartscan, "uint", $iscanlines, "struct*", $pbits, "struct*", $tbitmapinfo, "uint", $iusage)
		If @error OR ($aret[0] = -1) Then Return SetError(@error + 10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setenhmetafilebits($pdata, $ilength)
		Local $aret = DllCall("gdi32.dll", "handle", "SetEnhMetaFileBits", "uint", $ilength, "struct*", $pdata)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setgraphicsmode($hdc, $imode)
		Local $aret = DllCall("gdi32.dll", "int", "SetGraphicsMode", "handle", $hdc, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setmapmode($hdc, $imode)
		Local $aret = DllCall("gdi32.dll", "int", "SetMapMode", "handle", $hdc, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setpixel($hdc, $ix, $iy, $irgb)
		Local $aret = DllCall("gdi32.dll", "bool", "SetPixelV", "handle", $hdc, "int", $ix, "int", $iy, "dword", __rgb($irgb))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setpolyfillmode($hdc, $imode = 1)
		Local $aret = DllCall("gdi32.dll", "int", "SetPolyFillMode", "handle", $hdc, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setrectrgn($hrgn, $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "SetRectRgn", "handle", $hrgn, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setrop2($hdc, $imode)
		Local $aret = DllCall("gdi32.dll", "int", "SetROP2", "handle", $hdc, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setstretchbltmode($hdc, $imode)
		Local $aret = DllCall("gdi32.dll", "int", "SetStretchBltMode", "handle", $hdc, "int", $imode)
		If @error OR NOT $aret[0] OR ($aret[0] = 87) Then Return SetError(@error + 10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_settextalign($hdc, $imode = 0)
		Local $aret = DllCall("gdi32.dll", "uint", "SetTextAlign", "handle", $hdc, "uint", $imode)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_settextcharacterextra($hdc, $icharextra)
		Local $aret = DllCall("gdi32.dll", "int", "SetTextCharacterExtra", "handle", $hdc, "int", $icharextra)
		If @error OR ($aret[0] = -2147483648) Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_settextjustification($hdc, $ibreakextra, $ibreakcount)
		Local $aret = DllCall("gdi32.dll", "bool", "SetTextJustification", "handle", $hdc, "int", $ibreakextra, "int", $ibreakcount)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setudfcolormode($imode)
		$__g_irgbmode = NOT ($imode = 0)
	EndFunc

	Func _winapi_setwindowext($hdc, $ixextent, $iyextent)
		$__g_vext = DllStructCreate($tagsize)
		Local $aret = DllCall("gdi32.dll", "bool", "SetWindowExtEx", "handle", $hdc, "int", $ixextent, "int", $iyextent, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setwindoworg($hdc, $ix, $iy)
		$__g_vext = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "SetWindowOrgEx", "handle", $hdc, "int", $ix, "int", $iy, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setworldtransform($hdc, ByRef $txform)
		Local $aret = DllCall("gdi32.dll", "bool", "SetWorldTransform", "handle", $hdc, "struct*", $txform)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_stretchblt($hdestdc, $ixdest, $iydest, $iwidthdest, $iheightdest, $hsrcdc, $ixsrc, $iysrc, $iwidthsrc, $iheightsrc, $irop)
		Local $aret = DllCall("gdi32.dll", "bool", "StretchBlt", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidthdest, "int", $iheightdest, "hwnd", $hsrcdc, "int", $ixsrc, "int", $iysrc, "int", $iwidthsrc, "int", $iheightsrc, "dword", $irop)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_stretchdibits($hdestdc, $ixdest, $iydest, $iwidthdest, $iheightdest, $ixsrc, $iysrc, $iwidthsrc, $iheightsrc, $tbitmapinfo, $iusage, $pbits, $irop)
		Local $aret = DllCall("gdi32.dll", "int", "StretchDIBits", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidthdest, "int", $iheightdest, "int", $ixsrc, "int", $iysrc, "int", $iwidthsrc, "int", $iheightsrc, "struct*", $pbits, "struct*", $tbitmapinfo, "uint", $iusage, "dword", $irop)
		If @error OR ($aret[0] = -1) Then Return SetError(@error + 10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_strokeandfillpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "StrokeAndFillPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_strokepath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "StrokePath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_subtractrect(ByRef $trect1, ByRef $trect2)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "SubtractRect", "struct*", $trect, "struct*", $trect1, "struct*", $trect2)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $trect
	EndFunc

	Func _winapi_tabbedtextout($hdc, $ix, $iy, $stext, $atab = 0, $istart = 0, $iend = -1, $iorigin = 0)
		Local $itab, $icount
		If NOT IsArray($atab) Then
			If $atab Then
				$itab = $atab
				Dim $atab[1] = [$itab]
				$istart = 0
				$iend = 0
				$icount = 1
			Else
				$icount = 0
			EndIf
		Else
			$icount = 1
		EndIf
		Local $ttab = 0
		If $icount Then
			If __checkerrorarraybounds($atab, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			$icount = $iend - $istart + 1
			$ttab = DllStructCreate("uint[" & $icount & "]")
			$itab = 1
			For $i = $istart To $iend
				DllStructSetData($ttab, 1, $atab[$i], $itab)
				$itab += 1
			Next
		EndIf
		Local $aret = DllCall("user32.dll", "long", "TabbedTextOutW", "handle", $hdc, "int", $ix, "int", $iy, "wstr", $stext, "int", StringLen($stext), "int", $icount, "struct*", $ttab, "int", $iorigin)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		$__g_vext = _winapi_createsize(_winapi_loword($aret[0]), _winapi_hiword($aret[0]))
		Return 1
	EndFunc

	Func _winapi_textout($hdc, $ix, $iy, $stext)
		Local $aret = DllCall("gdi32.dll", "bool", "TextOutW", "handle", $hdc, "int", $ix, "int", $iy, "wstr", $stext, "int", StringLen($stext))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_transparentblt($hdestdc, $ixdest, $iydest, $iwidthdest, $iheightdest, $hsrcdc, $ixsrc, $iysrc, $iwidthsrc, $iheightsrc, $irgb)
		Local $aret = DllCall("gdi32.dll", "bool", "GdiTransparentBlt", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidthdest, "int", $iheightdest, "hwnd", $hsrcdc, "int", $ixsrc, "int", $iysrc, "int", $iwidthsrc, "int", $iheightsrc, "dword", __rgb($irgb))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_unionrect(ByRef $trect1, ByRef $trect2)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "UnionRect", "struct*", $trect, "struct*", $trect1, "struct*", $trect2)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, 0, 0)
		Return $trect
	EndFunc

	Func _winapi_validaterect($hwnd, $trect = 0)
		Local $aret = DllCall("user32.dll", "bool", "ValidateRect", "hwnd", $hwnd, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_validatergn($hwnd, $hrgn = 0)
		Local $aret = DllCall("user32.dll", "bool", "ValidateRgn", "hwnd", $hwnd, "handle", $hrgn)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_widenpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "WidenPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_windowfromdc($hdc)
		Local $aret = DllCall("user32.dll", "hwnd", "WindowFromDC", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

#EndRegion Public Functions
#Region Embedded DLL Functions

	Func __alphaproc()
		Static $pproc = 0
		If NOT $pproc Then
			If @AutoItX64 Then
				$pproc = __init(Binary("0x48894C240848895424104C894424184C894C24205541574831C050504883EC28" & "48837C24600074054831C0EB0748C7C0010000004821C0751F488B6C24604883" & "7D180074054831C0EB0748C7C0010000004821C07502EB0948C7C001000000EB" & "034831C04821C0740C48C7C0FFFFFFFF4863C0EB6F48C744242800000000488B" & "6C24604C637D04488B6C2460486345084C0FAFF849C1E7024983C7FC4C3B7C24" & "287C36488B6C24604C8B7D184C037C24284983C7034C897C2430488B6C243080" & "7D0000740C48C7C0010000004863C0EB1348834424280471A54831C04863C0EB" & "034831C04883C438415F5DC3"))
			Else
				$pproc = __init(Binary("0x555331C05050837C241C00740431C0EB05B80100000021C075198B6C241C837D" & "1400740431C0EB05B80100000021C07502EB07B801000000EB0231C021C07407" & "B8FFFFFFFFEB4FC70424000000008B6C241C8B5D048B6C241C0FAF5D08C1E302" & "83C3FC3B1C247C288B6C241C8B5D14031C2483C303895C24048B6C2404807D00" & "007407B801000000EB0C8304240471BE31C0EB0231C083C4085B5DC21000"))
			EndIf
		EndIf
		Return $pproc
	EndFunc

	Func __andproc()
		Static $pproc = 0
		If NOT $pproc Then
			If @AutoItX64 Then
				$pproc = __init(Binary("0x48894C240848895424104C894424184C894C2420554157415648C7C009000000" & "4883EC0848C704240000000048FFC875EF4883EC284883BC24A0000000007405" & "4831C0EB0748C7C0010000004821C00F85840000004883BC24A8000000007405" & "4831C0EB0748C7C0010000004821C07555488BAC24A000000048837D18007405" & "4831C0EB0748C7C0010000004821C07522488BAC24A800000048837D18007405" & "4831C0EB0748C7C0010000004821C07502EB0948C7C001000000EB034831C048" & "21C07502EB0948C7C001000000EB034831C04821C07502EB0948C7C001000000" & "EB034831C04821C0740B4831C04863C0E9D701000048C74424280000000048C7" & "44243000000000488BAC24A00000004C637D0849FFCF4C3B7C24300F8C9C0100" & "0048C74424380000000048C74424400000000048C744244800000000488BAC24" & "A00000004C637D0449FFCF4C3B7C24480F8CDB000000488BAC24A00000004C8B" & "7D184C037C24284983C7034C897C2450488B6C2450807D000074264C8B7C2440" & "4C8B74243849F7DE4983C61F4C89F148C7C00100000048D3E04909C74C897C24" & "4048FF4424384C8B7C24384983FF1F7E6F4C8B7C244049F7D74C897C244048C7" & "442458180000004831C0483B4424587F3D488BAC24A80000004C8B7D184C037C" & "24604C897C24504C8B7C2440488B4C245849D3FF4C89F850488B6C2458588845" & "0048FF4424604883442458F871B948C74424380000000048C744244000000000" & "48834424280448FF4424480F810BFFFFFF48837C24380074794C8B7C244049F7" & "D74C8B74243849F7DE4983C6204C89F148C7C0FFFFFFFF48D3E04921C74C897C" & "244048C7442458180000004831C0483B4424587F3D488BAC24A80000004C8B7D" & "184C037C24604C897C24504C8B7C2440488B4C245849D3FF4C89F850488B6C24" & "585888450048FF4424604883442458F871B948FF4424300F814AFEFFFF48C7C0" & "010000004863C0EB034831C04883C470415E415F5DC3"))
			Else
				$pproc = __init(Binary("0x555357BA0800000083EC04C70424000000004A75F3837C243800740431C0EB05" & "B80100000021C07562837C243C00740431C0EB05B80100000021C0753F8B6C24" & "38837D1400740431C0EB05B80100000021C075198B6C243C837D1400740431C0" & "EB05B80100000021C07502EB07B801000000EB0231C021C07502EB07B8010000" & "00EB0231C021C07502EB07B801000000EB0231C021C0740731C0E969010000C7" & "042400000000C7442404000000008B6C24388B5D084B3B5C24040F8C3F010000" & "C744240800000000C744240C00000000C7442410000000008B6C24388B5D044B" & "3B5C24100F8CA90000008B6C24388B5D14031C2483C303895C24148B6C241480" & "7D0000741C8B5C240C8B7C2408F7DF83C71F89F9B801000000D3E009C3895C24" & "0CFF4424088B5C240883FB1F7E578B5C240CF7D3895C240CC744241818000000" & "31C03B4424187F2D8B6C243C8B5D14035C241C895C24148B5C240C8B4C2418D3" & "FB538B6C241858884500FF44241C83442418F871CBC744240800000000C74424" & "0C0000000083042404FF4424100F8145FFFFFF837C240800745B8B5C240CF7D3" & "8B7C2408F7DF83C72089F9B8FFFFFFFFD3E021C3895C240CC744241818000000" & "31C03B4424187F2D8B6C243C8B5D14035C241C895C24148B5C240C8B4C2418D3" & "FB538B6C241858884500FF44241C83442418F871CBFF4424040F81AFFEFFFFB8" & "01000000EB0231C083C4205F5B5DC21000"))
			EndIf
		EndIf
		Return $pproc
	EndFunc

	Func __xorproc()
		Static $pproc = 0
		If NOT $pproc Then
			If @AutoItX64 Then
				$pproc = __init(Binary("0x48894C240848895424104C894424184C894C24205541574831C050504883EC28" & "48837C24600074054831C0EB0748C7C0010000004821C0751B48837C24680074" & "054831C0EB0748C7C0010000004821C07502EB0948C7C001000000EB034831C0" & "4821C074084831C04863C0EB7748C7442428000000004C637C24584983C7FC4C" & "3B7C24287C4F4C8B7C24604C037C24284C897C2430488B6C2430807D00007405" & "4831C0EB0748C7C0010000004821C0741C4C8B7C24684C037C24284983C7034C" & "897C2430488B6C2430C64500FF48834424280471A148C7C0010000004863C0EB" & "034831C04883C438415F5DC3"))
			Else
				$pproc = __init(Binary("0x555331C05050837C241C00740431C0EB05B80100000021C07516837C24200074" & "0431C0EB05B80100000021C07502EB07B801000000EB0231C021C0740431C0EB" & "5AC70424000000008B5C241883C3FC3B1C247C3E8B5C241C031C24895C24048B" & "6C2404807D0000740431C0EB05B80100000021C074168B5C2420031C2483C303" & "895C24048B6C2404C64500FF8304240471B6B801000000EB0231C083C4085B5D" & "C21000"))
			EndIf
		EndIf
		Return $pproc
	EndFunc

#EndRegion Embedded DLL Functions
#Region Internal Functions

	Func __enumdisplaymonitorsproc($hmonitor, $hdc, $prect, $lparam)
		#forceref $hDC, $lParam
		__inc($__g_venum)
		$__g_venum[$__g_venum[0][0]][0] = $hmonitor
		If NOT $prect Then
			$__g_venum[$__g_venum[0][0]][1] = 0
		Else
			$__g_venum[$__g_venum[0][0]][1] = DllStructCreate($tagrect)
			If NOT _winapi_movememory(DllStructGetPtr($__g_venum[$__g_venum[0][0]][1]), $prect, 16) Then Return 0
		EndIf
		Return 1
	EndFunc

	Func __enumfontfamiliesproc($pelfex, $pntmex, $ifonttype, $ppattern)
		Local $telfex = DllStructCreate($taglogfont & ";wchar FullName[64];wchar Style[32];wchar Script[32]", $pelfex)
		Local $tntmex = DllStructCreate($tagnewtextmetricex, $pntmex)
		Local $tpattern = DllStructCreate("uint;uint;ptr", $ppattern)
		If $ifonttype AND NOT BitAND($ifonttype, DllStructGetData($tpattern, 1)) Then
			Return 1
		EndIf
		If DllStructGetData($tpattern, 3) Then
			Local $aret = DllCall("shlwapi.dll", "bool", "PathMatchSpecW", "ptr", DllStructGetPtr($telfex, 14), "ptr", DllStructGetData($tpattern, 3))
			If NOT @error Then
				If DllStructGetData($tpattern, 2) Then
					If $aret[0] Then
						Return 1
					Else
					EndIf
				Else
					If $aret[0] Then
					Else
						Return 1
					EndIf
				EndIf
			EndIf
		EndIf
		__inc($__g_venum)
		$__g_venum[$__g_venum[0][0]][0] = DllStructGetData($telfex, 14)
		$__g_venum[$__g_venum[0][0]][1] = DllStructGetData($telfex, 16)
		$__g_venum[$__g_venum[0][0]][2] = DllStructGetData($telfex, 15)
		$__g_venum[$__g_venum[0][0]][3] = DllStructGetData($telfex, 17)
		$__g_venum[$__g_venum[0][0]][4] = $ifonttype
		$__g_venum[$__g_venum[0][0]][5] = DllStructGetData($tntmex, 19)
		$__g_venum[$__g_venum[0][0]][6] = DllStructGetData($tntmex, 20)
		$__g_venum[$__g_venum[0][0]][7] = DllStructGetData($tntmex, 21)
		Return 1
	EndFunc

	Func __enumfontstylesproc($pelfex, $pntmex, $ifonttype, $pfn)
		#forceref $iFontType
		Local $telfex = DllStructCreate($taglogfont & ";wchar FullName[64];wchar Style[32];wchar Script[32]", $pelfex)
		Local $tntmex = DllStructCreate($tagnewtextmetricex, $pntmex)
		Local $tfn = DllStructCreate("dword;wchar[64]", $pfn)
		If BitAND(DllStructGetData($tntmex, "ntmFlags"), 97) = DllStructGetData($tfn, 1) Then
			DllStructSetData($tfn, 2, DllStructGetData($telfex, "FullName"))
			Return 0
		Else
			Return 1
		EndIf
	EndFunc

#EndRegion Internal Functions
Global Const $linguistic_ignorecase = 16
Global Const $linguistic_ignorediacritic = 32
Global Const $norm_ignorecase = 1
Global Const $norm_ignorekanatype = 65536
Global Const $norm_ignorenonspace = 2
Global Const $norm_ignoresymbols = 4
Global Const $norm_ignorewidth = 131072
Global Const $norm_linguistic_casing = 134217728
Global Const $sort_digitsasnumbers = 8
Global Const $sort_stringsort = 4096
Global Const $cstr_less_than = 1
Global Const $cstr_equal = 2
Global Const $cstr_greater_than = 3
Global Const $mui_language_id = 4
Global Const $mui_language_name = 8
Global Const $date_autolayout = 64
Global Const $date_longdate = 2
Global Const $date_ltrreading = 16
Global Const $date_shortdate = 1
Global Const $date_rtlreading = 32
Global Const $date_use_alt_calendar = 4
Global Const $date_yearmonth = 8
Global Const $geo_nation = 1
Global Const $geo_latitude = 2
Global Const $geo_longitude = 3
Global Const $geo_iso2 = 4
Global Const $geo_iso3 = 5
Global Const $geo_rfc1766 = 6
Global Const $geo_lcid = 7
Global Const $geo_friendlyname = 8
Global Const $geo_officialname = 9
Global Const $geo_timezones = 10
Global Const $geo_officiallanguages = 11
Global Const $geo_iso_un_number = 12
Global Const $geo_parent = 13
Global Const $locale_ilanguage = 1
Global Const $locale_slanguage = 2
Global Const $locale_senglanguage = 4097
Global Const $locale_sabbrevlangname = 3
Global Const $locale_snativelangname = 4
Global Const $locale_icountry = 5
Global Const $locale_scountry = 6
Global Const $locale_sengcountry = 4098
Global Const $locale_sabbrevctryname = 7
Global Const $locale_snativectryname = 8
Global Const $locale_idefaultlanguage = 9
Global Const $locale_idefaultcountry = 10
Global Const $locale_idefaultcodepage = 11
Global Const $locale_idefaultansicodepage = 4100
Global Const $locale_idefaultmaccodepage = 4113
Global Const $locale_slist = 12
Global Const $locale_imeasure = 13
Global Const $locale_sdecimal = 14
Global Const $locale_sthousand = 15
Global Const $locale_sgrouping = 16
Global Const $locale_idigits = 17
Global Const $locale_ilzero = 18
Global Const $locale_inegnumber = 4112
Global Const $locale_snativedigits = 19
Global Const $locale_scurrency = 20
Global Const $locale_sintlsymbol = 21
Global Const $locale_smondecimalsep = 22
Global Const $locale_smonthousandsep = 23
Global Const $locale_smongrouping = 24
Global Const $locale_icurrdigits = 25
Global Const $locale_iintlcurrdigits = 26
Global Const $locale_icurrency = 27
Global Const $locale_inegcurr = 28
Global Const $locale_sdate = 29
Global Const $locale_stime = 30
Global Const $locale_sshortdate = 31
Global Const $locale_slongdate = 32
Global Const $locale_stimeformat = 4099
Global Const $locale_idate = 33
Global Const $locale_ildate = 34
Global Const $locale_itime = 35
Global Const $locale_itimemarkposn = 4101
Global Const $locale_icentury = 36
Global Const $locale_itlzero = 37
Global Const $locale_idaylzero = 38
Global Const $locale_imonlzero = 39
Global Const $locale_s1159 = 40
Global Const $locale_s2359 = 41
Global Const $locale_icalendartype = 4105
Global Const $locale_ioptionalcalendar = 4107
Global Const $locale_ifirstdayofweek = 4108
Global Const $locale_ifirstweekofyear = 4109
Global Const $locale_sdayname1 = 42
Global Const $locale_sdayname2 = 43
Global Const $locale_sdayname3 = 44
Global Const $locale_sdayname4 = 45
Global Const $locale_sdayname5 = 46
Global Const $locale_sdayname6 = 47
Global Const $locale_sdayname7 = 48
Global Const $locale_sabbrevdayname1 = 49
Global Const $locale_sabbrevdayname2 = 50
Global Const $locale_sabbrevdayname3 = 51
Global Const $locale_sabbrevdayname4 = 52
Global Const $locale_sabbrevdayname5 = 53
Global Const $locale_sabbrevdayname6 = 54
Global Const $locale_sabbrevdayname7 = 55
Global Const $locale_smonthname1 = 56
Global Const $locale_smonthname2 = 57
Global Const $locale_smonthname3 = 58
Global Const $locale_smonthname4 = 59
Global Const $locale_smonthname5 = 60
Global Const $locale_smonthname6 = 61
Global Const $locale_smonthname7 = 62
Global Const $locale_smonthname8 = 63
Global Const $locale_smonthname9 = 64
Global Const $locale_smonthname10 = 65
Global Const $locale_smonthname11 = 66
Global Const $locale_smonthname12 = 67
Global Const $locale_smonthname13 = 4110
Global Const $locale_sabbrevmonthname1 = 68
Global Const $locale_sabbrevmonthname2 = 69
Global Const $locale_sabbrevmonthname3 = 70
Global Const $locale_sabbrevmonthname4 = 71
Global Const $locale_sabbrevmonthname5 = 72
Global Const $locale_sabbrevmonthname6 = 73
Global Const $locale_sabbrevmonthname7 = 74
Global Const $locale_sabbrevmonthname8 = 75
Global Const $locale_sabbrevmonthname9 = 76
Global Const $locale_sabbrevmonthname10 = 77
Global Const $locale_sabbrevmonthname11 = 78
Global Const $locale_sabbrevmonthname12 = 79
Global Const $locale_sabbrevmonthname13 = 4111
Global Const $locale_spositivesign = 80
Global Const $locale_snegativesign = 81
Global Const $locale_ipossignposn = 82
Global Const $locale_inegsignposn = 83
Global Const $locale_ipossymprecedes = 84
Global Const $locale_ipossepbyspace = 85
Global Const $locale_inegsymprecedes = 86
Global Const $locale_inegsepbyspace = 87
Global Const $locale_fontsignature = 88
Global Const $locale_siso639langname = 89
Global Const $locale_siso3166ctryname = 90
Global Const $locale_idefaultebcdiccodepage = 4114
Global Const $locale_ipapersize = 4106
Global Const $locale_sengcurrname = 4103
Global Const $locale_snativecurrname = 4104
Global Const $locale_syearmonth = 4102
Global Const $locale_ssortname = 4115
Global Const $locale_idigitsubstitution = 4116
Global Const $locale_custom_default = 3072
Global Const $locale_custom_ui_default = 5120
Global Const $locale_custom_unspecified = 4096
Global Const $locale_invariant = 127
Global Const $locale_system_default = 2048
Global Const $locale_user_default = 1024
Global Const $time_force24hourformat = 8
Global Const $time_nominutesorseconds = 1
Global Const $time_noseconds = 2
Global Const $time_notimemarker = 4
Global Const $lcid_installed = 1
Global Const $lcid_supported = 2
#Region Global Variables and Constants
	Global Const $tagnumberfmt = "uint NumDigits;uint LeadingZero;uint Grouping;ptr DecimalSep;ptr ThousandSep;uint NegativeOrder"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_comparestring($ilcid, $sstring1, $sstring2, $iflags = 0)
		Local $aret = DllCall("kernel32.dll", "int", "CompareStringW", "dword", $ilcid, "dword", $iflags, "wstr", $sstring1, "int", -1, "wstr", $sstring2, "int", -1)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createnumberformatinfo($inumdigits, $ileadingzero, $igrouping, $sdecimalsep, $sthousandsep, $inegativeorder)
		Local $tfmt = DllStructCreate($tagnumberfmt & ";wchar[" & (StringLen($sdecimalsep) + 1) & "];wchar[" & (StringLen($sthousandsep) + 1) & "]")
		DllStructSetData($tfmt, 1, $inumdigits)
		DllStructSetData($tfmt, 2, $ileadingzero)
		DllStructSetData($tfmt, 3, $igrouping)
		DllStructSetData($tfmt, 4, DllStructGetPtr($tfmt, 7))
		DllStructSetData($tfmt, 5, DllStructGetPtr($tfmt, 8))
		DllStructSetData($tfmt, 6, $inegativeorder)
		DllStructSetData($tfmt, 7, $sdecimalsep)
		DllStructSetData($tfmt, 8, $sthousandsep)
		Return $tfmt
	EndFunc

	Func _winapi_enumsystemgeoid()
		Local $henumproc = DllCallbackRegister("__EnumGeoIDProc", "bool", "long")
		Dim $__g_venum[101] = [0]
		Local $aret = DllCall("kernel32.dll", "bool", "EnumSystemGeoID", "dword", 16, "long", 0, "ptr", DllCallbackGetPtr($henumproc))
		If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumsystemlocales($iflag)
		Local $henumproc = DllCallbackRegister("__EnumLocalesProc", "bool", "ptr")
		Dim $__g_venum[101] = [0]
		Local $aret = DllCall("kernel32.dll", "bool", "EnumSystemLocalesW", "ptr", DllCallbackGetPtr($henumproc), "dword", $iflag)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumuilanguages($iflag = 0)
		Local $henumproc = DllCallbackRegister("__EnumUILanguagesProc", "bool", "ptr;long_ptr")
		Local $iid = 1
		If $__winver >= 1536 Then
			If BitAND($iflag, 8) Then
				$iid = 0
			EndIf
		Else
			$iflag = 0
		EndIf
		Dim $__g_venum[101] = [0]
		Local $aret = DllCall("kernel32.dll", "bool", "EnumUILanguagesW", "ptr", DllCallbackGetPtr($henumproc), "dword", $iflag, "long_ptr", $iid)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_getdateformat($ilcid = 0, $tsystemtime = 0, $iflags = 0, $sformat = "")
		If NOT $ilcid Then $ilcid = 1024
		Local $stypeofformat = "wstr"
		If NOT StringStripWS($sformat, $str_stripleading + $str_striptrailing) Then
			$stypeofformat = "ptr"
			$sformat = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "int", "GetDateFormatW", "dword", $ilcid, "dword", $iflags, "struct*", $tsystemtime, $stypeofformat, $sformat, "wstr", "", "int", 2048)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[5]
	EndFunc

	Func _winapi_getdurationformat($ilcid, $iduration, $sformat = "")
		If NOT $ilcid Then $ilcid = 1024
		Local $pst, $ival
		If IsDllStruct($iduration) Then
			$pst = DllStructGetPtr($iduration)
			$ival = 0
		Else
			$pst = 0
			$ival = $iduration
		EndIf
		Local $stypeofformat = "wstr"
		If NOT StringStripWS($sformat, $str_stripleading + $str_striptrailing) Then
			$stypeofformat = "ptr"
			$sformat = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "int", "GetDurationFormat", "dword", $ilcid, "dword", 0, "ptr", $pst, "uint64", $ival, $stypeofformat, $sformat, "wstr", "", "int", 2048)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[6]
	EndFunc

	Func _winapi_getgeoinfo($igeoid, $itype, $ilanguage = 0)
		Local $aret = DllCall("kernel32.dll", "int", "GetGeoInfoW", "long", $igeoid, "dword", $itype, "wstr", "", "int", 4096, "word", $ilanguage)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[3]
	EndFunc

	Func _winapi_getlocaleinfo($ilcid, $itype)
		Local $aret = DllCall("kernel32.dll", "int", "GetLocaleInfoW", "dword", $ilcid, "dword", $itype, "wstr", "", "int", 2048)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[3]
	EndFunc

	Func _winapi_getnumberformat($ilcid, $snumber, $tnumberfmt = 0)
		If NOT $ilcid Then $ilcid = 1024
		Local $aret = DllCall("kernel32.dll", "int", "GetNumberFormatW", "dword", $ilcid, "dword", 0, "wstr", $snumber, "struct*", $tnumberfmt, "wstr", "", "int", 2048)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[5]
	EndFunc

	Func _winapi_getsystemdefaultlangid()
		Local $aret = DllCall("kernel32.dll", "word", "GetSystemDefaultLangID")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getsystemdefaultlcid()
		Local $aret = DllCall("kernel32.dll", "dword", "GetSystemDefaultLCID")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getsystemdefaultuilanguage()
		Local $aret = DllCall("kernel32.dll", "word", "GetSystemDefaultUILanguage")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthreadlocale()
		Local $aret = DllCall("kernel32.dll", "dword", "GetThreadLocale")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthreaduilanguage()
		Local $aret = DllCall("kernel32.dll", "word", "GetThreadUILanguage")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_gettimeformat($ilcid = 0, $tsystemtime = 0, $iflags = 0, $sformat = "")
		If NOT $ilcid Then $ilcid = 1024
		Local $stypeofformat = "wstr"
		If NOT StringStripWS($sformat, $str_stripleading + $str_striptrailing) Then
			$stypeofformat = "ptr"
			$sformat = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "int", "GetTimeFormatW", "dword", $ilcid, "dword", $iflags, "struct*", $tsystemtime, $stypeofformat, $sformat, "wstr", "", "int", 2048)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[5]
	EndFunc

	Func _winapi_getuserdefaultlangid()
		Local $aret = DllCall("kernel32.dll", "word", "GetUserDefaultLangID")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getuserdefaultlcid()
		Local $aret = DllCall("kernel32.dll", "dword", "GetUserDefaultLCID")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getuserdefaultuilanguage()
		Local $aret = DllCall("kernel32.dll", "word", "GetUserDefaultUILanguage")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getusergeoid()
		Local $aret = DllCall("kernel32.dll", "long", "GetUserGeoID", "uint", 16)
		If @error Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_isvalidlocale($ilcid, $iflag = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "IsValidLocale", "dword", $ilcid, "dword", $iflag)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setlocaleinfo($ilcid, $itype, $sdata)
		Local $aret = DllCall("kernel32.dll", "bool", "SetLocaleInfoW", "dword", $ilcid, "dword", $itype, "wstr", $sdata)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setthreadlocale($ilcid)
		Local $aret = DllCall("kernel32.dll", "bool", "SetThreadLocale", "dword", $ilcid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setthreaduilanguage($ilanguage)
		Local $aret = DllCall("kernel32.dll", "word", "SetThreadUILanguage", "word", $ilanguage)
		If @error Then Return SetError(@error, @extended, False)
		Return ($aret[0] = $aret[1])
	EndFunc

	Func _winapi_setusergeoid($igeoid)
		Local $aret = DllCall("kernel32.dll", "bool", "SetUserGeoID", "long", $igeoid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

#EndRegion Public Functions
#Region Internal Functions

	Func __enumgeoidproc($iid)
		__inc($__g_venum)
		$__g_venum[$__g_venum[0]] = $iid
		Return 1
	EndFunc

	Func __enumlocalesproc($plocale)
		__inc($__g_venum)
		$__g_venum[$__g_venum[0]] = Dec(DllStructGetData(DllStructCreate("wchar[" & (_winapi_strlen($plocale) + 1) & "]", $plocale), 1))
		Return 1
	EndFunc

	Func __enumuilanguagesproc($planguage, $iid)
		__inc($__g_venum)
		$__g_venum[$__g_venum[0]] = DllStructGetData(DllStructCreate("wchar[" & (_winapi_strlen($planguage) + 1) & "]", $planguage), 1)
		If $iid Then
			$__g_venum[$__g_venum[0]] = Dec($__g_venum[$__g_venum[0]])
		EndIf
		Return 1
	EndFunc

#EndRegion Internal Functions
Global Const $perceived_type_custom = -3
Global Const $perceived_type_unspecified = -2
Global Const $perceived_type_folder = -1
Global Const $perceived_type_unknown = 0
Global Const $perceived_type_text = 1
Global Const $perceived_type_image = 2
Global Const $perceived_type_audio = 3
Global Const $perceived_type_video = 4
Global Const $perceived_type_compressed = 5
Global Const $perceived_type_document = 6
Global Const $perceived_type_system = 7
Global Const $perceived_type_application = 8
Global Const $perceived_type_gamemedia = 9
Global Const $perceived_type_contacts = 10
Global Const $perceivedflag_undefined = 0
Global Const $perceivedflag_softcoded = 1
Global Const $perceivedflag_hardcoded = 2
Global Const $perceivedflag_nativesupport = 4
Global Const $perceivedflag_gdiplus = 16
Global Const $perceivedflag_wmsdk = 32
Global Const $perceivedflag_zipfolder = 64
Global Const $assocstr_command = 1
Global Const $assocstr_executable = 2
Global Const $assocstr_friendlydocname = 3
Global Const $assocstr_friendlyappname = 4
Global Const $assocstr_noopen = 5
Global Const $assocstr_shellnewvalue = 6
Global Const $assocstr_ddecommand = 7
Global Const $assocstr_ddeifexec = 8
Global Const $assocstr_ddeapplication = 9
Global Const $assocstr_ddetopic = 10
Global Const $assocstr_infotip = 11
Global Const $assocstr_quicktip = 12
Global Const $assocstr_tileinfo = 13
Global Const $assocstr_contenttype = 14
Global Const $assocstr_defaulticon = 15
Global Const $assocstr_shellextension = 16
Global Const $assocf_init_noremapclsid = 1
Global Const $assocf_init_byexename = 2
Global Const $assocf_open_byexename = 2
Global Const $assocf_init_defaulttostar = 4
Global Const $assocf_init_defaulttofolder = 8
Global Const $assocf_nousersettings = 16
Global Const $assocf_notruncate = 32
Global Const $assocf_verify = 64
Global Const $assocf_remaprundll = 128
Global Const $assocf_nofixups = 256
Global Const $assocf_ignorebaseclass = 512
Global Const $assocf_init_ignoreunknown = 1024
Global Const $hkey_classes_root = -2147483648
Global Const $hkey_current_config = -2147483643
Global Const $hkey_current_user = -2147483647
Global Const $hkey_local_machine = -2147483646
Global Const $hkey_performance_data = -2147483644
Global Const $hkey_performance_nlstext = -2147483552
Global Const $hkey_performance_text = -2147483568
Global Const $hkey_users = -2147483645
Global Const $key_create_link = 32
Global Const $key_create_sub_key = 4
Global Const $key_enumerate_sub_keys = 8
Global Const $key_notify = 16
Global Const $key_query_value = 1
Global Const $key_set_value = 2
Global Const $key_wow64_32key = 512
Global Const $key_wow64_64key = 256
Global Const $key_read = 131097
Global Const $key_write = 8198
Global Const $key_execute = $key_read
Global Const $key_all_access = 983103
Global Const $reg_notify_change_name = 1
Global Const $reg_notify_change_attributes = 2
Global Const $reg_notify_change_last_set = 4
Global Const $reg_notify_change_security = 8
Global Const $reg_option_backup_restore = 4
Global Const $reg_option_create_link = 2
Global Const $reg_option_non_volatile = 0
Global Const $reg_option_volatile = 1
#Region Global Variables and Constants
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_addmrustring($hmru, $sstr)
		Local $aret = DllCall("comctl32.dll", "int", "AddMRUStringW", "handle", $hmru, "wstr", $sstr)
		If @error Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_assocgetperceivedtype($sext)
		Local $aret = DllCall("shlwapi.dll", "long", "AssocGetPerceivedType", "wstr", $sext, "int*", 0, "dword*", 0, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $aresult[3]
		$aresult[0] = $aret[2]
		$aresult[1] = $aret[3]
		$aresult[2] = _winapi_getstring($aret[4])
		_winapi_cotaskmemfree($aret[4])
		Return $aresult
	EndFunc

	Func _winapi_assocquerystring($sassoc, $itype, $iflags = 0, $sextra = "")
		Local $stypeofextra = "wstr"
		If NOT StringStripWS($sextra, $str_stripleading + $str_striptrailing) Then
			$stypeofextra = "ptr"
			$sextra = 0
		EndIf
		Local $aret = DllCall("shlwapi.dll", "long", "AssocQueryStringW", "dword", $iflags, "dword", $itype, "wstr", $sassoc, $stypeofextra, $sextra, "wstr", "", "dword*", 4096)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[5]
	EndFunc

	Func _winapi_createmrulist($hkey, $ssubkey, $imax = 26)
		Local Const $tagmruinfo = "dword Size;uint Max;uint Flags;handle hKey;ptr szSubKey;ptr fnCompare"
		Local $tmruinfo = DllStructCreate($tagmruinfo & ";wchar[" & (StringLen($ssubkey) + 1) & "]")
		DllStructSetData($tmruinfo, 1, DllStructGetPtr($tmruinfo, 7) - DllStructGetPtr($tmruinfo))
		DllStructSetData($tmruinfo, 2, $imax)
		DllStructSetData($tmruinfo, 3, 0)
		DllStructSetData($tmruinfo, 4, $hkey)
		DllStructSetData($tmruinfo, 5, DllStructGetPtr($tmruinfo, 7))
		DllStructSetData($tmruinfo, 6, 0)
		DllStructSetData($tmruinfo, 7, $ssubkey)
		Local $aret = DllCall("comctl32.dll", "HANDLE", "CreateMRUListW", "struct*", $tmruinfo)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_dllinstall($sfilepath)
		Local $iret = RunWait(@SystemDir & "\regsvr32.exe /s " & $sfilepath)
		If @error OR $iret Then Return SetError(@error + ($iret + 100), @extended, 0)
		Return 1
	EndFunc

	Func _winapi_dlluninstall($sfilepath)
		Local $iret = RunWait(@SystemDir & "\regsvr32.exe /s /u " & $sfilepath)
		If @error OR $iret Then Return SetError(@error + ($iret + 100), @extended, 0)
		Return 1
	EndFunc

	Func _winapi_enummrulist($hmru, $iitem)
		Local $aret = DllCall("comctl32.dll", "int", "EnumMRUListW", "handle", $hmru, "int", $iitem, "wstr", "", "uint", 4096)
		If @error OR ($aret[0] = -1) Then Return SetError(@error + 10, @extended, 0)
		If $iitem < 0 Then
			Return $aret[0]
		Else
			If NOT $aret[0] Then Return SetError(1, 0, 0)
		EndIf
		Return $aret[3]
	EndFunc

	Func _winapi_freemrulist($hmru)
		Local $aret = DllCall("comctl32.dll", "int", "FreeMRUList", "handle", $hmru)
		If @error Then Return SetError(@error, @extended, False)
		Return ($aret[0] <> -1)
	EndFunc

	Func _winapi_getregkeynamebyhandle($hkey)
		Local $tagkey_name_information = "ulong NameLength;wchar Name[4096]"
		Local $tkni = DllStructCreate($tagkey_name_information)
		Local $aret = DllCall("ntdll.dll", "long", "ZwQueryKey", "handle", $hkey, "uint", 3, "struct*", $tkni, "ulong", DllStructGetSize($tkni), "ulong*", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Local $ilength = DllStructGetData($tkni, 1)
		If NOT $ilength Then Return SetError(12, 0, "")
		Return DllStructGetData(DllStructCreate("wchar[" & ($ilength / 2) & "]", DllStructGetPtr($tkni, 2)), 1)
	EndFunc

	Func _winapi_regclosekey($hkey, $bflush = False)
		If $bflush Then
			If NOT _winapi_regflushkey($hkey) Then
				Return SetError(@error + 10, @extended, 0)
			EndIf
		EndIf
		Local $aret = DllCall("advapi32.dll", "long", "RegCloseKey", "handle", $hkey)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regconnectregistry($scomputer, $hkey)
		Local $aret = DllCall("advapi32.dll", "long", "RegConnectRegistryW", "wstr", $scomputer, "handle", $hkey, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[3]
	EndFunc

	Func _winapi_regcopytree($hsrckey, $ssrcsubkey, $hdestkey)
		Local $aret = DllCall("shlwapi.dll", "long", "SHCopyKeyW", "handle", $hsrckey, "wstr", $ssrcsubkey, "ulong_ptr", $hdestkey, "dword", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regcopytreeex($hsrckey, $ssrcsubkey, $hdestkey)
		Local $aret = DllCall("advapi32.dll", "long", "RegCopyTreeW", "handle", $hsrckey, "wstr", $ssrcsubkey, "ulong_ptr", $hdestkey)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regcreatekey($hkey, $ssubkey = "", $iaccess = $key_all_access, $ioptions = 0, $tsecurity = 0)
		Local $aret = DllCall("advapi32.dll", "long", "RegCreateKeyExW", "handle", $hkey, "wstr", $ssubkey, "dword", 0, "ptr", 0, "dword", $ioptions, "dword", $iaccess, "struct*", $tsecurity, "ulong_ptr*", 0, "dword*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return SetExtended(Number($aret[9] = 1), $aret[8])
	EndFunc

	Func _winapi_regdeleteemptykey($hkey, $ssubkey = "")
		Local $aret = DllCall("shlwapi.dll", "long", "SHDeleteEmptyKeyW", "handle", $hkey, "wstr", $ssubkey)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regdeletekey($hkey, $ssubkey = "")
		Local $aret = DllCall("advapi32.dll", "long", "RegDeleteKeyW", "handle", $hkey, "wstr", $ssubkey)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regdeletekeyvalue($hkey, $ssubkey, $svaluename)
		Local $aret = DllCall("advapi32.dll", "long", "RegDeleteKeyValueW", "handle", $hkey, "wstr", $ssubkey, "wstr", $svaluename)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regdeletetree($hkey, $ssubkey = "")
		Local $aret = DllCall("shlwapi.dll", "long", "SHDeleteKeyW", "ulong_ptr", $hkey, "wstr", $ssubkey)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regdeletetreeex($hkey, $ssubkey = 0)
		Local $ssubkeytype = "wstr"
		If NOT IsString($ssubkey) Then $ssubkeytype = "ptr"
		Local $aret = DllCall("advapi32.dll", "long", "RegDeleteTreeW", "handle", $hkey, $ssubkeytype, $ssubkey)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regdeletevalue($hkey, $svaluename)
		Local $aret = DllCall("advapi32.dll", "long", "RegDeleteValueW", "handle", $hkey, "wstr", $svaluename)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regdisablereflectionkey($hkey)
		Local $aret = DllCall("advapi32.dll", "long", "RegDisableReflectionKey", "handle", $hkey)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regduplicatehkey($hkey)
		Local $aret = DllCall("shlwapi.dll", "handle", "SHRegDuplicateHKey", "handle", $hkey)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_regenablereflectionkey($hkey)
		Local $aret = DllCall("advapi32.dll", "long", "RegEnableReflectionKey", "handle", $hkey)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regenumkey($hkey, $iindex)
		Local $aret = DllCall("advapi32.dll", "long", "RegEnumKeyExW", "ulong_ptr", $hkey, "dword", $iindex, "wstr", "", "dword*", 256, "dword", 0, "ptr", 0, "ptr", 0, "ptr", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[3]
	EndFunc

	Func _winapi_regenumvalue($hkey, $iindex)
		Local $aret = DllCall("advapi32.dll", "long", "RegEnumValueW", "handle", $hkey, "dword", $iindex, "wstr", "", "dword*", 16384, "dword", 0, "dword*", 0, "ptr", 0, "ptr", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return SetExtended($aret[6], $aret[3])
	EndFunc

	Func _winapi_regflushkey($hkey)
		Local $aret = DllCall("advapi32.dll", "long", "RegFlushKey", "handle", $hkey)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regloadmuistring($hkey, $svaluename, $sdirectory = "")
		Local $stypeofdirectory = "wstr"
		If NOT StringStripWS($sdirectory, $str_stripleading + $str_striptrailing) Then
			$stypeofdirectory = "ptr"
			$sdirectory = 0
		EndIf
		Local $aret = DllCall("advapi32.dll", "long", "RegLoadMUIStringW", "handle", $hkey, "wstr", $svaluename, "wstr", "", "dword", 16384, "dword*", 0, "dword", 0, $stypeofdirectory, $sdirectory)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[3]
	EndFunc

	Func _winapi_regnotifychangekeyvalue($hkey, $ifilter, $bsubtree = False, $basync = False, $hevent = 0)
		Local $aret = DllCall("advapi32.dll", "long", "RegNotifyChangeKeyValue", "handle", $hkey, "bool", $bsubtree, "dword", $ifilter, "handle", $hevent, "bool", $basync)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regopenkey($hkey, $ssubkey = "", $iaccess = 983103)
		Local $ssubkeytype = "wstr"
		If NOT IsString($ssubkey) Then $ssubkeytype = "ptr"
		Local $aret = DllCall("advapi32.dll", "long", "RegOpenKeyExW", "handle", $hkey, $ssubkeytype, $ssubkey, "dword", 0, "dword", $iaccess, "ulong_ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[5]
	EndFunc

	Func _winapi_regqueryinfokey($hkey)
		Local $aret = DllCall("advapi32.dll", "long", "RegQueryInfoKeyW", "handle", $hkey, "ptr", 0, "ptr", 0, "ptr", 0, "dword*", 0, "dword*", 0, "ptr", 0, "dword*", 0, "dword*", 0, "dword*", 0, "ptr", 0, "ptr", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $aresult[5]
		$aresult[0] = $aret[5]
		$aresult[1] = $aret[6]
		$aresult[2] = $aret[8]
		$aresult[3] = $aret[9]
		$aresult[4] = $aret[10]
		Return $aresult
	EndFunc

	Func _winapi_regquerylastwritetime($hkey)
		Local $tfiletime = DllStructCreate($tagfiletime)
		Local $aret = DllCall("advapi32.dll", "long", "RegQueryInfoKeyW", "handle", $hkey, "ptr", 0, "ptr", 0, "ptr", 0, "ptr", 0, "ptr", 0, "ptr", 0, "ptr", 0, "ptr", 0, "ptr", 0, "ptr", 0, "struct*", $tfiletime)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tfiletime
	EndFunc

	Func _winapi_regquerymultiplevalues($hkey, ByRef $avalent, ByRef $pbuffer, $istart = 0, $iend = -1)
		$pbuffer = 0
		If __checkerrorarraybounds($avalent, $istart, $iend, 2) Then Return SetError(@error + 10, @extended, 0)
		If UBound($avalent, $ubound_columns) < 4 Then Return SetError(13, 0, 0)
		Local $ivalues = $iend - $istart + 1
		Local $tagstruct = ""
		For $i = 1 To $ivalues
			$tagstruct &= "ptr;dword;ptr;dword;"
		Next
		Local $tvalent = DllStructCreate($tagstruct)
		Local $aitem[$ivalues], $icount = 0
		For $i = $istart To $iend
			$aitem[$icount] = DllStructCreate("wchar[" & (StringLen($avalent[$i][0]) + 1) & "]")
			DllStructSetData($tvalent, 4 * $icount + 1, DllStructGetPtr($aitem[$icount]))
			DllStructSetData($aitem[$icount], 1, $avalent[$i][0])
			$icount += 1
		Next
		Local $aret = DllCall("advapi32.dll", "long", "RegQueryMultipleValuesW", "handle", $hkey, "struct*", $tvalent, "dword", $ivalues, "ptr", 0, "dword*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] <> 234 Then Return SetError(10, $aret[0], 0)
		$pbuffer = __heapalloc($aret[5])
		If @error Then Return SetError(@error + 100, @extended, 0)
		$aret = DllCall("advapi32.dll", "long", "RegQueryMultipleValuesW", "handle", $hkey, "struct*", $tvalent, "dword", $ivalues, "ptr", $pbuffer, "dword*", $aret[5])
		If @error OR $aret[0] Then
			Local $ierror = @error
			__heapfree($pbuffer)
			If IsArray($aret) Then
				Return SetError(20, $aret[0], 0)
			Else
				Return SetError($ierror + 20, @extended, 0)
			EndIf
		EndIf
		$icount = 0
		For $i = $istart To $iend
			For $j = 1 To 3
				$avalent[$i][$j] = DllStructGetData($tvalent, 4 * $icount + $j + 1)
			Next
			$icount += 1
		Next
		Return $aret[5]
	EndFunc

	Func _winapi_regqueryreflectionkey($hkey)
		Local $aret = DllCall("advapi32.dll", "long", "RegQueryReflectionKey", "handle", $hkey, "bool*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[2]
	EndFunc

	Func _winapi_regqueryvalue($hkey, $svaluename, ByRef $tvaluedata)
		Local $aret = DllCall("advapi32.dll", "long", "RegQueryValueExW", "handle", $hkey, "wstr", $svaluename, "dword", 0, "dword*", 0, "struct*", $tvaluedata, "dword*", DllStructGetSize($tvaluedata))
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return SetExtended($aret[4], $aret[6])
	EndFunc

	Func _winapi_regrestorekey($hkey, $sfilepath)
		Local $aret = DllCall("advapi32.dll", "long", "RegRestoreKeyW", "handle", $hkey, "wstr", $sfilepath, "dword", 8)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_regsavekey($hkey, $sfilepath, $breplace = False, $tsecurity = 0)
		Local $aret
		While 1
			$aret = DllCall("advapi32.dll", "long", "RegSaveKeyW", "handle", $hkey, "wstr", $sfilepath, "struct*", $tsecurity)
			If @error Then Return SetError(@error, @extended, 0)
			Switch $aret[0]
				Case 0
					ExitLoop
				Case 183
					If $breplace Then
						If NOT FileDelete($sfilepath) Then
							Return SetError(20, _winapi_getlasterror(), 0)
						Else
							ContinueLoop
						EndIf
					Else
						ContinueCase
					EndIf
				Case Else
					Return SetError(10, $aret[0], 0)
			EndSwitch
		WEnd
		Return 1
	EndFunc

	Func _winapi_regsetvalue($hkey, $svaluename, $itype, $tvaluedata, $ibytes)
		Local $aret = DllCall("advapi32.dll", "long", "RegSetValueExW", "handle", $hkey, "wstr", $svaluename, "dword", 0, "dword", $itype, "struct*", $tvaluedata, "dword", $ibytes)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_sfciskeyprotected($hkey, $ssubkey = Default, $iflag = 0)
		If NOT __dll("sfc.dll") Then Return SetError(103, 0, False)
		Local $ssubkeytype = "wstr"
		If NOT IsString($ssubkey) Then
			$ssubkeytype = "ptr"
			$ssubkey = 0
		EndIf
		Local $aret = DllCall("sfc.dll", "int", "SfcIsKeyProtected", "handle", $hkey, $ssubkeytype, $ssubkey, "dword", $iflag)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

#EndRegion Public Functions
Global Const $rt_accelerator = 9
Global Const $rt_anicursor = 21
Global Const $rt_aniicon = 22
Global Const $rt_bitmap = 2
Global Const $rt_cursor = 1
Global Const $rt_dialog = 5
Global Const $rt_dlginclude = 17
Global Const $rt_font = 8
Global Const $rt_fontdir = 7
Global Const $rt_group_cursor = 12
Global Const $rt_group_icon = 14
Global Const $rt_html = 23
Global Const $rt_icon = 3
Global Const $rt_manifest = 24
Global Const $rt_menu = 4
Global Const $rt_messagetable = 11
Global Const $rt_plugplay = 19
Global Const $rt_rcdata = 10
Global Const $rt_string = 6
Global Const $rt_version = 16
Global Const $rt_vxd = 20
Global Const $file_ver_get_localised = 1
Global Const $file_ver_get_neutral = 2
Global Const $file_ver_get_prefetched = 4
Global Const $ocr_normal = 32512
Global Const $ocr_ibeam = 32513
Global Const $ocr_wait = 32514
Global Const $ocr_cross = 32515
Global Const $ocr_up = 32516
Global Const $ocr_size = 32640
Global Const $ocr_icon = 32641
Global Const $ocr_sizenwse = 32642
Global Const $ocr_sizenesw = 32643
Global Const $ocr_sizewe = 32644
Global Const $ocr_sizens = 32645
Global Const $ocr_sizeall = 32646
Global Const $ocr_icocur = 32647
Global Const $ocr_no = 32648
Global Const $ocr_hand = 32649
Global Const $ocr_appstarting = 32650
Global Const $ocr_help = 32651
Global Const $vs_ff_debug = 1
Global Const $vs_ff_infoinferred = 16
Global Const $vs_ff_patched = 4
Global Const $vs_ff_prerelease = 2
Global Const $vs_ff_privatebuild = 8
Global Const $vs_ff_specialbuild = 32
Global Const $vos_dos = 65536
Global Const $vos_nt = 262144
Global Const $vos__windows16 = 1
Global Const $vos__windows32 = 4
Global Const $vos_os216 = 131072
Global Const $vos_os232 = 196608
Global Const $vos__pm16 = 2
Global Const $vos__pm32 = 3
Global Const $vos_unknown = 0
Global Const $vos_dos_windows16 = 65537
Global Const $vos_dos_windows32 = 65540
Global Const $vos_nt_windows32 = 262148
Global Const $vos_os216_pm16 = 131074
Global Const $vos_os232_pm32 = 196611
Global Const $vft_app = 1
Global Const $vft_dll = 2
Global Const $vft_drv = 3
Global Const $vft_font = 4
Global Const $vft_static_lib = 7
Global Const $vft_unknown = 0
Global Const $vft_vxd = 5
Global Const $vft2_drv_comm = 10
Global Const $vft2_drv_display = 4
Global Const $vft2_drv_installable = 8
Global Const $vft2_drv_keyboard = 2
Global Const $vft2_drv_language = 3
Global Const $vft2_drv_mouse = 5
Global Const $vft2_drv_network = 6
Global Const $vft2_drv_printer = 1
Global Const $vft2_drv_sound = 9
Global Const $vft2_drv_system = 7
Global Const $vft2_drv_versioned_printer = 12
Global Const $vft2_unknown = 0
Global Const $vft2_font_raster = 1
Global Const $vft2_font_truetype = 3
Global Const $vft2_font_vector = 2
#Region Global Variables and Constants
	Global $__g_vval
	Global Const $tagvs_fixedfileinfo = "dword Signature;dword StrucVersion;dword FileVersionMS;dword FileVersionLS;dword ProductVersionMS;dword ProductVersionLS;dword FileFlagsMask;dword FileFlags;dword FileOS;dword FileType;dword FileSubtype;dword FileDateMS;dword FileDateLS"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_addicontransparency($hicon, $ipercent = 50, $bdelete = False)
		Local $tbitmap, $hdib = 0, $hresult = 0
		Local $ahbitmap[2]
		Local $ticoninfo = DllStructCreate($tagiconinfo)
		Local $aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $hicon, "struct*", $ticoninfo)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		For $i = 0 To 1
			$ahbitmap[$i] = DllStructGetData($ticoninfo, $i + 4)
		Next
		Local $ierror = 0
		Do
			$hdib = _winapi_copybitmap($ahbitmap[1])
			If NOT $hdib Then
				$ierror = 20
				ExitLoop
			EndIf
			$tbitmap = DllStructCreate($tagbitmap)
			If (NOT _winapi_getobject($hdib, DllStructGetSize($tbitmap), $tbitmap)) OR (DllStructGetData($tbitmap, "bmBitsPixel") <> 32) Then
				$ierror = 21
				ExitLoop
			EndIf
			$aret = DllCall("user32.dll", "lresult", "CallWindowProc", "PTR", __transparencyproc(), "hwnd", 0, "uint", $ipercent, "wparam", DllStructGetPtr($tbitmap), "lparam", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			If $aret[0] = -1 Then
				$hresult = _winapi_createemptyicon(DllStructGetData($tbitmap, "bmWidth"), DllStructGetData($tbitmap, "bmHeight"))
			Else
				$hresult = _winapi_createiconindirect($hdib, $ahbitmap[0])
			EndIf
			If NOT $hresult Then $ierror = 22
		Until 1
		If $hdib Then
			_winapi_deleteobject($hdib)
		EndIf
		For $i = 0 To 1
			If $ahbitmap[$i] Then
				_winapi_deleteobject($ahbitmap[$i])
			EndIf
		Next
		If $ierror Then Return SetError($ierror, 0, 0)
		If $bdelete Then
			_winapi_destroyicon($hicon)
		EndIf
		Return $hresult
	EndFunc

	Func _winapi_beginupdateresource($sfilepath, $bdelete = False)
		Local $aret = DllCall("kernel32.dll", "handle", "BeginUpdateResourceW", "wstr", $sfilepath, "bool", $bdelete)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_clipcursor($trect)
		Local $aret = DllCall("user32.dll", "bool", "ClipCursor", "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_copycursor($hcursor)
		Return _winapi_copyicon($hcursor)
	EndFunc

	Func _winapi_createcaret($hwnd, $hbitmap, $iwidth = 0, $iheight = 0)
		Local $aret = DllCall("user32.dll", "bool", "CreateCaret", "hwnd", $hwnd, "handle", $hbitmap, "int", $iwidth, "int", $iheight)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_createicon($hinstance, $iwidth, $iheight, $iplanes, $ibitspixel, $pandbits, $pxorbits)
		Local $aret = DllCall("user32.dll", "handle", "CreateIcon", "handle", $hinstance, "int", $iwidth, "int", $iheight, "byte", $iplanes, "byte", $ibitspixel, "struct*", $pandbits, "struct*", $pxorbits)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createiconfromresourceex($pdata, $isize, $bicon = True, $ixdesiredpixels = 0, $iydesiredpixels = 0, $iflags = 0)
		Local $aret = DllCall("user32.dll", "handle", "CreateIconFromResourceEx", "ptr", $pdata, "dword", $isize, "bool", $bicon, "dword", 196608, "int", $ixdesiredpixels, "int", $iydesiredpixels, "uint", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_destroycaret()
		Local $aret = DllCall("user32.dll", "bool", "DestroyCaret")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_destroycursor($hcursor)
		Local $aret = DllCall("user32.dll", "bool", "DestroyCursor", "handle", $hcursor)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_endupdateresource($hupdate, $bdiscard = False)
		Local $aret = DllCall("kernel32.dll", "bool", "EndUpdateResourceW", "handle", $hupdate, "bool", $bdiscard)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_enumresourcelanguages($hmodule, $stype, $sname)
		Local $ilibrary = 0, $stypeoftype = "int", $stypeofname = "int"
		If IsString($hmodule) Then
			If StringStripWS($hmodule, $str_stripleading + $str_striptrailing) Then
				$hmodule = _winapi_loadlibraryex($hmodule, 3)
				If NOT $hmodule Then Return SetError(1, 0, 0)
				$ilibrary = 1
			Else
				$hmodule = 0
			EndIf
		EndIf
		If IsString($stype) Then
			$stypeoftype = "wstr"
		EndIf
		If IsString($sname) Then
			$stypeofname = "wstr"
		EndIf
		Dim $__g_venum[101] = [0]
		Local $henumproc = DllCallbackRegister("__EnumResLanguagesProc", "bool", "handle;ptr;ptr;word;long_ptr")
		Local $aret = DllCall("kernel32.dll", "bool", "EnumResourceLanguagesW", "handle", $hmodule, $stypeoftype, $stype, $stypeofname, $sname, "ptr", DllCallbackGetPtr($henumproc), "long_ptr", 0)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
			$__g_venum = @error + 10
		EndIf
		If $ilibrary Then
			_winapi_freelibrary($hmodule)
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumresourcenames($hmodule, $stype)
		Local $aret, $henumproc, $ilibrary = 0, $stypeoftype = "int"
		If IsString($hmodule) Then
			If StringStripWS($hmodule, $str_stripleading + $str_striptrailing) Then
				$hmodule = _winapi_loadlibraryex($hmodule, 3)
				If NOT $hmodule Then Return SetError(1, 0, 0)
				$ilibrary = 1
			Else
				$hmodule = 0
			EndIf
		EndIf
		If IsString($stype) Then
			$stypeoftype = "wstr"
		EndIf
		Dim $__g_venum[101] = [0]
		$henumproc = DllCallbackRegister("__EnumResNamesProc", "bool", "handle;ptr;ptr;long_ptr")
		$aret = DllCall("kernel32.dll", "bool", "EnumResourceNamesW", "handle", $hmodule, $stypeoftype, $stype, "ptr", DllCallbackGetPtr($henumproc), "long_ptr", 0)
		If @error OR NOT $aret[0] OR (NOT $__g_venum[0]) Then
			$__g_venum = @error + 10
		EndIf
		If $ilibrary Then
			_winapi_freelibrary($hmodule)
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumresourcetypes($hmodule)
		Local $ilibrary = 0
		If IsString($hmodule) Then
			If StringStripWS($hmodule, $str_stripleading + $str_striptrailing) Then
				$hmodule = _winapi_loadlibraryex($hmodule, 3)
				If NOT $hmodule Then Return SetError(1, 0, 0)
				$ilibrary = 1
			Else
				$hmodule = 0
			EndIf
		EndIf
		Dim $__g_venum[101] = [0]
		Local $henumproc = DllCallbackRegister("__EnumResTypesProc", "bool", "handle;ptr;long_ptr")
		Local $aret = DllCall("kernel32.dll", "bool", "EnumResourceTypesW", "handle", $hmodule, "ptr", DllCallbackGetPtr($henumproc), "long_ptr", 0)
		If @error OR NOT $aret[0] OR (NOT $__g_venum[0]) Then
			$__g_venum = @error + 10
		EndIf
		If $ilibrary Then
			_winapi_freelibrary($hmodule)
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_extracticon($sicon, $iindex, $bsmall = False)
		Local $plarge, $psmall, $tptr = DllStructCreate("ptr")
		If $bsmall Then
			$plarge = 0
			$psmall = DllStructGetPtr($tptr)
		Else
			$plarge = DllStructGetPtr($tptr)
			$psmall = 0
		EndIf
		DllCall("shell32.dll", "uint", "ExtractIconExW", "wstr", $sicon, "int", $iindex, "ptr", $plarge, "ptr", $psmall, "uint", 1)
		If @error Then Return SetError(@error, @extended, 0)
		Return DllStructGetData($tptr, 1)
	EndFunc

	Func _winapi_fileiconinit($brestore = True)
		Local $aret = DllCall("shell32.dll", "int", 660, "int", $brestore)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_findresource($hinstance, $stype, $sname)
		Local $stypeoftype = "int", $stypeofname = "int"
		If IsString($stype) Then
			$stypeoftype = "wstr"
		EndIf
		If IsString($sname) Then
			$stypeofname = "wstr"
		EndIf
		Local $aret = DllCall("kernel32.dll", "handle", "FindResourceW", "handle", $hinstance, $stypeofname, $sname, $stypeoftype, $stype)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_findresourceex($hinstance, $stype, $sname, $ilanguage)
		Local $stypeoftype = "int", $stypeofname = "int"
		If IsString($stype) Then
			$stypeoftype = "wstr"
		EndIf
		If IsString($sname) Then
			$stypeofname = "wstr"
		EndIf
		Local $aret = DllCall("kernel32.dll", "handle", "FindResourceExW", "handle", $hinstance, $stypeoftype, $stype, $stypeofname, $sname, "ushort", $ilanguage)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_freeresource($hdata)
		Local $aret = DllCall("kernel32.dll", "bool", "FreeResource", "handle", $hdata)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_getcaretblinktime()
		Local $aret = DllCall("user32.dll", "uint", "GetCaretBlinkTime")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getcaretpos()
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("user32.dll", "bool", "GetCaretPos", "struct*", $tagpoint)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[2]
		For $i = 0 To 1
			$aresult[$i] = DllStructGetData($tpoint, $i + 1)
		Next
		Return $aresult
	EndFunc

	Func _winapi_getclipcursor()
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "GetClipCursor", "struct*", $trect)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $trect
	EndFunc

	Func _winapi_getcursor()
		Local $aret = DllCall("user32.dll", "handle", "GetCursor")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getfileversioninfo($sfilepath, ByRef $pbuffer, $iflags = 0)
		Local $aret
		If $__winver >= 1536 Then
			$aret = DllCall("version.dll", "dword", "GetFileVersionInfoSizeExW", "dword", BitAND($iflags, 3), "wstr", $sfilepath, "ptr", 0)
		Else
			$aret = DllCall("version.dll", "dword", "GetFileVersionInfoSizeW", "wstr", $sfilepath, "ptr", 0)
		EndIf
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		$pbuffer = __heaprealloc($pbuffer, $aret[0], 1)
		If @error Then Return SetError(@error + 100, @extended, 0)
		Local $inbbyte = $aret[0]
		If $__winver >= 1536 Then
			$aret = DllCall("version.dll", "bool", "GetFileVersionInfoExW", "dword", BitAND($iflags, 7), "wstr", $sfilepath, "dword", 0, "dword", $inbbyte, "ptr", $pbuffer)
		Else
			$aret = DllCall("version.dll", "bool", "GetFileVersionInfoW", "wstr", $sfilepath, "dword", 0, "dword", $inbbyte, "ptr", $pbuffer)
		EndIf
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $inbbyte
	EndFunc

	Func _winapi_geticoninfoex($hicon)
		Local $tiiex = DllStructCreate("dword;int;dword;dword;ptr;ptr;ushort;wchar[260];wchar[260]")
		DllStructSetData($tiiex, 1, DllStructGetSize($tiiex))
		Local $aret = DllCall("user32.dll", "bool", "GetIconInfoExW", "handle", $hicon, "struct*", $tiiex)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[8]
		For $i = 0 To 7
			$aresult[$i] = DllStructGetData($tiiex, $i + 2)
		Next
		Return $aresult
	EndFunc

	Func _winapi_hidecaret($hwnd)
		Local $aret = DllCall("user32.dll", "int", "HideCaret", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_loadcursor($hinstance, $sname)
		Local $stypeofname = "int"
		If IsString($sname) Then
			$stypeofname = "wstr"
		EndIf
		Local $aret = DllCall("user32.dll", "handle", "LoadCursorW", "handle", $hinstance, $stypeofname, $sname)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_loadcursorfromfile($sfilepath)
		Local $aret = DllCall("user32.dll", "handle", "LoadCursorFromFileW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_loadicon($hinstance, $sname)
		Local $stypeofname = "int"
		If IsString($sname) Then
			$stypeofname = "wstr"
		EndIf
		Local $aret = DllCall("user32.dll", "handle", "LoadIconW", "handle", $hinstance, $stypeofname, $sname)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_loadindirectstring($sstrin)
		Local $aret = DllCall("shlwapi.dll", "uint", "SHLoadIndirectString", "wstr", $sstrin, "wstr", "", "uint", 4096, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[2]
	EndFunc

	Func _winapi_loadresource($hinstance, $hresource)
		Local $aret = DllCall("kernel32.dll", "handle", "LoadResource", "handle", $hinstance, "handle", $hresource)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_loadstringex($hmodule, $iid, $ilanguage = $locale_user_default)
		Local $ilibrary = 0
		If IsString($hmodule) Then
			If StringStripWS($hmodule, $str_stripleading + $str_striptrailing) Then
				$hmodule = _winapi_loadlibraryex($hmodule, 3)
				If NOT $hmodule Then Return SetError(@error + 20, @extended, "")
				$ilibrary = 1
			Else
				$hmodule = 0
			EndIf
		EndIf
		Local $sresult = ""
		Local $pdata = __resload($hmodule, 6, Floor($iid / 16) + 1, $ilanguage)
		If NOT @error Then
			Local $ioffset = 0
			For $i = 0 To Mod($iid, 16) - 1
				$ioffset += 2 * (DllStructGetData(DllStructCreate("ushort", $pdata + $ioffset), 1) + 1)
			Next
			$sresult = DllStructGetData(DllStructCreate("ushort;wchar[" & DllStructGetData(DllStructCreate("ushort", $pdata + $ioffset), 1) & "]", $pdata + $ioffset), 2)
			If @error Then $sresult = ""
		Else
			Return SetError(10, 0, "")
		EndIf
		If $ilibrary Then
			_winapi_freelibrary($hmodule)
		EndIf
		Return SetError(Number(NOT $sresult), 0, $sresult)
	EndFunc

	Func _winapi_lockresource($hdata)
		Local $aret = DllCall("kernel32.dll", "ptr", "LockResource", "handle", $hdata)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_lookupiconidfromdirectoryex($pdata, $bicon = True, $ixdesiredpixels = 0, $iydesiredpixels = 0, $iflags = 0)
		Local $aret = DllCall("user32.dll", "int", "LookupIconIdFromDirectoryEx", "ptr", $pdata, "bool", $bicon, "int", $ixdesiredpixels, "int", $iydesiredpixels, "uint", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setcaretblinktime($iduration)
		Local $iprev = _winapi_getcaretblinktime()
		If NOT $iprev Then Return SetError(@error + 20, @extended, 0)
		Local $aret = DllCall("user32.dll", "bool", "SetCaretBlinkTime", "uint", $iduration)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $iprev
	EndFunc

	Func _winapi_setcaretpos($ix, $iy)
		Local $aret = DllCall("user32.dll", "int", "SetCaretPos", "int", $ix, "int", $iy)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setsystemcursor($hcursor, $iid, $bcopy = False)
		If $bcopy Then
			$hcursor = _winapi_copycursor($hcursor)
		EndIf
		Local $aret = DllCall("user32.dll", "bool", "SetSystemCursor", "handle", $hcursor, "dword", $iid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_showcaret($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "ShowCaret", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_sizeofresource($hinstance, $hresource)
		Local $aret = DllCall("kernel32.dll", "dword", "SizeofResource", "handle", $hinstance, "handle", $hresource)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_updateresource($hupdate, $stype, $sname, $ilanguage, $pdata, $isize)
		Local $stypeoftype = "int", $stypeofname = "int"
		If IsString($stype) Then
			$stypeoftype = "wstr"
		EndIf
		If IsString($sname) Then
			$stypeofname = "wstr"
		EndIf
		Local $aret = DllCall("kernel32.dll", "bool", "UpdateResourceW", "handle", $hupdate, $stypeoftype, $stype, $stypeofname, $sname, "word", $ilanguage, "ptr", $pdata, "dword", $isize)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_verqueryroot($pdata)
		Local $aret = DllCall("version.dll", "bool", "VerQueryValueW", "ptr", $pdata, "wstr", "\", "ptr*", 0, "uint*", 0)
		If @error OR NOT $aret[0] OR NOT $aret[4] Then Return SetError(@error + 10, @extended, 0)
		Local $tvffi = DllStructCreate($tagvs_fixedfileinfo)
		If NOT _winapi_movememory($tvffi, $aret[3], $aret[4]) Then Return SetError(@error + 20, @extended, 0)
		Return $tvffi
	EndFunc

	Func _winapi_verqueryvalue($pdata, $svalues = "")
		$svalues = StringRegExpReplace($svalues, "\A[\s\|]*|[\s\|]*\Z", "")
		If NOT $svalues Then
			$svalues = "Comments|CompanyName|FileDescription|FileVersion|InternalName|LegalCopyright|LegalTrademarks|OriginalFilename|ProductName|ProductVersion|PrivateBuild|SpecialBuild"
		EndIf
		$svalues = StringSplit($svalues, "|", $str_nocount)
		Local $aret = DllCall("version.dll", "bool", "VerQueryValueW", "ptr", $pdata, "wstr", "\VarFileInfo\Translation", "ptr*", 0, "uint*", 0)
		If @error OR NOT $aret[0] OR NOT $aret[4] Then Return SetError(@error + 10, 0, 0)
		Local $ilength = Floor($aret[4] / 4)
		Local $tlang = DllStructCreate("dword[" & $ilength & "]", $aret[3])
		If @error Then Return SetError(@error + 20, 0, 0)
		Local $scp, $ainfo[101][UBound($svalues) + 1] = [[0]]
		For $i = 1 To $ilength
			__inc($ainfo)
			$ainfo[$ainfo[0][0]][0] = _winapi_loword(DllStructGetData($tlang, 1, $i))
			$scp = Hex(_winapi_makelong(_winapi_hiword(DllStructGetData($tlang, 1, $i)), _winapi_loword(DllStructGetData($tlang, 1, $i))), 8)
			For $j = 0 To UBound($svalues) - 1
				$aret = DllCall("version.dll", "bool", "VerQueryValueW", "ptr", $pdata, "wstr", "\StringFileInfo\" & $scp & "\" & $svalues[$j], "ptr*", 0, "uint*", 0)
				If NOT @error AND $aret[0] AND $aret[4] Then
					$ainfo[$ainfo[0][0]][$j + 1] = DllStructGetData(DllStructCreate("wchar[" & $aret[4] & "]", $aret[3]), 1)
				Else
					$ainfo[$ainfo[0][0]][$j + 1] = ""
				EndIf
			Next
		Next
		__inc($ainfo, -1)
		Return $ainfo
	EndFunc

	Func _winapi_verqueryvalueex($hmodule, $svalues = "", $ilanguage = 1024)
		$__g_vval = StringRegExpReplace($svalues, "\A[\s\|]*|[\s\|]*\Z", "")
		If NOT $__g_vval Then
			$__g_vval = "Comments|CompanyName|FileDescription|FileVersion|InternalName|LegalCopyright|LegalTrademarks|OriginalFilename|ProductName|ProductVersion|PrivateBuild|SpecialBuild"
		EndIf
		$__g_vval = StringSplit($__g_vval, "|")
		If NOT IsArray($__g_vval) Then Return SetError(1, 0, 0)
		Local $ilibrary = 0
		If IsString($hmodule) Then
			If StringStripWS($hmodule, $str_stripleading + $str_striptrailing) Then
				$hmodule = _winapi_loadlibraryex($hmodule, 3)
				If NOT $hmodule Then
					Return SetError(@error + 10, @extended, 0)
				EndIf
				$ilibrary = 1
			Else
				$hmodule = 0
			EndIf
		EndIf
		Dim $__g_venum[101][$__g_vval[0] + 1] = [[0]]
		Local $henumproc = DllCallbackRegister("__EnumVerValuesProc", "bool", "ptr;ptr;ptr;word;long_ptr")
		Local $aret = DllCall("kernel32.dll", "bool", "EnumResourceLanguagesW", "handle", $hmodule, "int", 16, "int", 1, "ptr", DllCallbackGetPtr($henumproc), "long_ptr", $ilanguage)
		Do
			If @error Then
				$__g_venum = @error + 20
			Else
				If NOT $aret[0] Then
					Switch _winapi_getlasterror()
						Case 0, 15106
							ExitLoop
						Case Else
							$__g_venum = 20
					EndSwitch
				Else
					ExitLoop
				EndIf
			EndIf
		Until 1
		If $ilibrary Then
			_winapi_freelibrary($hmodule)
		EndIf
		DllCallbackFree($henumproc)
		If NOT $__g_venum[0][0] Then $__g_venum = 230
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

#EndRegion Public Functions
#Region Embedded DLL Functions

	Func __transparencyproc()
		Static $pproc = 0
		If NOT $pproc Then
			If @AutoItX64 Then
				$pproc = __init(Binary("0x48894C240848895424104C894424184C894C24205541574831C0505050505050" & "4883EC284883BC24800000000074054831C0EB0748C7C0010000004821C07522" & "488BAC248000000048837D180074054831C0EB0748C7C0010000004821C07502" & "EB0948C7C001000000EB034831C04821C0740B4831C04863C0E93C0100004C63" & "7C24784983FF647E0F48C7C0010000004863C0E9220100004C637C24784D21FF" & "7D08C74424780000000048C74424280100000048C74424300000000048C74424" & "3800000000488BAC24800000004C637D04488BAC2480000000486345084C0FAF" & "F849C1E7024983C7FC4C3B7C24380F8C88000000488BAC24800000004C8B7D18" & "4C037C24384983C7034C897C2440488B6C2440480FB64500505888442448807C" & "244800744B4C0FB67C244848634424784C0FAFF84C89F848C7C1640000004899" & "48F7F94989C74C89F850488B6C244858884500488B6C2440807D0000740948C7" & "4424280000000048C7442430010000004883442438040F8149FFFFFF48837C24" & "3000741148837C242800740948C7C001000000EB034831C04821C0740E48C7C0" & "FFFFFFFF4863C0EB11EB0C48C7C0010000004863C0EB034831C04883C458415F" & "5DC3"))
			Else
				$pproc = __init(Binary("0x555331C05050505050837C242800740431C0EB05B80100000021C075198B6C24" & "28837D1400740431C0EB05B80100000021C07502EB07B801000000EB0231C021" & "C0740731C0E9E50000008B5C242483FB647E0AB801000000E9D20000008B5C24" & "2421DB7D08C744242400000000C7042401000000C744240400000000C7442408" & "000000008B6C24288B5D048B6C24280FAF5D08C1E30283C3FC3B5C24087C648B" & "6C24288B5D14035C240883C303895C240C8B6C240C0FB6450088442410807C24" & "100074380FB65C24100FAF5C242489D8B96400000099F7F989C3538B6C241058" & "8845008B6C240C807D00007407C7042400000000C74424040100000083442408" & "047181837C240400740D833C24007407B801000000EB0231C021C07409B8FFFF" & "FFFFEB0BEB07B801000000EB0231C083C4145B5DC21000"))
			EndIf
		EndIf
		Return $pproc
	EndFunc

#EndRegion Embedded DLL Functions
#Region Internal Functions

	Func __enumreslanguagesproc($hmodule, $itype, $iname, $ilanguage, $lparam)
		#forceref $hModule, $iType, $iName, $lParam
		__inc($__g_venum)
		$__g_venum[$__g_venum[0]] = $ilanguage
		Return 1
	EndFunc

	Func __enumresnamesproc($hmodule, $itype, $iname, $lparam)
		#forceref $hModule, $iType, $lParam
		Local $ilength = _winapi_strlen($iname)
		__inc($__g_venum)
		If $ilength Then
			$__g_venum[$__g_venum[0]] = DllStructGetData(DllStructCreate("wchar[" & ($ilength + 1) & "]", $iname), 1)
		Else
			$__g_venum[$__g_venum[0]] = Number($iname)
		EndIf
		Return 1
	EndFunc

	Func __enumrestypesproc($hmodule, $itype, $lparam)
		#forceref $hModule, $lParam
		Local $ilength = _winapi_strlen($itype)
		__inc($__g_venum)
		If $ilength Then
			$__g_venum[$__g_venum[0]] = DllStructGetData(DllStructCreate("wchar[" & ($ilength + 1) & "]", $itype), 1)
		Else
			$__g_venum[$__g_venum[0]] = Number($itype)
		EndIf
		Return 1
	EndFunc

	Func __enumvervaluesproc($hmodule, $itype, $iname, $ilanguage, $idefault)
		Local $aret, $ienum = 1, $ierror = 0
		Switch $idefault
			Case -1
			Case 1024
				$ilanguage = 1024
				$ienum = 0
			Case Else
				If $ilanguage <> $idefault Then
					Return 1
				EndIf
				$ienum = 0
		EndSwitch
		Do
			Local $pdata = __resload($hmodule, $itype, $iname, $ilanguage)
			If @error Then
				$ierror = @error + 10
				ExitLoop
			EndIf
			$aret = DllCall("version.dll", "bool", "VerQueryValueW", "ptr", $pdata, "wstr", "\VarFileInfo\Translation", "ptr*", 0, "uint*", 0)
			If @error OR NOT $aret[0] OR NOT $aret[4] Then
				$ierror = @error + 20
				ExitLoop
			EndIf
			Local $tdata = DllStructCreate("ushort;ushort", $aret[3])
			If @error Then
				$ierror = @error + 30
				ExitLoop
			EndIf
		Until 1
		If NOT $ierror Then
			__inc($__g_venum)
			$__g_venum[$__g_venum[0][0]][0] = DllStructGetData($tdata, 1)
			Local $scp = Hex(_winapi_makelong(DllStructGetData($tdata, 2), DllStructGetData($tdata, 1)), 8)
			For $i = 1 To $__g_vval[0]
				$aret = DllCall("version.dll", "bool", "VerQueryValueW", "ptr", $pdata, "wstr", "\StringFileInfo\" & $scp & "\" & $__g_vval[$i], "ptr*", 0, "uint*", 0)
				If NOT @error AND $aret[0] AND $aret[4] Then
					$__g_venum[$__g_venum[0][0]][$i] = DllStructGetData(DllStructCreate("wchar[" & $aret[4] & "]", $aret[3]), 1)
				Else
					$__g_venum[$__g_venum[0][0]][$i] = ""
				EndIf
			Next
		Else
			$__g_venum = @error + 40
		EndIf
		If $__g_venum Then Return SetError($ierror, 0, 0)
		Return $ienum
	EndFunc

	Func __resload($hinstance, $stype, $sname, $ilanguage)
		Local $hinfo = _winapi_findresourceex($hinstance, $stype, $sname, $ilanguage)
		If NOT $hinfo Then Return SetError(@error + 10, @extended, 0)
		Local $isize = _winapi_sizeofresource($hinstance, $hinfo)
		If NOT $isize Then Return SetError(@error + 20, @extended, 0)
		Local $hdata = _winapi_loadresource($hinstance, $hinfo)
		If NOT $hdata Then Return SetError(@error + 30, @extended, 0)
		Local $pdata = _winapi_lockresource($hdata)
		If NOT $pdata Then Return SetError(@error + 40, @extended, 0)
		Return SetExtended($isize, $pdata)
	EndFunc

#EndRegion Internal Functions
Global Const $klf_activate = 1
Global Const $klf_notellshell = 128
Global Const $klf_reorder = 8
Global Const $klf_replacelang = 16
Global Const $klf_reset = 1073741824
Global Const $klf_setforprocess = 256
Global Const $klf_shiftlock = 65536
Global Const $klf_substitute_ok = 2
Global Const $hkl_next = 1
Global Const $hkl_prev = 0
Global Const $aw_activate = 131072
Global Const $aw_blend = 524288
Global Const $aw_center = 16
Global Const $aw_hide = 65536
Global Const $aw_hor_negative = 2
Global Const $aw_hor_positive = 1
Global Const $aw_slide = 262144
Global Const $aw_ver_negative = 8
Global Const $aw_ver_positive = 4
Global Const $bsf_allowsfw = 128
Global Const $bsf_flushdisk = 4
Global Const $bsf_forceifhung = 32
Global Const $bsf_ignorecurrenttask = 2
Global Const $bsf_nohang = 8
Global Const $bsf_notimeoutifnothung = 64
Global Const $bsf_postmessage = 16
Global Const $bsf_query = 1
Global Const $bsf_sendnotifymessage = 256
Global Const $bsm_allcomponents = 0
Global Const $bsm_alldesktops = 8
Global Const $bsm_applications = 16
Global Const $bsm_installabledrivers = 4
Global Const $bsm_netdriver = 2
Global Const $bsm_vxds = 1
Global Const $mditile_horizontal = 1
Global Const $mditile_skipdisabled = 2
Global Const $mditile_vertical = 0
Global Const $mditile_zorder = 4
Global Const $msgflt_allow = 1
Global Const $msgflt_disallow = 2
Global Const $msgflt_reset = 0
Global Const $msgfltinfo_allowed_higher = 3
Global Const $msgfltinfo_alreadyallowed_forwnd = 1
Global Const $msgfltinfo_alreadydisallowed_forwnd = 2
Global Const $msgfltinfo_none = 0
Global Const $cwp_all = 0
Global Const $cwp_skipinvisible = 1
Global Const $cwp_skipdisabled = 2
Global Const $cwp_skiptransparent = 4
Global Const $compression_format_none = 0
Global Const $compression_format_default = 1
Global Const $compression_format_lznt1 = 2
Global Const $compression_format_xpress = 3
Global Const $compression_format_xpress_huff = 4
Global Const $compression_engine_standard = 0
Global Const $compression_engine_maximum = 256
Global Const $compression_engine_hiber = 512
Global Const $winsta_accessclipboard = 4
Global Const $winsta_accessglobalatoms = 32
Global Const $winsta_createdesktop = 8
Global Const $winsta_enumdesktops = 1
Global Const $winsta_enumerate = 256
Global Const $winsta_exitwindows = 64
Global Const $winsta_readattributes = 2
Global Const $winsta_readscreen = 512
Global Const $winsta_writeattributes = 16
Global Const $winsta_all_access = BitOR($winsta_accessclipboard, $winsta_accessglobalatoms, $winsta_createdesktop, $winsta_enumdesktops, $winsta_enumerate, $winsta_exitwindows, $winsta_readattributes, $winsta_readscreen, $winsta_writeattributes)
Global Const $cwf_create_only = 1
Global Const $gcl_cbclsextra = -20
Global Const $gcl_cbwndextra = -18
Global Const $gcl_hbrbackground = -10
Global Const $gcl_hcursor = -12
Global Const $gcl_hicon = -14
Global Const $gcl_hiconsm = -34
Global Const $gcl_hmodule = -16
Global Const $gcl_menuname = -8
Global Const $gcl_style = -26
Global Const $gcl_wndproc = -24
Global Const $dockinfo_docked = 2
Global Const $dockinfo_undocked = 1
Global Const $dockinfo_user_supplied = 4
Global Const $dockinfo_user_docked = 5
Global Const $dockinfo_user_undocked = 6
Global Const $gui_caretblinking = 1
Global Const $gui_inmenumode = 4
Global Const $gui_inmovesize = 2
Global Const $gui_popupmenumode = 16
Global Const $gui_systemmenumode = 8
Global Const $handle_flag_inherit = 1
Global Const $handle_flag_protect_from_close = 2
Global Const $get_module_handle_ex_flag_from_address = 4
Global Const $get_module_handle_ex_flag_pin = 1
Global Const $get_module_handle_ex_flag_unchanged_refcount = 2
Global Const $get_module_handle_ex_flag_default = 0
Global Const $processor_architecture_amd64 = 9
Global Const $processor_architecture_ia64 = 6
Global Const $processor_architecture_intel = 0
Global Const $processor_architecture_unknown = 65535
Global Const $processor_intel_386 = 386
Global Const $processor_intel_486 = 486
Global Const $processor_intel_pentium = 586
Global Const $processor_intel_ia64 = 2200
Global Const $processor_amd_x8664 = 8664
Global Const $uoi_flags = 1
Global Const $uoi_heapsize = 5
Global Const $uoi_io = 6
Global Const $uoi_name = 2
Global Const $uoi_type = 3
Global Const $uoi_user_sid = 4
Global Const $df_allowotheraccounthook = 1
Global Const $wsf_visible = 1
Global Const $ver_suite_backoffice = 4
Global Const $ver_suite_blade = 1024
Global Const $ver_suite_compute_server = 16384
Global Const $ver_suite_datacenter = 128
Global Const $ver_suite_enterprise = 2
Global Const $ver_suite_embeddednt = 64
Global Const $ver_suite_personal = 512
Global Const $ver_suite_singleuserts = 256
Global Const $ver_suite_smallbusiness = 1
Global Const $ver_suite_smallbusiness_restricted = 32
Global Const $ver_suite_storage_server = 8192
Global Const $ver_suite_terminal = 16
Global Const $ver_suite_wh_server = 32768
Global Const $ver_nt_domain_controller = 2
Global Const $ver_nt_server = 3
Global Const $ver_nt_workstation = 1
Global Const $wda_monitor = 1
Global Const $wda_none = 0
Global Const $pf_3dnow_instructions_available = 7
Global Const $pf_channels_enabled = 16
Global Const $pf_compare_exchange_double = 2
Global Const $pf_compare_exchange128 = 14
Global Const $pf_compare64_exchange128 = 15
Global Const $pf_floating_point_emulated = 1
Global Const $pf_floating_point_precision_errata = 0
Global Const $pf_mmx_instructions_available = 3
Global Const $pf_nx_enabled = 12
Global Const $pf_pae_enabled = 9
Global Const $pf_rdtsc_instruction_available = 8
Global Const $pf_sse3_instructions_available = 13
Global Const $pf_xmmi_instructions_available = 6
Global Const $pf_xmmi64_instructions_available = 10
Global Const $pf_xsave_enabled = 17
Global Const $keyeventf_extendedkey = 1
Global Const $keyeventf_keyup = 2
Global Const $lim_small = 0
Global Const $lim_large = 1
Global Const $mapvk_vk_to_char = 2
Global Const $mapvk_vk_to_vsc = 0
Global Const $mapvk_vk_to_vsc_ex = 4
Global Const $mapvk_vsc_to_vk = 1
Global Const $mapvk_vsc_to_vk_ex = 3
Global Const $mod_alt = 1
Global Const $mod_control = 2
Global Const $mod_norepeat = 16384
Global Const $mod_shift = 4
Global Const $mod_win = 8
Global Const $guid_acdc_power_source = "{5D3E9A59-E9D5-4B00-A6BD-FF34FF516548}"
Global Const $guid_battery_percentage_remaining = "{A7AD8041-B45A-4CAE-87A3-EECBB468A9E1}"
Global Const $guid_idle_background_task = "{515C31D8-F734-163D-A0FD-11A08C91E8F1}"
Global Const $guid_monitor_power_on = "{02731015-4510-4526-99E6-E5A17EBD1AEA}"
Global Const $guid_powerscheme_personality = "{245D8541-3943-4422-B025-13A784F679B7}"
Global Const $guid_system_awaymode = "{98A7F580-01F7-48AA-9C0F-44352C29E5C0}"
Global Const $guid_min_power_savings = "{8C5E7FDA-E8BF-4A96-9A85-A6E23A8C635C}"
Global Const $guid_max_power_savings = "{A1841308-3541-4FAB-BC81-F71556F20B4A}"
Global Const $guid_typical_power_savings = "{381B4222-F694-41F0-9685-FF5BB260DF2E}"
Global Const $hshell_windowcreated = 1
Global Const $hshell_windowdestroyed = 2
Global Const $hshell_activateshellwindow = 3
Global Const $hshell_windowactivated = 4
Global Const $hshell_getminrect = 5
Global Const $hshell_redraw = 6
Global Const $hshell_taskman = 7
Global Const $hshell_language = 8
Global Const $hshell_sysmenu = 9
Global Const $hshell_endtask = 10
Global Const $hshell_accessibilitystate = 11
Global Const $hshell_appcommand = 12
Global Const $hshell_windowreplaced = 13
Global Const $hshell_windowreplacing = 14
Global Const $hshell_rudeappactivated = 32772
Global Const $hshell_flash = 32774
Global Const $hwnd_broadcast = 65535
Global Const $smto_block = 1
Global Const $smto_normal = 0
Global Const $smto_abortifhung = 2
Global Const $smto_notimeoutifnothung = 8
Global Const $smto_erroronexit = 32
Global Const $inputlangchange_backward = 4
Global Const $inputlangchange_forward = 2
Global Const $inputlangchange_syscharset = 1
Global Const $event_min = 1
Global Const $event_system_sound = 1
Global Const $event_system_alert = 2
Global Const $event_system_foreground = 3
Global Const $event_system_menustart = 4
Global Const $event_system_menuend = 5
Global Const $event_system_menupopupstart = 6
Global Const $event_system_menupopupend = 7
Global Const $event_system_capturestart = 8
Global Const $event_system_captureend = 9
Global Const $event_system_movesizestart = 10
Global Const $event_system_movesizeend = 11
Global Const $event_system_contexthelpstart = 12
Global Const $event_system_contexthelpend = 13
Global Const $event_system_dragdropstart = 14
Global Const $event_system_dragdropend = 15
Global Const $event_system_dialogstart = 16
Global Const $event_system_dialogend = 17
Global Const $event_system_scrollingstart = 18
Global Const $event_system_scrollingend = 19
Global Const $event_system_switchstart = 20
Global Const $event_system_switchend = 21
Global Const $event_system_minimizestart = 22
Global Const $event_system_minimizeend = 23
Global Const $event_system_desktopswitch = 32
Global Const $event_object_create = 32768
Global Const $event_object_destroy = 32769
Global Const $event_object_show = 32770
Global Const $event_object_hide = 32771
Global Const $event_object_reorder = 32772
Global Const $event_object_focus = 32773
Global Const $event_object_selection = 32774
Global Const $event_object_selectionadd = 32775
Global Const $event_object_selectionremove = 32776
Global Const $event_object_selectionwithin = 32777
Global Const $event_object_statechange = 32778
Global Const $event_object_locationchange = 32779
Global Const $event_object_namechange = 32780
Global Const $event_object_descriptionchange = 32781
Global Const $event_object_valuechange = 32782
Global Const $event_object_parentchange = 32783
Global Const $event_object_helpchange = 32784
Global Const $event_object_defactionchange = 32785
Global Const $event_object_acceleratorchange = 32786
Global Const $event_object_invoked = 32787
Global Const $event_object_textselectionchanged = 32788
Global Const $event_object_contentscrolled = 32789
Global Const $event_max = 2147483647
Global Const $winevent_incontext = 4
Global Const $winevent_outofcontext = 0
Global Const $winevent_skipownprocess = 2
Global Const $winevent_skipownthread = 1
Global Const $tme_cancel = -2147483648
Global Const $tme_hover = 1
Global Const $tme_leave = 2
Global Const $tme_nonclient = 16
Global Const $tme_query = 1073741824
Global Const $desktop_createmenu = 4
Global Const $desktop_createwindow = 2
Global Const $desktop_enumerate = 64
Global Const $desktop_hookcontrol = 8
Global Const $desktop_journalplayback = 32
Global Const $desktop_journalrecord = 16
Global Const $desktop_readobjects = 1
Global Const $desktop_switchdesktop = 256
Global Const $desktop_writeobjects = 128
Global Const $desktop_all_access = BitOR($desktop_createmenu, $desktop_createwindow, $desktop_enumerate, $desktop_hookcontrol, $desktop_journalplayback, $desktop_journalrecord, $desktop_readobjects, $desktop_switchdesktop, $desktop_writeobjects)
Global Const $ridev_appkeys = 1024
Global Const $ridev_capturemouse = 512
Global Const $ridev_devnotify = 8192
Global Const $ridev_exclude = 16
Global Const $ridev_exinputsink = 4096
Global Const $ridev_inputsink = 256
Global Const $ridev_nohotkeys = 512
Global Const $ridev_nolegacy = 48
Global Const $ridev_pageonly = 32
Global Const $ridev_remove = 1
Global Const $rid_header = 268435461
Global Const $rid_input = 268435459
Global Const $rim_typehid = 2
Global Const $rim_typekeyboard = 1
Global Const $rim_typemouse = 0
Global Const $ridi_devicename = 536870919
Global Const $ridi_deviceinfo = 536870923
Global Const $ridi_preparseddata = 536870917
Global Const $mouse_attributes_changed = 4
Global Const $mouse_move_absolute = 1
Global Const $mouse_move_relative = 0
Global Const $mouse_virtual_desktop = 2
Global Const $ri_mouse_left_button_down = 1
Global Const $ri_mouse_left_button_up = 2
Global Const $ri_mouse_middle_button_down = 16
Global Const $ri_mouse_middle_button_up = 32
Global Const $ri_mouse_right_button_down = 4
Global Const $ri_mouse_right_button_up = 8
Global Const $ri_mouse_button_1_down = $ri_mouse_left_button_down
Global Const $ri_mouse_button_1_up = $ri_mouse_left_button_up
Global Const $ri_mouse_button_2_down = $ri_mouse_right_button_down
Global Const $ri_mouse_button_2_up = $ri_mouse_right_button_up
Global Const $ri_mouse_button_3_down = $ri_mouse_middle_button_down
Global Const $ri_mouse_button_3_up = $ri_mouse_middle_button_up
Global Const $ri_mouse_button_4_down = 64
Global Const $ri_mouse_button_4_up = 128
Global Const $ri_mouse_button_5_down = 256
Global Const $ri_mouse_button_5_up = 512
Global Const $ri_mouse_wheel = 1024
Global Const $ri_key_break = 1
Global Const $ri_key_e0 = 2
Global Const $ri_key_e1 = 4
Global Const $ri_key_make = 0
#Region Global Variables and Constants
	Global Const $tagosversioninfoex = $tagosversioninfo & ";ushort ServicePackMajor;ushort ServicePackMinor;ushort SuiteMask;byte ProductType;byte Reserved"
	Global Const $tagrawinputdevice = "struct;ushort UsagePage;ushort Usage;dword Flags;hwnd hTarget;endstruct"
	Global Const $tagrawinputheader = "struct;dword Type;dword Size;handle hDevice;wparam wParam;endstruct"
	Global Const $tagrawmouse = "ushort Flags;ushort Alignment;ushort ButtonFlags;ushort ButtonData;ulong RawButtons;long LastX;long LastY;ulong ExtraInformation;"
	Global Const $tagrawkeyboard = "ushort MakeCode;ushort Flags;ushort Reserved;ushort VKey;uint Message;ulong ExtraInformation;"
	Global Const $tagrawhid = "dword SizeHid;dword Count;"
	Global Const $tagrawinputmouse = $tagrawinputheader & ";" & $tagrawmouse
	Global Const $tagrawinputkeyboard = $tagrawinputheader & ";" & $tagrawkeyboard
	Global Const $tagrawinputhid = $tagrawinputheader & ";" & $tagrawhid
	Global Const $tagrid_device_info_mouse = "struct;dword Id;dword NumberOfButtons;dword SampleRate;int HasHorizontalWheel;endstruc"
	Global Const $tagrid_device_info_keyboard = "struct;dword KbType;dword KbSubType;dword KeyboardMode;dword NumberOfFunctionKeys;dword NumberOfIndicators;dword NumberOfKeysTotal;endstruc"
	Global Const $tagrid_device_info_hid = "struct;dword VendorId;dword ProductId;dword VersionNumber;ushort UsagePage;ushort Usage;endstruc"
	Global Const $tagrid_info_mouse = "dword Size;dword Type;" & $tagrid_device_info_mouse & ";dword Unused[2];"
	Global Const $tagrid_info_keyboard = "dword Size;dword Type;" & $tagrid_device_info_keyboard
	Global Const $tagrid_info_hid = "dword Size;dword Type;" & $tagrid_device_info_hid & ";dword Unused[2]"
	Global Const $tagshellhookinfo = "hwnd hWnd;" & $tagrect
	Global Const $tagupdatelayeredwindowinfo = "dword Size;hwnd hDstDC;long DstX;long DstY;long cX;long cY;hwnd hSrcDC;long SrcX;long SrcY;dword crKey;byte BlendOp;byte BlendFlags;byte Alpha;byte AlphaFormat;dword Flags;long DirtyLeft;long DirtyTop;long DirtyRight;long DirtyBottom"
	Global Const $taguserobjectflags = "int Inherit;int Reserved;dword Flags"
	Global Const $tagwindowinfo = "dword Size;struct;long rWindow[4];endstruct;struct;long rClient[4];endstruct;dword Style;dword ExStyle;dword WindowStatus;uint cxWindowBorders;uint cyWindowBorders;word atomWindowType;word CreatorVersion"
	Global Const $tagwndclass = "uint Style;ptr hWndProc;int ClsExtra;int WndExtra;ptr hInstance;ptr hIcon;ptr hCursor;ptr hBackground;ptr MenuName;ptr ClassName"
	Global Const $tagwndclassex = "uint Size;uint Style;ptr hWndProc;int ClsExtra;int WndExtra;ptr hInstance;ptr hIcon;ptr hCursor;ptr hBackground;ptr MenuName;ptr ClassName;ptr hIconSm"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_activatekeyboardlayout($hlocale, $iflag = 0)
		Local $aret = DllCall("user32.dll", "handle", "ActivateKeyboardLayout", "handle", $hlocale, "uint", $iflag)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_addclipboardformatlistener($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "AddClipboardFormatListener", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_adjustwindowrectex(ByRef $trect, $istyle, $iexstyle = 0, $bmenu = False)
		Local $aret = DllCall("user32.dll", "bool", "AdjustWindowRectEx", "struct*", $trect, "dword", $istyle, "bool", $bmenu, "dword", $iexstyle)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_animatewindow($hwnd, $iflags, $iduration = 1000)
		Local $aret = DllCall("user32.dll", "bool", "AnimateWindow", "hwnd", $hwnd, "dword", $iduration, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_begindeferwindowpos($iamount = 1)
		Local $aret = DllCall("user32.dll", "handle", "BeginDeferWindowPos", "int", $iamount)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_bringwindowtotop($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "BringWindowToTop", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_broadcastsystemmessage($imsg, $wparam = 0, $lparam = 0, $iflags = 0, $irecipients = 0)
		Local $aret = DllCall("user32.dll", "long", "BroadcastSystemMessageW", "dword", $iflags, "dword*", $irecipients, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
		If @error OR ($aret[0] = -1) Then Return SetError(@error, @extended, -1)
		Return SetExtended($aret[2], $aret[0])
	EndFunc

	Func _winapi_callwindowprocw($pprevwndproc, $hwnd, $imsg, $wparam, $lparam)
		Local $aret = DllCall("user32.dll", "lresult", "CallWindowProcW", "ptr", $pprevwndproc, "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_cascadewindows($awnds, $trect = 0, $hparent = 0, $iflags = 0, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($awnds, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
		Local $icount = $iend - $istart + 1
		Local $twnds = DllStructCreate("hwnd[" & $icount & "]")
		$icount = 1
		For $i = $istart To $iend
			DllStructSetData($twnds, 1, $awnds[$i], $icount)
			$icount += 1
		Next
		Local $aret = DllCall("user32.dll", "word", "CascadeWindows", "hwnd", $hparent, "uint", $iflags, "struct*", $trect, "uint", $icount - 1, "struct*", $twnds)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_changewindowmessagefilterex($hwnd, $imsg, $iaction)
		Local $tcfs, $aret
		If $hwnd AND ($__winver > 1536) Then
			Local Const $tagchangefilterstruct = "dword cbSize; dword ExtStatus"
			$tcfs = DllStructCreate($tagchangefilterstruct)
			DllStructSetData($tcfs, 1, DllStructGetSize($tcfs))
			$aret = DllCall("user32.dll", "bool", "ChangeWindowMessageFilterEx", "hwnd", $hwnd, "uint", $imsg, "dword", $iaction, "struct*", $tcfs)
		Else
			$tcfs = 0
			$aret = DllCall("user32.dll", "bool", "ChangeWindowMessageFilter", "uint", $imsg, "dword", $iaction)
		EndIf
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return SetExtended(DllStructGetData($tcfs, 2), 1)
	EndFunc

	Func _winapi_childwindowfrompointex($hwnd, $tpoint, $iflags = 0)
		Local $aret = DllCall("user32.dll", "hwnd", "ChildWindowFromPointEx", "hwnd", $hwnd, "struct", $tpoint, "uint", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_closedesktop($hdesktop)
		Local $aret = DllCall("user32.dll", "bool", "CloseDesktop", "handle", $hdesktop)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_closewindow($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "CloseWindow", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_closewindowstation($hstation)
		Local $aret = DllCall("user32.dll", "bool", "CloseWindowStation", "handle", $hstation)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_compressbuffer($puncompressedbuffer, $iuncompressedsize, $pcompressedbuffer, $icompressedsize, $iformatandengine = 2)
		Local $aret, $pworkspace = 0, $ierror = 0
		Do
			$aret = DllCall("ntdll.dll", "uint", "RtlGetCompressionWorkSpaceSize", "ushort", $iformatandengine, "ulong*", 0, "ulong*", 0)
			If @error OR $aret[0] Then
				$ierror = @error + 20
				ExitLoop
			EndIf
			$pworkspace = __heapalloc($aret[2])
			If @error Then
				$ierror = @error + 100
				ExitLoop
			EndIf
			$aret = DllCall("ntdll.dll", "uint", "RtlCompressBuffer", "ushort", $iformatandengine, "struct*", $puncompressedbuffer, "ulong", $iuncompressedsize, "struct*", $pcompressedbuffer, "ulong", $icompressedsize, "ulong", 4096, "ulong*", 0, "ptr", $pworkspace)
			If @error OR $aret[0] OR NOT $aret[7] Then
				$ierror = @error + 30
				ExitLoop
			EndIf
		Until 1
		__heapfree($pworkspace)
		If $ierror Then
			If IsArray($aret) Then
				Return SetError(10, $aret[0], 0)
			Else
				Return SetError($ierror, 0, 0)
			EndIf
		EndIf
		Return $aret[7]
	EndFunc

	Func _winapi_computecrc32($pmemory, $ilength)
		If _winapi_isbadreadptr($pmemory, $ilength) Then Return SetError(1, @extended, 0)
		Local $aret = DllCall("ntdll.dll", "dword", "RtlComputeCrc32", "dword", 0, "struct*", $pmemory, "int", $ilength)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createbuffer($ilength, $pbuffer = 0, $babort = True)
		$pbuffer = __heaprealloc($pbuffer, $ilength, 0, $babort)
		If @error Then Return SetError(@error, @extended, 0)
		Return $pbuffer
	EndFunc

	Func _winapi_createbufferfromstruct($tstruct, $pbuffer = 0, $babort = True)
		If NOT IsDllStruct($tstruct) Then Return SetError(1, 0, 0)
		$pbuffer = __heaprealloc($pbuffer, DllStructGetSize($tstruct), 0, $babort)
		If @error Then Return SetError(@error + 100, @extended, 0)
		_winapi_movememory($pbuffer, $tstruct, DllStructGetSize($tstruct))
		Return $pbuffer
	EndFunc

	Func _winapi_createdesktop($sname, $iaccess = 2, $iflags = 0, $iheap = 0, $tsecurity = 0)
		Local $aret
		If $iheap Then
			$aret = DllCall("user32.dll", "handle", "CreateDesktopExW", "wstr", $sname, "ptr", 0, "ptr", 0, "dword", $iflags, "dword", $iaccess, "struct*", $tsecurity, "ulong", $iheap, "ptr", 0)
		Else
			$aret = DllCall("user32.dll", "handle", "CreateDesktopW", "wstr", $sname, "ptr", 0, "ptr", 0, "dword", $iflags, "dword", $iaccess, "struct*", $tsecurity)
		EndIf
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createstring($sstring, $pstring = 0, $ilength = -1, $bunicode = True, $babort = True)
		$ilength = Number($ilength)
		If $ilength >= 0 Then
			$sstring = StringLeft($sstring, $ilength)
		Else
			$ilength = StringLen($sstring)
		EndIf
		Local $isize = $ilength + 1
		If $bunicode Then
			$isize *= 2
		EndIf
		$pstring = __heaprealloc($pstring, $isize, 0, $babort)
		If @error Then Return SetError(@error, @extended, 0)
		DllStructSetData(DllStructCreate(__iif($bunicode, "wchar", "char") & "[" & ($ilength + 1) & "]", $pstring), 1, $sstring)
		Return SetExtended($ilength, $pstring)
	EndFunc

	Func _winapi_createwindowstation($sname = "", $iaccess = 0, $iflags = 0, $tsecurity = 0)
		Local $aret = DllCall("user32.dll", "handle", "CreateWindowStationW", "wstr", $sname, "dword", $iflags, "dword", $iaccess, "struct*", $tsecurity)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_decompressbuffer($puncompressedbuffer, $iuncompressedsize, $pcompressedbuffer, $icompressedsize, $iformat = 2)
		Local $aret = DllCall("ntdll.dll", "long", "RtlDecompressBuffer", "ushort", $iformat, "struct*", $puncompressedbuffer, "ulong", $iuncompressedsize, "struct*", $pcompressedbuffer, "ulong", $icompressedsize, "ulong*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[6]
	EndFunc

	Func _winapi_deferwindowpos($hinfo, $hwnd, $hafter, $ix, $iy, $iwidth, $iheight, $iflags)
		Local $aret = DllCall("user32.dll", "handle", "DeferWindowPos", "handle", $hinfo, "hwnd", $hwnd, "hwnd", $hafter, "int", $ix, "int", $iy, "int", $iwidth, "int", $iheight, "uint", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_defrawinputproc($parawinput, $iinput)
		Local $aret = DllCall("user32.dll", "lresult", "DefRawInputProc", "ptr", $parawinput, "int", $iinput, "uint", DllStructGetSize(DllStructCreate($tagrawinputheader)))
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_defwindowprocw($hwnd, $imsg, $wparam, $lparam)
		Local $aret = DllCall("user32.dll", "lresult", "DefWindowProcW", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_deregistershellhookwindow($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "DeregisterShellHookWindow", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_dragacceptfiles($hwnd, $baccept = True)
		DllCall("shell32.dll", "none", "DragAcceptFiles", "hwnd", $hwnd, "bool", $baccept)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_dragfinish($hdrop)
		DllCall("shell32.dll", "none", "DragFinish", "handle", $hdrop)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_dragqueryfileex($hdrop, $iflag = 0)
		Local $aret = DllCall("shell32.dll", "uint", "DragQueryFileW", "handle", $hdrop, "uint", -1, "ptr", 0, "uint", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If NOT $aret[0] Then Return SetError(10, 0, 0)
		Local $icount = $aret[0]
		Local $aresult[$icount + 1]
		For $i = 0 To $icount - 1
			$aret = DllCall("shell32.dll", "uint", "DragQueryFileW", "handle", $hdrop, "uint", $i, "wstr", "", "uint", 4096)
			If NOT $aret[0] Then Return SetError(11, 0, 0)
			If $iflag Then
				Local $bdir = _winapi_pathisdirectory($aret[3])
				If (($iflag = 1) AND $bdir) OR (($iflag = 2) AND NOT $bdir) Then
					ContinueLoop
				EndIf
			EndIf
			$aresult[$i + 1] = $aret[3]
			$aresult[0] += 1
		Next
		If NOT $aresult[0] Then Return SetError(12, 0, 0)
		__inc($aresult, -1)
		Return $aresult
	EndFunc

	Func _winapi_dragquerypoint($hdrop)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("shell32.dll", "bool", "DragQueryPoint", "handle", $hdrop, "struct*", $tpoint)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tpoint
	EndFunc

	Func _winapi_enddeferwindowpos($hinfo)
		Local $aret = DllCall("user32.dll", "bool", "EndDeferWindowPos", "handle", $hinfo)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_enumchildwindows($hwnd, $bvisible = True)
		If NOT _winapi_getwindow($hwnd, 5) Then Return SetError(2, 0, 0)
		Local $henumproc = DllCallbackRegister("__EnumWindowsProc", "bool", "hwnd;lparam")
		Dim $__g_venum[101][2] = [[0]]
		DllCall("user32.dll", "bool", "EnumChildWindows", "hwnd", $hwnd, "ptr", DllCallbackGetPtr($henumproc), "lparam", $bvisible)
		If @error OR NOT $__g_venum[0][0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumdesktops($hstation)
		If StringCompare(_winapi_getuserobjectinformation($hstation, 3), "WindowStation") Then Return SetError(1, 0, 0)
		Local $henumproc = DllCallbackRegister("__EnumDefaultProc", "bool", "ptr;lparam")
		Dim $__g_venum[101] = [0]
		Local $aret = DllCall("user32.dll", "bool", "EnumDesktopsW", "handle", $hstation, "ptr", DllCallbackGetPtr($henumproc), "lparam", 0)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumdesktopwindows($hdesktop, $bvisible = True)
		If StringCompare(_winapi_getuserobjectinformation($hdesktop, 3), "Desktop") Then Return SetError(1, 0, 0)
		Local $henumproc = DllCallbackRegister("__EnumWindowsProc", "bool", "hwnd;lparam")
		Dim $__g_venum[101][2] = [[0]]
		Local $aret = DllCall("user32.dll", "bool", "EnumDesktopWindows", "handle", $hdesktop, "ptr", DllCallbackGetPtr($henumproc), "lparam", $bvisible)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0][0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumpagefiles()
		Local $ainfo = _winapi_getsysteminfo()
		Local $henumproc = DllCallbackRegister("__EnumPageFilesProc", "bool", "lparam;ptr;ptr")
		Dim $__g_venum[101][4] = [[0]]
		Local $aret = DllCall(@SystemDir & "\psapi.dll", "bool", "EnumPageFilesW", "ptr", DllCallbackGetPtr($henumproc), "lparam", $ainfo[1])
		If @error OR NOT $aret[0] OR NOT $__g_venum[0][0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumrawinputdevices()
		Local Const $tagrawinputdevicelist = "struct;handle hDevice;dword Type;endstruct"
		Local $tridl, $ilength = DllStructGetSize(DllStructCreate($tagrawinputdevicelist))
		Local $aret = DllCall("user32.dll", "uint", "GetRawInputDeviceList", "ptr", 0, "uint*", 0, "uint", $ilength)
		If @error Then Return SetError(@error + 10, @extended, 0)
		If ($aret[0] = 4294967295) OR (NOT $aret[2]) Then Return SetError(10, -1, 0)
		Local $tdata = DllStructCreate("byte[" & ($aret[2] * $ilength) & "]")
		Local $pdata = DllStructGetPtr($tdata)
		If @error Then Return SetError(@error + 20, 0, 0)
		$aret = DllCall("user32.dll", "uint", "GetRawInputDeviceList", "ptr", $pdata, "uint*", $aret[2], "uint", $ilength)
		If ($aret[0] = 4294967295) OR (NOT $aret[0]) Then Return SetError(1, -1, 0)
		Local $aresult[$aret[2] + 1][2] = [[$aret[2]]]
		For $i = 1 To $aret[2]
			$tridl = DllStructCreate("ptr;dword", $pdata + $ilength * ($i - 1))
			For $j = 0 To 1
				$aresult[$i][$j] = DllStructGetData($tridl, $j + 1)
			Next
		Next
		Return $aresult
	EndFunc

	Func _winapi_enumwindowstations()
		Local $henumproc = DllCallbackRegister("__EnumDefaultProc", "bool", "ptr;lparam")
		Dim $__g_venum[101] = [0]
		Local $aret = DllCall("user32.dll", "bool", "EnumWindowStationsW", "ptr", DllCallbackGetPtr($henumproc), "lparam", 0)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_equalmemory($psource1, $psource2, $ilength)
		If _winapi_isbadreadptr($psource1, $ilength) Then Return SetError(11, @extended, 0)
		If _winapi_isbadreadptr($psource2, $ilength) Then Return SetError(12, @extended, 0)
		Local $aret = DllCall("ntdll.dll", "ulong_ptr", "RtlCompareMemory", "struct*", $psource1, "struct*", $psource2, "ulong_ptr", $ilength)
		If @error Then Return SetError(@error, @extended, 0)
		Return Number($aret[0] = $ilength)
	EndFunc

	Func _winapi_fillmemory($pmemory, $ilength, $ivalue = 0)
		If _winapi_isbadwriteptr($pmemory, $ilength) Then Return SetError(11, @extended, 0)
		DllCall("ntdll.dll", "none", "RtlFillMemory", "struct*", $pmemory, "ulong_ptr", $ilength, "byte", $ivalue)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_freememory($pmemory)
		If NOT __heapfree($pmemory, 1) Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_getactivewindow()
		Local $aret = DllCall("user32.dll", "hwnd", "GetActiveWindow")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getclassinfoex($sclass, $hinstance = 0)
		Local $stypeofclass = "ptr"
		If IsString($sclass) Then
			$stypeofclass = "wstr"
		EndIf
		Local $twndclassex = DllStructCreate($tagwndclassex)
		Local $aret = DllCall("user32.dll", "bool", "GetClassInfoExW", "handle", $hinstance, $stypeofclass, $sclass, "struct*", $twndclassex)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $twndclassex
	EndFunc

	Func _winapi_getclasslongex($hwnd, $iindex)
		Local $aret
		If @AutoItX64 Then
			$aret = DllCall("user32.dll", "ulong_ptr", "GetClassLongPtrW", "hwnd", $hwnd, "int", $iindex)
		Else
			$aret = DllCall("user32.dll", "dword", "GetClassLongW", "hwnd", $hwnd, "int", $iindex)
		EndIf
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getclipboardsequencenumber()
		Local $aret = DllCall("user32.dll", "dword", "GetClipboardSequenceNumber")
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getcurrenthwprofile()
		Local $taghw_profile_info = "dword DockInfo;wchar szHwProfileGuid[39];wchar szHwProfileName[80]"
		Local $thwpi = DllStructCreate($taghw_profile_info)
		Local $aret = DllCall("advapi32.dll", "bool", "GetCurrentHwProfileW", "struct*", $thwpi)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[3]
		For $i = 0 To 2
			$aresult[$i] = DllStructGetData($thwpi, $i + 1)
		Next
		Return $aresult
	EndFunc

	Func _winapi_getdefaultprinter()
		Local $aret = DllCall("winspool.drv", "bool", "GetDefaultPrinterW", "wstr", "", "dword*", 2048)
		If @error Then Return SetError(@error, @extended, "")
		If NOT $aret[0] Then Return SetError(10, _winapi_getlasterror(), "")
		Return $aret[1]
	EndFunc

	Func _winapi_getdlldirectory()
		Local $aret = DllCall("kernel32.dll", "dword", "GetDllDirectoryW", "dword", 4096, "wstr", "")
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_geteffectiveclientrect($hwnd, $actrl, $istart = 0, $iend = -1)
		If NOT IsArray($actrl) Then
			Local $ictrl = $actrl
			Dim $actrl[1] = [$ictrl]
			$istart = 0
			$iend = 0
		EndIf
		If __checkerrorarraybounds($actrl, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
		Local $icount = $iend - $istart + 1
		Local $tctrl = DllStructCreate("uint64[" & ($icount + 2) & "]")
		$icount = 2
		For $i = $istart To $iend
			If IsHWnd($actrl[$i]) Then
				$actrl[$i] = _winapi_getdlgctrlid($actrl[$i])
			EndIf
			DllStructSetData($tctrl, 1, _winapi_makeqword(1, $actrl[$i]), $icount)
			$icount += 1
		Next
		Local $trect = DllStructCreate($tagrect)
		DllCall("comctl32.dll", "none", "GetEffectiveClientRect", "hwnd", $hwnd, "struct*", $trect, "struct*", $tctrl)
		If @error Then Return SetError(@error, @extended, 0)
		Return $trect
	EndFunc

	Func _winapi_getguithreadinfo($ithreadid)
		Local Const $tagguithreadinfo = "dword Size;dword Flags;hwnd hWndActive;hwnd hWndFocus;hwnd hWndCapture;hwnd hWndMenuOwner;hwnd hWndMoveSize;hwnd hWndCaret;long rcCaret[4]"
		Local $tgti = DllStructCreate($tagguithreadinfo)
		DllStructSetData($tgti, 1, DllStructGetSize($tgti))
		Local $aret = DllCall("user32.dll", "bool", "GetGUIThreadInfo", "dword", $ithreadid, "struct*", $tgti)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[11]
		For $i = 0 To 6
			$aresult[$i] = DllStructGetData($tgti, $i + 2)
		Next
		For $i = 1 To 4
			$aresult[6 + $i] = DllStructGetData($tgti, 6 + 2, $i)
		Next
		For $i = 9 To 10
			$aresult[$i] -= $aresult[$i - 2]
		Next
		Return $aresult
	EndFunc

	Func _winapi_gethandleinformation($hobject)
		Local $aret = DllCall("kernel32.dll", "bool", "GetHandleInformation", "handle", $hobject, "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[2]
	EndFunc

	Func _winapi_getidletime()
		Local $tlastinputinfo = DllStructCreate("uint;dword")
		DllStructSetData($tlastinputinfo, 1, DllStructGetSize($tlastinputinfo))
		Local $aret = DllCall("user32.dll", "bool", "GetLastInputInfo", "struct*", $tlastinputinfo)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return _winapi_gettickcount() - DllStructGetData($tlastinputinfo, 2)
	EndFunc

	Func _winapi_getkeyboardlayout($hwnd)
		Local $aret = DllCall("user32.dll", "dword", "GetWindowThreadProcessId", "hwnd", $hwnd, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		$aret = DllCall("user32.dll", "handle", "GetKeyboardLayout", "dword", $aret[0])
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getkeyboardlayoutlist()
		Local $aret = DllCall("user32.dll", "uint", "GetKeyboardLayoutList", "int", 0, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 20, @extended, 0)
		Local $tdata = DllStructCreate("handle[" & $aret[0] & "]")
		$aret = DllCall("user32.dll", "uint", "GetKeyboardLayoutList", "int", $aret[0], "struct*", $tdata)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $alist[$aret[0] + 1] = [$aret[0]]
		For $i = 1 To $alist[0]
			$alist[$i] = DllStructGetData($tdata, 1, $i)
		Next
		Return $alist
	EndFunc

	Func _winapi_getkeyboardstate()
		Local $tdata = DllStructCreate("byte[256]")
		Local $aret = DllCall("user32.dll", "bool", "GetKeyboardState", "struct*", $tdata)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tdata
	EndFunc

	Func _winapi_getkeyboardtype($itype)
		Local $aret = DllCall("user32.dll", "int", "GetKeyboardType", "int", $itype)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getkeynametext($lparam)
		Local $aret = DllCall("user32.dll", "int", "GetKeyNameTextW", "long", $lparam, "wstr", "", "int", 128)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_getkeystate($vkey)
		Local $aret = DllCall("user32.dll", "short", "GetKeyState", "int", $vkey)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getlastactivepopup($hwnd)
		Local $aret = DllCall("user32.dll", "hwnd", "GetLastActivePopup", "hwnd", $hwnd)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		If $aret[0] = $hwnd Then Return SetError(1, 0, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getmemorysize($pmemory)
		Local $iresult = __heapsize($pmemory, 1)
		If @error Then Return SetError(@error, @extended, 0)
		Return $iresult
	EndFunc

	Func _winapi_getmessageextrainfo()
		Local $aret = DllCall("user32.dll", "lparam", "GetMessageExtraInfo")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getmodulehandleex($smodule, $iflags = 0)
		Local $stypeofmodule = "ptr"
		If IsString($smodule) Then
			If StringStripWS($smodule, $str_stripleading + $str_striptrailing) Then
				$stypeofmodule = "wstr"
			Else
				$smodule = 0
			EndIf
		EndIf
		Local $aret = DllCall("kernel32.dll", "bool", "GetModuleHandleExW", "dword", $iflags, $stypeofmodule, $smodule, "ptr*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[3]
	EndFunc

	Func _winapi_getmonitorinfo($hmonitor)
		Local $tmiex = DllStructCreate("dword;long[4];long[4];dword;wchar[32]")
		DllStructSetData($tmiex, 1, DllStructGetSize($tmiex))
		Local $aret = DllCall("user32.dll", "bool", "GetMonitorInfoW", "handle", $hmonitor, "struct*", $tmiex)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[4]
		For $i = 0 To 1
			$aresult[$i] = DllStructCreate($tagrect)
			_winapi_movememory($aresult[$i], DllStructGetPtr($tmiex, $i + 2), 16)
		Next
		$aresult[3] = DllStructGetData($tmiex, 5)
		Switch DllStructGetData($tmiex, 4)
			Case 1
				$aresult[2] = 1
			Case Else
				$aresult[2] = 0
		EndSwitch
		Return $aresult
	EndFunc

	Func _winapi_getmuilanguage()
		Local $aret = DllCall("comctl32.dll", "word", "GetMUILanguage")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getobjectinfobyhandle($hobject)
		Local $tagpublic_object_basic_information = "ulong Attributes;ulong GrantedAcess;ulong HandleCount;ulong PointerCount;ulong Reserved[10]"
		Local $tpobi = DllStructCreate($tagpublic_object_basic_information)
		Local $aret = DllCall("ntdll.dll", "long", "ZwQueryObject", "handle", $hobject, "uint", 0, "struct*", $tpobi, "ulong", DllStructGetSize($tpobi), "ptr", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $aresult[4]
		For $i = 0 To 3
			$aresult[$i] = DllStructGetData($tpobi, $i + 1)
		Next
		Return $aresult
	EndFunc

	Func _winapi_getobjectnamebyhandle($hobject)
		Local $tagunicode_string = "struct;ushort Length;ushort MaximumLength;ptr Buffer;endstruct"
		Local $tagpublic_object_type_information = "struct;" & $tagunicode_string & ";ulong Reserved[22];endstruct"
		Local $tpoti = DllStructCreate($tagpublic_object_type_information & ";byte[32]")
		Local $aret = DllCall("ntdll.dll", "long", "ZwQueryObject", "handle", $hobject, "uint", 2, "struct*", $tpoti, "ulong", DllStructGetSize($tpoti), "ulong*", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Local $pdata = DllStructGetData($tpoti, 3)
		If NOT $pdata Then Return SetError(11, 0, "")
		Return _winapi_getstring($pdata)
	EndFunc

	Func _winapi_getperformanceinfo()
		Local $tpi = DllStructCreate("dword;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;dword;dword;dword")
		Local $aret = DllCall(@SystemDir & "\psapi.dll", "bool", "GetPerformanceInfo", "struct*", $tpi, "dword", DllStructGetSize($tpi))
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[13]
		For $i = 0 To 12
			$aresult[$i] = DllStructGetData($tpi, $i + 2)
		Next
		For $i = 0 To 8
			$aresult[$i] *= $aresult[9]
		Next
		Return $aresult
	EndFunc

	Func _winapi_getphysicallyinstalledsystemmemory()
		Local $aret = DllCall("kernel32.dll", "bool", "GetPhysicallyInstalledSystemMemory", "uint64*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[1]
	EndFunc

	Func _winapi_getprocessshutdownparameters()
		Local $aret = DllCall("kernel32.dll", "bool", "GetProcessShutdownParameters", "dword*", 0, "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return SetExtended(Number(NOT $aret[2]), $aret[1])
	EndFunc

	Func _winapi_getprocesswindowstation()
		Local $aret = DllCall("user32.dll", "handle", "GetProcessWindowStation")
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getpwrcapabilities()
		If NOT __dll("powrprof.dll") Then Return SetError(103, 0, 0)
		Local $tspc = DllStructCreate("byte[18];byte[3];byte;byte[8];byte[2];ulong[6];ulong[5]")
		Local $aret = DllCall("powrprof.dll", "boolean", "GetPwrCapabilities", "struct*", $tspc)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[25]
		For $i = 0 To 17
			$aresult[$i] = DllStructGetData($tspc, 1, $i + 1)
		Next
		$aresult[18] = DllStructGetData($tspc, 3)
		For $i = 19 To 20
			$aresult[$i] = DllStructGetData($tspc, 5, $i - 18)
		Next
		For $i = 21 To 24
			$aresult[$i] = DllStructGetData($tspc, 7, $i - 20)
		Next
		Return $aresult
	EndFunc

	Func _winapi_getrawinputbuffer($pbuffer, $ilength)
		Local $aret = DllCall("user32.dll", "uint", "GetRawInputBuffer", "struct*", $pbuffer, "uint*", $ilength, "uint", DllStructGetSize(DllStructCreate($tagrawinputheader)))
		If @error Then Return SetError(@error, @extended, 0)
		If ($aret[0] = 4294967295) OR (NOT $aret[1]) Then Return SetError(10, -1, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getrawinputbufferlength()
		Local $aret = DllCall("user32.dll", "uint", "GetRawInputBuffer", "ptr", 0, "uint*", 0, "uint", DllStructGetSize(DllStructCreate($tagrawinputheader)))
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] = 4294967295 Then Return SetError(10, -1, 0)
		Return $aret[2] * 8
	EndFunc

	Func _winapi_getrawinputdata($hrawinput, $pbuffer, $ilength, $iflag)
		Local $aret = DllCall("user32.dll", "uint", "GetRawInputData", "handle", $hrawinput, "uint", $iflag, "struct*", $pbuffer, "uint*", $ilength, "uint", DllStructGetSize(DllStructCreate($tagrawinputheader)))
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] = 4294967295 Then Return SetError(10, -1, 0)
		Return __iif($aret[3], $aret[0], $aret[4])
	EndFunc

	Func _winapi_getrawinputdeviceinfo($hdevice, $pbuffer, $ilength, $iflag)
		Local $aret = DllCall("user32.dll", "uint", "GetRawInputDeviceInfoW", "handle", $hdevice, "uint", $iflag, "struct*", $pbuffer, "uint*", $ilength)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] = 4294967295 Then Return SetError(10, -1, 0)
		Return __iif($aret[3], $aret[0], $aret[4])
	EndFunc

	Func _winapi_getregisteredrawinputdevices($pbuffer, $ilength)
		Local $ilengthraw = DllStructGetSize(DllStructCreate($tagrawinputdevice))
		Local $aret = DllCall("user32.dll", "uint", "GetRegisteredRawInputDevices", "struct*", $pbuffer, "uint*", Floor($ilength / $ilengthraw), "uint", $ilengthraw)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] = 4294967295 Then
			Local $ilasterror = _winapi_getlasterror()
			If $ilasterror = 122 Then Return SetExtended($ilasterror, $aret[2] * $ilengthraw)
			Return SetError(10, $ilasterror, 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_getshellwindow()
		Local $aret = DllCall("user32.dll", "hwnd", "GetShellWindow")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getstartupinfo()
		Local $tsi = DllStructCreate($tagstartupinfo)
		DllCall("kernel32.dll", "none", "GetStartupInfoW", "struct*", $tsi)
		If @error Then Return SetError(@error, @extended, 0)
		Return $tsi
	EndFunc

	Func _winapi_getsystemdeppolicy()
		Local $aret = DllCall("kernel32.dll", "uint", "GetSystemDEPPolicy")
		If @error Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_getsysteminfo()
		Local $sproc
		If _winapi_iswow64process() Then
			$sproc = "GetNativeSystemInfo"
		Else
			$sproc = "GetSystemInfo"
		EndIf
		Local Const $tagsysteminfo = "struct;word ProcessorArchitecture;word Reserved; endstruct;dword PageSize;" & "ptr MinimumApplicationAddress;ptr MaximumApplicationAddress;dword_ptr ActiveProcessorMask;dword NumberOfProcessors;" & "dword ProcessorType;dword AllocationGranularity;word ProcessorLevel;word ProcessorRevision"
		Local $tsysteminfo = DllStructCreate($tagsysteminfo)
		DllCall("kernel32.dll", "none", $sproc, "struct*", $tsysteminfo)
		If @error Then Return SetError(@error, @extended, 0)
		Local $aresult[10]
		$aresult[0] = DllStructGetData($tsysteminfo, 1)
		For $i = 1 To 9
			$aresult[$i] = DllStructGetData($tsysteminfo, $i + 2)
		Next
		Return $aresult
	EndFunc

	Func _winapi_getsystempowerstatus()
		Local $tagsystem_power_status = "byte ACLineStatus;byte BatteryFlag;byte BatteryLifePercent;byte Reserved1;" & "int BatteryLifeTime;int BatteryFullLifeTime"
		Local $tsystem_power_status = DllStructCreate($tagsystem_power_status)
		Local $aret = DllCall("kernel32.dll", "bool", "GetSystemPowerStatus", "struct*", $tsystem_power_status)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[5]
		$aresult[0] = DllStructGetData($tsystem_power_status, 1)
		$aresult[1] = DllStructGetData($tsystem_power_status, 2)
		$aresult[2] = DllStructGetData($tsystem_power_status, 3)
		$aresult[3] = DllStructGetData($tsystem_power_status, 5)
		$aresult[4] = DllStructGetData($tsystem_power_status, 6)
		Return $aresult
	EndFunc

	Func _winapi_getsystemtimes()
		Local $aret = DllCall("kernel32.dll", "bool", "GetSystemTimes", "uint64*", 0, "uint64*", 0, "uint64*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[3]
		For $i = 0 To 2
			$aresult[$i] = $aret[$i + 1]
		Next
		Return $aresult
	EndFunc

	Func _winapi_getsystemwow64directory()
		Local $aret = DllCall("kernel32.dll", "uint", "GetSystemWow64DirectoryW", "wstr", "", "uint", 4096)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, _winapi_getlasterror(), "")
		Return $aret[1]
	EndFunc

	Func _winapi_gettickcount()
		Local $aret = DllCall("kernel32.dll", "dword", "GetTickCount")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_gettickcount64()
		Local $aret = DllCall("kernel32.dll", "uint64", "GetTickCount64")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_gettopwindow($hwnd)
		Local $aret = DllCall("user32.dll", "hwnd", "GetTopWindow", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getuserobjectinformation($hobject, $iindex)
		Local $aret = DllCall("user32.dll", "bool", "GetUserObjectInformationW", "handle", $hobject, "int", $iindex, "ptr", 0, "dword", 0, "dword*", 0)
		If @error OR NOT $aret[5] Then Return SetError(@error + 10, @extended, 0)
		Local $tdata
		Switch $iindex
			Case 1
				$tdata = DllStructCreate($taguserobjectflags)
			Case 5, 6
				$tdata = DllStructCreate("uint")
			Case 2, 3
				$tdata = DllStructCreate("wchar[" & $aret[5] & "]")
			Case 4
				$tdata = DllStructCreate("byte[" & $aret[5] & "]")
			Case Else
				Return SetError(20, 0, 0)
		EndSwitch
		$aret = DllCall("user32.dll", "bool", "GetUserObjectInformationW", "handle", $hobject, "int", $iindex, "struct*", $tdata, "dword", DllStructGetSize($tdata), "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 30, @extended, 0)
		Switch $iindex
			Case 1, 4
				Return $tdata
			Case Else
				Return DllStructGetData($tdata, 1)
		EndSwitch
	EndFunc

	Func _winapi_getversion()
		Return BitAND(BitShift($__winver, 8), 255) & "." & BitAND($__winver, 255)
	EndFunc

	Func _winapi_getversionex()
		Local $tosversioninfoex = DllStructCreate($tagosversioninfoex)
		DllStructSetData($tosversioninfoex, "OSVersionInfoSize", DllStructGetSize($tosversioninfoex))
		Local $aret = DllCall("kernel32.dll", "bool", "GetVersionExW", "struct*", $tosversioninfoex)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tosversioninfoex
	EndFunc

	Func _winapi_getwindowdisplayaffinity($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "GetWindowDisplayAffinity", "hwnd", $hwnd, "dword*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $aret[2]
	EndFunc

	Func _winapi_getwindowinfo($hwnd)
		Local $twindowinfo = DllStructCreate($tagwindowinfo)
		DllStructSetData($twindowinfo, "Size", DllStructGetSize($twindowinfo))
		Local $aret = DllCall("user32.dll", "bool", "GetWindowInfo", "hwnd", $hwnd, "struct*", $twindowinfo)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $twindowinfo
	EndFunc

	Func _winapi_getworkarea()
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "int", "SystemParametersInfo", "uint", 48, "uint", 0, "struct*", $trect, "uint", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $trect
	EndFunc

	Func _winapi_initmuilanguage($ilanguage)
		DllCall("comctl32.dll", "none", "InitMUILanguage", "word", $ilanguage)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_isbadcodeptr($paddress)
		Local $aret = DllCall("kernel32.dll", "bool", "IsBadCodePtr", "struct*", $paddress)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isbadstringptr($paddress, $ilength)
		Local $aret = DllCall("kernel32.dll", "bool", "IsBadStringPtr", "struct*", $paddress, "uint_ptr", $ilength)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_ischild($hwnd, $hwndparent)
		Local $aret = DllCall("user32.dll", "bool", "IsChild", "hwnd", $hwndparent, "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_ishungappwindow($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "IsHungAppWindow", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isiconic($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "IsIconic", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isloadkblayout($ilanguage)
		Local $alayout = _winapi_getkeyboardlayoutlist()
		If @error Then Return SetError(@error, @extended, False)
		For $i = 1 To $alayout[0]
			If $alayout[$i] = $ilanguage Then Return True
		Next
		Return False
	EndFunc

	Func _winapi_ismemory($pmemory)
		Local $bresult = __heapvalidate($pmemory)
		Return SetError(@error, @extended, $bresult)
	EndFunc

	Func _winapi_isprocessorfeaturepresent($ifeature)
		Local $aret = DllCall("kernel32.dll", "bool", "IsProcessorFeaturePresent", "dword", $ifeature)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_iswindowenabled($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "IsWindowEnabled", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_iswindowunicode($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "IsWindowUnicode", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_iszoomed($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "IsZoomed", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_keybd_event($vkey, $iflags, $iscancode = 0, $iextrainfo = 0)
		DllCall("user32.dll", "none", "keybd_event", "byte", $vkey, "byte", $iscancode, "dword", $iflags, "ulong_ptr", $iextrainfo)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_killtimer($hwnd, $itimerid)
		Local $aret = DllCall("user32.dll", "bool", "KillTimer", "hwnd", $hwnd, "uint_ptr", $itimerid)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_loadiconmetric($hinstance, $sname, $imetric)
		Local $stypeofname = "int"
		If IsString($sname) Then
			$stypeofname = "wstr"
		EndIf
		Local $aret = DllCall("comctl32.dll", "long", "LoadIconMetric", "handle", $hinstance, $stypeofname, $sname, "int", $imetric, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[4]
	EndFunc

	Func _winapi_loadiconwithscaledown($hinstance, $sname, $iwidth, $iheight)
		Local $stypeofname = "int"
		If IsString($sname) Then
			$stypeofname = "wstr"
		EndIf
		Local $aret = DllCall("comctl32.dll", "long", "LoadIconWithScaleDown", "handle", $hinstance, $stypeofname, $sname, "int", $iwidth, "int", $iheight, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[5]
	EndFunc

	Func _winapi_loadkeyboardlayout($ilanguage, $iflag = 0)
		Local $aret = DllCall("user32.dll", "handle", "LoadKeyboardLayoutW", "wstr", Hex($ilanguage, 8), "uint", $iflag)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_lockworkstation()
		Local $aret = DllCall("user32.dll", "bool", "LockWorkStation")
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_mapvirtualkey($icode, $itype, $hlocale = 0)
		Local $aret = DllCall("user32.dll", "INT", "MapVirtualKeyExW", "uint", $icode, "uint", $itype, "uint_ptr", $hlocale)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_mirroricon($hicon, $bdelete = False)
		If NOT $bdelete Then
			$hicon = _winapi_copyicon($hicon)
		EndIf
		Local $aret = DllCall("comctl32.dll", "int", 414, "ptr", 0, "ptr*", $hicon)
		If @error OR NOT $aret[0] Then
			Local $ierror = @error + 10
			If $hicon AND NOT $bdelete Then
				_winapi_destroyicon($hicon)
			EndIf
			Return SetError($ierror, 0, 0)
		EndIf
		Return $aret[2]
	EndFunc

	Func _winapi_opendesktop($sname, $iaccess = 0, $iflags = 0, $binherit = False)
		Local $aret = DllCall("user32.dll", "handle", "OpenDesktopW", "wstr", $sname, "dword", $iflags, "bool", $binherit, "dword", $iaccess)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_openicon($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "OpenIcon", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_openinputdesktop($iaccess = 0, $iflags = 0, $binherit = False)
		Local $aret = DllCall("user32.dll", "handle", "OpenInputDesktop", "dword", $iflags, "bool", $binherit, "dword", $iaccess)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_openwindowstation($sname, $iaccess = 0, $binherit = False)
		Local $aret = DllCall("user32.dll", "handle", "OpenWindowStationW", "wstr", $sname, "bool", $binherit, "dword", $iaccess)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_queryperformancecounter()
		Local $aret = DllCall("kernel32.dll", "bool", "QueryPerformanceCounter", "int64*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[1]
	EndFunc

	Func _winapi_queryperformancefrequency()
		Local $aret = DllCall("kernel32.dll", "bool", "QueryPerformanceFrequency", "int64*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $aret[1]
	EndFunc

	Func _winapi_registerclass($twndclass)
		Local $aret = DllCall("user32.dll", "word", "RegisterClassW", "struct*", $twndclass)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_registerclassex($twndclassex)
		Local $aret = DllCall("user32.dll", "word", "RegisterClassExW", "struct*", $twndclassex)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_registerhotkey($hwnd, $iid, $imodifiers, $vkey)
		Local $aret = DllCall("user32.dll", "bool", "RegisterHotKey", "hwnd", $hwnd, "int", $iid, "uint", $imodifiers, "uint", $vkey)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_registerpowersettingnotification($hwnd, $sguid)
		Local $tguid = DllStructCreate($tagguid)
		Local $aret = DllCall("ole32.dll", "long", "CLSIDFromString", "wstr", $sguid, "struct*", $tguid)
		If @error OR $aret[0] Then Return SetError(@error + 20, @extended, 0)
		$aret = DllCall("user32.dll", "handle", "RegisterPowerSettingNotification", "handle", $hwnd, "struct*", $tguid, "dword", 0)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_registerrawinputdevices($padevice, $icount = 1)
		Local $aret = DllCall("user32.dll", "bool", "RegisterRawInputDevices", "struct*", $padevice, "uint", $icount, "uint", DllStructGetSize(DllStructCreate($tagrawinputdevice)) * $icount)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_registershellhookwindow($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "RegisterShellHookWindow", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_removeclipboardformatlistener($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "RemoveClipboardFormatListener", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_sendmessagetimeout($hwnd, $imsg, $wparam = 0, $lparam = 0, $itimeout = 1000, $iflags = 0)
		Local $aret = DllCall("user32.dll", "lresult", "SendMessageTimeoutW", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam, "uint", $iflags, "uint", $itimeout, "dword_ptr*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If NOT $aret[0] Then Return SetError(10, _winapi_getlasterror(), -1)
		Return $aret[7]
	EndFunc

	Func _winapi_setactivewindow($hwnd)
		Local $aret = DllCall("user32.dll", "int", "SetActiveWindow", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setclasslongex($hwnd, $iindex, $inewlong)
		Local $aret
		If @AutoItX64 Then
			$aret = DllCall("user32.dll", "ulong_ptr", "SetClassLongPtrW", "hwnd", $hwnd, "int", $iindex, "long_ptr", $inewlong)
		Else
			$aret = DllCall("user32.dll", "dword", "SetClassLongW", "hwnd", $hwnd, "int", $iindex, "long", $inewlong)
		EndIf
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setdlldirectory($sdirpath = Default)
		Local $stypeofpath = "wstr"
		If $sdirpath = Default Then
			$stypeofpath = "ptr"
			$sdirpath = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "bool", "SetDllDirectoryW", $stypeofpath, $sdirpath)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setforegroundwindow($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "SetForegroundWindow", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setkeyboardlayout($hwnd, $ilanguage, $iflags = 0)
		If NOT _winapi_iswindow($hwnd) Then Return SetError(@error + 10, @extended, 0)
		Local $hlocale = 0
		If $ilanguage Then
			$hlocale = _winapi_loadkeyboardlayout($ilanguage)
			If NOT $hlocale Then Return SetError(10, 0, 0)
		EndIf
		Local Const $wm_inputlangchangerequest = 80
		DllCall("user32.dll", "none", "SendMessage", "hwnd", $hwnd, "uint", $wm_inputlangchangerequest, "uint", $iflags, "uint_ptr", $hlocale)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_setkeyboardstate(ByRef $tstate)
		Local $aret = DllCall("user32.dll", "int", "SetKeyboardState", "struct*", $tstate)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setmessageextrainfo($lparam)
		Local $aret = DllCall("user32.dll", "lparam", "SetMessageExtraInfo", "lparam", $lparam)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setprocessshutdownparameters($ilevel, $bdialog = False)
		Local $aret = DllCall("kernel32.dll", "bool", "SetProcessShutdownParameters", "dword", $ilevel, "dword", NOT $bdialog)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setprocesswindowstation($hstation)
		Local $aret = DllCall("user32.dll", "bool", "SetProcessWindowStation", "handle", $hstation)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_settimer($hwnd, $itimerid, $ielapse, $ptimerfunc)
		Local $aret = DllCall("user32.dll", "uint_ptr", "SetTimer", "hwnd", $hwnd, "uint_ptr", $itimerid, "uint", $ielapse, "ptr", $ptimerfunc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setuserobjectinformation($hobject, $iindex, ByRef $tdata)
		If $iindex <> 1 Then Return SetError(10, 0, False)
		Local $aret = DllCall("user32.dll", "bool", "SetUserObjectInformationW", "handle", $hobject, "int", 1, "struct*", $tdata, "dword", DllStructGetSize($tdata))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setwindowdisplayaffinity($hwnd, $iaffinity)
		Local $aret = DllCall("user32.dll", "bool", "SetWindowDisplayAffinity", "hwnd", $hwnd, "dword", $iaffinity)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setwineventhook($ieventmin, $ieventmax, $peventproc, $ipid = 0, $ithreadid = 0, $iflags = 0)
		Local $aret = DllCall("user32.dll", "handle", "SetWinEventHook", "uint", $ieventmin, "uint", $ieventmax, "ptr", 0, "ptr", $peventproc, "dword", $ipid, "dword", $ithreadid, "uint", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_showownedpopups($hwnd, $bshow)
		Local $aret = DllCall("user32.dll", "bool", "ShowOwnedPopups", "hwnd", $hwnd, "bool", $bshow)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_shutdownblockreasoncreate($hwnd, $stext)
		Local $aret = DllCall("user32.dll", "bool", "ShutdownBlockReasonCreate", "hwnd", $hwnd, "wstr", $stext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_shutdownblockreasondestroy($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "ShutdownBlockReasonDestroy", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_shutdownblockreasonquery($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "ShutdownBlockReasonQuery", "hwnd", $hwnd, "wstr", "", "dword*", 4096)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[2]
	EndFunc

	Func _winapi_switchdesktop($hdesktop)
		Local $aret = DllCall("user32.dll", "bool", "SwitchDesktop", "handle", $hdesktop)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_switchtothiswindow($hwnd, $balttab = False)
		DllCall("user32.dll", "none", "SwitchToThisWindow", "hwnd", $hwnd, "bool", $balttab)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_tilewindows($awnds, $trect = 0, $hparent = 0, $iflags = 0, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($awnds, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
		Local $icount = $iend - $istart + 1
		Local $twnds = DllStructCreate("hwnd[" & $icount & "]")
		$icount = 1
		For $i = $istart To $iend
			DllStructSetData($twnds, 1, $awnds[$i], $icount)
			$icount += 1
		Next
		Local $aret = DllCall("user32.dll", "word", "TileWindows", "hwnd", $hparent, "uint", $iflags, "struct*", $trect, "uint", $icount - 1, "struct*", $twnds)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_trackmouseevent($hwnd, $iflags, $itime = -1)
		Local $ttme = DllStructCreate("dword;dword;hwnd;dword")
		DllStructSetData($ttme, 1, DllStructGetSize($ttme))
		DllStructSetData($ttme, 2, $iflags)
		DllStructSetData($ttme, 3, $hwnd)
		DllStructSetData($ttme, 4, $itime)
		Local $aret = DllCall("user32.dll", "bool", "TrackMouseEvent", "struct*", $ttme)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_unhookwinevent($heventhook)
		Local $aret = DllCall("user32.dll", "bool", "UnhookWinEvent", "handle", $heventhook)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_unloadkeyboardlayout($hlocale)
		Local $aret = DllCall("user32.dll", "bool", "UnloadKeyboardLayout", "handle", $hlocale)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_unregisterclass($sclass, $hinstance = 0)
		Local $stypeofclass = "ptr"
		If IsString($sclass) Then
			$stypeofclass = "wstr"
		EndIf
		Local $aret = DllCall("user32.dll", "bool", "UnregisterClassW", $stypeofclass, $sclass, "handle", $hinstance)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_unregisterhotkey($hwnd, $iid)
		Local $aret = DllCall("user32.dll", "bool", "UnregisterHotKey", "hwnd", $hwnd, "int", $iid)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_unregisterpowersettingnotification($hnotify)
		Local $aret = DllCall("user32.dll", "bool", "UnregisterPowerSettingNotification", "handle", $hnotify)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_updatelayeredwindowex($hwnd, $ix, $iy, $hbitmap, $iopacity = 255, $bdelete = False)
		Local $aret = DllCall("user32.dll", "handle", "GetDC", "hwnd", $hwnd)
		Local $hdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $hdc)
		Local $hdestdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hbitmap)
		Local $hdestsv = $aret[0]
		Local $tpoint
		If ($ix = -1) AND ($iy = -1) Then
			$tpoint = DllStructCreate("int;int")
		Else
			$tpoint = DllStructCreate("int;int;int;int")
			DllStructSetData($tpoint, 3, $ix)
			DllStructSetData($tpoint, 4, $iy)
		EndIf
		DllStructSetData($tpoint, 1, 0)
		DllStructSetData($tpoint, 2, 0)
		Local $tblendfunction = DllStructCreate($tagblendfunction)
		DllStructSetData($tblendfunction, 1, 0)
		DllStructSetData($tblendfunction, 2, 0)
		DllStructSetData($tblendfunction, 3, $iopacity)
		DllStructSetData($tblendfunction, 4, 1)
		Local $tsize = _winapi_getbitmapdimension($hbitmap)
		$aret = DllCall("user32.dll", "bool", "UpdateLayeredWindow", "hwnd", $hwnd, "handle", $hdc, "ptr", DllStructGetPtr($tpoint, 3), "struct*", $tsize, "handle", $hdestdc, "struct*", $tpoint, "dword", 0, "struct*", $tblendfunction, "dword", 2)
		Local $ierror = @error
		DllCall("user32.dll", "bool", "ReleaseDC", "hwnd", $hwnd, "handle", $hdc)
		DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hdestsv)
		DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hdestdc)
		If $ierror Then Return SetError($ierror, 0, False)
		If $bdelete Then
			_winapi_deleteobject($hbitmap)
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_updatelayeredwindowindirect($hwnd, $tulwinfo)
		Local $aret = DllCall("user32.dll", "bool", "UpdateLayeredWindowIndirect", "hwnd", $hwnd, "struct*", $tulwinfo)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

#EndRegion Public Functions
#Region Embedded DLL Functions
#EndRegion Embedded DLL Functions
#Region Internal Functions

	Func __enumdefaultproc($pdata, $lparam)
		#forceref $lParam
		Local $ilength = _winapi_strlen($pdata)
		__inc($__g_venum)
		If $ilength Then
			$__g_venum[$__g_venum[0]] = DllStructGetData(DllStructCreate("wchar[" & ($ilength + 1) & "]", $pdata), 1)
		Else
			$__g_venum[$__g_venum[0]] = ""
		EndIf
		Return 1
	EndFunc

	Func __enumpagefilesproc($isize, $pinfo, $pfile)
		Local $tepfi = DllStructCreate("dword;dword;ulong_ptr;ulong_ptr;ulong_ptr", $pinfo)
		__inc($__g_venum)
		$__g_venum[$__g_venum[0][0]][0] = DllStructGetData(DllStructCreate("wchar[" & (_winapi_strlen($pfile) + 1) & "]", $pfile), 1)
		For $i = 1 To 3
			$__g_venum[$__g_venum[0][0]][$i] = DllStructGetData($tepfi, $i + 2) * $isize
		Next
		Return 1
	EndFunc

#EndRegion Internal Functions
#Region Header
	Global Const $color_aqua = 65535
	Global Const $color_black = 0
	Global Const $color_blue = 255
	Global Const $color_cream = 16776176
	Global Const $color_fuchsia = 16711935
	Global Const $color_gray = 8421504
	Global Const $color_green = 32768
	Global Const $color_lime = 65280
	Global Const $color_maroon = 9116770
	Global Const $color_medblue = 708
	Global Const $color_medgray = 10526884
	Global Const $color_moneygreen = 12639424
	Global Const $color_navy = 128
	Global Const $color_olive = 8421376
	Global Const $color_purple = 8388736
	Global Const $color_red = 16711680
	Global Const $color_silver = 12632256
	Global Const $color_skyblue = 10930928
	Global Const $color_teal = 32896
	Global Const $color_white = 16777215
	Global Const $color_yellow = 16776960
	Global Const $clr_none = -1
	Global Const $clr_default = -16777216
	Global Const $clr_aqua = 16776960
	Global Const $clr_black = 0
	Global Const $clr_blue = 16711680
	Global Const $clr_cream = 15793151
	Global Const $clr_fuchsia = 16711935
	Global Const $clr_gray = 8421504
	Global Const $clr_green = 32768
	Global Const $clr_lime = 65280
	Global Const $clr_maroon = 6429835
	Global Const $clr_medblue = 12845568
	Global Const $clr_medgray = 10789024
	Global Const $clr_moneygreen = 12639424
	Global Const $clr_navy = 8388608
	Global Const $clr_olive = 32896
	Global Const $clr_purple = 8388736
	Global Const $clr_red = 255
	Global Const $clr_silver = 12632256
	Global Const $clr_skyblue = 15780518
	Global Const $clr_teal = 8421376
	Global Const $clr_white = 16777215
	Global Const $clr_yellow = 65535
	Global Const $cc_anycolor = 256
	Global Const $cc_fullopen = 2
	Global Const $cc_rgbinit = 1
	Global Const $ddl_archive = 32
	Global Const $ddl_directory = 16
	Global Const $ddl_drives = 16384
	Global Const $ddl_exclusive = 32768
	Global Const $ddl_hidden = 2
	Global Const $ddl_readonly = 1
	Global Const $ddl_readwrite = 0
	Global Const $ddl_system = 4
	Global Const $tray_item_exit = 3
	Global Const $tray_item_pause = 4
	Global Const $tray_item_first = 7
	Global Const $tray_checked = 1
	Global Const $tray_unchecked = 4
	Global Const $tray_enable = 64
	Global Const $tray_disable = 128
	Global Const $tray_focus = 256
	Global Const $tray_default = 512
	Global Const $tray_event_none = 0
	Global Const $tray_event_showicon = -3
	Global Const $tray_event_hideicon = -4
	Global Const $tray_event_flashicon = -5
	Global Const $tray_event_noflashicon = -6
	Global Const $tray_event_primarydown = -7
	Global Const $tray_event_primaryup = -8
	Global Const $tray_event_secondarydown = -9
	Global Const $tray_event_secondaryup = -10
	Global Const $tray_event_mouseover = -11
	Global Const $tray_event_mouseout = -12
	Global Const $tray_event_primarydouble = -13
	Global Const $tray_event_secondarydouble = -14
	Global Const $tip_iconnone = 0
	Global Const $tip_iconasterisk = 1
	Global Const $tip_iconexclamation = 2
	Global Const $tip_iconhand = 3
	Global Const $tip_nosound = 16
	Global Const $tray_item_normal = 0
	Global Const $tray_item_radio = 1
	Global Const $tray_click_show = 0
	Global Const $tray_click_primarydown = 1
	Global Const $tray_click_primaryup = 2
	Global Const $tray_dblclick_primary = 4
	Global Const $tray_click_secondarydown = 8
	Global Const $tray_click_secondaryup = 16
	Global Const $tray_dblclick_secondary = 32
	Global Const $tray_click_hovering = 64
	Global Const $tray_iconstate_show = 1
	Global Const $tray_iconstate_hide = 2
	Global Const $tray_iconstate_flash = 4
	Global Const $tray_iconstate_stopflash = 8
	Global Const $tray_iconstate_reset = 16
	Global Const $gdip_dashcapflat = 0
	Global Const $gdip_dashcapround = 2
	Global Const $gdip_dashcaptriangle = 3
	Global Const $gdip_dashstylesolid = 0
	Global Const $gdip_dashstyledash = 1
	Global Const $gdip_dashstyledot = 2
	Global Const $gdip_dashstyledashdot = 3
	Global Const $gdip_dashstyledashdotdot = 4
	Global Const $gdip_dashstylecustom = 5
	Global Const $gdip_epgchrominancetable = "{F2E455DC-09B3-4316-8260-676ADA32481C}"
	Global Const $gdip_epgcolordepth = "{66087055-AD66-4C7C-9A18-38A2310B8337}"
	Global Const $gdip_epgcompression = "{E09D739D-CCD4-44EE-8EBA-3FBF8BE4FC58}"
	Global Const $gdip_epgluminancetable = "{EDB33BCE-0266-4A77-B904-27216099E717}"
	Global Const $gdip_epgquality = "{1D5BE4B5-FA4A-452D-9CDD-5DB35105E7EB}"
	Global Const $gdip_epgrendermethod = "{6D42C53A-229A-4825-8BB7-5C99E2B9A8B8}"
	Global Const $gdip_epgsaveflag = "{292266FC-AC40-47BF-8CFC-A85B89A655DE}"
	Global Const $gdip_epgscanmethod = "{3A4E2661-3109-4E56-8536-42C156E7DCFA}"
	Global Const $gdip_epgtransformation = "{8D0EB2D1-A58E-4EA8-AA14-108074B7B6F9}"
	Global Const $gdip_epgversion = "{24D18C76-814A-41A4-BF53-1C219CCCF797}"
	Global Const $gdip_eptbyte = 1
	Global Const $gdip_eptascii = 2
	Global Const $gdip_eptshort = 3
	Global Const $gdip_eptlong = 4
	Global Const $gdip_eptrational = 5
	Global Const $gdip_eptlongrange = 6
	Global Const $gdip_eptundefined = 7
	Global Const $gdip_eptrationalrange = 8
	Global Const $gdip_errok = 0
	Global Const $gdip_errgenericerror = 1
	Global Const $gdip_errinvalidparameter = 2
	Global Const $gdip_erroutofmemory = 3
	Global Const $gdip_errobjectbusy = 4
	Global Const $gdip_errinsufficientbuffer = 5
	Global Const $gdip_errnotimplemented = 6
	Global Const $gdip_errwin32error = 7
	Global Const $gdip_errwrongstate = 8
	Global Const $gdip_erraborted = 9
	Global Const $gdip_errfilenotfound = 10
	Global Const $gdip_errvalueoverflow = 11
	Global Const $gdip_erraccessdenied = 12
	Global Const $gdip_errunknownimageformat = 13
	Global Const $gdip_errfontfamilynotfound = 14
	Global Const $gdip_errfontstylenotfound = 15
	Global Const $gdip_errnottruetypefont = 16
	Global Const $gdip_errunsupportedgdiversion = 17
	Global Const $gdip_errgdiplusnotinitialized = 18
	Global Const $gdip_errpropertynotfound = 19
	Global Const $gdip_errpropertynotsupported = 20
	Global Const $gdip_evtcompressionlzw = 2
	Global Const $gdip_evtcompressionccitt3 = 3
	Global Const $gdip_evtcompressionccitt4 = 4
	Global Const $gdip_evtcompressionrle = 5
	Global Const $gdip_evtcompressionnone = 6
	Global Const $gdip_evttransformrotate90 = 13
	Global Const $gdip_evttransformrotate180 = 14
	Global Const $gdip_evttransformrotate270 = 15
	Global Const $gdip_evttransformfliphorizontal = 16
	Global Const $gdip_evttransformflipvertical = 17
	Global Const $gdip_evtmultiframe = 18
	Global Const $gdip_evtlastframe = 19
	Global Const $gdip_evtflush = 20
	Global Const $gdip_evtframedimensionpage = 23
	Global Const $gdip_icfencoder = 1
	Global Const $gdip_icfdecoder = 2
	Global Const $gdip_icfsupportbitmap = 4
	Global Const $gdip_icfsupportvector = 8
	Global Const $gdip_icfseekableencode = 16
	Global Const $gdip_icfblockingdecode = 32
	Global Const $gdip_icfbuiltin = 65536
	Global Const $gdip_icfsystem = 131072
	Global Const $gdip_icfuser = 262144
	Global Const $gdip_ilmread = 1
	Global Const $gdip_ilmwrite = 2
	Global Const $gdip_ilmuserinputbuf = 4
	Global Const $gdip_linecapflat = 0
	Global Const $gdip_linecapsquare = 1
	Global Const $gdip_linecapround = 2
	Global Const $gdip_linecaptriangle = 3
	Global Const $gdip_linecapnoanchor = 16
	Global Const $gdip_linecapsquareanchor = 17
	Global Const $gdip_linecaproundanchor = 18
	Global Const $gdip_linecapdiamondanchor = 19
	Global Const $gdip_linecaparrowanchor = 20
	Global Const $gdip_linecapcustom = 255
	Global Const $gdip_pxf01indexed = 196865
	Global Const $gdip_pxf04indexed = 197634
	Global Const $gdip_pxf08indexed = 198659
	Global Const $gdip_pxf16grayscale = 1052676
	Global Const $gdip_pxf16rgb555 = 135173
	Global Const $gdip_pxf16rgb565 = 135174
	Global Const $gdip_pxf16argb1555 = 397319
	Global Const $gdip_pxf24rgb = 137224
	Global Const $gdip_pxf32rgb = 139273
	Global Const $gdip_pxf32argb = 2498570
	Global Const $gdip_pxf32pargb = 925707
	Global Const $gdip_pxf48rgb = 1060876
	Global Const $gdip_pxf64argb = 3424269
	Global Const $gdip_pxf64pargb = 1720334
	Global Const $gdip_imageformat_undefined = "{B96B3CA9-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imageformat_memorybmp = "{B96B3CAA-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imageformat_bmp = "{B96B3CAB-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imageformat_emf = "{B96B3CAC-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imageformat_wmf = "{B96B3CAD-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imageformat_jpeg = "{B96B3CAE-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imageformat_png = "{B96B3CAF-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imageformat_gif = "{B96B3CB0-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imageformat_tiff = "{B96B3CB1-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imageformat_exif = "{B96B3CB2-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imageformat_icon = "{B96B3CB5-0728-11D3-9D7B-0000F81EF32E}"
	Global Const $gdip_imagetype_unknown = 0
	Global Const $gdip_imagetype_bitmap = 1
	Global Const $gdip_imagetype_metafile = 2
	Global Const $gdip_imageflags_none = 0
	Global Const $gdip_imageflags_scalable = 1
	Global Const $gdip_imageflags_hasalpha = 2
	Global Const $gdip_imageflags_hastranslucent = 4
	Global Const $gdip_imageflags_partiallyscalable = 8
	Global Const $gdip_imageflags_colorspace_rgb = 16
	Global Const $gdip_imageflags_colorspace_cmyk = 32
	Global Const $gdip_imageflags_colorspace_gray = 64
	Global Const $gdip_imageflags_colorspace_ycbcr = 128
	Global Const $gdip_imageflags_colorspace_ycck = 256
	Global Const $gdip_imageflags_hasrealdpi = 4096
	Global Const $gdip_imageflags_hasrealpixelsize = 8192
	Global Const $gdip_imageflags_readonly = 65536
	Global Const $gdip_imageflags_caching = 131072
	Global Const $gdip_smoothingmode_invalid = -1
	Global Const $gdip_smoothingmode_default = 0
	Global Const $gdip_smoothingmode_highspeed = 1
	Global Const $gdip_smoothingmode_highquality = 2
	Global Const $gdip_smoothingmode_none = 3
	Global Const $gdip_smoothingmode_antialias8x4 = 4
	Global Const $gdip_smoothingmode_antialias = $gdip_smoothingmode_antialias8x4
	Global Const $gdip_smoothingmode_antialias8x8 = 5
	Global Const $gdip_rlum = 0.3086
	Global Const $gdip_glum = 0.6094
	Global Const $gdip_blum = 0.082
	Global Const $gdip_interpolationmode_invalid = -1
	Global Const $gdip_interpolationmode_default = 0
	Global Const $gdip_interpolationmode_lowquality = 1
	Global Const $gdip_interpolationmode_highquality = 2
	Global Const $gdip_interpolationmode_bilinear = 3
	Global Const $gdip_interpolationmode_bicubic = 4
	Global Const $gdip_interpolationmode_nearestneighbor = 5
	Global Const $gdip_interpolationmode_highqualitybilinear = 6
	Global Const $gdip_interpolationmode_highqualitybicubic = 7
	Global Const $gdip_textrenderinghint_systemdefault = 0
	Global Const $gdip_textrenderinghint_singlebitperpixelgridfit = 1
	Global Const $gdip_textrenderinghint_singlebitperpixel = 2
	Global Const $gdip_textrenderinghint_antialiasgridfit = 3
	Global Const $gdip_textrenderinghint_antialias = 4
	Global Const $gdip_textrenderinghint_cleartypegridfit = 5
	Global Const $gdip_pixeloffsetmode_invalid = -1
	Global Const $gdip_pixeloffsetmode_default = 0
	Global Const $gdip_pixeloffsetmode_highspeed = 1
	Global Const $gdip_pixeloffsetmode_highquality = 2
	Global Const $gdip_pixeloffsetmode_none = 3
	Global Const $gdip_pixeloffsetmode_half = 4
	Global Const $gdip_pensetlinejoin_miter = 0
	Global Const $gdip_pensetlinejoin_bevel = 1
	Global Const $gdip_pensetlinejoin_round = 2
	Global Const $gdip_pensetlinejoin_miterclipped = 3
	Global Const $gdip_fillmodealternate = 0
	Global Const $gdip_fillmodewinding = 1
	Global Const $gdip_qualitymodeinvalid = -1
	Global Const $gdip_qualitymodedefault = 0
	Global Const $gdip_qualitymodelow = 1
	Global Const $gdip_qualitymodehigh = 2
	Global Const $gdip_compositingmodesourceover = 0
	Global Const $gdip_compositingmodesourcecopy = 1
	Global Const $gdip_compositingqualityinvalid = $gdip_qualitymodeinvalid
	Global Const $gdip_compositingqualitydefault = $gdip_qualitymodedefault
	Global Const $gdip_compositingqualityhighspeed = $gdip_qualitymodelow
	Global Const $gdip_compositingqualityhighquality = $gdip_qualitymodehigh
	Global Const $gdip_compositingqualitygammacorrected = 3
	Global Const $gdip_compositingqualityassumelinear = 4
	Global Const $gdip_hatchstyle_horizontal = 0
	Global Const $gdip_hatchstyle_vertical = 1
	Global Const $gdip_hatchstyle_forwarddiagonal = 2
	Global Const $gdip_hatchstyle_backwarddiagonal = 3
	Global Const $gdip_hatchstyle_cross = 4
	Global Const $gdip_hatchstyle_diagonalcross = 5
	Global Const $gdip_hatchstyle_05percent = 6
	Global Const $gdip_hatchstyle_10percent = 7
	Global Const $gdip_hatchstyle_20percent = 8
	Global Const $gdip_hatchstyle_25percent = 9
	Global Const $gdip_hatchstyle_30percent = 10
	Global Const $gdip_hatchstyle_40percent = 11
	Global Const $gdip_hatchstyle_50percent = 12
	Global Const $gdip_hatchstyle_60percent = 13
	Global Const $gdip_hatchstyle_70percent = 14
	Global Const $gdip_hatchstyle_75percent = 15
	Global Const $gdip_hatchstyle_80percent = 16
	Global Const $gdip_hatchstyle_90percent = 17
	Global Const $gdip_hatchstyle_lightdownwarddiagonal = 18
	Global Const $gdip_hatchstyle_lightupwarddiagonal = 19
	Global Const $gdip_hatchstyle_darkdownwarddiagonal = 20
	Global Const $gdip_hatchstyle_darkupwarddiagonal = 21
	Global Const $gdip_hatchstyle_widedownwarddiagonal = 22
	Global Const $gdip_hatchstyle_wideupwarddiagonal = 23
	Global Const $gdip_hatchstyle_lightvertical = 24
	Global Const $gdip_hatchstyle_lighthorizontal = 25
	Global Const $gdip_hatchstyle_narrowvertical = 26
	Global Const $gdip_hatchstyle_narrowhorizontal = 27
	Global Const $gdip_hatchstyle_darkvertical = 28
	Global Const $gdip_hatchstyle_darkhorizontal = 29
	Global Const $gdip_hatchstyle_dasheddownwarddiagonal = 30
	Global Const $gdip_hatchstyle_dashedupwarddiagonal = 31
	Global Const $gdip_hatchstyle_dashedhorizontal = 32
	Global Const $gdip_hatchstyle_dashedvertical = 33
	Global Const $gdip_hatchstyle_smallconfetti = 34
	Global Const $gdip_hatchstyle_largeconfetti = 35
	Global Const $gdip_hatchstyle_zigzag = 36
	Global Const $gdip_hatchstyle_wave = 37
	Global Const $gdip_hatchstyle_diagonalbrick = 38
	Global Const $gdip_hatchstyle_horizontalbrick = 39
	Global Const $gdip_hatchstyle_weave = 40
	Global Const $gdip_hatchstyle_plaid = 41
	Global Const $gdip_hatchstyle_divot = 42
	Global Const $gdip_hatchstyle_dottedgrid = 43
	Global Const $gdip_hatchstyle_dotteddiamond = 44
	Global Const $gdip_hatchstyle_shingle = 45
	Global Const $gdip_hatchstyle_trellis = 46
	Global Const $gdip_hatchstyle_sphere = 47
	Global Const $gdip_hatchstyle_smallgrid = 48
	Global Const $gdip_hatchstyle_smallcheckerboard = 49
	Global Const $gdip_hatchstyle_largecheckerboard = 50
	Global Const $gdip_hatchstyle_outlineddiamond = 51
	Global Const $gdip_hatchstyle_soliddiamond = 52
	Global Const $gdip_hatchstyle_total = 53
	Global Const $gdip_hatchstyle_largegrid = $gdip_hatchstyle_cross
	Global Const $gdip_hatchstyle_min = $gdip_hatchstyle_horizontal
	Global Const $gdip_hatchstyle_max = $gdip_hatchstyle_total - 1
	Global Const $gdip_blureffectguid = "{633C80A4-1843-482b-9EF2-BE2834C5FDD4}"
	Global Const $gdip_sharpeneffectguid = "{63CBF3EE-C526-402c-8F71-62C540BF5142}"
	Global Const $gdip_colormatrixeffectguid = "{718F2615-7933-40e3-A511-5F68FE14DD74}"
	Global Const $gdip_colorluteffectguid = "{A7CE72A9-0F7F-40d7-B3CC-D0C02D5C3212}"
	Global Const $gdip_brightnesscontrasteffectguid = "{D3A1DBE1-8EC4-4c17-9F4C-EA97AD1C343D}"
	Global Const $gdip_huesaturationlightnesseffectguid = "{8B2DD6C3-EB07-4d87-A5F0-7108E26A9C5F}"
	Global Const $gdip_levelseffectguid = "{99C354EC-2A31-4f3a-8C34-17A803B33A25}"
	Global Const $gdip_tinteffectguid = "{1077AF00-2848-4441-9489-44AD4C2D7A2C}"
	Global Const $gdip_colorbalanceeffectguid = "{537E597D-251E-48da-9664-29CA496B70F8}"
	Global Const $gdip_redeyecorrectioneffectguid = "{74D29D05-69A4-4266-9549-3CC52836B632}"
	Global Const $gdip_colorcurveeffectguid = "{DD6A0022-58E4-4a67-9D9B-D48EB881A53D}"
	Global Const $gdip_adjustexposure = 0
	Global Const $gdip_adjustdensity = 1
	Global Const $gdip_adjustcontrast = 2
	Global Const $gdip_adjusthighlight = 3
	Global Const $gdip_adjustshadow = 4
	Global Const $gdip_adjustmidtone = 5
	Global Const $gdip_adjustwhitesaturation = 6
	Global Const $gdip_adjustblacksaturation = 7
	Global Const $gdip_curvechannelall = 0
	Global Const $gdip_curvechannelred = 1
	Global Const $gdip_curvechannelgreen = 2
	Global Const $gdip_curvechannelblue = 3
	Global Const $gdip_palettetypecustom = 0
	Global Const $gdip_palettetypeoptimal = 1
	Global Const $gdip_palettetypefixedbw = 2
	Global Const $gdip_palettetypefixedhalftone8 = 3
	Global Const $gdip_palettetypefixedhalftone27 = 4
	Global Const $gdip_palettetypefixedhalftone64 = 5
	Global Const $gdip_palettetypefixedhalftone125 = 6
	Global Const $gdip_palettetypefixedhalftone216 = 7
	Global Const $gdip_palettetypefixedhalftone252 = 8
	Global Const $gdip_palettetypefixedhalftone256 = 9
	Global Const $gdip_paletteflagshasalpha = 1
	Global Const $gdip_paletteflagsgrayscale = 2
	Global Const $gdip_paletteflagshalftone = 4
	Global Const $gdip_dithertypenone = 0
	Global Const $gdip_dithertypesolid = 1
	Global Const $gdip_dithertypeordered4x4 = 2
	Global Const $gdip_dithertypeordered8x8 = 3
	Global Const $gdip_dithertypeordered16x16 = 4
	Global Const $gdip_dithertypeordered91x91 = 5
	Global Const $gdip_dithertypespiral4x4 = 6
	Global Const $gdip_dithertypespiral8x8 = 7
	Global Const $gdip_dithertypedualspiral4x4 = 8
	Global Const $gdip_dithertypedualspiral8x8 = 9
	Global Const $gdip_dithertypeerrordiffusion = 10
	Global Const $gdip_dithertypemax = 10
	Global Const $gdip_histogramformatargb = 0
	Global Const $gdip_histogramformatpargb = 1
	Global Const $gdip_histogramformatrgb = 2
	Global Const $gdip_histogramformatgray = 3
	Global Const $gdip_histogramformatb = 4
	Global Const $gdip_histogramformatg = 5
	Global Const $gdip_histogramformatr = 6
	Global Const $gdip_histogramformata = 7
	Global Const $gdip_textrenderinghintsystemdefault = 0
	Global Const $gdip_textrenderinghintsinglebitperpixelgridfit = 1
	Global Const $gdip_textrenderinghintsinglebitperpixel = 2
	Global Const $gdip_textrenderinghintantialiasgridfit = 3
	Global Const $gdip_textrenderinghintantialias = 4
	Global Const $gdip_textrenderinghintcleartypegridfit = 5
	Global Const $gdip_rotatenoneflipnone = 0
	Global Const $gdip_rotate90flipnone = 1
	Global Const $gdip_rotate180flipnone = 2
	Global Const $gdip_rotate270flipnone = 3
	Global Const $gdip_rotatenoneflipx = 4
	Global Const $gdip_rotate90flipx = 5
	Global Const $gdip_rotate180flipx = 6
	Global Const $gdip_rotate270flipx = 7
	Global Const $gdip_rotatenoneflipy = $gdip_rotate180flipx
	Global Const $gdip_rotate90flipy = $gdip_rotate270flipx
	Global Const $gdip_rotate180flipy = $gdip_rotatenoneflipx
	Global Const $gdip_rotate270flipy = $gdip_rotate90flipx
	Global Const $gdip_rotatenoneflipxy = $gdip_rotate180flipnone
	Global Const $gdip_rotate90flipxy = $gdip_rotate270flipnone
	Global Const $gdip_rotate270flipxy = $gdip_rotate90flipnone
	Global $__g_hgdipbrush = 0
	Global $__g_hgdipdll = 0
	Global $__g_hgdippen = 0
	Global $__g_igdipref = 0
	Global $__g_igdiptoken = 0
	Global $__g_bgdip_v1_0 = True

	Func _gdiplus_arrowcapcreate($fheight, $fwidth, $bfilled = True)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateAdjustableArrowCap", "float", $fheight, "float", $fwidth, "bool", $bfilled, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[4]
	EndFunc

	Func _gdiplus_arrowcapdispose($hcap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteCustomLineCap", "handle", $hcap)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_arrowcapgetfillstate($harrowcap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetAdjustableArrowCapFillState", "handle", $harrowcap, "bool*", 0)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_arrowcapgetheight($harrowcap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetAdjustableArrowCapHeight", "handle", $harrowcap, "float*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_arrowcapgetmiddleinset($harrowcap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetAdjustableArrowCapMiddleInset", "handle", $harrowcap, "float*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_arrowcapgetwidth($harrowcap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetAdjustableArrowCapWidth", "handle", $harrowcap, "float*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_arrowcapsetfillstate($harrowcap, $bfilled = True)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetAdjustableArrowCapFillState", "handle", $harrowcap, "bool", $bfilled)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_arrowcapsetheight($harrowcap, $fheight)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetAdjustableArrowCapHeight", "handle", $harrowcap, "float", $fheight)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_arrowcapsetmiddleinset($harrowcap, $finset)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetAdjustableArrowCapMiddleInset", "handle", $harrowcap, "float", $finset)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_arrowcapsetwidth($harrowcap, $fwidth)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetAdjustableArrowCapWidth", "handle", $harrowcap, "float", $fwidth)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_bitmapclonearea($hbitmap, $nleft, $ntop, $nwidth, $nheight, $iformat = 137224)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCloneBitmapArea", "float", $nleft, "float", $ntop, "float", $nwidth, "float", $nheight, "int", $iformat, "handle", $hbitmap, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[7]
	EndFunc

	Func _gdiplus_bitmapcreatedibfrombitmap($hbitmap)
		Local $aret = DllCall($__g_hgdipdll, "uint", "GdipGetImageDimension", "handle", $hbitmap, "float*", 0, "float*", 0)
		If @error OR $aret[0] Then Return SetError(@error + 10, $aret[0], 0)
		Local $tdata = _gdiplus_bitmaplockbits($hbitmap, 0, 0, $aret[2], $aret[3], $gdip_ilmread, $gdip_pxf32argb)
		Local $pbits = DllStructGetData($tdata, "Scan0")
		If NOT $pbits Then Return 0
		Local $tbihdr = DllStructCreate($tagbitmapv5header)
		DllStructSetData($tbihdr, "bV5Size", DllStructGetSize($tbihdr))
		DllStructSetData($tbihdr, "bV5Width", $aret[2])
		DllStructSetData($tbihdr, "bV5Height", $aret[3])
		DllStructSetData($tbihdr, "bV5Planes", 1)
		DllStructSetData($tbihdr, "bV5BitCount", 32)
		DllStructSetData($tbihdr, "bV5Compression", 0)
		DllStructSetData($tbihdr, "bV5SizeImage", $aret[3] * DllStructGetData($tdata, "Stride"))
		DllStructSetData($tbihdr, "bV5AlphaMask", -16777216)
		DllStructSetData($tbihdr, "bV5RedMask", 16711680)
		DllStructSetData($tbihdr, "bV5GreenMask", 65280)
		DllStructSetData($tbihdr, "bV5BlueMask", 255)
		DllStructSetData($tbihdr, "bV5CSType", 2)
		DllStructSetData($tbihdr, "bV5Intent", 4)
		Local $hhbitmapv5 = DllCall("gdi32.dll", "ptr", "CreateDIBSection", "hwnd", 0, "struct*", $tbihdr, "uint", 0, "ptr*", 0, "ptr", 0, "dword", 0)
		If NOT @error AND $hhbitmapv5[0] Then
			DllCall("gdi32.dll", "dword", "SetBitmapBits", "ptr", $hhbitmapv5[0], "dword", $aret[2] * $aret[3] * 4, "ptr", DllStructGetData($tdata, "Scan0"))
			$hhbitmapv5 = $hhbitmapv5[0]
		Else
			$hhbitmapv5 = 0
		EndIf
		_gdiplus_bitmapunlockbits($hbitmap, $tdata)
		$tdata = 0
		$tbihdr = 0
		Return $hhbitmapv5
	EndFunc

	Func _gdiplus_bitmapcreatefromfile($sfilename)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromFile", "wstr", $sfilename, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_bitmapcreatefromgraphics($iwidth, $iheight, $hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromGraphics", "int", $iwidth, "int", $iheight, "handle", $hgraphics, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[4]
	EndFunc

	Func _gdiplus_bitmapcreatefromhbitmap($hbitmap, $hpal = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromHBITMAP", "handle", $hbitmap, "handle", $hpal, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_bitmapcreatefrommemory($dimage, $bhbitmap = False)
		If NOT IsBinary($dimage) Then Return SetError(1, 0, 0)
		Local $aresult = 0
		Local Const $dmembitmap = Binary($dimage)
		Local Const $ilen = BinaryLen($dmembitmap)
		Local Const $gmem_moveable = 2
		$aresult = DllCall("kernel32.dll", "handle", "GlobalAlloc", "uint", $gmem_moveable, "ulong_ptr", $ilen)
		If @error Then Return SetError(4, 0, 0)
		Local Const $hdata = $aresult[0]
		$aresult = DllCall("kernel32.dll", "ptr", "GlobalLock", "handle", $hdata)
		If @error Then Return SetError(5, 0, 0)
		Local $tmem = DllStructCreate("byte[" & $ilen & "]", $aresult[0])
		DllStructSetData($tmem, 1, $dmembitmap)
		DllCall("kernel32.dll", "bool", "GlobalUnlock", "handle", $hdata)
		If @error Then Return SetError(6, 0, 0)
		Local Const $hstream = _winapi_createstreamonhglobal($hdata)
		If @error Then Return SetError(2, 0, 0)
		Local Const $hbitmap = _gdiplus_bitmapcreatefromstream($hstream)
		If @error Then Return SetError(3, 0, 0)
		DllCall("oleaut32.dll", "long", "DispCallFunc", "ptr", $hstream, "ulong_ptr", 8 * (1 + @AutoItX64), "uint", 4, "ushort", 23, "uint", 0, "ptr", 0, "ptr", 0, "str", "")
		If $bhbitmap Then
			Local Const $hhbmp = _gdiplus_bitmapcreatedibfrombitmap($hbitmap)
			_gdiplus_bitmapdispose($hbitmap)
			Return $hhbmp
		EndIf
		Return $hbitmap
	EndFunc

	Func _gdiplus_bitmapcreatefromresource($hinst, $vresourcename)
		Local $stype = "int"
		If IsString($vresourcename) Then $stype = "wstr"
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromResource", "handle", $hinst, $stype, $vresourcename, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_bitmapcreatefromscan0($iwidth, $iheight, $ipixelformat = $gdip_pxf32argb, $istride = 0, $pscan0 = 0)
		Local $aresult = DllCall($__g_hgdipdll, "uint", "GdipCreateBitmapFromScan0", "int", $iwidth, "int", $iheight, "int", $istride, "int", $ipixelformat, "struct*", $pscan0, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[6]
	EndFunc

	Func _gdiplus_bitmapcreatefromstream($pstream)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromStream", "ptr", $pstream, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_bitmapcreatehbitmapfrombitmap($hbitmap, $iargb = -16777216)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateHBITMAPFromBitmap", "handle", $hbitmap, "handle*", 0, "dword", $iargb)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_bitmapdispose($hbitmap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDisposeImage", "handle", $hbitmap)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_bitmapcreatefromhicon($hicon)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromHICON", "handle", $hicon, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_bitmapcreatefromhicon32($hicon)
		Local $tsize = _winapi_geticondimension($hicon)
		Local $iwidth = DllStructGetData($tsize, "X")
		Local $iheight = DllStructGetData($tsize, "Y")
		If $iwidth <= 0 OR $iheight <= 0 Then Return SetError(10, -1, 0)
		Local $tbitmapinfo = DllStructCreate("dword Size;long Width;long Height;word Planes;word BitCount;dword Compression;dword SizeImage;long XPelsPerMeter;long YPelsPerMeter;dword ClrUsed;dword ClrImportant;dword RGBQuad")
		DllStructSetData($tbitmapinfo, "Size", DllStructGetSize($tbitmapinfo) - 4)
		DllStructSetData($tbitmapinfo, "Width", $iwidth)
		DllStructSetData($tbitmapinfo, "Height", -$iheight)
		DllStructSetData($tbitmapinfo, "Planes", 1)
		DllStructSetData($tbitmapinfo, "BitCount", 32)
		DllStructSetData($tbitmapinfo, "Compression", 0)
		DllStructSetData($tbitmapinfo, "SizeImage", 0)
		Local $hdc = _winapi_createcompatibledc(0)
		Local $pbits
		Local $hbmp = _winapi_createdibsection(0, $tbitmapinfo, 0, $pbits)
		Local $horig = _winapi_selectobject($hdc, $hbmp)
		_winapi_drawiconex($hdc, 0, 0, $hicon, $iwidth, $iheight)
		Local $hbitmapicon = _gdiplus_bitmapcreatefromscan0($iwidth, $iheight, $gdip_pxf32argb, $iwidth * 4, $pbits)
		Local $hbitmap = _gdiplus_bitmapcreatefromscan0($iwidth, $iheight)
		Local $hcontext = _gdiplus_imagegetgraphicscontext($hbitmap)
		_gdiplus_graphicsdrawimage($hcontext, $hbitmapicon, 0, 0)
		_gdiplus_graphicsdispose($hcontext)
		_gdiplus_bitmapdispose($hbitmapicon)
		_winapi_selectobject($hdc, $horig)
		_winapi_deletedc($hdc)
		_winapi_deleteobject($hbmp)
		Return $hbitmap
	EndFunc

	Func _gdiplus_bitmapgetpixel($hbitmap, $ix, $iy)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapGetPixel", "handle", $hbitmap, "int", $ix, "int", $iy, "uint*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[4]
	EndFunc

	Func _gdiplus_bitmaplockbits($hbitmap, $ileft, $itop, $iwidth, $iheight, $iflags = $gdip_ilmread, $iformat = $gdip_pxf32rgb)
		Local $tdata = DllStructCreate($taggdipbitmapdata)
		Local $trect = DllStructCreate($tagrect)
		DllStructSetData($trect, "Left", $ileft)
		DllStructSetData($trect, "Top", $itop)
		DllStructSetData($trect, "Right", $iwidth)
		DllStructSetData($trect, "Bottom", $iheight)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapLockBits", "handle", $hbitmap, "struct*", $trect, "uint", $iflags, "int", $iformat, "struct*", $tdata)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $tdata
	EndFunc

	Func _gdiplus_bitmapsetpixel($hbitmap, $ix, $iy, $iargb)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapSetPixel", "handle", $hbitmap, "int", $ix, "int", $iy, "uint", $iargb)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_bitmapunlockbits($hbitmap, $tbitmapdata)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapUnlockBits", "handle", $hbitmap, "struct*", $tbitmapdata)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_brushclone($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCloneBrush", "handle", $hbrush, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_brushcreatesolid($iargb = -16777216)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateSolidFill", "int", $iargb, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_brushdispose($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteBrush", "handle", $hbrush)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_brushgetsolidcolor($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetSolidFillColor", "handle", $hbrush, "dword*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_brushgettype($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetBrushType", "handle", $hbrush, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_brushsetsolidcolor($hbrush, $iargb = -16777216)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetSolidFillColor", "handle", $hbrush, "dword", $iargb)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_colormatrixcreate()
		Return _gdiplus_colormatrixcreatescale(1, 1, 1, 1)
	EndFunc

	Func _gdiplus_colormatrixcreategrayscale()
		Local $ii, $ij, $tcm, $alums[4] = [$gdip_rlum, $gdip_glum, $gdip_blum, 0]
		$tcm = DllStructCreate($taggdipcolormatrix)
		For $ii = 0 To 3
			For $ij = 1 To 3
				DllStructSetData($tcm, "m", $alums[$ii], $ii * 5 + $ij)
			Next
		Next
		DllStructSetData($tcm, "m", 1, 19)
		DllStructSetData($tcm, "m", 1, 25)
		Return $tcm
	EndFunc

	Func _gdiplus_colormatrixcreatenegative()
		Local $ii, $tcm
		$tcm = _gdiplus_colormatrixcreatescale(-1, -1, -1, 1)
		For $ii = 1 To 4
			DllStructSetData($tcm, "m", 1, 20 + $ii)
		Next
		Return $tcm
	EndFunc

	Func _gdiplus_colormatrixcreatesaturation($fsat)
		Local $fsatcomp, $tcm
		$tcm = DllStructCreate($taggdipcolormatrix)
		$fsatcomp = (1 - $fsat)
		DllStructSetData($tcm, "m", $fsatcomp * $gdip_rlum + $fsat, 1)
		DllStructSetData($tcm, "m", $fsatcomp * $gdip_rlum, 2)
		DllStructSetData($tcm, "m", $fsatcomp * $gdip_rlum, 3)
		DllStructSetData($tcm, "m", $fsatcomp * $gdip_glum, 6)
		DllStructSetData($tcm, "m", $fsatcomp * $gdip_glum + $fsat, 7)
		DllStructSetData($tcm, "m", $fsatcomp * $gdip_glum, 8)
		DllStructSetData($tcm, "m", $fsatcomp * $gdip_blum, 11)
		DllStructSetData($tcm, "m", $fsatcomp * $gdip_blum, 12)
		DllStructSetData($tcm, "m", $fsatcomp * $gdip_blum + $fsat, 13)
		DllStructSetData($tcm, "m", 1, 19)
		DllStructSetData($tcm, "m", 1, 25)
		Return $tcm
	EndFunc

	Func _gdiplus_colormatrixcreatescale($fred, $fgreen, $fblue, $falpha = 1)
		Local $tcm
		$tcm = DllStructCreate($taggdipcolormatrix)
		DllStructSetData($tcm, "m", $fred, 1)
		DllStructSetData($tcm, "m", $fgreen, 7)
		DllStructSetData($tcm, "m", $fblue, 13)
		DllStructSetData($tcm, "m", $falpha, 19)
		DllStructSetData($tcm, "m", 1, 25)
		Return $tcm
	EndFunc

	Func _gdiplus_colormatrixcreatetranslate($fred, $fgreen, $fblue, $falpha = 0)
		Local $ii, $tcm, $afactors[4] = [$fred, $fgreen, $fblue, $falpha]
		$tcm = _gdiplus_colormatrixcreate()
		For $ii = 0 To 3
			DllStructSetData($tcm, "m", $afactors[$ii], 21 + $ii)
		Next
		Return $tcm
	EndFunc

	Func _gdiplus_customlinecapclone($hcustomlinecap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCloneCustomLineCap", "handle", $hcustomlinecap, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_customlinecapcreate($hpathfill, $hpathstroke, $ilinecap = 0, $nbaseinset = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateCustomLineCap", "handle", $hpathfill, "handle", $hpathstroke, "int", $ilinecap, "float", $nbaseinset, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[5]
	EndFunc

	Func _gdiplus_customlinecapdispose($hcap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteCustomLineCap", "handle", $hcap)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_customlinecapgetstrokecaps($hcustomlinecap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetCustomLineCapStrokeCaps", "hwnd", $hcustomlinecap, "ptr*", 0, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then SetError(10, $aresult[0], 0)
		Local $acaps[2]
		$acaps[0] = $aresult[2]
		$acaps[1] = $aresult[3]
		Return $acaps
	EndFunc

	Func _gdiplus_customlinecapsetstrokecaps($hcustomlinecap, $istartcap, $iendcap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetCustomLineCapStrokeCaps", "handle", $hcustomlinecap, "int", $istartcap, "int", $iendcap)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_decoders()
		Local $icount = _gdiplus_decodersgetcount()
		Local $isize = _gdiplus_decodersgetsize()
		Local $tbuffer = DllStructCreate("byte[" & $isize & "]")
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageDecoders", "uint", $icount, "uint", $isize, "struct*", $tbuffer)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Local $pbuffer = DllStructGetPtr($tbuffer)
		Local $tcodec, $ainfo[$icount + 1][14]
		$ainfo[0][0] = $icount
		For $ii = 1 To $icount
			$tcodec = DllStructCreate($taggdipimagecodecinfo, $pbuffer)
			$ainfo[$ii][1] = _winapi_stringfromguid(DllStructGetPtr($tcodec, "CLSID"))
			$ainfo[$ii][2] = _winapi_stringfromguid(DllStructGetPtr($tcodec, "FormatID"))
			$ainfo[$ii][3] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "CodecName"))
			$ainfo[$ii][4] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "DllName"))
			$ainfo[$ii][5] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "FormatDesc"))
			$ainfo[$ii][6] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "FileExt"))
			$ainfo[$ii][7] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "MimeType"))
			$ainfo[$ii][8] = DllStructGetData($tcodec, "Flags")
			$ainfo[$ii][9] = DllStructGetData($tcodec, "Version")
			$ainfo[$ii][10] = DllStructGetData($tcodec, "SigCount")
			$ainfo[$ii][11] = DllStructGetData($tcodec, "SigSize")
			$ainfo[$ii][12] = DllStructGetData($tcodec, "SigPattern")
			$ainfo[$ii][13] = DllStructGetData($tcodec, "SigMask")
			$pbuffer += DllStructGetSize($tcodec)
		Next
		Return $ainfo
	EndFunc

	Func _gdiplus_decodersgetcount()
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageDecodersSize", "uint*", 0, "uint*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[1]
	EndFunc

	Func _gdiplus_decodersgetsize()
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageDecodersSize", "uint*", 0, "uint*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_drawimagepoints($hgraphic, $himage, $nulx, $nuly, $nurx, $nury, $nllx, $nlly, $icount = 3)
		Local $tpoint = DllStructCreate("float X;float Y;float X2;float Y2;float X3;float Y3")
		DllStructSetData($tpoint, "X", $nulx)
		DllStructSetData($tpoint, "Y", $nuly)
		DllStructSetData($tpoint, "X2", $nurx)
		DllStructSetData($tpoint, "Y2", $nury)
		DllStructSetData($tpoint, "X3", $nllx)
		DllStructSetData($tpoint, "Y3", $nlly)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImagePoints", "handle", $hgraphic, "handle", $himage, "struct*", $tpoint, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_encoders()
		Local $icount = _gdiplus_encodersgetcount()
		Local $isize = _gdiplus_encodersgetsize()
		Local $tbuffer = DllStructCreate("byte[" & $isize & "]")
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageEncoders", "uint", $icount, "uint", $isize, "struct*", $tbuffer)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Local $pbuffer = DllStructGetPtr($tbuffer)
		Local $tcodec, $ainfo[$icount + 1][14]
		$ainfo[0][0] = $icount
		For $ii = 1 To $icount
			$tcodec = DllStructCreate($taggdipimagecodecinfo, $pbuffer)
			$ainfo[$ii][1] = _winapi_stringfromguid(DllStructGetPtr($tcodec, "CLSID"))
			$ainfo[$ii][2] = _winapi_stringfromguid(DllStructGetPtr($tcodec, "FormatID"))
			$ainfo[$ii][3] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "CodecName"))
			$ainfo[$ii][4] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "DllName"))
			$ainfo[$ii][5] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "FormatDesc"))
			$ainfo[$ii][6] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "FileExt"))
			$ainfo[$ii][7] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "MimeType"))
			$ainfo[$ii][8] = DllStructGetData($tcodec, "Flags")
			$ainfo[$ii][9] = DllStructGetData($tcodec, "Version")
			$ainfo[$ii][10] = DllStructGetData($tcodec, "SigCount")
			$ainfo[$ii][11] = DllStructGetData($tcodec, "SigSize")
			$ainfo[$ii][12] = DllStructGetData($tcodec, "SigPattern")
			$ainfo[$ii][13] = DllStructGetData($tcodec, "SigMask")
			$pbuffer += DllStructGetSize($tcodec)
		Next
		Return $ainfo
	EndFunc

	Func _gdiplus_encodersgetclsid($sfileextension)
		Local $aencoders = _gdiplus_encoders()
		If @error Then Return SetError(@error, 0, "")
		For $ii = 1 To $aencoders[0][0]
			If StringInStr($aencoders[$ii][6], "*." & $sfileextension) > 0 Then Return $aencoders[$ii][1]
		Next
		Return SetError(-1, -1, "")
	EndFunc

	Func _gdiplus_encodersgetcount()
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageEncodersSize", "uint*", 0, "uint*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[1]
	EndFunc

	Func _gdiplus_encodersgetparamlist($himage, $sencoder)
		Local $isize = _gdiplus_encodersgetparamlistsize($himage, $sencoder)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Local $tguid = _winapi_guidfromstring($sencoder)
		Local $iremainingsize = $isize - 4 - _gdiplus_paramsize()
		Local $tbuffer
		If $iremainingsize Then
			$tbuffer = DllStructCreate("dword Count;" & $taggdipencoderparam & ";byte [" & $iremainingsize & "]")
		Else
			$tbuffer = DllStructCreate("dword Count;" & $taggdipencoderparam)
		EndIf
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetEncoderParameterList", "handle", $himage, "struct*", $tguid, "uint", $isize, "struct*", $tbuffer)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $tbuffer
	EndFunc

	Func _gdiplus_encodersgetparamlistsize($himage, $sencoder)
		Local $tguid = _winapi_guidfromstring($sencoder)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetEncoderParameterListSize", "handle", $himage, "struct*", $tguid, "uint*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_encodersgetsize()
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageEncodersSize", "uint*", 0, "uint*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_fontcreate($hfamily, $fsize, $istyle = 0, $iunit = 3)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateFont", "handle", $hfamily, "float", $fsize, "int", $istyle, "int", $iunit, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[5]
	EndFunc

	Func _gdiplus_fontdispose($hfont)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteFont", "handle", $hfont)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_fontfamilycreate($sfamily, $pcollection = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateFontFamilyFromName", "wstr", $sfamily, "ptr", $pcollection, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_fontfamilycreatefromcollection($sfontname, $hfontcollection)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateFontFamilyFromName", "wstr", $sfontname, "ptr", $hfontcollection, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $aresult[0] Then Return SetError(10, $aresult[0], "")
		Return $aresult[3]
	EndFunc

	Func _gdiplus_fontfamilydispose($hfamily)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteFontFamily", "handle", $hfamily)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_fontfamilygetcellascent($hfontfamily, $istyle = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetCellAscent", "handle", $hfontfamily, "int", $istyle, "ushort*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_fontfamilygetcelldescent($hfontfamily, $istyle = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetCellDescent", "handle", $hfontfamily, "int", $istyle, "ushort*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_fontfamilygetemheight($hfontfamily, $istyle = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetEmHeight", "handle", $hfontfamily, "int", $istyle, "ushort*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_fontfamilygetlinespacing($hfontfamily, $istyle = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetLineSpacing", "handle", $hfontfamily, "int", $istyle, "ushort*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_fontgetheight($hfont, $hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetFontHeight", "handle", $hfont, "handle", $hgraphics, "float*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_fontprivateaddfont($hfontcollection, $sfontfile)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPrivateAddFontFile", "ptr", $hfontcollection, "wstr", $sfontfile)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_fontprivateaddmemoryfont($hfontcollection, $tfont)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPrivateAddMemoryFont", "handle", $hfontcollection, "struct*", $tfont, "int", DllStructGetSize($tfont))
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_fontprivatecollectiondispose($hfontcollection)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeletePrivateFontCollection", "handle*", $hfontcollection)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_fontprivatecreatecollection()
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipNewPrivateFontCollection", "ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[1]
	EndFunc

	Func _gdiplus_graphicsclear($hgraphics, $iargb = -16777216)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGraphicsClear", "handle", $hgraphics, "dword", $iargb)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicscreatefromhdc($hdc)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateFromHDC", "handle", $hdc, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_graphicscreatefromhwnd($hwnd)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateFromHWND", "hwnd", $hwnd, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_graphicsdispose($hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteGraphics", "handle", $hgraphics)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawarc($hgraphics, $nx, $ny, $nwidth, $nheight, $fstartangle, $fsweepangle, $hpen = 0)
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawArc", "handle", $hgraphics, "handle", $hpen, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "float", $fstartangle, "float", $fsweepangle)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawbezier($hgraphics, $nx1, $ny1, $nx2, $ny2, $nx3, $ny3, $nx4, $ny4, $hpen = 0)
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawBezier", "handle", $hgraphics, "handle", $hpen, "float", $nx1, "float", $ny1, "float", $nx2, "float", $ny2, "float", $nx3, "float", $ny3, "float", $nx4, "float", $ny4)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawclosedcurve($hgraphics, $apoints, $hpen = 0)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawClosedCurve", "handle", $hgraphics, "handle", $hpen, "struct*", $tpoints, "int", $icount)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawclosedcurve2($hgraphics, $apoints, $ntension, $hpen = 0)
		Local $ii, $icount, $tpoints, $aresult
		__gdiplus_pendefcreate($hpen)
		$icount = $apoints[0][0]
		$tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		$aresult = DllCall($__g_hgdipdll, "int", "GdipDrawClosedCurve2", "handle", $hgraphics, "handle", $hpen, "struct*", $tpoints, "int", $icount, "float", $ntension)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawcurve($hgraphics, $apoints, $hpen = 0)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawCurve", "handle", $hgraphics, "handle", $hpen, "struct*", $tpoints, "int", $icount)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawcurve2($hgraphics, $apoints, $ntension, $hpen = 0)
		Local $ii, $icount, $tpoints, $aresult
		__gdiplus_pendefcreate($hpen)
		$icount = $apoints[0][0]
		$tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		$aresult = DllCall($__g_hgdipdll, "int", "GdipDrawCurve2", "handle", $hgraphics, "handle", $hpen, "struct*", $tpoints, "int", $icount, "float", $ntension)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawellipse($hgraphics, $nx, $ny, $nwidth, $nheight, $hpen = 0)
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawEllipse", "handle", $hgraphics, "handle", $hpen, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawimage($hgraphics, $himage, $nx, $ny)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImage", "handle", $hgraphics, "handle", $himage, "float", $nx, "float", $ny)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawimagepointsrect($hgraphics, $himage, $nulx, $nuly, $nurx, $nury, $nllx, $nlly, $nsrcx, $nsrcy, $nsrcwidth, $nsrcheight, $himageattributes = 0, $iunit = 2)
		Local $tpoints = DllStructCreate("float X; float Y; float X2; float Y2; float X3; float Y3;")
		DllStructSetData($tpoints, "X", $nulx)
		DllStructSetData($tpoints, "Y", $nuly)
		DllStructSetData($tpoints, "X2", $nurx)
		DllStructSetData($tpoints, "Y2", $nury)
		DllStructSetData($tpoints, "X3", $nllx)
		DllStructSetData($tpoints, "Y3", $nlly)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImagePointsRect", "handle", $hgraphics, "handle", $himage, "struct*", $tpoints, "int", 3, "float", $nsrcx, "float", $nsrcy, "float", $nsrcwidth, "float", $nsrcheight, "int", $iunit, "handle", $himageattributes, "ptr", 0, "ptr", 0)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawimagerect($hgraphics, $himage, $nx, $ny, $nw, $nh)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImageRect", "handle", $hgraphics, "handle", $himage, "float", $nx, "float", $ny, "float", $nw, "float", $nh)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawimagerectrect($hgraphics, $himage, $nsrcx, $nsrcy, $nsrcwidth, $nsrcheight, $ndstx, $ndsty, $ndstwidth, $ndstheight, $pattributes = 0, $iunit = 2)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImageRectRect", "handle", $hgraphics, "handle", $himage, "float", $ndstx, "float", $ndsty, "float", $ndstwidth, "float", $ndstheight, "float", $nsrcx, "float", $nsrcy, "float", $nsrcwidth, "float", $nsrcheight, "int", $iunit, "handle", $pattributes, "ptr", 0, "ptr", 0)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawline($hgraphics, $nx1, $ny1, $nx2, $ny2, $hpen = 0)
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawLine", "handle", $hgraphics, "handle", $hpen, "float", $nx1, "float", $ny1, "float", $nx2, "float", $ny2)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawpath($hgraphics, $hpath, $hpen = 0)
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawPath", "handle", $hgraphics, "handle", $hpen, "handle", $hpath)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawpie($hgraphics, $nx, $ny, $nwidth, $nheight, $fstartangle, $fsweepangle, $hpen = 0)
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawPie", "handle", $hgraphics, "handle", $hpen, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "float", $fstartangle, "float", $fsweepangle)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawpolygon($hgraphics, $apoints, $hpen = 0)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawPolygon", "handle", $hgraphics, "handle", $hpen, "struct*", $tpoints, "int", $icount)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawrect($hgraphics, $nx, $ny, $nwidth, $nheight, $hpen = 0)
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawRectangle", "handle", $hgraphics, "handle", $hpen, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsdrawstring($hgraphics, $sstring, $nx, $ny, $sfont = "Arial", $fsize = 10, $iformat = 0)
		Local $hbrush = _gdiplus_brushcreatesolid()
		Local $hformat = _gdiplus_stringformatcreate($iformat)
		Local $hfamily = _gdiplus_fontfamilycreate($sfont)
		Local $hfont = _gdiplus_fontcreate($hfamily, $fsize)
		Local $tlayout = _gdiplus_rectfcreate($nx, $ny, 0, 0)
		Local $ainfo = _gdiplus_graphicsmeasurestring($hgraphics, $sstring, $hfont, $tlayout, $hformat)
		If @error Then Return SetError(@error, @extended, 0)
		Local $aresult = _gdiplus_graphicsdrawstringex($hgraphics, $sstring, $hfont, $ainfo[0], $hformat, $hbrush)
		Local $ierror = @error, $iextended = @extended
		_gdiplus_fontdispose($hfont)
		_gdiplus_fontfamilydispose($hfamily)
		_gdiplus_stringformatdispose($hformat)
		_gdiplus_brushdispose($hbrush)
		Return SetError($ierror, $iextended, $aresult)
	EndFunc

	Func _gdiplus_graphicsdrawstringex($hgraphics, $sstring, $hfont, $tlayout, $hformat, $hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawString", "handle", $hgraphics, "wstr", $sstring, "int", -1, "handle", $hfont, "struct*", $tlayout, "handle", $hformat, "handle", $hbrush)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsfillclosedcurve($hgraphics, $apoints, $hbrush = 0)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		__gdiplus_brushdefcreate($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillClosedCurve", "handle", $hgraphics, "handle", $hbrush, "struct*", $tpoints, "int", $icount)
		__gdiplus_brushdefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsfillclosedcurve2($hgraphics, $apoints, $ntension, $hbrush = 0, $ifillmode = 0)
		Local $ii, $icount, $tpoints, $aresult
		__gdiplus_brushdefcreate($hbrush)
		$icount = $apoints[0][0]
		$tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		$aresult = DllCall($__g_hgdipdll, "int", "GdipFillClosedCurve2", "handle", $hgraphics, "handle", $hbrush, "struct*", $tpoints, "int", $icount, "float", $ntension, "int", $ifillmode)
		__gdiplus_brushdefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsfillellipse($hgraphics, $nx, $ny, $nwidth, $nheight, $hbrush = 0)
		__gdiplus_brushdefcreate($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillEllipse", "handle", $hgraphics, "handle", $hbrush, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
		__gdiplus_brushdefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsfillpath($hgraphics, $hpath, $hbrush = 0)
		__gdiplus_brushdefcreate($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillPath", "handle", $hgraphics, "handle", $hbrush, "handle", $hpath)
		__gdiplus_brushdefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsfillpie($hgraphics, $nx, $ny, $nwidth, $nheight, $fstartangle, $fsweepangle, $hbrush = 0)
		__gdiplus_brushdefcreate($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillPie", "handle", $hgraphics, "handle", $hbrush, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "float", $fstartangle, "float", $fsweepangle)
		__gdiplus_brushdefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsfillpolygon($hgraphics, $apoints, $hbrush = 0)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		__gdiplus_brushdefcreate($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillPolygon", "handle", $hgraphics, "handle", $hbrush, "struct*", $tpoints, "int", $icount, "int", "FillModeAlternate")
		__gdiplus_brushdefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsfillrect($hgraphics, $nx, $ny, $nwidth, $nheight, $hbrush = 0)
		__gdiplus_brushdefcreate($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillRectangle", "handle", $hgraphics, "handle", $hbrush, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
		__gdiplus_brushdefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsfillregion($hgraphics, $hregion, $hbrush = 0)
		__gdiplus_brushdefcreate($hbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillRegion", "handle", $hgraphics, "handle", $hbrush, "handle", $hregion)
		__gdiplus_brushdefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsgetcompositingmode($hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetCompositingMode", "handle", $hgraphics, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_graphicsgetcompositingquality($hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetCompositingQuality", "handle", $hgraphics, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_graphicsgetdc($hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetDC", "handle", $hgraphics, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_graphicsgetinterpolationmode($hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetInterpolationMode", "handle", $hgraphics, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_graphicsgetsmoothingmode($hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetSmoothingMode", "handle", $hgraphics, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Switch $aresult[2]
			Case $gdip_smoothingmode_none
				Return 0
			Case $gdip_smoothingmode_highquality, $gdip_smoothingmode_antialias8x4
				Return 1
			Case $gdip_smoothingmode_antialias8x8
				Return 2
			Case Else
				Return 0
		EndSwitch
	EndFunc

	Func _gdiplus_graphicsgettransform($hgraphics, $hmatrix)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetWorldTransform", "handle", $hgraphics, "handle", $hmatrix)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsmeasurecharacterranges($hgraphics, $sstring, $hfont, $tlayout, $hstringformat)
		Local $icount = _gdiplus_stringformatgetmeasurablecharacterrangecount($hstringformat)
		If @error Then Return SetError(@error, @extended, 0)
		Local $tregions = DllStructCreate("handle[" & $icount & "]")
		Local $aregions[$icount + 1] = [$icount]
		For $ii = 1 To $icount
			$aregions[$ii] = _gdiplus_regioncreate()
			DllStructSetData($tregions, 1, $aregions[$ii], $ii)
		Next
		DllCall($__g_hgdipdll, "int", "GdipMeasureCharacterRanges", "handle", $hgraphics, "wstr", $sstring, "int", -1, "hwnd", $hfont, "struct*", $tlayout, "handle", $hstringformat, "int", $icount, "struct*", $tregions)
		Local $ierror = @error, $iextended = @extended
		If $ierror Then
			For $ii = 1 To $icount
				_gdiplus_regiondispose($aregions[$ii])
			Next
			Return SetError($ierror + 10, $iextended, 0)
		EndIf
		Return $aregions
	EndFunc

	Func _gdiplus_graphicsmeasurestring($hgraphics, $sstring, $hfont, $tlayout, $hformat)
		Local $trectf = DllStructCreate($taggdiprectf)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipMeasureString", "handle", $hgraphics, "wstr", $sstring, "int", -1, "handle", $hfont, "struct*", $tlayout, "handle", $hformat, "struct*", $trectf, "int*", 0, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Local $ainfo[3]
		$ainfo[0] = $trectf
		$ainfo[1] = $aresult[8]
		$ainfo[2] = $aresult[9]
		Return $ainfo
	EndFunc

	Func _gdiplus_graphicsreleasedc($hgraphics, $hdc)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipReleaseDC", "handle", $hgraphics, "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_graphicsresetclip($hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipResetClip", "handle", $hgraphics)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsresettransform($hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipResetWorldTransform", "handle", $hgraphics)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsrestore($hgraphics, $istate)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipRestoreGraphics", "handle", $hgraphics, "uint", $istate)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicsrotatetransform($hgraphics, $fangle, $iorder = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipRotateWorldTransform", "handle", $hgraphics, "float", $fangle, "int", $iorder)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssave($hgraphics)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSaveGraphics", "handle", $hgraphics, "uint*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_graphicsscaletransform($hgraphics, $fscalex, $fscaley, $iorder = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipScaleWorldTransform", "handle", $hgraphics, "float", $fscalex, "float", $fscaley, "int", $iorder)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssetclippath($hgraphics, $hpath, $icombinemode = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetClipPath", "handle", $hgraphics, "handle", $hpath, "int", $icombinemode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssetcliprect($hgraphics, $nx, $ny, $nwidth, $nheight, $icombinemode = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetClipRect", "handle", $hgraphics, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "int", $icombinemode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssetclipregion($hgraphics, $hregion, $icombinemode = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetClipRegion", "handle", $hgraphics, "handle", $hregion, "int", $icombinemode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssetcompositingmode($hgraphics, $icompositionmode)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetCompositingMode", "handle", $hgraphics, "int", $icompositionmode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssetcompositingquality($hgraphics, $icompositionquality)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetCompositingQuality", "handle", $hgraphics, "int", $icompositionquality)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssetinterpolationmode($hgraphics, $iinterpolationmode)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetInterpolationMode", "handle", $hgraphics, "int", $iinterpolationmode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssetpixeloffsetmode($hgraphics, $ipixeloffsetmode)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPixelOffsetMode", "handle", $hgraphics, "int", $ipixeloffsetmode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssetsmoothingmode($hgraphics, $ismooth)
		If $ismooth < $gdip_smoothingmode_default OR $ismooth > $gdip_smoothingmode_antialias8x8 Then $ismooth = $gdip_smoothingmode_default
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetSmoothingMode", "handle", $hgraphics, "int", $ismooth)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssettextrenderinghint($hgraphics, $itextrenderinghint)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetTextRenderingHint", "handle", $hgraphics, "int", $itextrenderinghint)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicssettransform($hgraphics, $hmatrix)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetWorldTransform", "handle", $hgraphics, "handle", $hmatrix)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_graphicstransformpoints($hgraphics, ByRef $apoints, $icoordspaceto = 0, $icoordspacefrom = 1)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], ($ii - 1) * 2 + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], ($ii - 1) * 2 + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTransformPoints", "handle", $hgraphics, "int", $icoordspaceto, "int", $icoordspacefrom, "struct*", $tpoints, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		For $ii = 1 To $icount
			$apoints[$ii][0] = DllStructGetData($tpoints, 1, ($ii - 1) * 2 + 1)
			$apoints[$ii][1] = DllStructGetData($tpoints, 1, ($ii - 1) * 2 + 2)
		Next
		Return True
	EndFunc

	Func _gdiplus_graphicstranslatetransform($hgraphics, $ndx, $ndy, $iorder = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTranslateWorldTransform", "handle", $hgraphics, "float", $ndx, "float", $ndy, "int", $iorder)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_hatchbrushcreate($ihatchstyle = 0, $iargbforeground = -1, $iargbbackground = -1)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateHatchBrush", "int", $ihatchstyle, "uint", $iargbforeground, "uint", $iargbbackground, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[4]
	EndFunc

	Func _gdiplus_hiconcreatefrombitmap($hbitmap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateHICONFromBitmap", "handle", $hbitmap, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_imageattributescreate()
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateImageAttributes", "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[1]
	EndFunc

	Func _gdiplus_imageattributesdispose($himageattributes)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDisposeImageAttributes", "handle", $himageattributes)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_imageattributessetcolorkeys($himageattributes, $icoloradjusttype = 0, $benable = False, $iargblow = 0, $iargbhigh = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetImageAttributesColorKeys", "handle", $himageattributes, "int", $icoloradjusttype, "int", $benable, "uint", $iargblow, "uint", $iargbhigh)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_imageattributessetcolormatrix($himageattributes, $icoloradjusttype = 0, $benable = False, $tclrmatrix = 0, $tgraymatrix = 0, $icolormatrixflags = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetImageAttributesColorMatrix", "handle", $himageattributes, "int", $icoloradjusttype, "int", $benable, "struct*", $tclrmatrix, "struct*", $tgraymatrix, "int", $icolormatrixflags)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_imagedispose($himage)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDisposeImage", "handle", $himage)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_imagegetdimension($himage)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageDimension", "handle", $himage, "float*", 0, "float*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Local $aimgdim[2] = [$aresult[2], $aresult[3]]
		Return $aimgdim
	EndFunc

	Func _gdiplus_imagegetflags($himage)
		Local $aflag[2] = [0, ""]
		If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, $aflag)
		Local $aimageflags[13][2] = [["Pixel data Cacheable", $gdip_imageflags_caching], ["Pixel data read-only", $gdip_imageflags_readonly], ["Pixel size in image", $gdip_imageflags_hasrealpixelsize], ["DPI info in image", $gdip_imageflags_hasrealdpi], ["YCCK color space", $gdip_imageflags_colorspace_ycck], ["YCBCR color space", $gdip_imageflags_colorspace_ycbcr], ["Grayscale image", $gdip_imageflags_colorspace_gray], ["CMYK color space", $gdip_imageflags_colorspace_cmyk], ["RGB color space", $gdip_imageflags_colorspace_rgb], ["Partially scalable", $gdip_imageflags_partiallyscalable], ["Alpha values other than 0 (transparent) and 255 (opaque)", $gdip_imageflags_hastranslucent], ["Alpha values", $gdip_imageflags_hasalpha], ["Scalable", $gdip_imageflags_scalable]]
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageFlags", "handle", $himage, "long*", 0)
		If @error Then Return SetError(@error, @extended, $aflag)
		If $aresult[0] Then Return SetError(10, $aresult[0], $aflag)
		If $aresult[2] = $gdip_imageflags_none Then
			$aflag[1] = "No pixel data"
			Return SetError(12, $aresult[2], $aflag)
		EndIf
		$aflag[0] = $aresult[2]
		For $i = 0 To 12
			If BitAND($aresult[2], $aimageflags[$i][1]) = $aimageflags[$i][1] Then
				If StringLen($aflag[1]) Then $aflag[1] &= "|"
				$aresult[2] -= $aimageflags[$i][1]
				$aflag[1] &= $aimageflags[$i][0]
			EndIf
		Next
		Return $aflag
	EndFunc

	Func _gdiplus_imagegetgraphicscontext($himage)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageGraphicsContext", "handle", $himage, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_imagegetheight($himage)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageHeight", "handle", $himage, "uint*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_imagegethorizontalresolution($himage)
		If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageHorizontalResolution", "handle", $himage, "float*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return Round($aresult[2])
	EndFunc

	Func _gdiplus_imagegetpixelformat($himage)
		Local $aformat[2] = [0, ""]
		If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, $aformat)
		Local $apixelformat[14][2] = [["1 Bpp Indexed", $gdip_pxf01indexed], ["4 Bpp Indexed", $gdip_pxf04indexed], ["8 Bpp Indexed", $gdip_pxf08indexed], ["16 Bpp Grayscale", $gdip_pxf16grayscale], ["16 Bpp RGB 555", $gdip_pxf16rgb555], ["16 Bpp RGB 565", $gdip_pxf16rgb565], ["16 Bpp ARGB 1555", $gdip_pxf16argb1555], ["24 Bpp RGB", $gdip_pxf24rgb], ["32 Bpp RGB", $gdip_pxf32rgb], ["32 Bpp ARGB", $gdip_pxf32argb], ["32 Bpp PARGB", $gdip_pxf32pargb], ["48 Bpp RGB", $gdip_pxf48rgb], ["64 Bpp ARGB", $gdip_pxf64argb], ["64 Bpp PARGB", $gdip_pxf64pargb]]
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImagePixelFormat", "handle", $himage, "int*", 0)
		If @error Then Return SetError(@error, @extended, $aformat)
		If $aresult[0] Then Return SetError(10, $aresult[0], $aformat)
		For $i = 0 To 13
			If $apixelformat[$i][1] = $aresult[2] Then
				$aformat[0] = $apixelformat[$i][1]
				$aformat[1] = $apixelformat[$i][0]
				Return $aformat
			EndIf
		Next
		Return SetError(12, 0, $aformat)
	EndFunc

	Func _gdiplus_imagegetrawformat($himage)
		Local $aguid[2]
		If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, $aguid)
		Local $aimagetype[11][2] = [["UNDEFINED", $gdip_imageformat_undefined], ["MEMORYBMP", $gdip_imageformat_memorybmp], ["BMP", $gdip_imageformat_bmp], ["EMF", $gdip_imageformat_emf], ["WMF", $gdip_imageformat_wmf], ["JPEG", $gdip_imageformat_jpeg], ["PNG", $gdip_imageformat_png], ["GIF", $gdip_imageformat_gif], ["TIFF", $gdip_imageformat_tiff], ["EXIF", $gdip_imageformat_exif], ["ICON", $gdip_imageformat_icon]]
		Local $tstruct = DllStructCreate("byte[16]")
		Local $aresult1 = DllCall($__g_hgdipdll, "int", "GdipGetImageRawFormat", "handle", $himage, "struct*", $tstruct)
		If @error Then Return SetError(@error, @extended, $aguid)
		If $aresult1[0] Then Return SetError(10, $aresult1[0], $aguid)
		Local $sresult2 = _winapi_stringfromguid($aresult1[2])
		If @error Then Return SetError(@error + 20, @extended, $aguid)
		If $sresult2 = "" Then Return SetError(12, 0, $aguid)
		For $i = 0 To 10
			If $aimagetype[$i][1] == $sresult2 Then
				$aguid[0] = $aimagetype[$i][1]
				$aguid[1] = $aimagetype[$i][0]
				Return $aguid
			EndIf
		Next
		Return SetError(13, 0, $aguid)
	EndFunc

	Func _gdiplus_imagegetthumbnail($himage, $iwidth = 0, $iheight = 0, $bkeepratio = True, $hcallback = NULL , $hcallbackdata = NULL )
		If $bkeepratio Then
			Local $aimgdim = _gdiplus_imagegetdimension($himage)
			If @error Then Return SetError(@error + 20, @extended, False)
			Local $f
			If $iwidth < 1 OR $iheight < 1 Then
				$iwidth = 0
				$iheight = 0
			Else
				If ($aimgdim[0] / $aimgdim[1]) > 1 Then
					$f = $aimgdim[0] / $iwidth
				Else
					$f = $aimgdim[1] / $iheight
				EndIf
				$iwidth = Int($aimgdim[0] / $f)
				$iheight = Int($aimgdim[1] / $f)
			EndIf
		EndIf
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageThumbnail", "handle", $himage, "uint", $iwidth, "uint", $iheight, "ptr*", 0, "ptr", $hcallback, "ptr", $hcallbackdata)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return $aresult[4]
	EndFunc

	Func _gdiplus_imagegettype($himage)
		If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, -1)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageType", "handle", $himage, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_imagegetverticalresolution($himage)
		If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageVerticalResolution", "handle", $himage, "float*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return Round($aresult[2])
	EndFunc

	Func _gdiplus_imagegetwidth($himage)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageWidth", "handle", $himage, "uint*", -1)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_imageloadfromfile($sfilename)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipLoadImageFromFile", "wstr", $sfilename, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_imageloadfromstream($pstream)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipLoadImageFromStream", "ptr", $pstream, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_imagerotateflip($himage, $irotatefliptype)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipImageRotateFlip", "handle", $himage, "int", $irotatefliptype)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_imagesavetofile($himage, $sfilename)
		Local $sext = __gdiplus_extractfileext($sfilename)
		Local $sclsid = _gdiplus_encodersgetclsid($sext)
		If $sclsid = "" Then Return SetError(-1, 0, False)
		Local $bret = _gdiplus_imagesavetofileex($himage, $sfilename, $sclsid, 0)
		Return SetError(@error, @extended, $bret)
	EndFunc

	Func _gdiplus_imagesavetofileex($himage, $sfilename, $sencoder, $tparams = 0)
		Local $tguid = _winapi_guidfromstring($sencoder)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSaveImageToFile", "handle", $himage, "wstr", $sfilename, "struct*", $tguid, "struct*", $tparams)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_imagesavetostream($himage, $pstream, $tencoder, $tparams = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSaveImageToStream", "handle", $himage, "ptr", $pstream, "struct*", $tencoder, "struct*", $tparams)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_imagescale($himage, $iscalew, $iscaleh, $iinterpolationmode = $gdip_interpolationmode_highqualitybicubic)
		Local $iwidth = _gdiplus_imagegetwidth($himage) * $iscalew
		If @error Then Return SetError(1, 0, 0)
		Local $iheight = _gdiplus_imagegetheight($himage) * $iscaleh
		If @error Then Return SetError(2, 0, 0)
		Local $hbitmap = _gdiplus_bitmapcreatefromscan0($iwidth, $iheight)
		If @error Then Return SetError(3, 0, 0)
		Local $hbmpctxt = _gdiplus_imagegetgraphicscontext($hbitmap)
		If @error Then
			_gdiplus_bitmapdispose($hbitmap)
			Return SetError(4, 0, 0)
		EndIf
		_gdiplus_graphicssetinterpolationmode($hbmpctxt, $iinterpolationmode)
		If @error Then
			_gdiplus_graphicsdispose($hbmpctxt)
			_gdiplus_bitmapdispose($hbitmap)
			Return SetError(5, 0, 0)
		EndIf
		_gdiplus_graphicsdrawimagerect($hbmpctxt, $himage, 0, 0, $iwidth, $iheight)
		If @error Then
			_gdiplus_graphicsdispose($hbmpctxt)
			_gdiplus_bitmapdispose($hbitmap)
			Return SetError(6, 0, 0)
		EndIf
		_gdiplus_graphicsdispose($hbmpctxt)
		Return $hbitmap
	EndFunc

	Func _gdiplus_imageresize($himage, $inewwidth, $inewheight, $iinterpolationmode = $gdip_interpolationmode_highqualitybicubic)
		Local $hbitmap = _gdiplus_bitmapcreatefromscan0($inewwidth, $inewheight)
		If @error Then Return SetError(1, 0, 0)
		Local $hbmpctxt = _gdiplus_imagegetgraphicscontext($hbitmap)
		If @error Then
			_gdiplus_bitmapdispose($hbitmap)
			Return SetError(2, @extended, 0)
		EndIf
		_gdiplus_graphicssetinterpolationmode($hbmpctxt, $iinterpolationmode)
		If @error Then
			_gdiplus_graphicsdispose($hbmpctxt)
			_gdiplus_bitmapdispose($hbitmap)
			Return SetError(3, @extended, 0)
		EndIf
		_gdiplus_graphicsdrawimagerect($hbmpctxt, $himage, 0, 0, $inewwidth, $inewheight)
		If @error Then
			_gdiplus_graphicsdispose($hbmpctxt)
			_gdiplus_bitmapdispose($hbitmap)
			Return SetError(4, @extended, 0)
		EndIf
		_gdiplus_graphicsdispose($hbmpctxt)
		Return $hbitmap
	EndFunc

	Func _gdiplus_linebrushcreate($nx1, $ny1, $nx2, $ny2, $iargbclr1, $iargbclr2, $iwrapmode = 0)
		Local $tpointf1, $tpointf2, $aresult
		$tpointf1 = DllStructCreate("float;float")
		$tpointf2 = DllStructCreate("float;float")
		DllStructSetData($tpointf1, 1, $nx1)
		DllStructSetData($tpointf1, 2, $ny1)
		DllStructSetData($tpointf2, 1, $nx2)
		DllStructSetData($tpointf2, 2, $ny2)
		$aresult = DllCall($__g_hgdipdll, "int", "GdipCreateLineBrush", "struct*", $tpointf1, "struct*", $tpointf2, "uint", $iargbclr1, "uint", $iargbclr2, "int", $iwrapmode, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[6]
	EndFunc

	Func _gdiplus_linebrushcreatefromrect($trectf, $iargbclr1, $iargbclr2, $igradientmode = 0, $iwrapmode = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateLineBrushFromRect", "struct*", $trectf, "uint", $iargbclr1, "uint", $iargbclr2, "int", $igradientmode, "int", $iwrapmode, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[6]
	EndFunc

	Func _gdiplus_linebrushcreatefromrectwithangle($trectf, $iargbclr1, $iargbclr2, $fangle, $bisanglescalable = True, $iwrapmode = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateLineBrushFromRectWithAngle", "struct*", $trectf, "uint", $iargbclr1, "uint", $iargbclr2, "float", $fangle, "int", $bisanglescalable, "int", $iwrapmode, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[7]
	EndFunc

	Func _gdiplus_linebrushgetcolors($hlinegradientbrush)
		Local $targbs, $aargbs[2], $aresult
		$targbs = DllStructCreate("uint;uint")
		$aresult = DllCall($__g_hgdipdll, "uint", "GdipGetLineColors", "handle", $hlinegradientbrush, "struct*", $targbs)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		$aargbs[0] = DllStructGetData($targbs, 1)
		$aargbs[1] = DllStructGetData($targbs, 2)
		Return $aargbs
	EndFunc

	Func _gdiplus_linebrushgetrect($hlinegradientbrush)
		Local $trectf = DllStructCreate($taggdiprectf)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetLineRect", "handle", $hlinegradientbrush, "struct*", $trectf)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Local $arectf[4]
		For $ii = 1 To 4
			$arectf[$ii - 1] = DllStructGetData($trectf, $ii)
		Next
		Return $arectf
	EndFunc

	Func _gdiplus_linebrushmultiplytransform($hlinegradientbrush, $hmatrix, $iorder = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipMultiplyLineTransform", "handle", $hlinegradientbrush, "handle", $hmatrix, "int", $iorder)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_linebrushresettransform($hlinegradientbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipResetLineTransform", "handle", $hlinegradientbrush)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_linebrushsetblend($hlinegradientbrush, $ablends)
		Local $ii, $icount, $tfactors, $tpositions, $aresult
		$icount = $ablends[0][0]
		$tfactors = DllStructCreate("float[" & $icount & "]")
		$tpositions = DllStructCreate("float[" & $icount & "]")
		For $ii = 1 To $icount
			DllStructSetData($tfactors, 1, $ablends[$ii][0], $ii)
			DllStructSetData($tpositions, 1, $ablends[$ii][1], $ii)
		Next
		$aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineBlend", "handle", $hlinegradientbrush, "struct*", $tfactors, "struct*", $tpositions, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_linebrushsetcolors($hlinegradientbrush, $iargbstart, $iargbend)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineColors", "handle", $hlinegradientbrush, "uint", $iargbstart, "uint", $iargbend)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_linebrushsetgammacorrection($hlinegradientbrush, $busegammacorrection = True)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineGammaCorrection", "handle", $hlinegradientbrush, "int", $busegammacorrection)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_linebrushsetlinearblend($hlinegradientbrush, $ffocus, $fscale = 1)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineLinearBlend", "handle", $hlinegradientbrush, "float", $ffocus, "float", $fscale)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_linebrushsetpresetblend($hlinegradientbrush, $ainterpolations)
		Local $ii, $icount, $tcolors, $tpositions, $aresult
		$icount = $ainterpolations[0][0]
		$tcolors = DllStructCreate("uint[" & $icount & "]")
		$tpositions = DllStructCreate("float[" & $icount & "]")
		For $ii = 1 To $icount
			DllStructSetData($tcolors, 1, $ainterpolations[$ii][0], $ii)
			DllStructSetData($tpositions, 1, $ainterpolations[$ii][1], $ii)
		Next
		$aresult = DllCall($__g_hgdipdll, "int", "GdipSetLinePresetBlend", "handle", $hlinegradientbrush, "struct*", $tcolors, "struct*", $tpositions, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_linebrushsetsigmablend($hlinegradientbrush, $ffocus, $fscale = 1)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineSigmaBlend", "handle", $hlinegradientbrush, "float", $ffocus, "float", $fscale)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_linebrushsettransform($hlinegradientbrush, $hmatrix)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineTransform", "handle", $hlinegradientbrush, "handle", $hmatrix)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_matrixcreate()
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateMatrix", "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[1]
	EndFunc

	Func _gdiplus_matrixclone($hmatrix)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCloneMatrix", "handle", $hmatrix, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_matrixdispose($hmatrix)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteMatrix", "handle", $hmatrix)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_matrixgetelements($hmatrix)
		Local $telements = DllStructCreate("float[6]")
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetMatrixElements", "handle", $hmatrix, "struct*", $telements)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Local $aelements[6]
		For $ii = 1 To 6
			$aelements[$ii - 1] = DllStructGetData($telements, 1, $ii)
		Next
		Return $aelements
	EndFunc

	Func _gdiplus_matrixinvert($hmatrix)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipInvertMatrix", "handle", $hmatrix)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_matrixmultiply($hmatrix1, $hmatrix2, $iorder = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipMultiplyMatrix", "handle", $hmatrix1, "handle", $hmatrix2, "int", $iorder)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_matrixrotate($hmatrix, $fangle, $bappend = False)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipRotateMatrix", "handle", $hmatrix, "float", $fangle, "int", $bappend)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_matrixscale($hmatrix, $fscalex, $fscaley, $border = False)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipScaleMatrix", "handle", $hmatrix, "float", $fscalex, "float", $fscaley, "int", $border)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_matrixsetelements($hmatrix, $nm11 = 1, $nm12 = 0, $nm21 = 0, $nm22 = 1, $ndx = 0, $ndy = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetMatrixElements", "handle", $hmatrix, "float", $nm11, "float", $nm12, "float", $nm21, "float", $nm22, "float", $ndx, "float", $ndy)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_matrixshear($hmatrix, $fshearx, $fsheary, $iorder = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipShearMatrix", "handle", $hmatrix, "float", $fshearx, "float", $fsheary, "int", $iorder)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_matrixtransformpoints($hmatrix, ByRef $apoints)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], ($ii - 1) * 2 + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], ($ii - 1) * 2 + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTransformMatrixPoints", "handle", $hmatrix, "struct*", $tpoints, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		For $ii = 1 To $icount
			$apoints[$ii][0] = DllStructGetData($tpoints, 1, ($ii - 1) * 2 + 1)
			$apoints[$ii][1] = DllStructGetData($tpoints, 1, ($ii - 1) * 2 + 2)
		Next
		Return True
	EndFunc

	Func _gdiplus_matrixtranslate($hmatrix, $foffsetx, $foffsety, $bappend = False)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTranslateMatrix", "handle", $hmatrix, "float", $foffsetx, "float", $foffsety, "int", $bappend)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_paramadd(ByRef $tparams, $sguid, $inbofvalues, $itype, $pvalues)
		Local $icount = DllStructGetData($tparams, "Count")
		Local $pguid = DllStructGetPtr($tparams, "GUID") + ($icount * _gdiplus_paramsize())
		Local $tparam = DllStructCreate($taggdipencoderparam, $pguid)
		_winapi_guidfromstringex($sguid, $pguid)
		DllStructSetData($tparam, "Type", $itype)
		DllStructSetData($tparam, "NumberOfValues", $inbofvalues)
		DllStructSetData($tparam, "Values", $pvalues)
		DllStructSetData($tparams, "Count", $icount + 1)
	EndFunc

	Func _gdiplus_paraminit($icount)
		Local $sstruct = $taggdipencoderparams
		For $i = 2 To $icount
			$sstruct &= ";struct;byte[16];ulong;ulong;ptr;endstruct"
		Next
		Return DllStructCreate($sstruct)
	EndFunc

	Func _gdiplus_paramsize()
		Local $tparam = DllStructCreate($taggdipencoderparam)
		Return DllStructGetSize($tparam)
	EndFunc

	Func _gdiplus_pathaddarc($hpath, $nx, $ny, $nwidth, $nheight, $fstartangle, $fsweepangle)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathArc", "handle", $hpath, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "float", $fstartangle, "float", $fsweepangle)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddbezier($hpath, $nx1, $ny1, $nx2, $ny2, $nx3, $ny3, $nx4, $ny4)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathBezier", "handle", $hpath, "float", $nx1, "float", $ny1, "float", $nx2, "float", $ny2, "float", $nx3, "float", $ny3, "float", $nx4, "float", $ny4)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddclosedcurve($hpath, $apoints)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathClosedCurve", "handle", $hpath, "struct*", $tpoints, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddclosedcurve2($hpath, $apoints, $ntension = 0.5)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathClosedCurve2", "handle", $hpath, "struct*", $tpoints, "int", $icount, "float", $ntension)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddcurve($hpath, $apoints)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathCurve", "handle", $hpath, "struct*", $tpoints, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddcurve2($hpath, $apoints, $ntension = 0.5)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathCurve2", "handle", $hpath, "struct*", $tpoints, "int", $icount, "float", $ntension)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddcurve3($hpath, $apoints, $ioffset, $inumofsegments, $ntension = 0.5)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathCurve3", "handle", $hpath, "struct*", $tpoints, "int", $icount, "int", $ioffset, "int", $inumofsegments, "float", $ntension)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddellipse($hpath, $nx, $ny, $nwidth, $nheight)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathEllipse", "handle", $hpath, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddline($hpath, $nx1, $ny1, $nx2, $ny2)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathLine", "handle", $hpath, "float", $nx1, "float", $ny1, "float", $nx2, "float", $ny2)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddline2($hpath, $apoints)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathLine2", "handle", $hpath, "struct*", $tpoints, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddpath($hpath1, $hpath2, $bconnect = True)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathPath", "handle", $hpath1, "handle", $hpath2, "int", $bconnect)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddpie($hpath, $nx, $ny, $nwidth, $nheight, $fstartangle, $fsweepangle)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathPie", "handle", $hpath, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "float", $fstartangle, "float", $fsweepangle)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddpolygon($hpath, $apoints)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathPolygon", "handle", $hpath, "struct*", $tpoints, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddrectangle($hpath, $nx, $ny, $nwidth, $nheight)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathRectangle", "handle", $hpath, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathaddstring($hpath, $sstring, $tlayout, $hfamily, $istyle = 0, $fsize = 8.5, $hformat = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathString", "handle", $hpath, "wstr", $sstring, "int", -1, "handle", $hfamily, "int", $istyle, "float", $fsize, "struct*", $tlayout, "handle", $hformat)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushcreate($apoints, $iwrapmode = 0)
		Local $icount = $apoints[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePathGradient", "struct*", $tpoints, "int", $icount, "int", $iwrapmode, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[4]
	EndFunc

	Func _gdiplus_pathbrushcreatefrompath($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePathGradientFromPath", "handle", $hpath, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pathbrushgetcenterpoint($hpathgradientbrush)
		Local $tpointf = DllStructCreate("float;float")
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathGradientCenterPoint", "handle", $hpathgradientbrush, "struct*", $tpointf)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Local $apointf[2]
		$apointf[0] = DllStructGetData($tpointf, 1)
		$apointf[1] = DllStructGetData($tpointf, 2)
		Return $apointf
	EndFunc

	Func _gdiplus_pathbrushgetfocusscales($hpathgradientbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathGradientFocusScales", "handle", $hpathgradientbrush, "float*", 0, "float*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Local $ascales[2]
		$ascales[0] = $aresult[2]
		$ascales[1] = $aresult[3]
		Return $ascales
	EndFunc

	Func _gdiplus_pathbrushgetpointcount($hpathgradientbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathGradientPointCount", "handle", $hpathgradientbrush, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pathbrushgetrect($hpathgradientbrush)
		Local $trectf = DllStructCreate($taggdiprectf)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathGradientRect", "handle", $hpathgradientbrush, "struct*", $trectf)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Local $arectf[4]
		For $ii = 1 To 4
			$arectf[$ii - 1] = DllStructGetData($trectf, $ii)
		Next
		Return $arectf
	EndFunc

	Func _gdiplus_pathbrushgetwrapmode($hpathgradientbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathGradientWrapMode", "handle", $hpathgradientbrush, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pathbrushmultiplytransform($hpathgradientbrush, $hmatrix, $iorder = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipMultiplyPathGradientTransform", "handle", $hpathgradientbrush, "handle", $hmatrix, "int", $iorder)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushresettransform($hpathgradientbrush)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipResetPathGradientTransform", "handle", $hpathgradientbrush)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetblend($hpathgradientbrush, $ablends)
		Local $icount = $ablends[0][0]
		Local $tfactors = DllStructCreate("float[" & $icount & "]")
		Local $tpositions = DllStructCreate("float[" & $icount & "]")
		For $ii = 1 To $icount
			DllStructSetData($tfactors, 1, $ablends[$ii][0], $ii)
			DllStructSetData($tpositions, 1, $ablends[$ii][1], $ii)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientBlend", "handle", $hpathgradientbrush, "struct*", $tfactors, "struct*", $tpositions, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetcentercolor($hpathgradientbrush, $iargb)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientCenterColor", "handle", $hpathgradientbrush, "uint", $iargb)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetcenterpoint($hpathgradientbrush, $nx, $ny)
		Local $tpointf = DllStructCreate("float;float")
		DllStructSetData($tpointf, 1, $nx)
		DllStructSetData($tpointf, 2, $ny)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientCenterPoint", "handle", $hpathgradientbrush, "struct*", $tpointf)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetfocusscales($hpathgradientbrush, $fscalex, $fscaley)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientFocusScales", "handle", $hpathgradientbrush, "float", $fscalex, "float", $fscaley)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetgammacorrection($hpathgradientbrush, $busegammacorrection)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientGammaCorrection", "handle", $hpathgradientbrush, "int", $busegammacorrection)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetlinearblend($hpathgradientbrush, $ffocus, $fscale = 1)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientLinearBlend", "handle", $hpathgradientbrush, "float", $ffocus, "float", $fscale)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetpresetblend($hpathgradientbrush, $ainterpolations)
		Local $icount = $ainterpolations[0][0]
		Local $tcolors = DllStructCreate("uint[" & $icount & "]")
		Local $tpositions = DllStructCreate("float[" & $icount & "]")
		For $ii = 1 To $icount
			DllStructSetData($tcolors, 1, $ainterpolations[$ii][0], $ii)
			DllStructSetData($tpositions, 1, $ainterpolations[$ii][1], $ii)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientPresetBlend", "handle", $hpathgradientbrush, "struct*", $tcolors, "struct*", $tpositions, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetsigmablend($hpathgradientbrush, $ffocus, $fscale = 1)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientSigmaBlend", "handle", $hpathgradientbrush, "float", $ffocus, "float", $fscale)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetsurroundcolor($hpathgradientbrush, $iargb)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientSurroundColorsWithCount", "handle", $hpathgradientbrush, "uint*", $iargb, "int*", 1)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetsurroundcolorswithcount($hpathgradientbrush, $acolors)
		Local $icount = $acolors[0]
		Local $icolors = _gdiplus_pathbrushgetpointcount($hpathgradientbrush)
		If $icolors < $icount Then $icount = $icolors
		Local $tcolors = DllStructCreate("uint[" & $icount & "]")
		For $ii = 1 To $icount
			DllStructSetData($tcolors, 1, $acolors[$ii], $ii)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientSurroundColorsWithCount", "handle", $hpathgradientbrush, "struct*", $tcolors, "int*", $icount)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_pathbrushsettransform($hpathgradientbrush, $hmatrix)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientTransform", "handle", $hpathgradientbrush, "handle", $hmatrix)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathbrushsetwrapmode($hpathgradientbrush, $iwrapmode)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientWrapMode", "handle", $hpathgradientbrush, "int", $iwrapmode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathclone($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipClonePath", "handle", $hpath, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pathclosefigure($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipClosePathFigure", "handle", $hpath)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathcreate($ifillmode = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePath", "int", $ifillmode, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pathcreate2($apathdata, $ifillmode = 0)
		Local $icount = $apathdata[0][0]
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		Local $ttypes = DllStructCreate("byte[" & $icount & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apathdata[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tpoints, 1, $apathdata[$ii][1], (($ii - 1) * 2) + 2)
			DllStructSetData($ttypes, 1, $apathdata[$ii][2], $ii)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePath2", "struct*", $tpoints, "struct*", $ttypes, "int", $icount, "int", $ifillmode, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[5]
	EndFunc

	Func _gdiplus_pathdispose($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeletePath", "handle", $hpath)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathflatten($hpath, $fflatness = 0.25, $hmatrix = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFlattenPath", "handle", $hpath, "handle", $hmatrix, "float", $fflatness)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathgetdata($hpath)
		Local $icount = _gdiplus_pathgetpointcount($hpath)
		Local $tpathdata = DllStructCreate("int Count; ptr Points; ptr Types;")
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		Local $ttypes = DllStructCreate("byte[" & $icount & "]")
		DllStructSetData($tpathdata, "Count", $icount)
		DllStructSetData($tpathdata, "Points", DllStructGetPtr($tpoints))
		DllStructSetData($tpathdata, "Types", DllStructGetPtr($ttypes))
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathData", "handle", $hpath, "struct*", $tpathdata)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError($aresult[0], $aresult[0], -1)
		Local $adata[$icount + 1][3]
		$adata[0][0] = $icount
		For $ii = 1 To $icount
			$adata[$ii][0] = DllStructGetData($tpoints, 1, (($ii - 1) * 2) + 1)
			$adata[$ii][1] = DllStructGetData($tpoints, 1, (($ii - 1) * 2) + 2)
			$adata[$ii][2] = DllStructGetData($ttypes, 1, $ii)
		Next
		Return $adata
	EndFunc

	Func _gdiplus_pathgetfillmode($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathFillMode", "handle", $hpath, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pathgetlastpoint($hpath)
		Local $tpointf = DllStructCreate("float;float")
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathLastPoint", "handle", $hpath, "struct*", $tpointf)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Local $apointf[2]
		$apointf[0] = DllStructGetData($tpointf, 1)
		$apointf[1] = DllStructGetData($tpointf, 2)
		Return $apointf
	EndFunc

	Func _gdiplus_pathgetpointcount($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPointCount", "handle", $hpath, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pathgetpoints($hpath)
		Local $ii, $icount, $tpoints, $apoints[1][1], $aresult
		$icount = _gdiplus_pathgetpointcount($hpath)
		If @error Then Return SetError(@error + 10, @extended, -1)
		$tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		$aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathPoints", "handle", $hpath, "struct*", $tpoints, "int", $icount)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Local $apoints[$icount + 1][2]
		$apoints[0][0] = $icount
		For $ii = 1 To $icount
			$apoints[$ii][0] = DllStructGetData($tpoints, 1, (($ii - 1) * 2) + 1)
			$apoints[$ii][1] = DllStructGetData($tpoints, 1, (($ii - 1) * 2) + 2)
		Next
		Return $apoints
	EndFunc

	Func _gdiplus_pathgetworldbounds($hpath, $hmatrix = 0, $hpen = 0)
		Local $trectf = DllStructCreate($taggdiprectf)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathWorldBounds", "handle", $hpath, "struct*", $trectf, "handle", $hmatrix, "handle", $hpen)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Local $arectf[4]
		For $ii = 1 To 4
			$arectf[$ii - 1] = DllStructGetData($trectf, $ii)
		Next
		Return $arectf
	EndFunc

	Func _gdiplus_pathisoutlinevisiblepoint($hpath, $nx, $ny, $hpen = 0, $hgraphics = 0)
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipIsOutlineVisiblePathPoint", "handle", $hpath, "float", $nx, "float", $ny, "handle", $hpen, "handle", $hgraphics, "int*", 0)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return $aresult[6] <> 0
	EndFunc

	Func _gdiplus_pathisvisiblepoint($hpath, $nx, $ny, $hgraphics = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipIsVisiblePathPoint", "handle", $hpath, "float", $nx, "float", $ny, "handle", $hgraphics, "int*", 0)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return $aresult[5] <> 0
	EndFunc

	Func _gdiplus_pathitercreate($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePathIter", "handle*", 0, "handle", $hpath)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[1]
	EndFunc

	Func _gdiplus_pathiterdispose($hpathiter)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeletePathIter", "handle", $hpathiter)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathitergetsubpathcount($hpathiter)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPathIterGetSubpathCount", "handle", $hpathiter, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pathiternextmarkerpath($hpathiter, $hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPathIterNextMarkerPath", "handle", $hpathiter, "int*", 0, "handle", $hpath)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pathiternextsubpathpath($hpathiter, $hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPathIterNextSubpathPath", "handle", $hpathiter, "int*", 0, "handle", $hpath, "bool*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Local $areturn[2]
		$areturn[0] = $aresult[2]
		$areturn[1] = $aresult[4]
		Return $areturn
	EndFunc

	Func _gdiplus_pathiterrewind($hpathiter)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPathIterRewind", "handle", $hpathiter)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathreset($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipResetPath", "handle", $hpath)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathreverse($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipReversePath", "handle", $hpath)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathsetfillmode($hpath, $ifillmode)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathFillMode", "handle", $hpath, "int", $ifillmode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathsetmarker($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathMarker", "handle", $hpath)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathstartfigure($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipStartPathFigure", "handle", $hpath)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathtransform($hpath, $hmatrix)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTransformPath", "handle", $hpath, "handle", $hmatrix)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathwarp($hpath, $hmatrix, $apoints, $nx, $ny, $nwidth, $nheight, $iwarpmode = 0, $fflatness = 0.25)
		Local $icount = $apoints[0][0]
		If $icount <> 3 AND $icount <> 4 Then Return SetError(11, 0, False)
		Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tpoints, 1, $apoints[$ii][0], ($ii - 1) * 2 + 1)
			DllStructSetData($tpoints, 1, $apoints[$ii][1], ($ii - 1) * 2 + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipWarpPath", "handle", $hpath, "handle", $hmatrix, "struct*", $tpoints, "int", $icount, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "int", $iwarpmode, "float", $fflatness)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathwiden($hpath, $hpen, $hmatrix = 0, $fflatness = 0.25)
		__gdiplus_pendefcreate($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipWidenPath", "handle", $hpath, "handle", $hpen, "handle", $hmatrix, "float", $fflatness)
		__gdiplus_pendefdispose()
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pathwindingmodeoutline($hpath, $hmatrix = 0, $fflatness = 0.25)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipWindingModeOutline", "handle", $hpath, "handle", $hmatrix, "float", $fflatness)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pencreate($iargb = -16777216, $nwidth = 1, $iunit = 2)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePen1", "dword", $iargb, "float", $nwidth, "int", $iunit, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[4]
	EndFunc

	Func _gdiplus_pencreate2($hbrush, $nwidth = 1, $iunit = 2)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePen2", "handle", $hbrush, "float", $nwidth, "int", $iunit, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[4]
	EndFunc

	Func _gdiplus_pendispose($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeletePen", "handle", $hpen)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pengetalignment($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenMode", "handle", $hpen, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pengetcolor($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenColor", "handle", $hpen, "dword*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pengetcustomendcap($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenCustomEndCap", "handle", $hpen, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pengetdashcap($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenDashCap197819", "handle", $hpen, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pengetdashstyle($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenDashStyle", "handle", $hpen, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pengetendcap($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenEndCap", "handle", $hpen, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pengetmiterlimit($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenMiterLimit", "handle", $hpen, "float*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pengetwidth($hpen)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenWidth", "handle", $hpen, "float*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_pensetalignment($hpen, $ialignment = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenMode", "handle", $hpen, "int", $ialignment)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pensetcolor($hpen, $iargb)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenColor", "handle", $hpen, "dword", $iargb)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pensetcustomendcap($hpen, $hendcap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenCustomEndCap", "handle", $hpen, "handle", $hendcap)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pensetdashcap($hpen, $idash = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenDashCap197819", "handle", $hpen, "int", $idash)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pensetdashstyle($hpen, $istyle = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenDashStyle", "handle", $hpen, "int", $istyle)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pensetendcap($hpen, $iendcap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenEndCap", "handle", $hpen, "int", $iendcap)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pensetlinecap($hpen, $istartcap, $iendcap, $idashcap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenLineCap197819", "handle", $hpen, "int", $istartcap, "int", $iendcap, "int", $idashcap)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pensetlinejoin($hpen, $ilinejoin)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenLineJoin", "handle", $hpen, "int", $ilinejoin)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pensetmiterlimit($hpen, $fmiterlimit)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenMiterLimit", "handle", $hpen, "float", $fmiterlimit)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pensetstartcap($hpen, $ilinecap)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenStartCap", "handle", $hpen, "int", $ilinecap)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_pensetwidth($hpen, $fwidth)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenWidth", "handle", $hpen, "float", $fwidth)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_rectfcreate($nx = 0, $ny = 0, $nwidth = 0, $nheight = 0)
		Local $trectf = DllStructCreate($taggdiprectf)
		DllStructSetData($trectf, "X", $nx)
		DllStructSetData($trectf, "Y", $ny)
		DllStructSetData($trectf, "Width", $nwidth)
		DllStructSetData($trectf, "Height", $nheight)
		Return $trectf
	EndFunc

	Func _gdiplus_regionclone($hregion)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCloneRegion", "handle", $hregion, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_regioncombinepath($hregion, $hpath, $icombinemode = 2)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCombineRegionPath", "handle", $hregion, "handle", $hpath, "int", $icombinemode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_regioncombinerect($hregion, $nx, $ny, $nwidth, $nheight, $icombinemode = 2)
		Local $trectf = _gdiplus_rectfcreate($nx, $ny, $nwidth, $nheight)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCombineRegionRect", "handle", $hregion, "struct*", $trectf, "int", $icombinemode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_regioncombineregion($hregiondst, $hregionsrc, $icombinemode = 2)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCombineRegionRegion", "handle", $hregiondst, "handle", $hregionsrc, "int", $icombinemode)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_regioncreate()
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateRegion", "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[1]
	EndFunc

	Func _gdiplus_regioncreatefrompath($hpath)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateRegionPath", "handle", $hpath, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_regioncreatefromrect($nx, $ny, $nwidth, $nheight)
		Local $trectf = _gdiplus_rectfcreate($nx, $ny, $nwidth, $nheight)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateRegionRect", "struct*", $trectf, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_regiondispose($hregion)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteRegion", "handle", $hregion)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_regiongetbounds($hregion, $hgraphics)
		Local $trectf = DllStructCreate($taggdiprectf)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetRegionBounds", "handle", $hregion, "handle", $hgraphics, "struct*", $trectf)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Local $abounds[4]
		For $ii = 1 To 4
			$abounds[$ii - 1] = DllStructGetData($trectf, $ii)
		Next
		Return $abounds
	EndFunc

	Func _gdiplus_regiongethrgn($hregion, $hgraphics = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetRegionHRgn", "handle", $hregion, "handle", $hgraphics, "handle*", 0)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_regiontransform($hregion, $hmatrix)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTransformRegion", "handle", $hregion, "handle", $hmatrix)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_regiontranslate($hregion, $ndx, $ndy)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTranslateRegion", "handle", $hregion, "float", $ndx, "float", $ndy)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_shutdown()
		If $__g_hgdipdll = 0 Then Return SetError(-1, -1, False)
		$__g_igdipref -= 1
		If $__g_igdipref = 0 Then
			DllCall($__g_hgdipdll, "none", "GdiplusShutdown", "ulong_ptr", $__g_igdiptoken)
			DllClose($__g_hgdipdll)
			$__g_hgdipdll = 0
		EndIf
		Return True
	EndFunc

	Func _gdiplus_startup($sgdipdll = Default, $bretdllhandle = False)
		$__g_igdipref += 1
		If $__g_igdipref > 1 Then Return True
		If $sgdipdll = Default Then $sgdipdll = "gdiplus.dll"
		$__g_hgdipdll = DllOpen($sgdipdll)
		If $__g_hgdipdll = -1 Then
			$__g_igdipref = 0
			Return SetError(1, 2, False)
		EndIf
		Local $sver = FileGetVersion($sgdipdll)
		$sver = StringSplit($sver, ".")
		If $sver[1] > 5 Then $__g_bgdip_v1_0 = False
		Local $tinput = DllStructCreate($taggdipstartupinput)
		Local $ttoken = DllStructCreate("ulong_ptr Data")
		DllStructSetData($tinput, "Version", 1)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdiplusStartup", "struct*", $ttoken, "struct*", $tinput, "ptr", 0)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		$__g_igdiptoken = DllStructGetData($ttoken, "Data")
		If $bretdllhandle Then Return $__g_hgdipdll
		Return SetExtended($sver[1], True)
	EndFunc

	Func _gdiplus_stringformatcreate($iformat = 0, $ilangid = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateStringFormat", "int", $iformat, "word", $ilangid, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_stringformatdispose($hformat)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteStringFormat", "handle", $hformat)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_stringformatgetmeasurablecharacterrangecount($hstringformat)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetStringFormatMeasurableCharacterRangeCount", "handle", $hstringformat, "int*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_stringformatsetalign($hstringformat, $iflag)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetStringFormatAlign", "handle", $hstringformat, "int", $iflag)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_stringformatsetlinealign($hstringformat, $istringalign)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetStringFormatLineAlign", "handle", $hstringformat, "int", $istringalign)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_stringformatsetmeasurablecharacterranges($hstringformat, $aranges)
		Local $icount = $aranges[0][0]
		Local $tcharacterranges = DllStructCreate("int[" & $icount * 2 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tcharacterranges, 1, $aranges[$ii][0], (($ii - 1) * 2) + 1)
			DllStructSetData($tcharacterranges, 1, $aranges[$ii][1], (($ii - 1) * 2) + 2)
		Next
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetStringFormatMeasurableCharacterRanges", "handle", $hstringformat, "int", $icount, "struct*", $tcharacterranges)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_texturecreate($himage, $iwrapmode = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateTexture", "handle", $himage, "int", $iwrapmode, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_texturecreate2($himage, $nx, $ny, $nwidth, $nheight, $iwrapmode = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateTexture2", "handle", $himage, "int", $iwrapmode, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[7]
	EndFunc

	Func _gdiplus_texturecreateia($himage, $nx, $ny, $nwidth, $nheight, $pimageattributes = 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateTextureIA", "handle", $himage, "handle", $pimageattributes, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[7]
	EndFunc

	Func __gdiplus_brushdefcreate(ByRef $hbrush)
		If $hbrush = 0 Then
			$__g_hgdipbrush = _gdiplus_brushcreatesolid()
			$hbrush = $__g_hgdipbrush
		EndIf
	EndFunc

	Func __gdiplus_brushdefdispose($icurerror = @error, $icurextended = @extended)
		If $__g_hgdipbrush <> 0 Then
			_gdiplus_brushdispose($__g_hgdipbrush)
			$__g_hgdipbrush = 0
		EndIf
		Return SetError($icurerror, $icurextended)
	EndFunc

	Func __gdiplus_extractfileext($sfilename, $bnodot = True)
		Local $iindex = __gdiplus_lastdelimiter(".\:", $sfilename)
		If ($iindex > 0) AND (StringMid($sfilename, $iindex, 1) = ".") Then
			If $bnodot Then
				Return StringMid($sfilename, $iindex + 1)
			Else
				Return StringMid($sfilename, $iindex)
			EndIf
		Else
			Return ""
		EndIf
	EndFunc

	Func __gdiplus_lastdelimiter($sdelimiters, $sstring)
		Local $sdelimiter, $in
		For $ii = 1 To StringLen($sdelimiters)
			$sdelimiter = StringMid($sdelimiters, $ii, 1)
			$in = StringInStr($sstring, $sdelimiter, 0, -1)
			If $in > 0 Then Return $in
		Next
	EndFunc

	Func __gdiplus_pendefcreate(ByRef $hpen)
		If $hpen = 0 Then
			$__g_hgdippen = _gdiplus_pencreate()
			$hpen = $__g_hgdippen
		EndIf
	EndFunc

	Func __gdiplus_pendefdispose($icurerror = @error, $icurextended = @extended)
		If $__g_hgdippen <> 0 Then
			_gdiplus_pendispose($__g_hgdippen)
			$__g_hgdippen = 0
		EndIf
		Return SetError($icurerror, $icurextended)
	EndFunc

	Func _gdiplus_bitmapapplyeffect($hbitmap, $heffect, $trect = NULL )
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
		If NOT IsPtr($heffect) Then Return SetError(10, 0, False)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapApplyEffect", "handle", $hbitmap, "handle", $heffect, "struct*", $trect, "int", 0, "ptr*", 0, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_bitmapapplyeffectex($hbitmap, $heffect, $ix = 0, $iy = 0, $iw = 0, $ih = 0)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
		Local $trect = 0
		If BitOR($ix, $iy, $iw, $ih) Then
			$trect = DllStructCreate("int Left; int Top; int Right; int Bottom;")
			DllStructSetData($trect, "Right", $iw + DllStructSetData($trect, "Left", $ix))
			DllStructSetData($trect, "Bottom", $ih + DllStructSetData($trect, "Top", $iy))
		EndIf
		Local $istatus = _gdiplus_bitmapapplyeffect($hbitmap, $heffect, $trect)
		If NOT $istatus Then Return SetError(@error, @extended, False)
		Return True
	EndFunc

	Func _gdiplus_bitmapconvertformat($hbitmap, $ipixelformat, $idithertype, $ipalettetype, $tpalette, $falphathresholdpercent = 0)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapConvertFormat", "handle", $hbitmap, "uint", $ipixelformat, "uint", $idithertype, "uint", $ipalettetype, "struct*", $tpalette, "float", $falphathresholdpercent)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_bitmapcreateapplyeffect($hbitmap, $heffect, $trect = NULL , $toutrect = NULL )
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapCreateApplyEffect", "handle*", $hbitmap, "int", 1, "handle", $heffect, "struct*", $trect, "struct*", $toutrect, "handle*", 0, "int", 0, "ptr*", 0, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[6]
	EndFunc

	Func _gdiplus_bitmapcreateapplyeffectex($hbitmap, $heffect, $ix = 0, $iy = 0, $iw = 0, $ih = 0)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $trect = 0
		If BitOR($ix, $iy, $iw, $ih) Then
			$trect = DllStructCreate("int Left; int Top; int Right; int Bottom;")
			DllStructSetData($trect, "Right", $iw + DllStructSetData($trect, "Left", $ix))
			DllStructSetData($trect, "Bottom", $ih + DllStructSetData($trect, "Top", $iy))
		EndIf
		Local $hbitmap_fx = _gdiplus_bitmapcreateapplyeffect($hbitmap, $heffect, $trect, NULL )
		Return SetError(@error, @extended, $hbitmap_fx)
	EndFunc

	Func _gdiplus_bitmapgethistogram($hbitmap, $ihistogramformat, $ihistogramsize, $tchannel_0, $tchannel_1 = 0, $tchannel_2 = 0, $tchannel_3 = 0)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapGetHistogram", "handle", $hbitmap, "uint", $ihistogramformat, "uint", $ihistogramsize, "struct*", $tchannel_0, "struct*", $tchannel_1, "struct*", $tchannel_2, "struct*", $tchannel_3)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_bitmapgethistogramex($hbitmap)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $isize = _gdiplus_bitmapgethistogramsize($gdip_histogramformatargb)
		Local $thistogram = DllStructCreate("int Size; uint Red[" & $isize & "]; uint MaxRed; uint Green[" & $isize & "]; uint MaxGreen; uint Blue[" & $isize & "]; uint MaxBlue; uint Alpha[" & $isize & "]; uint MaxAlpha; uint Grey[" & $isize & "]; uint MaxGrey;")
		DllStructSetData($thistogram, "Size", $isize)
		Local $istatus = _gdiplus_bitmapgethistogram($hbitmap, $gdip_histogramformatargb, $isize, DllStructGetPtr($thistogram, "Alpha"), DllStructGetPtr($thistogram, "Red"), DllStructGetPtr($thistogram, "Green"), DllStructGetPtr($thistogram, "Blue"))
		If NOT $istatus Then Return SetError(@error, @extended, 0)
		$istatus = _gdiplus_bitmapgethistogram($hbitmap, $gdip_histogramformatgray, $isize, DllStructGetPtr($thistogram, "Grey"))
		If NOT $istatus Then Return SetError(@error + 10, @extended, 0)
		Local $imaxred = 0, $imaxgreen = 0, $imaxblue = 0, $imaxalpha = 0, $imaxgrey = 0
		For $i = 1 To $isize
			If DllStructGetData($thistogram, "Red", $i) > $imaxred Then $imaxred = DllStructGetData($thistogram, "Red", $i)
			If DllStructGetData($thistogram, "Green", $i) > $imaxgreen Then $imaxgreen = DllStructGetData($thistogram, "Green", $i)
			If DllStructGetData($thistogram, "Blue", $i) > $imaxblue Then $imaxblue = DllStructGetData($thistogram, "Blue", $i)
			If DllStructGetData($thistogram, "Alpha", $i) > $imaxalpha Then $imaxalpha = DllStructGetData($thistogram, "Alpha", $i)
			If DllStructGetData($thistogram, "Grey", $i) > $imaxgrey Then $imaxgrey = DllStructGetData($thistogram, "Grey", $i)
		Next
		DllStructSetData($thistogram, "MaxRed", $imaxred)
		DllStructSetData($thistogram, "MaxGreen", $imaxgreen)
		DllStructSetData($thistogram, "MaxBlue", $imaxblue)
		DllStructSetData($thistogram, "MaxAlpha", $imaxalpha)
		DllStructSetData($thistogram, "MaxGrey", $imaxgrey)
		Return $thistogram
	EndFunc

	Func _gdiplus_bitmapgethistogramsize($iformat)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapGetHistogramSize", "uint", $iformat, "uint*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_drawimagefx($hgraphics, $himage, $heffect, $trectf = 0, $hmatrix = 0, $himgattributes = 0, $iunit = 2)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImageFX", "handle", $hgraphics, "handle", $himage, "struct*", $trectf, "handle", $hmatrix, "handle", $heffect, "handle", $himgattributes, "uint", $iunit)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_drawimagefxex($hgraphics, $himage, $heffect, $nx = 0, $ny = 0, $nw = 0, $nh = 0, $hmatrix = 0, $himgattributes = 0, $iunit = 2)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
		Local $trectf = 0
		If BitOR($nx, $ny, $nw, $nh) Then $trectf = _gdiplus_rectfcreate($nx, $ny, $nw, $nh)
		Local $istatus = _gdiplus_drawimagefx($hgraphics, $himage, $heffect, $trectf, $hmatrix, $himgattributes, $iunit)
		Return SetError(@error, @extended, $istatus)
	EndFunc

	Func _gdiplus_effectcreate($seffectguid)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $tguid = _winapi_guidfromstring($seffectguid)
		Local $telem = DllStructCreate("uint64[2];", DllStructGetPtr($tguid))
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateEffect", "uint64", DllStructGetData($telem, 1, 1), "uint64", DllStructGetData($telem, 1, 2), "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $aresult[3]
	EndFunc

	Func _gdiplus_effectcreateblur($fradius = 10, $bexpandedge = False)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $teffectparameters = DllStructCreate($taggdip_effectparams_blur)
		DllStructSetData($teffectparameters, "Radius", $fradius)
		DllStructSetData($teffectparameters, "ExpandEdge", $bexpandedge)
		Local $heffect = _gdiplus_effectcreate($gdip_blureffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $teffectparameters)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectcreatebrightnesscontrast($ibrightnesslevel = 0, $icontrastlevel = 0)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $teffectparameters = DllStructCreate($taggdip_effectparams_brightnesscontrast)
		DllStructSetData($teffectparameters, "BrightnessLevel", $ibrightnesslevel)
		DllStructSetData($teffectparameters, "ContrastLevel", $icontrastlevel)
		Local $heffect = _gdiplus_effectcreate($gdip_brightnesscontrasteffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $teffectparameters)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectcreatecolorbalance($icyanred = 0, $imagentagreen = 0, $iyellowblue = 0)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $teffectparameters = DllStructCreate($taggdip_effectparams_colorbalance)
		DllStructSetData($teffectparameters, "CyanRed", $icyanred)
		DllStructSetData($teffectparameters, "MagentaGreen", $imagentagreen)
		DllStructSetData($teffectparameters, "YellowBlue", $iyellowblue)
		Local $heffect = _gdiplus_effectcreate($gdip_colorbalanceeffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $teffectparameters)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectcreatecolorcurve($iadjustment, $ichannel, $iadjustvalue)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $teffectparameters = DllStructCreate($taggdip_effectparams_colorcurve)
		DllStructSetData($teffectparameters, "Adjustment", $iadjustment)
		DllStructSetData($teffectparameters, "Channel", $ichannel)
		DllStructSetData($teffectparameters, "AdjustValue", $iadjustvalue)
		Local $heffect = _gdiplus_effectcreate($gdip_colorcurveeffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $teffectparameters)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectcreatecolorlut($acolorlut)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $teffectparameters = DllStructCreate($taggdip_effectparams_colorlut)
		For $ii = 0 To 255
			DllStructSetData($teffectparameters, "LutA", $acolorlut[$ii][0], $ii + 1)
			DllStructSetData($teffectparameters, "LutR", $acolorlut[$ii][1], $ii + 1)
			DllStructSetData($teffectparameters, "LutG", $acolorlut[$ii][2], $ii + 1)
			DllStructSetData($teffectparameters, "LutB", $acolorlut[$ii][3], $ii + 1)
		Next
		Local $heffect = _gdiplus_effectcreate($gdip_colorluteffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $teffectparameters)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectcreatecolormatrix($tcolormatrix)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $heffect = _gdiplus_effectcreate($gdip_colormatrixeffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $tcolormatrix)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectcreatehuesaturationlightness($ihuelevel = 0, $isaturationlevel = 0, $ilightnesslevel = 0)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $teffectparameters = DllStructCreate($taggdip_effectparams_huesaturationlightness)
		DllStructSetData($teffectparameters, "HueLevel", $ihuelevel)
		DllStructSetData($teffectparameters, "SaturationLevel", $isaturationlevel)
		DllStructSetData($teffectparameters, "LightnessLevel", $ilightnesslevel)
		Local $heffect = _gdiplus_effectcreate($gdip_huesaturationlightnesseffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $teffectparameters)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectcreatelevels($ihighlight = 100, $imidtone = 0, $ishadow = 0)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $teffectparameters = DllStructCreate($taggdip_effectparams_levels)
		DllStructSetData($teffectparameters, "Highlight", $ihighlight)
		DllStructSetData($teffectparameters, "Midtone", $imidtone)
		DllStructSetData($teffectparameters, "Shadow", $ishadow)
		Local $heffect = _gdiplus_effectcreate($gdip_levelseffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $teffectparameters)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectcreateredeyecorrection($aareas)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $icount = $aareas[0][0]
		Local $tareas = DllStructCreate("long[" & $icount * 4 & "]")
		For $ii = 1 To $icount
			DllStructSetData($tareas, 1, DllStructSetData($tareas, 1, $aareas[$ii][0], (($ii - 1) * 4) + 1) + $aareas[$ii][2], (($ii - 1) * 4) + 3)
			DllStructSetData($tareas, 1, DllStructSetData($tareas, 1, $aareas[$ii][1], (($ii - 1) * 4) + 2) + $aareas[$ii][3], (($ii - 1) * 4) + 4)
		Next
		Local $teffectparameters = DllStructCreate($taggdip_effectparams_redeyecorrection)
		DllStructSetData($teffectparameters, "NumberOfAreas", $icount)
		DllStructSetData($teffectparameters, "Areas", DllStructGetPtr($tareas))
		Local $heffect = _gdiplus_effectcreate($gdip_redeyecorrectioneffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $teffectparameters, (DllStructGetSize($tareas) + DllStructGetSize($teffectparameters)) / DllStructGetSize($teffectparameters))
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectcreatesharpen($fradius = 10, $famount = 50)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $teffectparameters = DllStructCreate($taggdip_effectparams_sharpen)
		DllStructSetData($teffectparameters, "Radius", $fradius)
		DllStructSetData($teffectparameters, "Amount", $famount)
		Local $heffect = _gdiplus_effectcreate($gdip_sharpeneffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $teffectparameters)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectcreatetint($ihue = 0, $iamount = 0)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		Local $teffectparameters = DllStructCreate($taggdip_effectparams_tint)
		DllStructSetData($teffectparameters, "Hue", $ihue)
		DllStructSetData($teffectparameters, "Amount", $iamount)
		Local $heffect = _gdiplus_effectcreate($gdip_tinteffectguid)
		If @error Then Return SetError(@error, @extended, 0)
		_gdiplus_effectsetparameters($heffect, $teffectparameters)
		If @error Then Return SetError(@error + 10, @extended, 0)
		Return $heffect
	EndFunc

	Func _gdiplus_effectdispose($heffect)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteEffect", "handle", $heffect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_effectgetparameters($heffect, $teffectparameters)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
		If DllStructGetSize($teffectparameters) < __gdiplus_effectgetparametersize($heffect) Then Return SetError(2, 5, False)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetEffectParameters", "handle", $heffect, "uint*", DllStructGetSize($teffectparameters), "struct*", $teffectparameters)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func __gdiplus_effectgetparametersize($heffect)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, -1)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetEffectParameterSize", "handle", $heffect, "uint*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aresult[0] Then Return SetError(10, $aresult[0], -1)
		Return $aresult[2]
	EndFunc

	Func _gdiplus_effectsetparameters($heffect, $teffectparameters, $isizeadjust = 1)
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
		Local $isize = __gdiplus_effectgetparametersize($heffect)
		If @error Then Return SetError(@error, @extended, False)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetEffectParameters", "handle", $heffect, "struct*", $teffectparameters, "uint", $isize * $isizeadjust)
		If @error Then Return SetError(@error, @extended, False)
		If $aresult[0] Then Return SetError(10, $aresult[0], False)
		Return True
	EndFunc

	Func _gdiplus_paletteinitialize($ientries, $ipalettetype = $gdip_palettetypeoptimal, $ioptimalcolors = 0, $busetransparentcolor = True, $hbitmap = NULL )
		If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
		If $ioptimalcolors > 0 Then $ipalettetype = $gdip_palettetypeoptimal
		Local $tpalette = DllStructCreate("uint Flags; uint Count; uint ARGB[" & $ientries & "];")
		DllStructSetData($tpalette, "Flags", $ipalettetype)
		DllStructSetData($tpalette, "Count", $ientries)
		Local $aresult = DllCall($__g_hgdipdll, "int", "GdipInitializePalette", "struct*", $tpalette, "uint", $ipalettetype, "uint", $ioptimalcolors, "bool", $busetransparentcolor, "handle", $hbitmap)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult[0] Then Return SetError(10, $aresult[0], 0)
		Return $tpalette
	EndFunc

#EndRegion Header
#Region Local Variables and Constants
	Global Const $__ss_bitmap = 14
	Global Const $__ss_icon = 3
	Global Const $__stm_setimage = 370
	Global Const $__stm_getimage = 371
	Global $ghgdipdll = 0
#EndRegion Local Variables and Constants
#Region Public Functions

	Func _setcombinebkicon($hwnd, $ibackground, $sicon1, $iindex1 = 0, $iwidth1 = -1, $iheight1 = -1, $sicon2 = "", $iindex2 = 0, $iwidth2 = -1, $iheight2 = -1, $ix = 0, $iy = 0, $hoverlap = 0)
		$hwnd = _icons_control_checkhandle($hwnd)
		If $hwnd = 0 Then
			Return SetError(1, 0, 0)
		EndIf
		Local $hparent
		If $ibackground < 0 Then
			$hparent = _winapi_getparent($hwnd)
			If (BitAND(WinGetState($hparent), 2)) AND (NOT BitAND(WinGetState($hparent), 16)) Then
				$ibackground = _icons_system_getcolor($hparent)
			EndIf
			If $ibackground < 0 Then
				$ibackground = _icons_system_switchcolor(_winapi_getsyscolor($color_3dface))
			EndIf
		EndIf
		_icons_control_checksize($hwnd, $iwidth1, $iheight1)
		_icons_control_checksize($hwnd, $iwidth2, $iheight2)
		Local $hback = _icons_icon_extract($sicon1, $iindex1, $iwidth1, $iheight1)
		Local $hfront = _icons_icon_extract($sicon2, $iindex2, $iwidth2, $iheight2)
		Local $hicon = _icons_icon_merge($ibackground, $hback, $hfront, $ix, $iy, $iwidth1, $iheight1)
		If $hback Then
			_winapi_destroyicon($hback)
		EndIf
		If $hfront Then
			_winapi_destroyicon($hfront)
		EndIf
		If NOT ($hoverlap < 0) Then
			$hoverlap = _icons_control_checkhandle($hoverlap)
		EndIf
		If NOT _icons_control_setimage($hwnd, $hicon, $image_icon, $hoverlap) Then
			If $hicon Then
				_winapi_destroyicon($hicon)
			EndIf
			Return SetError(1, 0, 0)
		EndIf
		Return 1
	EndFunc

	Func _seticon($hwnd, $sicon, $iindex = 0, $iwidth = -1, $iheight = -1, $hoverlap = 0)
		$hwnd = _icons_control_checkhandle($hwnd)
		If $hwnd = 0 Then
			Return SetError(1, 0, 0)
		EndIf
		_icons_control_checksize($hwnd, $iwidth, $iheight)
		Local $hicon = _icons_icon_extract($sicon, $iindex, $iwidth, $iheight)
		If NOT ($hoverlap < 0) Then
			$hoverlap = _icons_control_checkhandle($hoverlap)
		EndIf
		If NOT _icons_control_setimage($hwnd, $hicon, $image_icon, $hoverlap) Then
			If $hicon Then
				_winapi_destroyicon($hicon)
			EndIf
			Return SetError(1, 0, 0)
		EndIf
		Return 1
	EndFunc

	Func _setimage($hwnd, $simage, $hoverlap = 0)
		$hwnd = _icons_control_checkhandle($hwnd)
		If $hwnd = 0 Then
			Return SetError(1, 0, 0)
		EndIf
		Local $result, $himage, $hbitmap, $hfit
		_gdiplus_startup()
		$himage = _gdiplus_bitmapcreatefromfile($simage)
		$hfit = _icons_control_fitto($hwnd, $himage)
		$hbitmap = _gdiplus_bitmapcreatehbitmapfrombitmap($hfit)
		_gdiplus_imagedispose($hfit)
		_gdiplus_shutdown()
		If NOT ($hoverlap < 0) Then
			$hoverlap = _icons_control_checkhandle($hoverlap)
		EndIf
		$result = _icons_control_setimage($hwnd, $hbitmap, $image_bitmap, $hoverlap)
		If $result Then
			$himage = _sendmessage($hwnd, $__stm_getimage, $image_bitmap, 0)
			If (@error) OR ($hbitmap = $himage) Then
				$hbitmap = 0
			EndIf
		EndIf
		If $hbitmap Then
			_winapi_deleteobject($hbitmap)
		EndIf
		Return SetError(1 - $result, 0, $result)
	EndFunc

	Func _sethicon($hwnd, $hicon, $hoverlap = 0)
		$hwnd = _icons_control_checkhandle($hwnd)
		If $hwnd = 0 Then
			Return SetError(1, 0, 0)
		EndIf
		If NOT ($hoverlap < 0) Then
			$hoverlap = _icons_control_checkhandle($hoverlap)
		EndIf
		$hicon = _icons_icon_duplicate($hicon)
		If NOT _icons_control_setimage($hwnd, $hicon, $image_icon, $hoverlap) Then
			If $hicon Then
				_winapi_destroyicon($hicon)
			EndIf
			Return SetError(1, 0, 0)
		EndIf
		Return 1
	EndFunc

	Func _sethimage($hwnd, $hbitmap, $hoverlap = 0)
		$hwnd = _icons_control_checkhandle($hwnd)
		If $hwnd = 0 Then
			Return SetError(1, 0, 0)
		EndIf
		Local $result, $himage
		If NOT ($hoverlap < 0) Then
			$hoverlap = _icons_control_checkhandle($hoverlap)
		EndIf
		$hbitmap = _icons_bitmap_duplicate($hbitmap)
		$result = _icons_control_setimage($hwnd, $hbitmap, $image_bitmap, $hoverlap)
		If $result Then
			$himage = _sendmessage($hwnd, $__stm_getimage, $image_bitmap, 0)
			If (@error) OR ($hbitmap = $himage) Then
				$hbitmap = 0
			EndIf
		EndIf
		If $hbitmap Then
			_winapi_deleteobject($hbitmap)
		EndIf
		Return SetError(1 - $result, 0, $result)
	EndFunc

#EndRegion Public Functions
#Region Internal Functions

	Func _icons_bitmap_crop($hbitmap, $ix, $iy, $iwidth, $iheight)
		If NOT _icons_bitmap_ishbitmap($hbitmap) Then
			Return 0
		EndIf
		Local $hdc, $hdestdc, $srcdc, $hbmp
		$hdc = _winapi_getdc(0)
		$hdestdc = _winapi_createcompatibledc($hdc)
		$hbmp = _winapi_createcompatiblebitmap($hdc, $iwidth, $iheight)
		_winapi_selectobject($hdestdc, $hbmp)
		$hsrcdc = _winapi_createcompatibledc($hdc)
		_winapi_selectobject($hsrcdc, $hbitmap)
		_winapi_releasedc(0, $hdc)
		If NOT _winapi_bitblt($hdestdc, 0, 0, $iwidth, $iheight, $hsrcdc, $ix, $iy, $srccopy) Then
			_winapi_deleteobject($hbmp)
			$hbmp = 0
		EndIf
		_winapi_deletedc($hdestdc)
		_winapi_deletedc($hsrcdc)
		Return $hbmp
	EndFunc

	Func _icons_bitmap_createfromicon($hicon)
		Local $ticoninfo = DllStructCreate($tagiconinfo)
		Local $ret, $hbitmap
		$ret = DllCall("user32.dll", "int", "GetIconInfo", "ptr", $hicon, "ptr", DllStructGetPtr($ticoninfo))
		If (@error) OR ($ret[0] = 0) Then
			Return 0
		EndIf
		$hbitmap = _icons_bitmap_duplicate(DllStructGetData($ticoninfo, 5), 1)
		If NOT _icons_bitmap_isalpha($hbitmap) Then
			_gdiplus_startup()
			_winapi_deleteobject($hbitmap)
			$ret = DllCall($ghgdipdll, "int", "GdipCreateBitmapFromHICON", "ptr", $hicon, "ptr*", 0)
			If (NOT @error) AND ($ret[0] = 0) Then
				$hbitmap = _gdiplus_bitmapcreatehbitmapfrombitmap($ret[2])
				_gdiplus_imagedispose($ret[2])
			Else
				$hbitmap = 0
			EndIf
			_gdiplus_shutdown()
		EndIf
		Return $hbitmap
	EndFunc

	Func _icons_bitmap_createsolidbitmap($icolor, $iwidth, $iheight)
		Local $hdc, $hmemdc, $trect, $hbitmap, $hbrush, $trect = DllStructCreate($tagrect)
		DllStructSetData($trect, 1, 0)
		DllStructSetData($trect, 2, 0)
		DllStructSetData($trect, 3, $iwidth)
		DllStructSetData($trect, 4, $iheight)
		$hdc = _winapi_getdc(0)
		$hmemdc = _winapi_createcompatibledc($hdc)
		$hbitmap = _winapi_createcompatiblebitmap($hdc, $iwidth, $iheight)
		_winapi_selectobject($hmemdc, $hbitmap)
		_winapi_releasedc(0, $hdc)
		$hbrush = _winapi_createsolidbrush(_icons_system_switchcolor($icolor))
		If NOT _winapi_fillrect($hmemdc, DllStructGetPtr($trect), $hbrush) Then
			_winapi_deleteobject($hbitmap)
			$hbitmap = 0
		EndIf
		_winapi_deleteobject($hbrush)
		_winapi_deletedc($hmemdc)
		Return $hbitmap
	EndFunc

	Func _icons_bitmap_duplicate($hbitmap, $fdelete = 0)
		If $fdelete Then
			$fdelete = $lr_copydeleteorg
		EndIf
		Local $ret = DllCall("user32.dll", "hwnd", "CopyImage", "ptr", $hbitmap, "int", 0, "int", 0, "int", 0, "int", BitOR($lr_createdibsection, $fdelete))
		If (@error) OR ($ret[0] = 0) Then
			Return SetError(1, 0, 0)
		EndIf
		Return $ret[0]
	EndFunc

	Func _icons_bitmap_getsize($hbitmap)
		If NOT _icons_bitmap_ishbitmap($hbitmap) Then
			Return 0
		EndIf
		Local $tobj = DllStructCreate("long Type;long Width;long Height;long WidthBytes;ushort Planes;ushort BitsPixel;ptr Bits")
		Local $ret = DllCall("gdi32.dll", "int", "GetObject", "int", $hbitmap, "int", DllStructGetSize($tobj), "ptr", DllStructGetPtr($tobj))
		If (@error) OR ($ret[0] = 0) Then
			Return 0
		EndIf
		Local $size[2] = [DllStructGetData($tobj, "Width"), DllStructGetData($tobj, "Height")]
		If ($size[0] = 0) OR ($size[1] = 0) Then
			Return 0
		EndIf
		Return $size
	EndFunc

	Func _icons_bitmap_isalpha($hbitmap)
		Local $ret, $tbits
		$ret = DllCall("gdi32.dll", "int", "GetBitmapBits", "ptr", $hbitmap, "long", 0, "ptr", 0)
		If (@error) OR ($ret[0] = 0) Then
			Return SetError(1, 0, 0)
		EndIf
		$lenght = $ret[0] / 4
		$tbits = DllStructCreate("dword[" & $lenght & "]")
		$ret = DllCall("gdi32.dll", "int", "GetBitmapBits", "ptr", $hbitmap, "long", $ret[0], "ptr", DllStructGetPtr($tbits))
		If (@error) OR ($ret[0] = 0) Then
			Return SetError(1, 0, 0)
		EndIf
		For $i = 1 To $lenght
			If BitAND(DllStructGetData($tbits, 1, $i), -16777216) Then
				Return 1
			EndIf
		Next
		Return 0
	EndFunc

	Func _icons_bitmap_ishbitmap($hbitmap)
		Local $ret = DllCall("gdi32.dll", "dword", "GetObjectType", "ptr", $hbitmap)
		If (NOT @error) AND ($ret[0] = 7) Then
			Return 1
		EndIf
		Return 0
	EndFunc

	Func _icons_bitmap_load($simage)
		_gdiplus_startup()
		Local $himage = _gdiplus_imageloadfromfile($simage)
		Local $hbitmap = _gdiplus_bitmapcreatehbitmapfrombitmap($himage)
		_gdiplus_imagedispose($himage)
		_gdiplus_shutdown()
		Return $hbitmap
	EndFunc

	Func _icons_bitmap_resize($hbitmap, $iwidth, $iheight, $fhalftone = 0)
		Local $size = _icons_bitmap_getsize($hbitmap)
		If $size = 0 Then
			Return 0
		EndIf
		Local $ret, $hdc, $hdestdc, $srcdc, $hbmp
		$hdc = _winapi_getdc(0)
		$hdestdc = _winapi_createcompatibledc($hdc)
		$hbmp = _winapi_createcompatiblebitmap($hdc, $iwidth, $iheight)
		_winapi_selectobject($hdestdc, $hbmp)
		$hsrcdc = _winapi_createcompatibledc($hdc)
		_winapi_selectobject($hsrcdc, $hbitmap)
		_winapi_releasedc(0, $hdc)
		If $fhalftone Then
			$fhalftone = 4
		Else
			$fhalftone = 3
		EndIf
		DllCall("gdi32.dll", "int", "SetStretchBltMode", "hwnd", $hdestdc, "int", $fhalftone)
		$ret = DllCall("gdi32.dll", "int", "StretchBlt", "hwnd", $hdestdc, "int", 0, "int", 0, "int", $iwidth, "int", $iheight, "hwnd", $hsrcdc, "int", 0, "int", 0, "int", $size[0], "int", $size[1], "dword", $srccopy)
		If (@error) OR ($ret[0] = 0) Then
			_winapi_deleteobject($hbmp)
			$hbmp = 0
		EndIf
		_winapi_deletedc($hdestdc)
		_winapi_deletedc($hsrcdc)
		Return $hbmp
	EndFunc

	Func _icons_control_checkhandle($hwnd)
		If NOT IsHWnd($hwnd) Then
			$hwnd = GUICtrlGetHandle($hwnd)
			If $hwnd = 0 Then
				Return 0
			EndIf
		EndIf
		Return $hwnd
	EndFunc

	Func _icons_control_checksize($hwnd, ByRef $ix, ByRef $iy)
		Local $size = _icons_control_getsize($hwnd)
		If $ix < 1 Then
			If $size = 0 Then
				$ix = _winapi_getsystemmetrics($sm_cxicon)
			Else
				$ix = $size[0]
			EndIf
		EndIf
		If $iy < 1 Then
			If $size = 0 Then
				$iy = _winapi_getsystemmetrics($sm_cyicon)
			Else
				$iy = $size[1]
			EndIf
		EndIf
	EndFunc

	Func _icons_control_enum($hwnd, $idirection)
		Local $iwnd, $count = 0, $awnd[50] = [$hwnd]
		If $idirection Then
			$idirection = $gw_hwndnext
		Else
			$idirection = $gw_hwndprev
		EndIf
		While 1
			$iwnd = _winapi_getwindow($awnd[$count], $idirection)
			If NOT $iwnd Then
				ExitLoop
			EndIf
			$count += 1
			If $count = UBound($awnd) Then
				ReDim $awnd[$count + 50]
			EndIf
			$awnd[$count] = $iwnd
		WEnd
		ReDim $awnd[$count + 1]
		Return $awnd
	EndFunc

	Func _icons_control_fitto($hwnd, $himage)
		Local $size = _icons_control_getsize($hwnd)
		If $size = 0 Then
			Return SetError(1, 0, $himage)
		EndIf
		_gdiplus_startup()
		Local $width = _gdiplus_imagegetwidth($himage), $height = _gdiplus_imagegetheight($himage)
		Local $ret, $error = 0
		If ($width = -1) OR ($height = -1) Then
			$error = 1
		Else
			If ($width <> $size[0]) OR ($height <> $size[1]) Then
				$ret = DllCall($ghgdipdll, "int", "GdipGetImageThumbnail", "ptr", $himage, "int", $size[0], "int", $size[1], "ptr*", 0, "ptr", 0, "ptr", 0)
				If (NOT @error) AND ($ret[0] = 0) Then
					_gdiplus_imagedispose($himage)
					$himage = $ret[4]
				Else
					$error = 1
				EndIf
			EndIf
		EndIf
		_gdiplus_shutdown()
		Return SetError($error, 0, $himage)
	EndFunc

	Func _icons_control_getrect($hwnd)
		Local $pos = ControlGetPos($hwnd, "", "")
		If (@error) OR ($pos[2] = 0) OR ($pos[3] = 0) Then
			Return 0
		EndIf
		Local $trect = DllStructCreate($tagrect)
		DllStructSetData($trect, 1, $pos[0])
		DllStructSetData($trect, 2, $pos[1])
		DllStructSetData($trect, 3, $pos[0] + $pos[2])
		DllStructSetData($trect, 4, $pos[1] + $pos[3])
		Return $trect
	EndFunc

	Func _icons_control_getsize($hwnd)
		Local $trect = DllStructCreate($tagrect)
		Local $ret = DllCall("user32.dll", "int", "GetClientRect", "hwnd", $hwnd, "ptr", DllStructGetPtr($trect))
		If (@error) OR ($ret[0] = 0) Then
			Return 0
		EndIf
		Local $size[2] = [DllStructGetData($trect, 3) - DllStructGetData($trect, 1), DllStructGetData($trect, 4) - DllStructGetData($trect, 2)]
		If ($size[0] = 0) OR ($size[1] = 0) Then
			Return 0
		EndIf
		Return $size
	EndFunc

	Func _icons_control_invalidate($hwnd)
		Local $trect = _icons_control_getrect($hwnd)
		If IsDllStruct($trect) Then
			_winapi_invalidaterect(_winapi_getparent($hwnd), $trect)
		EndIf
	EndFunc

	Func _icons_control_setimage($hwnd, $himage, $itype, $hoverlap)
		Local $static, $style, $update, $trect, $hprev
		Switch $itype
			Case $image_bitmap
				$static = $__ss_bitmap
			Case $image_icon
				$static = $__ss_icon
			Case Else
				Return 0
		EndSwitch
		$style = _winapi_getwindowlong($hwnd, $gwl_style)
		If @error Then
			Return 0
		EndIf
		_winapi_setwindowlong($hwnd, $gwl_style, BitOR($style, $static))
		If @error Then
			Return 0
		EndIf
		$trect = _icons_control_getrect($hwnd)
		$hprev = _sendmessage($hwnd, $__stm_setimage, $itype, $himage)
		If @error Then
			Return 0
		EndIf
		If $hprev Then
			If $itype = $image_bitmap Then
				_winapi_deleteobject($hprev)
			Else
				_winapi_destroyicon($hprev)
			EndIf
		EndIf
		If (NOT $himage) AND (IsDllStruct($trect)) Then
			_winapi_movewindow($hwnd, DllStructGetData($trect, 1), DllStructGetData($trect, 2), DllStructGetData($trect, 3) - DllStructGetData($trect, 1), DllStructGetData($trect, 4) - DllStructGetData($trect, 2), 0)
		EndIf
		If $hoverlap Then
			If NOT IsHWnd($hoverlap) Then
				$hoverlap = 0
			EndIf
			_icons_control_update($hwnd, $hoverlap)
		Else
			_icons_control_invalidate($hwnd)
		EndIf
		Return 1
	EndFunc

	Func _icons_control_update($hwnd, $hoverlap)
		Local $tback, $tfront = _icons_control_getrect($hwnd)
		If $tfront = 0 Then
			Return 
		EndIf
		Local $anext = _icons_control_enum($hwnd, 1)
		Local $aprev = _icons_control_enum($hwnd, 0)
		If UBound($aprev) = 1 Then
			_winapi_invalidaterect(_winapi_getparent($hwnd), $tfront)
			Return 
		EndIf
		Local $awnd[UBound($anext) + UBound($aprev - 1)]
		Local $tintersect = DllStructCreate($tagrect), $pintersect = DllStructGetPtr($tintersect)
		Local $iwnd, $ret, $xoffset, $yoffset, $count = 0, $update = 0
		For $i = UBound($aprev) - 1 To 1 Step -1
			$awnd[$count] = $aprev[$i]
			$count += 1
		Next
		For $i = 0 To UBound($anext) - 1
			$awnd[$count] = $anext[$i]
			$count += 1
		Next
		For $i = 0 To $count - 1
			If $awnd[$i] = $hwnd Then
				_winapi_invalidaterect($hwnd)
			Else
				If (NOT $hoverlap) OR ($awnd[$i] = $hoverlap) Then
					$tback = _icons_control_getrect($awnd[$i])
					$ret = DllCall("user32.dll", "int", "IntersectRect", "ptr", $pintersect, "ptr", DllStructGetPtr($tfront), "ptr", DllStructGetPtr($tback))
					If (NOT @error) AND ($ret[0]) Then
						$ret = DllCall("user32.dll", "int", "IsRectEmpty", "ptr", $pintersect)
						If (NOT @error) AND (NOT $ret[0]) Then
							$xoffset = DllStructGetData($tback, 1)
							$yoffset = DllStructGetData($tback, 2)
							$ret = DllCall("user32.dll", "int", "OffsetRect", "ptr", $pintersect, "int", -$xoffset, "int", -$yoffset)
							If (NOT @error) AND ($ret[0]) Then
								_winapi_invalidaterect($awnd[$i], $tintersect)
								$update += 1
							EndIf
						EndIf
					EndIf
				EndIf
			EndIf
		Next
		If NOT $update Then
			_winapi_invalidaterect(_winapi_getparent($hwnd), $tfront)
		EndIf
	EndFunc

	Func _icons_icon_duplicate($hicon)
		If $hicon Then
			Return _winapi_copyicon($hicon)
		EndIf
		Return 0
	EndFunc

	Func _icons_icon_extract($sicon, $iindex, $iwidth, $iheight)
		Local $ret = DllCall("shell32.dll", "int", "SHExtractIconsW", "wstr", $sicon, "int", $iindex, "int", $iwidth, "int", $iheight, "ptr*", 0, "ptr*", 0, "int", 1, "int", 0)
		If (@error) OR ($ret[0] = 0) Then
			Return SetError(1, 0, 0)
		EndIf
		Return $ret[5]
	EndFunc

	Func _icons_icon_createfrombitmap($hbitmap)
		Local $size = _icons_bitmap_getsize($hbitmap)
		If $size = 0 Then
			Return 0
		EndIf
		Local $ticoninfo = DllStructCreate($tagiconinfo)
		Local $hmask = _icons_bitmap_createsolidbitmap(0, $size[0], $size[1])
		Local $hicon = 0
		DllStructSetData($ticoninfo, 1, 1)
		DllStructSetData($ticoninfo, 2, 0)
		DllStructSetData($ticoninfo, 3, 0)
		DllStructSetData($ticoninfo, 4, $hmask)
		DllStructSetData($ticoninfo, 5, $hbitmap)
		$ret = DllCall("user32.dll", "ptr", "CreateIconIndirect", "ptr", DllStructGetPtr($ticoninfo))
		If (NOT @error) AND ($ret[0]) Then
			$hicon = $ret[0]
		EndIf
		_winapi_deleteobject($hmask)
		Return $hicon
	EndFunc

	Func _icons_icon_getsize($hicon)
		Local $ticoninfo = DllStructCreate($tagiconinfo)
		Local $ret = DllCall("user32.dll", "int", "GetIconInfo", "ptr", $hicon, "ptr", DllStructGetPtr($ticoninfo))
		If (@error) OR ($ret[0] = 0) Then
			Return 0
		EndIf
		Local $size = _icons_bitmap_getsize(DllStructGetData($ticoninfo, 5))
		_winapi_deleteobject(DllStructGetData($ticoninfo, 4))
		_winapi_deleteobject(DllStructGetData($ticoninfo, 5))
		If ($size[0] = 0) OR ($size[1] = 0) Then
			Return 0
		EndIf
		Return $size
	EndFunc

	Func _icons_icon_merge($ibackground, $hback, $hfront, $ix, $iy, $iwidth = -1, $iheight = -1)
		Local $size
		If ($iwidth < 1) OR ($iheight < 1) Then
			$size = _icons_icon_getsize($hback)
			If $size = 0 Then
				Return 0
			EndIf
			If $iwidth < 1 Then
				$iwidth = $size[0]
			EndIf
			If $iheight < 1 Then
				$iheight = $size[0]
			EndIf
		EndIf
		Local $hdc, $hmemdc, $himage, $hbitmap, $hicon
		$hdc = _winapi_getdc(0)
		$hmemdc = _winapi_createcompatibledc($hdc)
		$hbitmap = _icons_bitmap_createsolidbitmap($ibackground, $iwidth, $iheight)
		_winapi_selectobject($hmemdc, $hbitmap)
		_winapi_releasedc(0, $hdc)
		If $hback Then
			_winapi_drawiconex($hmemdc, 0, 0, $hback, 0, 0, 0, 0, $di_normal)
		EndIf
		If $hfront Then
			_winapi_drawiconex($hmemdc, $ix, $iy, $hfront, 0, 0, 0, 0, $di_normal)
		EndIf
		_gdiplus_startup()
		$himage = _gdiplus_bitmapcreatefromhbitmap($hbitmap)
		$hicon = DllCall($ghgdipdll, "int", "GdipCreateHICONFromBitmap", "ptr", $himage, "ptr*", 0)
		If (NOT @error) AND ($hicon[0] = 0) Then
			$hicon = $hicon[2]
		Else
			$hicon = 0
		EndIf
		_gdiplus_imagedispose($himage)
		_gdiplus_shutdown()
		_winapi_deleteobject($hbitmap)
		_winapi_deletedc($hmemdc)
		Return $hicon
	EndFunc

	Func _icons_system_getcolor($hwnd)
		Local $ret, $hdc = _winapi_getdc($hwnd)
		If $hdc = 0 Then
			Return -1
		EndIf
		$ret = DllCall("gdi32.dll", "int", "GetBkColor", "hwnd", $hdc)
		If (@error) OR ($ret[0] < 0) Then
			$ret = -1
		EndIf
		_winapi_releasedc($hwnd, $hdc)
		If $ret < 0 Then
			Return -1
		EndIf
		Return _icons_system_switchcolor($ret[0])
	EndFunc

	Func _icons_system_switchcolor($icolor)
		Return BitOR(BitAND($icolor, 65280), BitShift(BitAND($icolor, 255), -16), BitShift(BitAND($icolor, 16711680), 16))
	EndFunc

#EndRegion Internal Functions
Dim $statusbar1, $statusbar2
Global $start_param_certs = 0
Global $dir_distr = "C:\Distr\Notary\"
Global $dir_tools = $dir_distr & "Tools\"
Global $dir_logs = $dir_distr & "Logs\"
Global $dir_update = $dir_distr & "Update\"
Global $dir_ecp = $dir_tools & "ecp\"
Global $dir_enot = $dir_tools & "enot\"
Global $dir_express = $dir_tools & "express\"
Global $dir_federal = $dir_tools & "federal\"
Global $dir_software = $dir_tools & "software\"
Global $dir_certs = $dir_tools & "certs\"
Global $dir_ppdgr = $dir_federal & "ppdgr\"
Global $ds_ppdgr = "Setup_PPDGR_full.exe"
Global $ds_extracted_ppdgr = "Setup_PPDGR.msi"
Global $_netframework40 = "dotNetFx40_Full_x86_x64.exe"
Global $_netframework47 = "NDP471-KB4033342-x86-x64-AllOS-ENU.exe"
Global $_netframework35 = "dotnetfx35.exe"
Global $win7patch_x32 = "Windows6.1-KB4019990-x86.msu"
Global $win7patch_x64 = "Windows6.1-KB4019990-x64.msu"
Global $enot_ds = "http://download.triasoft.com/enot/50/Setup.exe"
Global $mysqlsetup32 = "http://download.triasoft.com/enot/50/SetupDB.exe"
Global $mysqlsetup64 = "http://download.triasoft.com/enot/50/SetupDBx64.exe"
Global $data = "http://download.triasoft.com/enot/50/Data.zip"
Global $data_tables = "http://download.triasoft.com/enot/50/Data_tables.zip"
Global $xml_ds = "msxml6_x86.msi"
Global $server = "217.24.185.53:8080"
Global $user = "ftp-user"
Global $pass = "Ftp-User"
Global $szip = "7za.exe"
Global $wrar = "UnRAR.exe"
Global $wget = "wget.exe"
Global $irfanview = "irfanview.zip"
Global $certs_ds = "certs.zip"
Global $iesetup = "internet_explorer.reg"
Global $pkisetup32 = "PKIClient_x32_5.1_SP1.msi"
Global $pkisetup64 = "PKIClient_x64_5.1_SP1.msi"
Global $jacarta32 = "Jacarta_32.msi"
Global $jacarta64 = "Jacarta_64.msi"
Global $cspsetup = "CryptoProCSP.exe"
Global $csp5setup = "CryptoProCSP-5.exe"
Global $armsetup = "CryptoARM.zip"
Global $arm_settings = "arm_settings.reg"
Global $cspclean = "cspclean.exe"
Global $actxsetup = "cspcomsetup.msi"
Global $pdfsetup = "cppdfsetup.exe"
Global $adobesetup = "acrobate.exe"
Global $cbpsetup = "cadesplugin.exe"
Global $cades = "cades.reg"
Global $gossetup32 = "IFCPlugin.msi"
Global $gossetup64 = "IFCPlugin-x64.msi"
Global $fedresurs = "FedresursDSPlugin.msi"
Global $cryptoff = "ru.cryptopro.nmcades@cryptopro.ru.xpi"
Global $blitzff = "pomekhchngaooffdadfjnghfkaeipoba@reaxoft.ru.xpi"
Global $crypto_reg = "crypto.reg"
Global $win_updates32_ds = "WinUpdatesDisabler_x32.exe"
Global $win_updates64_ds = "WinUpdatesDisabler_x64.exe"
Global $cleanupdates_ds = "CleanUpdates_EIS.exe"
Global $findrnd = "MySql_indexer.exe"
Global $cryptofix = "CryptoPro_Fix.xml"
Global $firefox = "Firefox.exe"
Global $ff_sets = "ff-settings.zip"
Global $chrome_sets = "chrome-settings.zip"
Global $ie_links = "ie_links.zip"
Global $c_ds = "MicrosoftVisualC.exe"
Global $hasp_ds = "hasp.exe"
Global $scp_ds = "WinSCP.exe"
Global $zip32_ds = "7z.msi"
Global $zip64_ds = "7z_64.msi"
Global $zip32_assoc = "7z.reg"
Global $zip64_assoc = "7z_64.reg"
Global $heidi_ds = "HeidiSQL.zip"
Global $punto_ds = "PuntoSwitcher.zip"
Global $access97_ds = "Microsoft_Access_97_SR2.zip"
Global $win2pdf_ds = "WinScan2PDF.exe"
Global $cpuz32_ds = "cpuz_x32.exe"
Global $cpuz64_ds = "cpuz_x64.exe"
Global $ipscanner_ds = "Advanced_IP_Scanner.exe"
Global $xmlpad_ds = "XmlNotepad.msi"
Global $photoviewer = "PhotoViewer.reg"
Global $libreg = "LibReg.bat"
Global $activetree = "ActiveTree.ocx"
Global $tx25 = "TX25.zip"
Global $chromesetup32 = "GoogleChromeStandaloneEnterprise.msi"
Global $chromesetup64 = "GoogleChromeStandaloneEnterprise64.msi"
Global $tm_ds = "TeamViewerQS.exe"
Global $anydesk_ds = "AnyDesk.exe"
Global $trueconf_ds = "TrueConf.zip"
Global $mupdate_ds = "mupdate.reg"
Global $start_ds = "Startisback.zip"
Global $line_ds = "CryptoLine.msi"
Global $pwd_ds = "pwdcrack.zip"
Global $produkey_ds = "ProduKey.exe"
Global $share_ds = "net_share.bat"
Global $pass_ds = "crypto_pass.bat"
Global $faststone_ds = "FSViewerSetup66.exe"
Global $sqlbackup_ds = "MysqlBackup.exe"
Global $_sleepforlink = 9000
Global $_sleepforwindow = 800
Global $helpername = "АйТи помощник.lnk"
Global $mainapp = "IT-Helper.exe"
Global $versioninfo = "version.ini"
Global $helperform, $checkactx_browser, $checkarm, $checkbd, $checkie, $checkcerts, $checkcsp, $checkenot, $checkfns, $checkfns_print, $checkpdf, $checkpki, $checkirfan, $checkfaststone, $checkff, $checkc, $checknet_35, $checkhasp, $checkchrome, $checkadobe, $checkwinset, $checkscp, $checkzip, $checktm, $checkanydesk, $checktrueconf, $checkmupdate, $checksqlbackup, $checkxml, $checkstart, $checkline, $check_pwd, $check_heidi, $checkshare, $checkprodukey, $checkpunto, $checkaccess, $checkwin2pdf, $checkecppass, $checksysinfo, $checkipscanner, $checkxmlpad, $allcheckboxes, $btndownloadonly, $btninstall, $menuhelp, $spass, $download_only, $checkcleanupdates, $checklibreg, $checkfindrnd, $btnspecialist, $btnnewpk, $checkevent292, $checkcleantask, $checkcspclean, $checkcsp5, $checkjacarta, $checkphotoviewer
If WinExists("[TITLE:АйТи помощник; CLASS:AutoIt v3 GUI]") Then
	WinActivate("[TITLE:АйТи помощник; CLASS:AutoIt v3 GUI]")
	Exit
EndIf

Func _install($dwnload_only = False)
	Global $download_only = $dwnload_only
	_filewritelog($dir_logs & "Install.log", " ===================================================")
	enot()
	certificates()
	esign()
	winsetup()
	federalresources()
	programs()
	express()
	fns()
	programs2reboot()
	_filewritelog($dir_logs & "Install.log", " ===================================================" & @CRLF & @CRLF)
EndFunc

Func enot()
	If checked($checkenot) Then
		status("Производится скачивание дистрибутива Енот")
		If softdownload($dir_enot, $enot_ds, "wext") Then
			If NOT WinExists("eNot") Then Run("explorer " & $dir_enot)
		EndIf
	EndIf
	If checked($checkbd) Then
		status("Скачиваем базы данных Енот + Mysql - сервер")
		softdownload($dir_enot, $data, "wext")
		softdownload($dir_enot, $data_tables, "wext")
		Local $mysqlsetup = $mysqlsetup32
		If @OSArch = "X64" Then $mysqlsetup = $mysqlsetup64
		softdownload($dir_enot, $mysqlsetup, "wext")
		If NOT WinExists("eNot") Then Run("explorer " & $dir_enot)
	EndIf
	If checked($checkcleanupdates) Then
		status("Запуск утилиты для очистки обновлений ЕИС")
		If softdownload($dir_enot, $cleanupdates_ds) Then softinstall($dir_enot, $cleanupdates_ds, "run", 0)
	EndIf
	If checked($checklibreg) Then
		status("Идет регистрация библиотек ЕИС")
		Local $winlib = @WindowsDir & "\system32"
		Local $winreg = ""
		If @OSArch = "X64" Then
			$winlib = @WindowsDir & "\SysWow64"
			$winreg = "WOW6432Node\"
		EndIf
		Local $senotpath = "C:\Triasoft\eNot"
		If NOT FileExists("C:\Triasoft\eNot") Then
			Local $senotpath = RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\" & $winreg & "Microsoft\Windows\CurrentVersion\Uninstall\eNot_is1", "Inno Setup: App Path")
		EndIf
		If NOT FileExists($senotpath & "\TX25") Then
			DirCreate($senotpath & "\TX25")
			If softdownload($dir_enot, $tx25) Then softunzip($dir_enot, $tx25, $senotpath & "\TX25")
		EndIf
		If softdownload($dir_enot, $libreg) Then
			If softdownload($dir_enot, $activetree) Then FileCopy($dir_enot & $activetree, $winlib & "\" & $activetree, 1)
			_filewritetoline($dir_enot & $libreg, 2, "set WinLibDir=" & $winlib, 1)
			_filewritetoline($dir_enot & $libreg, 3, "set eNotPath=" & $senotpath, 1)
			ShellExecuteWait($dir_enot & $libreg, "", "", "")
		EndIf
	EndIf
	If checked($checkfindrnd) Then
		status("Идет скачивание и настройка утилиты для поиска пропущенных значений, подождите")
		If softdownload($dir_enot, $findrnd) Then softinstall($dir_enot, $findrnd, "run", 0)
	EndIf
EndFunc

Func certificates()
	If checked($checkcerts) Then
		status("Установка сертификатов")
		If softdownload($dir_tools, $certs_ds) Then
			DirRemove($dir_certs, 1)
			softunzip($dir_tools, $certs_ds)
			FileDelete($certs_ds)
			ShellExecuteWait($dir_certs & "install.bat", "", $dir_certs)
		EndIf
	EndIf
EndFunc

Func esign()
	If checked($checkpki) Then
		status("Установка etoken pki client")
		Local $pkisetup = $pkisetup32
		If @OSArch = "X64" Then $pkisetup = $pkisetup64
		If softdownload($dir_ecp, $pkisetup) Then softinstall($dir_ecp, $pkisetup, "etoken")
	EndIf
	If checked($checkcsp) Then
		status("Установка CryptoPro CSP")
		If softdownload($dir_ecp, $cspsetup) Then softinstall($dir_ecp, $cspsetup, '-gm2 -lang rus -kc kc1 -silent -noreboot -nodlg -args "/qb /L*v ' & $dir_logs & $cspsetup & '.log"')
		status("Настройка КриптоПро для работы с ГОСТ 2001")
		If softdownload($dir_ecp, $crypto_reg) Then
			Local $hcryptoimport = FileOpen($dir_ecp & "crypto_import.reg", 2)
			Local $hcryptosites = FileOpen($dir_ecp & $crypto_reg, 0)
			Local $scryptoread = FileRead($hcryptosites)
			FileClose($hcryptosites)
			FileWrite($hcryptoimport, "Windows Registry Editor Version 5.00")
			Switch @OSArch
				Case "X64"
					FileWrite($hcryptoimport, @CRLF & "[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Crypto Pro\Cryptography\CurrentVersion\Parameters]")
				Case "X86"
					FileWrite($hcryptoimport, @CRLF & "[HKEY_LOCAL_MACHINE\SOFTWARE\Crypto Pro\Cryptography\CurrentVersion\Parameters]")
			EndSwitch
			FileWrite($hcryptoimport, @CRLF & $scryptoread)
			FileClose($hcryptoimport)
			RunWait("reg.exe IMPORT " & $dir_ecp & "crypto_import.reg")
		EndIf
	EndIf
	If checked($checkjacarta) Then
		status("Установка Единого клиента Jacarta")
		Local $jacarta = $jacarta32
		If @OSArch = "X64" Then $jacarta = $jacarta64
		If softdownload($dir_ecp, $jacarta) Then softinstall($dir_ecp, $jacarta, "msi")
	EndIf
	If checked($checkcsp5) Then
		status("Установка Крипто-Про 5.0")
		If softdownload($dir_ecp, $csp5setup) Then softinstall($dir_ecp, $csp5setup, "csp5")
	EndIf
EndFunc

Func winsetup()
	If checked($checkwinset) Then
		Local $cmd = "netsh advfirewall firewall add rule name=MySQL dir=in action=allow protocol=TCP localport=3306"
		RunWait(@ComSpec & " /c " & $cmd)
		$cmd = "powercfg -SETACTIVE SCHEME_MIN"
		RunWait(@ComSpec & " /c " & $cmd)
		$cmd = "powercfg /SETACVALUEINDEX SCHEME_CURRENT 2a737441-1930-4402-8d77-b2bebba308a3 48e6b7a6-50f5-4782-a5d4-53bb8f07e226 0"
		RunWait(@ComSpec & " /c " & $cmd)
		$cmd = "powercfg /SETACVALUEINDEX SCHEME_CURRENT 0012ee47-9041-4b5d-9b77-535fba8b1442 6738e2c4-e8a5-4a42-b16a-e040e769756e 0"
		RunWait(@ComSpec & " /c " & $cmd)
		RegWrite("HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced", "HideFileExt", "REG_DWORD", "0")
		Local $hklm = "HKLM\"
		If @OSArch = "X64" Then $hklm = "HKLM64\"
		RegWrite($hklm & "SOFTWARE\Microsoft\Windows Defender\Exclusions\Paths", "C:\Triasoft\eNot", "REG_DWORD", "0")
		RegWrite($hklm & "SOFTWARE\Microsoft\Windows Defender\Exclusions\Paths", "C:\Triasoft\Express", "REG_DWORD", "0")
		RegWrite($hklm & "SOFTWARE\Microsoft\Windows Defender\Exclusions\Paths", "C:\Distr\Notary", "REG_DWORD", "0")
	EndIf
	If checked($checkmupdate) Then
		Local $win_updates = $win_updates32_ds
		If @OSArch = "X64" Then $win_updates = $win_updates64_ds
		If softdownload($dir_software, $win_updates) Then
			softinstall($dir_software, $win_updates, "run", 0)
		EndIf
	EndIf
	If checked($checkprodukey) Then
		status("Запуск ProduKey")
		If softdownload($dir_software, $produkey_ds) Then
			FileChangeDir($dir_software)
			RunWait($produkey_ds & " /stext ProduKey.txt")
			FileChangeDir($dir_distr)
			Local $hklm = "HKLM\"
			If @OSArch = "X64" Then $hklm = "HKLM64\"
			$hfile = FileOpen($dir_software & "ProduKey.txt", 1)
			Local $scrypto36 = RegRead($hklm & "SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\S-1-5-18\Products\05480A45343B0B0429E4860F13549069\InstallProperties", "ProductID")
			If NOT $scrypto36 Then $scrypto36 = "Не установлен"
			FileWriteLine($hfile, "КриптоПро 3.6 = " & $scrypto36)
			Local $scrypto39 = RegRead($hklm & "SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\S-1-5-18\Products\68A52D936E5ACF24C9F8FE4A1C830BC8\InstallProperties", "ProductID")
			If NOT $scrypto39 Then $scrypto39 = "Не установлен"
			FileWriteLine($hfile, "КриптоПро 3.9 = " & $scrypto39)
			Local $scrypto40 = RegRead($hklm & "SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\S-1-5-18\Products\7AB5E7046046FB044ACD63458B5F481C\InstallProperties", "ProductID")
			If NOT $scrypto40 Then $scrypto40 = "Не установлен"
			FileWriteLine($hfile, "КриптоПро 4.0 = " & $scrypto40)
			Local $scryptoarm = RegRead($hklm & "SOFTWARE\WOW6432Node\Digt\Trusted Desktop\License", "SerialNumber")
			If NOT $scryptoarm Then $scryptoarm = "Не установлен"
			FileWriteLine($hfile, "КриптоАрм = " & $scryptoarm)
			FileClose($hfile)
			Run("notepad.exe " & $dir_software & "ProduKey.txt")
		EndIf
	EndIf
	If checked($checkshare) Then
		status("Настройка общего доступа, подождите")
		If softdownload($dir_software, $share_ds) Then
			Local $cmdpath = Chr(34) & $dir_software & $share_ds & Chr(34)
			RunWait(@ComSpec & " /c " & $cmdpath, "")
		EndIf
	EndIf
	If checked($checkecppass) Then
		status("Получение пароля от ЭП")
		If softdownload($dir_software, $pass_ds) Then
			_filewritetoline($dir_software & $pass_ds, 2, "cd " & $dir_software, 1)
			ShellExecuteWait($dir_software & $pass_ds)
			Run($dir_software & "CryptoPass.txt")
			If @error Then MsgBox("", "Ошибка", "Сохраненных ключей не найдено")
		EndIf
	EndIf
	If checked($checksysinfo) Then
		status("Формирование отчета о системе")
		Local $cpuz = $cpuz32_ds
		If @OSArch = "X64" Then $cpuz = $cpuz64_ds
		If softdownload($dir_software, $cpuz) Then
			FileDelete($dir_logs & $cpuz & ".htm")
			softinstall($dir_software, $cpuz, "-html=" & $dir_logs & $cpuz)
			ShellExecute($dir_logs & $cpuz & ".htm")
		EndIf
	EndIf
	If checked($checkevent292) Then
		status("Применяется исправление ошибки 292")
		If softdownload($dir_software, $cryptofix) Then RunWait(@ComSpec & " /c " & "schtasks /Create /XML " & $dir_software & $cryptofix & " /TN CryptoPro_Fix_429", "", @SW_HIDE)
	EndIf
	If checked($checkcleantask) Then
		status("Очистка журналов ОС")
		Local $cmd = "for /F ""tokens=*"" %1 in ('wevtutil.exe el') DO wevtutil.exe cl ""%1"""
		RunWait(@ComSpec & " /c " & $cmd)
	EndIf
EndFunc

Func federalresources()
	If checked($checkactx_browser) Then
		status("Удаление старых компонентов ActiveX")
		$sname = "ЕФРСБ - компонент подписи ЭЦП"
		$owmi = ObjGet("winmgmts:{impersonationLevel=impersonate}!\\" & @ComputerName & "\root\cimv2")
		$aproducts = $owmi.execquery("Select * from Win32_Product Where Name LIKE '%" & $sname & "%'")
		For $app In $aproducts
			$app.uninstall()
		Next
		If FileExists("C:\Program Files\Firefox ActiveX Plugin\") Then RunWait(' "C:\Program Files\Firefox ActiveX Plugin\unins000.exe" /SILENT')
		If FileExists("C:\Program Files (x86)\Firefox ActiveX Plugin\") Then RunWait(' "C:\Program Files (x86)\Firefox ActiveX Plugin\unins000.exe" /SILENT')
		status("Установка и настройка CryptoPRO и Blitz для Google Chrome")
		RegWrite("HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Google\Chrome\ExtensionInstallForcelist", "1", "REG_SZ", "iifchhfnnmpdbibifmljnfjhpififfog;https://clients2.google.com/service/update2/crx")
		RegWrite("HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Google\Chrome\ExtensionInstallForcelist", "2", "REG_SZ", "pomekhchngaooffdadfjnghfkaeipoba;https://clients2.google.com/service/update2/crx")
		RunWait(@ComSpec & " /c " & "gpupdate /force", "", @SW_HIDE)
		status("Установка и настройка CryptoPro Browser plugin")
		If softdownload($dir_federal, $cbpsetup) Then
			softinstall($dir_federal, $cbpsetup, "cades")
			If softdownload($dir_federal, $cades) Then
				Local $hcadesimport = FileOpen($dir_federal & "cades_import.reg", 2)
				Local $hcadessites = FileOpen($dir_federal & $cades, 0)
				Local $scadesread = FileRead($hcadessites)
				FileClose($hcadessites)
				FileWrite($hcadesimport, "Windows Registry Editor Version 5.00")
				FileWrite($hcadesimport, @CRLF & "[HKEY_USERS\" & _getcurrentusersid() & "\SOFTWARE\Crypto Pro\CAdESplugin]")
				FileWrite($hcadesimport, @CRLF & $scadesread)
				FileClose($hcadesimport)
				RunWait("reg.exe IMPORT " & $dir_federal & "cades_import.reg")
			EndIf
		EndIf
		status("Установка и настройка плагина для Госуслуг")
		Local $gossetup = $gossetup32
		If @OSArch = "X64" Then $gossetup = $gossetup64
		If softdownload($dir_federal, $gossetup) Then softinstall($dir_federal, $gossetup, "msi")
		status("Установка и настройка плагина для Федресурса")
		If softdownload($dir_federal, $fedresurs) Then softinstall($dir_federal, $fedresurs, "msi")
	EndIf
	If checked($checkadobe) Then
		status("Установка и настройка Adobe Reader DC")
		If softdownload($dir_software, $adobesetup) Then softinstall($dir_software, $adobesetup, "/sALL")
	EndIf
	If checked($checkpdf) Then
		status("Установка и настройка CryptoPro PDF")
		If softdownload($dir_federal, $pdfsetup) Then softinstall($dir_federal, $pdfsetup, "pdf")
	EndIf
	If checked($checkline) Then
		status("Установка и настройка КриптоЛайн")
		If softdownload($dir_federal, $line_ds) Then softinstall($dir_federal, $line_ds, "msi")
	EndIf
	If checked($checkie) Then
		status("Настройка Internet Explorer")
		If softdownload($dir_federal, $iesetup) Then RunWait("reg.exe IMPORT " & $dir_federal & $iesetup)
		If softdownload($dir_federal, $ie_links) Then softunzip($dir_federal, $ie_links, @UserProfileDir & "\favorites\links\")
	EndIf
	If checked($checkff) Then
		status("Установка и настройка Mozilla Firefox")
		If softdownload($dir_federal, $firefox) Then
			ProcessClose("firefox.exe")
			Sleep(1000)
			$cmd = 'cd "C:\Program Files\" && ren "Mozilla Firefox" Firefox && rmdir Firefox /s /q'
			RunWait('"' & @ComSpec & '" /c ' & $cmd)
			$cmd = 'cd "C:\Program Files (x86)\" && ren "Mozilla Firefox" Firefox && rmdir Firefox /s /q'
			RunWait('"' & @ComSpec & '" /c ' & $cmd)
			softinstall($dir_federal, $firefox, "-ms")
			Local $ffpath = "C:\Program Files (x86)\Mozilla Firefox\"
			If FileExists("C:\Program Files\Mozilla Firefox") Then $ffpath = "C:\Program Files\Mozilla Firefox\"
			Local $java_comp = 'user_pref("plugin.state.java", 2);'
			Local $npcades_comp = @CRLF & 'user_pref("plugin.state.npcades", 2);'
			Local $npffax_comp = @CRLF & 'user_pref("plugin.state.npffax", 2);'
			Local $npif_comp = @CRLF & 'user_pref("plugin.state.npifcplugin", 2);'
			Local $ff_components = $java_comp & $npcades_comp & $npffax_comp & $npif_comp
			Local $path = @AppDataDir & "\Mozilla\Firefox\Profiles\"
			Local $path_ext = @AppDataDir & "\Mozilla\Extensions\"
			Local $randomstr = ""
			Local $aspace[3]
			Local $digits = 4
			For $i = 1 To $digits
				$aspace[0] = Chr(Random(65, 90, 1))
				$aspace[1] = Chr(Random(97, 122, 1))
				$aspace[2] = Chr(Random(48, 57, 1))
				$randomstr &= $aspace[Random(0, 2, 1)]
			Next
			DirMove($path, @AppDataDir & "\Mozilla\Firefox\Profiles." & $randomstr & ".backup")
			Local $handle_search = FileFindFirstFile($path & "*.default")
			If $handle_search = -1 Then RunWait($ffpath & "firefox.exe -CreateProfile default")
			Local $ff_updates = FileOpen($ffpath & "defaults\pref\channel-prefs.js", 2)
			FileWrite($ff_updates, 'pref("app.update.channel", "no");')
			FileClose($ff_updates)
			Run("sc delete MozillaMaintenance")
			$handle_search = FileFindFirstFile($path & "*.default")
			$folder = FileFindNextFile($handle_search)
			FileClose($handle_search)
			If NOT @error Then
				Local $ff_profile_path = $path & $folder
				Local $ffplugins = $ff_profile_path & "\prefs.js"
				Local $file = FileOpen($ffplugins, 2)
				If @error = -1 Then
					MsgBox(0, "Error", "Не найден prefs.js, настройки для FF не установлены")
				Else
					FileWrite($file, $ff_components)
				EndIf
				FileClose($file)
			EndIf
			DirCreate($ff_profile_path & "\extensions")
		EndIf
		If softdownload($dir_federal, $cryptoff) Then FileCopy($dir_federal & $cryptoff, $ff_profile_path & "\extensions\" & $cryptoff, 1)
		If softdownload($dir_federal, $blitzff) Then FileCopy($dir_federal & $blitzff, $ff_profile_path & "\extensions\" & $blitzff, 1)
		If softdownload($dir_federal & "ff-settings\", $ff_sets) Then
			FileDelete($dir_federal & "ff-settings\places.sqlite")
			FileDelete($dir_federal & "ff-settings\xulstore.json")
			FileDelete($dir_federal & "ff-settings\prefs.js")
			FileDelete($dir_federal & "ff-settings\extensions.json")
			If softunzip($dir_federal & "ff-settings\", $ff_sets, $dir_federal & "ff-settings\") Then
				FileCopy($dir_federal & "ff-settings\places.sqlite", $ff_profile_path & "\places.sqlite", 1)
				FileCopy($dir_federal & "ff-settings\xulstore.json", $ff_profile_path & "\xulstore.json", 1)
				FileCopy($dir_federal & "ff-settings\prefs.js", $ff_profile_path & "\prefs.js", 1)
				FileCopy($dir_federal & "ff-settings\extensions.json", $ff_profile_path & "\extensions.json", 1)
			EndIf
		EndIf
	EndIf
	If checked($checkchrome) Then
		status("Установка и настройка Google Chrome")
		Local $chromesetup = $chromesetup32
		Local $registry64 = ""
		ProcessClose("chrome.exe")
		If @OSArch = "X64" Then
			$chromesetup = $chromesetup64
			$registry64 = "Wow6432Node\"
		EndIf
		If softdownload($dir_federal, $chromesetup) Then
			RegDelete("HKEY_LOCAL_MACHINE\SOFTWARE\" & $registry64 & "google\update")
			softinstall($dir_federal, $chromesetup, "msi")
			RegWrite("HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Google\Chrome\ExtensionInstallForcelist", "1", "REG_SZ", "iifchhfnnmpdbibifmljnfjhpififfog;https://clients2.google.com/service/update2/crx")
			RegWrite("HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Google\Chrome\ExtensionInstallForcelist", "2", "REG_SZ", "pomekhchngaooffdadfjnghfkaeipoba;https://clients2.google.com/service/update2/crx")
			RunWait(@ComSpec & " /c " & "gpupdate /force", "", @SW_HIDE)
		EndIf
		If softdownload($dir_federal, $chrome_sets) Then
			FileMove(@LOCALAPPDATADIR & "\Google\Chrome\User Data\Default\Preferences", @LOCALAPPDATADIR & "\Google\Chrome\User Data\Default\Preferences.backup", 8)
			FileMove(@LOCALAPPDATADIR & "\Google\Chrome\User Data\Default\Bookmarks", @LOCALAPPDATADIR & "\Google\Chrome\User Data\Default\Boomarks.backup", 8)
			softunzip($dir_federal, $chrome_sets, @LOCALAPPDATADIR & '"\Google\Chrome\User Data\Default\"')
		EndIf
	EndIf
EndFunc

Func programs()
	If checked($checkirfan) Then
		status("Установка и настройка IrfanView")
		If DirGetSize($dir_software & "irfanview") = -1 Then
			If softdownload($dir_software, $irfanview) Then
				softunzip($dir_software, $irfanview)
				FileCreateShortcut($dir_software & "irfanview\i_view32.exe", @DesktopDir & "\IrfanView.lnk", $dir_software & "irfanview")
				_updatescreen()
			EndIf
		EndIf
	EndIf
	If checked($checkfaststone) Then
		status("Установка и настройка FastStone Image Viewer")
		If softdownload($dir_software, $faststone_ds) Then softinstall($dir_software, $faststone_ds, "/S")
	EndIf
	If checked($checktm) Then
		status("Установка и настройка Teamviewer QS 9")
		If softdownload($dir_software, $tm_ds) Then
			FileCreateShortcut($dir_software & $tm_ds, @DesktopDir & "\TeamViewer.lnk", $dir_software)
			_updatescreen()
			softinstall($dir_software, $tm_ds, "run", "0")
		EndIf
	EndIf
	If checked($checkanydesk) Then
		status("Установка и настройка AnyDesk")
		If softdownload($dir_software, $anydesk_ds) Then softinstall($dir_software, $anydesk_ds, "run", "0")
	EndIf
	If checked($checktrueconf) Then
		status("Установка и настройка TrueConf")
		If softdownload($dir_software, $trueconf_ds) Then
			DirCreate($dir_software & "TrueConf")
			softunzip($dir_software, $trueconf_ds, $dir_software & "TrueConf\")
			softinstall($dir_software & "TrueConf\", "Setup.exe", "/Silent /NoReboot")
			ProcessClose("trueconf.exe")
			RegDelete("HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run", "TrueConf Client")
		EndIf
	EndIf
	If checked($checkstart) Then
		status("Установка и настройка StartIsBack для Windows 10")
		If softdownload($dir_software, $start_ds) Then
			DirCreate($dir_software & "StartIsBack")
			softunzip($dir_software, $start_ds, $dir_software & "StartIsBack\")
			softinstall($dir_software, "StartIsBack\Install.cmd", "run")
		EndIf
	EndIf
	If checked($checksqlbackup) Then
		status("Закачка и запуск MySQL Backup")
		If softdownload($dir_software, $sqlbackup_ds) Then softinstall($dir_software, $sqlbackup_ds, "run", 0)
	EndIf
	If checked($check_pwd) Then
		status("Запуск pwdCrack")
		If softdownload($dir_software, $pwd_ds) Then
			softunzip($dir_software, $pwd_ds)
			softinstall($dir_software & "pwdcrack\", "pwdcrack.exe", "run", 0)
		EndIf
	EndIf
	If checked($check_heidi) Then
		status("Запуск HeidiSQL")
		If softdownload($dir_software, $heidi_ds) Then
			softunzip($dir_software, $heidi_ds)
			softinstall($dir_software, "HeidiSQL\heidisql.exe", "run", 0)
		EndIf
	EndIf
	If checked($checkscp) Then
		status("Установка и настройка WinSCP")
		If softdownload($dir_software, $scp_ds) Then softinstall($dir_software, $scp_ds, "/SILENT", 0)
	EndIf
	If checked($checkzip) Then
		status("Установка и настройка 7-Zip")
		Local $zip_ds = $zip32_ds
		Local $zip_assoc = $zip32_assoc
		If @OSArch = "X64" Then
			$zip_ds = $zip64_ds
			$zip_assoc = $zip64_assoc
		EndIf
		If softdownload($dir_software, $zip_ds) Then softinstall($dir_software, $zip_ds, "msi")
		If softdownload($dir_software, $zip_assoc) Then RunWait("reg.exe IMPORT " & $dir_software & $zip_assoc)
	EndIf
	If checked($checkpunto) Then
		status("Установка и настройка PuntoSwitcher")
		If softdownload($dir_software, $punto_ds) Then
			softunzip($dir_software, $punto_ds)
			softinstall($dir_software, "PuntoSwitcher.exe", "/Silent")
		EndIf
	EndIf
	If checked($checkaccess) Then
		status("Установка и настройка Microsoft Access 97")
		If softdownload($dir_software, $access97_ds) Then
			softunzip($dir_software, $access97_ds)
			If NOT WinExists("software") Then Run("explorer " & $dir_software)
		EndIf
	EndIf
	If checked($checkwin2pdf) Then
		status("Подготовка WinScan2PDF к работе")
		If softdownload($dir_software, $win2pdf_ds) Then
			FileCreateShortcut($dir_software & $win2pdf_ds, @DesktopDir & "\WinScan2PDF.lnk", $dir_software)
			softinstall($dir_software, $win2pdf_ds, "run", 0)
		EndIf
	EndIf
	If checked($checknet_35) Then
		_installdotnet("35")
	EndIf
	If checked($checkipscanner) Then
		status("Установка и настройка IP Scanner")
		If softdownload($dir_software, $ipscanner_ds) Then
			softinstall($dir_software, $ipscanner_ds, "/silent /norestart /log " & $dir_logs & $ipscanner_ds)
			ProcessClose("advanced_ip_scanner.exe")
		EndIf
	EndIf
	If checked($checkxmlpad) Then
		status("Установка и настройка XML Notepad")
		If softdownload($dir_software, $xmlpad_ds) Then softinstall($dir_software, $xmlpad_ds, "msi")
	EndIf
	If checked($checkcspclean) Then
		status("Удаление крипто-про")
		If softdownload($dir_software, $cspclean) Then softinstall($dir_software, $cspclean, "/Silent")
	EndIf
	If checked($checkphotoviewer) Then
		If softdownload($dir_software, $photoviewer) Then RunWait("reg.exe IMPORT " & $dir_software & $photoviewer)
	EndIf
EndFunc

Func express()
	If checked($checkc) Then
		status("Устанавливаем Microsoft Visual C++")
		If softdownload($dir_express, $c_ds) Then softinstall($dir_express, $c_ds, "/s")
	EndIf
	If checked($checkxml) Then
		status("Установка и настройка MS Xml")
		If softdownload($dir_express, $xml_ds) Then softinstall($dir_express, $xml_ds, "msi")
	EndIf
	If checked($checkhasp) Then
		status("Скачиваем Hasp драйвер")
		If softdownload($dir_express, $hasp_ds) Then
			status("Удаляем старые hasp драйверы")
			RunWait($dir_express & $hasp_ds & " -fr -kp -purge -nomsg")
			status("Устанавливаем новый hasp драйвер")
			RunWait($dir_express & $hasp_ds & " -i -kp -nomsg")
		EndIf
	EndIf
EndFunc

Func fns()
	Local $prog_files = "C:\Program Files\АО ГНИВЦ\ППДГР"
	If @OSArch = "X64" Then $prog_files = "C:\Program Files (x86)\АО ГНИВЦ\ППДГР"
	If checked($checkfns) Then
		status("Установка и настройка програм для ФНС")
		Local $msierr = ""
		Local $fnslink = IniRead($dir_distr & "version.ini", "ФНС", "Ссылка", "")
		If softdownload($dir_ppdgr, $fnslink, "wext") Then
			softunzip($dir_ppdgr, $ds_ppdgr, $dir_ppdgr, "rar")
			_installdotnet("47")
			$msierr = RunWait("msiexec /fa " & $dir_ppdgr & $ds_extracted_ppdgr & " /qb /passive /norestart REBOOT=ReallySuppress /L*V " & $dir_logs & $ds_extracted_ppdgr & ".log")
			If $msierr = "1605" Then
				softinstall($dir_ppdgr, $ds_extracted_ppdgr, "msi")
			Else
				_filewritelog($dir_logs & "Install.log", $ds_extracted_ppdgr & ": Updated")
			EndIf
			$bprint = WinWait("Печать НД", "", 5)
			If WinExists($bprint) Then
				Local $pidactwin = WinGetProcess($bprint)
				ProcessClose($pidactwin)
				If DirGetSize($prog_files) <> -1 Then
					FileChangeDir($prog_files)
					Local $hsearch = FileFindFirstFile("*.msi")
					$sfilename = FileFindNextFile($hsearch)
					FileClose($hsearch)
					status("Установка и настройка модуля печати ППДГР")
					RunWait('msiexec /i "' & $sfilename & '" /qb REBOOT=ReallySuppress /passive')
					FileChangeDir($dir_distr)
				EndIf
			EndIf
		EndIf
	EndIf
	If checked($checkfns_print) Then
		status("Проверка наличия установленного ПО ППДГР")
		If DirGetSize($prog_files) <> -1 Then
			FileChangeDir($prog_files)
			Local $hsearch = FileFindFirstFile("*.msi")
			$sfilename = FileFindNextFile($hsearch)
			FileClose($hsearch)
			status("Удаление сбойного модуля печати ППДГР")
			RunWait('msiexec /x "' & $sfilename & '" /qb')
			status("Установка модуля печати ППДГР")
			RunWait('msiexec /i "' & $sfilename & '" /qb REBOOT=ReallySuppress /passive')
			FileChangeDir($dir_distr)
		EndIf
	EndIf
EndFunc

Func programs2reboot()
	If checked($checkarm) Then
		status("Установка и настройка CryptoARM")
		If softdownload($dir_federal, $armsetup) Then
			If softunzip($dir_federal, $armsetup) Then softinstall($dir_federal & "CryptoARM", "setup.exe", "arm")
		EndIf
		If softdownload($dir_federal, $arm_settings) Then RunWait("reg.exe IMPORT " & $dir_federal & $arm_settings)
	EndIf
EndFunc

Func status($msg)
	If GUICtrlGetState($statusbar1) Then
		_guictrlstatusbar_settext($statusbar1, $msg, 2)
		_guictrlstatusbar_settext($statusbar2, $msg, 2)
	EndIf
EndFunc

Func checked($checkbox)
	If GUICtrlGetState($checkbox) Then
		If GUICtrlRead($checkbox) = $gui_checked Then
			Return (True)
		Else
			Return (False)
		EndIf
	EndIf
EndFunc

Func softdownload($place, $soft_ds, $dwnloader = "wget")
	Local $filedownloaded = False
	Local $repeat_number = 3
	Local $portable = IniRead($dir_distr & $versioninfo, "MODE", "Offline", "0")
	Local $filepath = $place & $soft_ds
	If $place <> $dir_tools Then $filepath = $place & "\" & $soft_ds
	If $download_only Then _filewritelog($dir_logs & "Install.log", $soft_ds & ": Marked for download only")
	If $portable = 0 Then
		_filewritelog($dir_logs & "Install.log", $soft_ds & ": Downloading")
		Local $temppath = $filepath
		If $dwnloader = "wext" OR $dwnloader = "ext" Then
			$file_name = StringRegExp($soft_ds, "(?=\w+\.\w{3,4}$).+", 1)
			$temppath = $place & $file_name[0]
		EndIf
		$checkcrc = _checkcrc($temppath)
		If NOT $checkcrc Then
			Switch $dwnloader
				Case "wget"
					For $i = 0 To $repeat_number Step 1
						FileDelete($filepath)
						_wget($soft_ds, $place)
						$checkcrc = _checkcrc($filepath)
						If $checkcrc Then
							$filedownloaded = True
							_filewritelog($dir_logs & "Install.log", $soft_ds & ": Done")
							ExitLoop
						EndIf
						Sleep(2000)
					Next
				Case "raw"
					FileDelete($filepath)
					_downloadrawbar("http://" & $user & ":" & $pass & "@" & $server & "/" & $soft_ds, $place & $soft_ds)
					$checkcrc = _checkcrc($filepath)
					If $checkcrc OR $soft_ds = $versioninfo Then
						$filedownloaded = True
						_filewritelog($dir_logs & "Install.log", $soft_ds & ": Done")
					EndIf
				Case "wext"
					FileDelete($filepath)
					$file_name = StringRegExp($soft_ds, "(?=\w+\.\w{3,4}$).+", 1)
					_wget($soft_ds, $place, "ext")
					$filedownloaded = True
					_filewritelog($dir_logs & "Install.log", $soft_ds & ": Done")
				Case "ext"
					FileDelete($filepath)
					$file_name = StringRegExp($soft_ds, "(?=\w+\.\w{3,4}$).+", 1)
					_downloadrawbar($soft_ds, $place & $file_name[0])
					$filedownloaded = True
					_filewritelog($dir_logs & "Install.log", $soft_ds & ": Done")
			EndSwitch
		Else
			$filedownloaded = True
			_filewritelog($dir_logs & "Install.log", $soft_ds & ": Already exists")
		EndIf
	ElseIf $portable = 1 Then
		$checkcrc = _checkcrc($filepath)
		If $checkcrc OR $soft_ds = $versioninfo AND FileExists($dir_distr & $versioninfo) Then $filedownloaded = True
	EndIf
	If NOT $filedownloaded AND $soft_ds <> $versioninfo Then _filewritelog($dir_logs & "Install.log", $soft_ds & ": Download failed")
	If $download_only Then $filedownloaded = False
	Return $filedownloaded
EndFunc

Func softunzip($place, $soft_ds, $place_to = $place, $option = "zip")
	Local $fileunzip = False
	$filepath = $place & $soft_ds
	If $place <> $dir_tools Then $filepath = $place & "\" & $soft_ds
	_filewritelog($dir_logs & "Install.log", $soft_ds & ": Unpacking")
	Switch $option
		Case "zip"
			RunWait($dir_tools & $szip & " x -y " & $filepath & " -o" & $place_to)
		Case "rar"
			RunWait($dir_tools & $wrar & " e -y  " & $filepath & " " & $place_to)
	EndSwitch
	If @error = False Then $fileunzip = True
	If $fileunzip Then
		_filewritelog($dir_logs & "Install.log", $soft_ds & ": Unpacked")
	Else
		_filewritelog($dir_logs & "Install.log", $soft_ds & ": Failed to unpack")
	EndIf
	Return $fileunzip
EndFunc

Func softinstall($place, $soft_ds, $option, $wait = "1")
	Local $fileinstall = False
	Local $arg = " /qb REBOOT=REALLYSUPPRESS /L*V " & $dir_logs & $soft_ds & ".log"
	$filepath = $place & $soft_ds
	If $place <> $dir_tools Then $filepath = $place & "\" & $soft_ds
	_filewritelog($dir_logs & "Install.log", $soft_ds & ": Installing")
	Switch $option
		Case "run"
			$arg = $filepath
		Case "msi"
			$arg = "msiexec /i " & $filepath & $arg
		Case "etoken"
			$arg = "msiexec /i " & $filepath & " ET_LANG_NAME=Russian /qb REBOOT=REALLYSUPPRESS /L*V " & $dir_logs & $soft_ds & ".log"
		Case "cades"
			$arg = $filepath & ' -norestart -silent -cadesargs "/qn REBOOT=REALLYSUPPRESS" '
		Case "arm"
			$arg = $filepath & ' /V "' & StringStripWS($arg, 1) & '"'
		Case "pdf"
			$arg = $filepath & ' -silent -args "' & StringStripWS($arg, 1) & '"'
		Case "csp5"
			$args = $filepath & '-nodlg -args "/qb /norestart /L*V" ' & $dir_logs & $soft_ds & ".log"
		Case Else
			$arg = $filepath & " " & $option
	EndSwitch
	If $wait = "1" Then
		RunWait($arg)
	Else
		Run($arg)
	EndIf
	If @error = False Then $fileinstall = True
	If $fileinstall Then
		_filewritelog($dir_logs & "Install.log", $soft_ds & ": Installed")
	Else
		_filewritelog($dir_logs & "Install.log", $soft_ds & ": Not installed (check logs folder)")
	EndIf
	Return $fileinstall
EndFunc

Func _update()
	Local $title = "АйТи помощник " & FileGetVersion(@ScriptFullPath)
	Local $curpath = StringTrimRight(@ScriptFullPath, StringLen($mainapp))
	Local $portable = IniRead($curpath & "\" & $versioninfo, "MODE", "Offline", "0")
	Local $oldversion = IniRead($curpath & "\" & $versioninfo, "Version", "Version", "")
	FileDelete(@DesktopDir & "\Нотариальный помощник.lnk")
	FileDelete($dir_distr & "_main.exe")
	FileDelete($dir_update & "_main.exe")
	If $portable = 1 Then
		$title = $title & " | Оффлайн режим"
		$dir_distr = @WorkingDir & "\"
		$dir_tools = $dir_distr & "Tools\"
		$dir_logs = $dir_distr & "Logs\"
		$dir_update = $dir_distr & "Update\"
		$dir_ecp = $dir_tools & "ecp\"
		$dir_enot = $dir_tools & "enot\"
		$dir_express = $dir_tools & "express\"
		$dir_federal = $dir_tools & "federal\"
		$dir_software = $dir_tools & "software\"
		$dir_certs = $dir_tools & "certs\"
		$dir_ppdgr = $dir_federal & "ppdgr\"
	EndIf
	If $portable = 0 Then
		DirCreate($dir_tools)
		DirCreate($dir_ecp)
		DirCreate($dir_enot)
		DirCreate($dir_express)
		DirCreate($dir_federal)
		DirCreate($dir_software)
		DirCreate($dir_update)
		DirCreate($dir_logs)
	EndIf
	FileCopy($dir_logs & "Install.log", $dir_logs & "Install.previous.log", 1)
	FileDelete($dir_logs & "Install.log")
	If NOT softdownload($dir_update, $versioninfo, "raw") Then
		MsgBox("", "Ошибка", "Не удалось загрузить Version.ini")
		Exit
	EndIf
	FileMove($dir_update & $versioninfo, $dir_distr & $versioninfo, 1)
	If NOT softdownload($dir_tools, $wget, "raw") Then _downloadportable($dir_tools, $wget, "raw")
	If NOT softdownload($dir_tools, $szip) Then
		MsgBox("", "Ошибка", "Не найден 7za.exe в папке Tools.")
		Exit
	EndIf
	softdownload($dir_tools, $wrar)
	If $portable = 0 Then
		Local $newversion = IniRead($dir_distr & $versioninfo, "Version", "Version", "0")
		If @ScriptDir <> $dir_distr Then
			DirMove("Tools", $dir_distr, 1)
			DirMove("Update", $dir_distr, 1)
			DirMove("Logs", $dir_distr, 1)
			FileMove($mainapp, $dir_distr, 9)
			FileMove($versioninfo, $dir_distr, 9)
			FileMove($szip, $dir_distr, 9)
			FileMove($wrar, $dir_distr, 9)
			FileCreateShortcut($dir_distr & $mainapp, @DesktopDir & "\" & $helpername, $dir_distr)
			_updatescreen()
		EndIf
		If $newversion <> $oldversion Then
			FileDelete($dir_update & $mainapp)
			If softdownload($dir_update, $mainapp) Then
				FileMove($dir_update & $mainapp, $dir_update & $mainapp & ".tmp", 1)
				IniWrite($dir_distr & $versioninfo, "Version", "Version", $newversion)
				_scriptrestart()
			EndIf
		EndIf
	EndIf
	Return ($title)
EndFunc

Func _scriptrestart()
	_regsettings("Write", $spass)
	$svbs = _tempfile(@TempDir, "~", ".vbs")
	$hfile = FileOpen($svbs, 2)
	FileWriteLine($hfile, 'Set objService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\CIMV2")')
	FileWriteLine($hfile, 'Set objRefresher = CreateObject("WbemScripting.SWbemRefresher")')
	FileWriteLine($hfile, 'Set colItems = objRefresher.AddEnum(objService, "Win32_Process").objectSet')
	FileWriteLine($hfile, 'Set obj = CreateObject("Scripting.FileSystemObject")')
	FileWriteLine($hfile, "Do Until False")
	FileWriteLine($hfile, "    WScript.Sleep 500")
	FileWriteLine($hfile, "    objRefresher.Refresh")
	FileWriteLine($hfile, "    Flag = True")
	FileWriteLine($hfile, "    For Each objItem in colItems")
	FileWriteLine($hfile, "        If objItem.ProcessID = " & @AutoItPID & " Then")
	FileWriteLine($hfile, "            Flag = False")
	FileWriteLine($hfile, "        End If")
	FileWriteLine($hfile, "    Next")
	FileWriteLine($hfile, "    If Flag = True Then")
	FileWriteLine($hfile, "        Exit Do")
	FileWriteLine($hfile, "    End If")
	FileWriteLine($hfile, "Loop")
	FileWriteLine($hfile, '		If (obj.FileExists("' & $mainapp & '")) Then')
	FileWriteLine($hfile, '			obj.DeleteFile("' & $mainapp & '")')
	FileWriteLine($hfile, '		ElseIf (obj.FileExists("' & $dir_distr & $mainapp & '")) Then')
	FileWriteLine($hfile, '			obj.DeleteFile("' & $dir_distr & $mainapp & '")')
	FileWriteLine($hfile, "		End If")
	FileWriteLine($hfile, 'Set f = obj.GetFile("' & $dir_update & $mainapp & '.tmp")')
	FileWriteLine($hfile, 'Set objFSO = CreateObject("Scripting.FileSystemObject")')
	FileWriteLine($hfile, 'objFSO.CopyFile f, "' & $dir_distr & $mainapp & '", TRUE')
	FileWriteLine($hfile, "objFSO.DeleteFile f")
	FileWriteLine($hfile, 'Set objShell = CreateObject("WScript.Shell")')
	FileWriteLine($hfile, 'objShell.Run("' & $dir_distr & $mainapp & " " & $cmdlineraw & '")')
	FileWriteLine($hfile, 'Set objFSO = CreateObject("Scripting.FileSystemObject")')
	FileWriteLine($hfile, 'Set File = objFSO.GetFile("' & FileGetShortName($svbs) & '")')
	FileWriteLine($hfile, "File.Delete")
	FileClose($hfile)
	ShellExecute($svbs)
	Exit
EndFunc

Func _next($msg = "Установка завершена", $dwnload_only = False, $button = "")
	Local $continue = False
	If $button = "Specialist" Then
		GUICtrlSetState($checkcsp, $gui_checked)
		GUICtrlSetState($checkpki, $gui_checked)
		GUICtrlSetState($checkcerts, $gui_checked)
		GUICtrlSetState($checkff, $gui_checked)
		GUICtrlSetState($checkchrome, $gui_checked)
		GUICtrlSetState($checkie, $gui_checked)
		GUICtrlSetState($checkactx_browser, $gui_checked)
	EndIf
	If $button = "NewPK" Then
		GUICtrlSetState($checknet_35, $gui_checked)
		GUICtrlSetState($checkc, $gui_checked)
		GUICtrlSetState($checkshare, $gui_checked)
		GUICtrlSetState($checkwinset, $gui_checked)
		GUICtrlSetState($checkadobe, $gui_checked)
		GUICtrlSetState($checkpdf, $gui_checked)
		GUICtrlSetState($checkarm, $gui_checked)
		GUICtrlSetState($checkfns, $gui_checked)
		GUICtrlSetState($checkhasp, $gui_checked)
		GUICtrlSetState($checkenot, $gui_checked)
		GUICtrlSetState($checkcsp, $gui_checked)
		GUICtrlSetState($checkpki, $gui_checked)
		GUICtrlSetState($checkcerts, $gui_checked)
		GUICtrlSetState($checkff, $gui_checked)
		GUICtrlSetState($checkchrome, $gui_checked)
		GUICtrlSetState($checkie, $gui_checked)
		GUICtrlSetState($checkactx_browser, $gui_checked)
	EndIf
	For $i = 0 To UBound($allcheckboxes) - 1 Step 1
		If GUICtrlRead($allcheckboxes[$i]) = $gui_checked Then $continue = True
	Next
	If $continue Then
		GUICtrlSetState($btnnewpk, $gui_disable)
		GUICtrlSetState($btnspecialist, $gui_disable)
		GUICtrlSetState($btndownloadonly, $gui_disable)
		GUICtrlSetState($btninstall, $gui_disable)
		GUICtrlSetState($menuhelp, $gui_disable)
		For $i = 0 To UBound($allcheckboxes) - 1 Step 1
			GUICtrlSetState($allcheckboxes[$i], $gui_disable)
		Next
		_install($dwnload_only)
		For $i = 0 To UBound($allcheckboxes) - 1 Step 1
			GUICtrlSetState($allcheckboxes[$i], $gui_unchecked)
			GUICtrlSetState($allcheckboxes[$i], $gui_enable)
		Next
		GUICtrlSetState($btnnewpk, $gui_enable)
		GUICtrlSetState($btnspecialist, $gui_enable)
		GUICtrlSetState($btndownloadonly, $gui_enable)
		GUICtrlSetState($btninstall, $gui_enable)
		GUICtrlSetState($menuhelp, $gui_enable)
		status($msg)
		If $button = "NewPk" OR $button = "Specialist" Then MsgBox("", "Внимание", "Для завершения установки необходимо перезагрузить компьютер.")
	EndIf
EndFunc

Func wm_notify($hwnd, $imsg, $wparam, $lparam)
	#forceref $hWnd, $iMsg, $wParam
	Local $hwndfrom, $iidfrom, $icode, $tnmhdr, $apos
	$tnmhdr = DllStructCreate($tagnmhdr, $lparam)
	$hwndfrom = HWnd(DllStructGetData($tnmhdr, "hWndFrom"))
	$icode = DllStructGetData($tnmhdr, "Code")
	Local $tinfo
	Switch $hwndfrom
		Case $statusbar1
			Switch $icode
				Case $nm_click
					$tinfo = DllStructCreate($tagnmmouse, $lparam)
					If DllStructGetData($tinfo, "X") > 0 AND DllStructGetData($tinfo, "X") < 100 Then
						$apos = MouseGetPos()
						ClipPut(StringStripWS(_guictrlstatusbar_gettext($statusbar1, 0), 1))
						ToolTip("IP - адрес скопирован", $apos[0], $apos[1], "", "", 2)
					EndIf
					If DllStructGetData($tinfo, "X") > 100 AND DllStructGetData($tinfo, "X") < 200 Then
						$apos = MouseGetPos()
						ClipPut(StringStripWS(_guictrlstatusbar_gettext($statusbar1, 1), 1))
						ToolTip("Имя компьютера скопировано", $apos[0], $apos[1], "", "", 2)
					EndIf
					Return True
			EndSwitch
	EndSwitch
	Return $gui_rundefmsg
EndFunc

Func _wget($file_url, $folder_to, $ext = "npso")
	If $ext = "ext" Then
		RunWait($dir_tools & "wget.exe -q --show-progress -c --tries=5 --read-timeout=5 --no-check-certificate " & $file_url & " -P " & $folder_to)
	ElseIf $ext = "npso" Then
		RunWait($dir_tools & "wget.exe -q --show-progress -c --tries=5 --read-timeout=5 --no-check-certificate --user=" & $user & " --password=" & $pass & " http://" & $server & "/" & $file_url & " -P " & $folder_to)
	EndIf
EndFunc

Func _downloadportable($place, $soft_ds, $option)
	If NOT IsDeclared("iMsgBoxAnswer") Then Dim $imsgboxanswer
	$imsgboxanswer = MsgBox(33, "Не найден " & $soft_ds & " в папке " & $place, "Переключиться в онлайн режим и скачать его?")
	Select 
		Case $imsgboxanswer = 1
			IniWrite($dir_distr & $versioninfo, "MODE", "Offline", 0)
			softdownload($place, $soft_ds, $option)
			IniWrite($dir_distr & $versioninfo, "MODE", "Offline", 1)
		Case $imsgboxanswer = 2
			Exit
	EndSelect
EndFunc

Func _download($url, $folder)
	Local $parentwin_pos = WinGetPos($helperform, "")
	Local $form1 = GUICreate("Загрузка файла", 400, 100, $parentwin_pos[0] + 100, $parentwin_pos[1] + 200, -1, -1, $helperform)
	Local $pb_file = GUICtrlCreateProgress(30, 30, 300, 20, "")
	Local $lbl_filepercent = GUICtrlCreateLabel("0 %", 335, 32, 35, 16, "")
	Local $x = 0
	Local $stemp = StringRegExpReplace($folder, "[^\\]*\z", "", 1)
	Local $sfilename = StringReplace($folder, $stemp, "")
	Local $lbl_info = GUICtrlCreateLabel("" & $sfilename, 30, 62, 300, 16, "")
	GUISetState(@SW_SHOW, $form1)
	$hinet = InetGet($url, $folder, 1, 16)
	$filesize = InetGetSize($url)
	While NOT InetGetInfo($hinet, 2)
		Sleep(500)
		$bytesreceived = InetGetInfo($hinet, 0)
		$pct = Int($bytesreceived / $filesize * 100)
		GUICtrlSetData($pb_file, $pct)
		GUICtrlSetData($lbl_filepercent, $pct & " %")
	WEnd
	InetClose($hinet)
	GUIDelete($form1)
	If FileGetSize($folder) Then $x = 1
	Return $x
EndFunc

Func _downloadraw($from, $to)
	Local $hdownload = InetGet($from, $to, 1, 16)
	Do
		Sleep(250)
	Until InetGetInfo($hdownload, 2)
	InetClose($hdownload)
	Return $hdownload
EndFunc

Func _downloadrawbar($from, $to)
	ProgressOn("Загрузка", $to, "0%")
	Local $url = $from
	$folder = $to
	$hinet = InetGet($url, $folder, 1, 1)
	$filesize = InetGetSize($url)
	While NOT InetGetInfo($hinet, 2)
		Sleep(500)
		$bytesreceived = InetGetInfo($hinet, 0)
		$pct = Int($bytesreceived / $filesize * 100)
		ProgressSet($pct, $pct & "%")
	WEnd
	ProgressOff()
	InetClose($hinet)
EndFunc

Func _checkcrc($sfile)
	Local $crc_found = False
	Local $sha1 = _sha1forfile($sfile)
	Local $crcarray = IniReadSection($dir_distr & $versioninfo, "CRC")
	For $i = 1 To UBound($crcarray) - 1
		If $sha1 = $crcarray[$i][1] Then
			$crc_found = True
			ExitLoop
		EndIf
	Next
	Return $crc_found
EndFunc

Func _iswin7above()
	If RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\", "CurrentVersion") > 6.2 Then
		Return True
	Else
		Return False
	EndIf
EndFunc

Func _installdotnet($version)
	Local $arg = False
	Local $status_bits, $status_updates
	Switch $version
		Case "35"
			status("Устанавливаем .Net Framework 3.5")
			If _retrieveservicestate("bits") <> "Running" Then
				$status_bits = "1"
				RunWait(@ComSpec & " /c sc config bits start=demand", "", @SW_HIDE)
				RunWait(@ComSpec & " /c net start bits", "", @SW_HIDE)
			EndIf
			If _retrieveservicestate("wuauserv") <> "Running" Then
				$status_updates = "1"
				RunWait(@ComSpec & " /c sc config wuauserv start=demand", "", @SW_HIDE)
				RunWait(@ComSpec & " /c net start wuauserv", "", @SW_HIDE)
			EndIf
			If @OSVersion = "Win_7" Then
				If softdownload($dir_software, $_netframework35) Then
					softinstall($dir_software, $_netframework35, "/passive /norestart")
					$arg = True
				EndIf
			Else
				RunWait(@ComSpec & " /c " & "DISM /Online /Enable-Feature /FeatureName:NetFx3 /All")
				$arg = True
			EndIf
		Case "40"
			status("Устанавливаем .Net Framework 4.0")
			RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full", "")
			If NOT @error > 0 Then
				If _retrieveservicestate("bits") <> "Running" Then
					$status_bits = "1"
					RunWait(@ComSpec & " /c sc config bits start=demand", "", @SW_HIDE)
					RunWait(@ComSpec & " /c net start bits", "", @SW_HIDE)
				EndIf
				If _retrieveservicestate("wuauserv") <> "Running" Then
					$status_updates = "1"
					RunWait(@ComSpec & " /c sc config wuauserv start=demand", "", @SW_HIDE)
					RunWait(@ComSpec & " /c net start wuauserv", "", @SW_HIDE)
				EndIf
				If softdownload($dir_software, $_netframework40) Then
					softinstall($dir_software, $_netframework40, "/q /norestart")
					$arg = True
				EndIf
			EndIf
		Case "47"
			status("Устанавливаем .Net Framework 4.7")
			Local $s = RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full", "Release")
			If NOT $s < 460805 Then
				If _retrieveservicestate("bits") <> "Running" Then
					$status_bits = "1"
					RunWait(@ComSpec & " /c sc config bits start=demand", "", @SW_HIDE)
					RunWait(@ComSpec & " /c net start bits", "", @SW_HIDE)
				EndIf
				If _retrieveservicestate("wuauserv") <> "Running" Then
					$status_updates = "1"
					RunWait(@ComSpec & " /c sc config wuauserv start=demand", "", @SW_HIDE)
					RunWait(@ComSpec & " /c net start wuauserv", "", @SW_HIDE)
				EndIf
				If @OSVersion = "Win_7" Then
					Local $iret = RunWait(@ComSpec & ' /c WMIC qfe get hotfixid | FIND "' & "4019990" & '"', @TempDir, @SW_HIDE)
					If NOT $iret Then
						Local $win7patch = $win7patch_x32
						If @OSArch = "X64" Then $win7patch = $win7patch_x64
						If softdownload($dir_software, $win7patch) Then softinstall($dir_software, $win7patch, "/passive /norestart")
					EndIf
				EndIf
				If softdownload($dir_software, $_netframework47) Then
					softinstall($dir_software, $_netframework47, "/passive /norestart")
					$arg = True
				EndIf
			EndIf
	EndSwitch
	If $status_bits Then
		$status_bits = "0"
		RunWait(@ComSpec & " /c sc config bits start=disabled", "", @SW_HIDE)
		RunWait(@ComSpec & " /c net stop bits", "", @SW_HIDE)
	EndIf
	If $status_updates Then
		$status_updates = "0"
		RunWait(@ComSpec & " /c sc config wuauserv start=disabled", "", @SW_HIDE)
		RunWait(@ComSpec & " /c net stop wuauserv", "", @SW_HIDE)
	EndIf
	Return $arg
EndFunc

Func _retrieveservicestate($s_servicename)
	Local Const $wbemflagreturnimmediately = 16
	Local Const $wbemflagforwardonly = 32
	Local $s_machine = @ComputerName
	Local $colitems = "", $objitem
	Local $objwmiservice = ObjGet("winmgmts:\\" & $s_machine & "\root\CIMV2")
	If @error Then
		MsgBox(16, "_RetrieveServiceState", "ObjGet Error: winmgmts")
		Return 
	EndIf
	$colitems = $objwmiservice.execquery("SELECT * FROM Win32_Service WHERE Name = '" & $s_servicename & "'", "WQL", $wbemflagreturnimmediately + $wbemflagforwardonly)
	If @error Then
		MsgBox(16, "_RetrieveServiceState", "ExecQuery Error: SELECT * FROM Win32_Service")
		Return 
	EndIf
	If IsObj($colitems) Then
		For $objitem In $colitems
			Return $objitem.state
		Next
	EndIf
EndFunc

Func _updatescreen()
	Local $opt = Opt("WinSearchChildren", 1)
	Local $list = WinList("[CLASS:SHELLDLL_DefView]")
	For $i = 1 To UBound($list) - 1
		DllCall("user32.dll", "long", "SendMessage", "hwnd", $list[$i][1], "int", 273, "int", 28931, "int", 0)
	Next
	Opt("WinSearchChildren", $opt)
EndFunc

Func _stringbetween2($s, $from, $to)
	$x = StringInStr($s, $from) + StringLen($from)
	$y = StringInStr(StringTrimLeft($s, $x), $to)
	Return StringMid($s, $x, $y)
EndFunc

Func _getcurrentuser()
	Local $result = DllCall("Wtsapi32.dll", "int", "WTSQuerySessionInformationW", "Ptr", 0, "int", -1, "int", 5, "ptr*", 0, "dword*", 0)
	If @error OR $result[0] = 0 Then Return SetError(1, 0, "")
	Local $user = DllStructGetData(DllStructCreate("wchar[" & $result[5] & "]", $result[4]), 1)
	DllCall("Wtsapi32.dll", "int", "WTSFreeMemory", "ptr", $result[4])
	Return $user
EndFunc

Func _getcurrentusersid()
	Local $user = _security__lookupaccountname(_getcurrentuser(), @ComputerName)
	If @error Then Return SetError(1, 0, "")
	Return $user[0]
EndFunc

Func base64($vcode, $bencode = True, $burl = False)
	Local $odm = ObjCreate("Microsoft.XMLDOM")
	If NOT IsObj($odm) Then Return SetError(1, 0, 1)
	Local $oel = $odm.createelement("Tmp")
	$oel.datatype = "bin.base64"
	If $bencode Then
		$oel.nodetypedvalue = Binary($vcode)
		If NOT $burl Then Return $oel.text
		Return StringReplace(StringReplace(StringReplace($oel.text, "+", "-"), "/", "_"), @LF, "")
	Else
		If $burl Then $vcode = StringReplace(StringReplace($vcode, "-", "+"), "_", "/")
		$oel.text = $vcode
		Return $oel.nodetypedvalue
	EndIf
EndFunc

Func _regsettings($option = "Read", $hash = "")
	Local $date = RegRead("HKCU\Software\Helper", "Date")
	Local $curdate = @MON & StringTrimLeft(@YEAR, 2) & @MDAY & @HOUR
	Local $init = RegRead("HKCU\Software\Helper", "Init")
	Local $arg = False
	Switch $option
		Case "Read"
			If $curdate = $date Then
				If $init <> "" Then
					$arg = BinaryToString(base64($init, False))
					RegDelete("HKCU\Software\Helper", "Date")
					RegDelete("HKCU\Software\Helper", "Init")
				EndIf
			EndIf
		Case "Write"
			If $hash <> "" Then
				RegWrite("HKCU\Software\Helper", "Date", "REG_SZ", $curdate)
				RegWrite("HKCU\Software\Helper", "Init", "REG_SZ", base64($hash))
			EndIf
	EndSwitch
	Return $arg
EndFunc
